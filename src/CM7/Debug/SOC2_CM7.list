
SOC2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c298  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800c538  0800c538  0000d538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c8c0  0800c8c0  0000d8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c8c8  0800c8c8  0000d8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c8cc  0800c8cc  0000d8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000011c  00000000  0800c8d0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RAM_D3       000001a4  0000011c  0800c9ec  0000e11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000728  000002c0  0800cb90  0000e2c0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  000009e8  0800cb90  0000e9e8  2**0
                  ALLOC
 10 .openamp_section 0000008c  38000000  0800cb90  0000f000  2**2
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e2c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020526  00000000  00000000  0000e2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f8f  00000000  00000000  0002e814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  000337a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f6  00000000  00000000  00034e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004530e  00000000  00000000  00035f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b60  00000000  00000000  0007b22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a1eda  00000000  00000000  0009dd8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023fc66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006444  00000000  00000000  0023fcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  002460f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	000002c0 	.word	0x000002c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c520 	.word	0x0800c520

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	000002c4 	.word	0x000002c4
 80002dc:	0800c520 	.word	0x0800c520

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003b4:	f000 b96a 	b.w	800068c <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	460c      	mov	r4, r1
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d14e      	bne.n	800047a <__udivmoddi4+0xaa>
 80003dc:	4694      	mov	ip, r2
 80003de:	458c      	cmp	ip, r1
 80003e0:	4686      	mov	lr, r0
 80003e2:	fab2 f282 	clz	r2, r2
 80003e6:	d962      	bls.n	80004ae <__udivmoddi4+0xde>
 80003e8:	b14a      	cbz	r2, 80003fe <__udivmoddi4+0x2e>
 80003ea:	f1c2 0320 	rsb	r3, r2, #32
 80003ee:	4091      	lsls	r1, r2
 80003f0:	fa20 f303 	lsr.w	r3, r0, r3
 80003f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003f8:	4319      	orrs	r1, r3
 80003fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f f68c 	uxth.w	r6, ip
 8000406:	fbb1 f4f7 	udiv	r4, r1, r7
 800040a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040e:	fb07 1114 	mls	r1, r7, r4, r1
 8000412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000416:	fb04 f106 	mul.w	r1, r4, r6
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000426:	f080 8112 	bcs.w	800064e <__udivmoddi4+0x27e>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 810f 	bls.w	800064e <__udivmoddi4+0x27e>
 8000430:	3c02      	subs	r4, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	fa1f f38e 	uxth.w	r3, lr
 800043a:	fbb1 f0f7 	udiv	r0, r1, r7
 800043e:	fb07 1110 	mls	r1, r7, r0, r1
 8000442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000446:	fb00 f606 	mul.w	r6, r0, r6
 800044a:	429e      	cmp	r6, r3
 800044c:	d90a      	bls.n	8000464 <__udivmoddi4+0x94>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000456:	f080 80fc 	bcs.w	8000652 <__udivmoddi4+0x282>
 800045a:	429e      	cmp	r6, r3
 800045c:	f240 80f9 	bls.w	8000652 <__udivmoddi4+0x282>
 8000460:	4463      	add	r3, ip
 8000462:	3802      	subs	r0, #2
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800046a:	2100      	movs	r1, #0
 800046c:	b11d      	cbz	r5, 8000476 <__udivmoddi4+0xa6>
 800046e:	40d3      	lsrs	r3, r2
 8000470:	2200      	movs	r2, #0
 8000472:	e9c5 3200 	strd	r3, r2, [r5]
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d905      	bls.n	800048a <__udivmoddi4+0xba>
 800047e:	b10d      	cbz	r5, 8000484 <__udivmoddi4+0xb4>
 8000480:	e9c5 0100 	strd	r0, r1, [r5]
 8000484:	2100      	movs	r1, #0
 8000486:	4608      	mov	r0, r1
 8000488:	e7f5      	b.n	8000476 <__udivmoddi4+0xa6>
 800048a:	fab3 f183 	clz	r1, r3
 800048e:	2900      	cmp	r1, #0
 8000490:	d146      	bne.n	8000520 <__udivmoddi4+0x150>
 8000492:	42a3      	cmp	r3, r4
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0xcc>
 8000496:	4290      	cmp	r0, r2
 8000498:	f0c0 80f0 	bcc.w	800067c <__udivmoddi4+0x2ac>
 800049c:	1a86      	subs	r6, r0, r2
 800049e:	eb64 0303 	sbc.w	r3, r4, r3
 80004a2:	2001      	movs	r0, #1
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d0e6      	beq.n	8000476 <__udivmoddi4+0xa6>
 80004a8:	e9c5 6300 	strd	r6, r3, [r5]
 80004ac:	e7e3      	b.n	8000476 <__udivmoddi4+0xa6>
 80004ae:	2a00      	cmp	r2, #0
 80004b0:	f040 8090 	bne.w	80005d4 <__udivmoddi4+0x204>
 80004b4:	eba1 040c 	sub.w	r4, r1, ip
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa1f f78c 	uxth.w	r7, ip
 80004c0:	2101      	movs	r1, #1
 80004c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ca:	fb08 4416 	mls	r4, r8, r6, r4
 80004ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004d2:	fb07 f006 	mul.w	r0, r7, r6
 80004d6:	4298      	cmp	r0, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x11c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x11a>
 80004e4:	4298      	cmp	r0, r3
 80004e6:	f200 80cd 	bhi.w	8000684 <__udivmoddi4+0x2b4>
 80004ea:	4626      	mov	r6, r4
 80004ec:	1a1c      	subs	r4, r3, r0
 80004ee:	fa1f f38e 	uxth.w	r3, lr
 80004f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004f6:	fb08 4410 	mls	r4, r8, r0, r4
 80004fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004fe:	fb00 f707 	mul.w	r7, r0, r7
 8000502:	429f      	cmp	r7, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x148>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800050e:	d202      	bcs.n	8000516 <__udivmoddi4+0x146>
 8000510:	429f      	cmp	r7, r3
 8000512:	f200 80b0 	bhi.w	8000676 <__udivmoddi4+0x2a6>
 8000516:	4620      	mov	r0, r4
 8000518:	1bdb      	subs	r3, r3, r7
 800051a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800051e:	e7a5      	b.n	800046c <__udivmoddi4+0x9c>
 8000520:	f1c1 0620 	rsb	r6, r1, #32
 8000524:	408b      	lsls	r3, r1
 8000526:	fa22 f706 	lsr.w	r7, r2, r6
 800052a:	431f      	orrs	r7, r3
 800052c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000530:	fa04 f301 	lsl.w	r3, r4, r1
 8000534:	ea43 030c 	orr.w	r3, r3, ip
 8000538:	40f4      	lsrs	r4, r6
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	0c38      	lsrs	r0, r7, #16
 8000540:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000544:	fbb4 fef0 	udiv	lr, r4, r0
 8000548:	fa1f fc87 	uxth.w	ip, r7
 800054c:	fb00 441e 	mls	r4, r0, lr, r4
 8000550:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000554:	fb0e f90c 	mul.w	r9, lr, ip
 8000558:	45a1      	cmp	r9, r4
 800055a:	fa02 f201 	lsl.w	r2, r2, r1
 800055e:	d90a      	bls.n	8000576 <__udivmoddi4+0x1a6>
 8000560:	193c      	adds	r4, r7, r4
 8000562:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000566:	f080 8084 	bcs.w	8000672 <__udivmoddi4+0x2a2>
 800056a:	45a1      	cmp	r9, r4
 800056c:	f240 8081 	bls.w	8000672 <__udivmoddi4+0x2a2>
 8000570:	f1ae 0e02 	sub.w	lr, lr, #2
 8000574:	443c      	add	r4, r7
 8000576:	eba4 0409 	sub.w	r4, r4, r9
 800057a:	fa1f f983 	uxth.w	r9, r3
 800057e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000582:	fb00 4413 	mls	r4, r0, r3, r4
 8000586:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800058a:	fb03 fc0c 	mul.w	ip, r3, ip
 800058e:	45a4      	cmp	ip, r4
 8000590:	d907      	bls.n	80005a2 <__udivmoddi4+0x1d2>
 8000592:	193c      	adds	r4, r7, r4
 8000594:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000598:	d267      	bcs.n	800066a <__udivmoddi4+0x29a>
 800059a:	45a4      	cmp	ip, r4
 800059c:	d965      	bls.n	800066a <__udivmoddi4+0x29a>
 800059e:	3b02      	subs	r3, #2
 80005a0:	443c      	add	r4, r7
 80005a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005a6:	fba0 9302 	umull	r9, r3, r0, r2
 80005aa:	eba4 040c 	sub.w	r4, r4, ip
 80005ae:	429c      	cmp	r4, r3
 80005b0:	46ce      	mov	lr, r9
 80005b2:	469c      	mov	ip, r3
 80005b4:	d351      	bcc.n	800065a <__udivmoddi4+0x28a>
 80005b6:	d04e      	beq.n	8000656 <__udivmoddi4+0x286>
 80005b8:	b155      	cbz	r5, 80005d0 <__udivmoddi4+0x200>
 80005ba:	ebb8 030e 	subs.w	r3, r8, lr
 80005be:	eb64 040c 	sbc.w	r4, r4, ip
 80005c2:	fa04 f606 	lsl.w	r6, r4, r6
 80005c6:	40cb      	lsrs	r3, r1
 80005c8:	431e      	orrs	r6, r3
 80005ca:	40cc      	lsrs	r4, r1
 80005cc:	e9c5 6400 	strd	r6, r4, [r5]
 80005d0:	2100      	movs	r1, #0
 80005d2:	e750      	b.n	8000476 <__udivmoddi4+0xa6>
 80005d4:	f1c2 0320 	rsb	r3, r2, #32
 80005d8:	fa20 f103 	lsr.w	r1, r0, r3
 80005dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e0:	fa24 f303 	lsr.w	r3, r4, r3
 80005e4:	4094      	lsls	r4, r2
 80005e6:	430c      	orrs	r4, r1
 80005e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80005f0:	fa1f f78c 	uxth.w	r7, ip
 80005f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005f8:	fb08 3110 	mls	r1, r8, r0, r3
 80005fc:	0c23      	lsrs	r3, r4, #16
 80005fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000602:	fb00 f107 	mul.w	r1, r0, r7
 8000606:	4299      	cmp	r1, r3
 8000608:	d908      	bls.n	800061c <__udivmoddi4+0x24c>
 800060a:	eb1c 0303 	adds.w	r3, ip, r3
 800060e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000612:	d22c      	bcs.n	800066e <__udivmoddi4+0x29e>
 8000614:	4299      	cmp	r1, r3
 8000616:	d92a      	bls.n	800066e <__udivmoddi4+0x29e>
 8000618:	3802      	subs	r0, #2
 800061a:	4463      	add	r3, ip
 800061c:	1a5b      	subs	r3, r3, r1
 800061e:	b2a4      	uxth	r4, r4
 8000620:	fbb3 f1f8 	udiv	r1, r3, r8
 8000624:	fb08 3311 	mls	r3, r8, r1, r3
 8000628:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800062c:	fb01 f307 	mul.w	r3, r1, r7
 8000630:	42a3      	cmp	r3, r4
 8000632:	d908      	bls.n	8000646 <__udivmoddi4+0x276>
 8000634:	eb1c 0404 	adds.w	r4, ip, r4
 8000638:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800063c:	d213      	bcs.n	8000666 <__udivmoddi4+0x296>
 800063e:	42a3      	cmp	r3, r4
 8000640:	d911      	bls.n	8000666 <__udivmoddi4+0x296>
 8000642:	3902      	subs	r1, #2
 8000644:	4464      	add	r4, ip
 8000646:	1ae4      	subs	r4, r4, r3
 8000648:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800064c:	e739      	b.n	80004c2 <__udivmoddi4+0xf2>
 800064e:	4604      	mov	r4, r0
 8000650:	e6f0      	b.n	8000434 <__udivmoddi4+0x64>
 8000652:	4608      	mov	r0, r1
 8000654:	e706      	b.n	8000464 <__udivmoddi4+0x94>
 8000656:	45c8      	cmp	r8, r9
 8000658:	d2ae      	bcs.n	80005b8 <__udivmoddi4+0x1e8>
 800065a:	ebb9 0e02 	subs.w	lr, r9, r2
 800065e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000662:	3801      	subs	r0, #1
 8000664:	e7a8      	b.n	80005b8 <__udivmoddi4+0x1e8>
 8000666:	4631      	mov	r1, r6
 8000668:	e7ed      	b.n	8000646 <__udivmoddi4+0x276>
 800066a:	4603      	mov	r3, r0
 800066c:	e799      	b.n	80005a2 <__udivmoddi4+0x1d2>
 800066e:	4630      	mov	r0, r6
 8000670:	e7d4      	b.n	800061c <__udivmoddi4+0x24c>
 8000672:	46d6      	mov	lr, sl
 8000674:	e77f      	b.n	8000576 <__udivmoddi4+0x1a6>
 8000676:	4463      	add	r3, ip
 8000678:	3802      	subs	r0, #2
 800067a:	e74d      	b.n	8000518 <__udivmoddi4+0x148>
 800067c:	4606      	mov	r6, r0
 800067e:	4623      	mov	r3, r4
 8000680:	4608      	mov	r0, r1
 8000682:	e70f      	b.n	80004a4 <__udivmoddi4+0xd4>
 8000684:	3e02      	subs	r6, #2
 8000686:	4463      	add	r3, ip
 8000688:	e730      	b.n	80004ec <__udivmoddi4+0x11c>
 800068a:	bf00      	nop

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000694:	4b3d      	ldr	r3, [pc, #244]	@ (800078c <SystemInit+0xfc>)
 8000696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800069a:	4a3c      	ldr	r2, [pc, #240]	@ (800078c <SystemInit+0xfc>)
 800069c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a4:	4b39      	ldr	r3, [pc, #228]	@ (800078c <SystemInit+0xfc>)
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	4a38      	ldr	r2, [pc, #224]	@ (800078c <SystemInit+0xfc>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b0:	4b37      	ldr	r3, [pc, #220]	@ (8000790 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d807      	bhi.n	80006cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006bc:	4b34      	ldr	r3, [pc, #208]	@ (8000790 <SystemInit+0x100>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f023 030f 	bic.w	r3, r3, #15
 80006c4:	4a32      	ldr	r2, [pc, #200]	@ (8000790 <SystemInit+0x100>)
 80006c6:	f043 0307 	orr.w	r3, r3, #7
 80006ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006cc:	4b31      	ldr	r3, [pc, #196]	@ (8000794 <SystemInit+0x104>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a30      	ldr	r2, [pc, #192]	@ (8000794 <SystemInit+0x104>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000794 <SystemInit+0x104>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006de:	4b2d      	ldr	r3, [pc, #180]	@ (8000794 <SystemInit+0x104>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	492c      	ldr	r1, [pc, #176]	@ (8000794 <SystemInit+0x104>)
 80006e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <SystemInit+0x108>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ea:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d007      	beq.n	8000706 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <SystemInit+0x100>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 030f 	bic.w	r3, r3, #15
 80006fe:	4a24      	ldr	r2, [pc, #144]	@ (8000790 <SystemInit+0x100>)
 8000700:	f043 0307 	orr.w	r3, r3, #7
 8000704:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000706:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800070c:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <SystemInit+0x104>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <SystemInit+0x104>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000718:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <SystemInit+0x104>)
 800071a:	4a20      	ldr	r2, [pc, #128]	@ (800079c <SystemInit+0x10c>)
 800071c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071e:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <SystemInit+0x104>)
 8000720:	4a1f      	ldr	r2, [pc, #124]	@ (80007a0 <SystemInit+0x110>)
 8000722:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <SystemInit+0x104>)
 8000726:	4a1f      	ldr	r2, [pc, #124]	@ (80007a4 <SystemInit+0x114>)
 8000728:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <SystemInit+0x104>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <SystemInit+0x114>)
 8000734:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <SystemInit+0x104>)
 800073e:	4a19      	ldr	r2, [pc, #100]	@ (80007a4 <SystemInit+0x114>)
 8000740:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <SystemInit+0x104>)
 8000744:	2200      	movs	r2, #0
 8000746:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <SystemInit+0x104>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a11      	ldr	r2, [pc, #68]	@ (8000794 <SystemInit+0x104>)
 800074e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000752:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x104>)
 8000756:	2200      	movs	r2, #0
 8000758:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075a:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <SystemInit+0x118>)
 800075c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800075e:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <SystemInit+0x118>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000764:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <SystemInit+0x11c>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <SystemInit+0x120>)
 800076c:	4013      	ands	r3, r2
 800076e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000772:	d202      	bcs.n	800077a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <SystemInit+0x124>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <SystemInit+0x128>)
 800077c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000780:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80007d0:	d101      	bne.n	80007d6 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <rpmsg_send+0x3c>)
 80007d4:	e00c      	b.n	80007f0 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80007de:	2301      	movs	r3, #1
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f009 f849 	bl	8009880 <rpmsg_send_offchannel_raw>
 80007ee:	4603      	mov	r3, r0
					 len, true);
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	fffff829 	.word	0xfffff829

080007fc <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	2220      	movs	r2, #32
 800080e:	68b9      	ldr	r1, [r7, #8]
 8000810:	4618      	mov	r0, r3
 8000812:	f00b f86b 	bl	800b8ec <strncpy>
	ept->addr = src;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	69fa      	ldr	r2, [r7, #28]
 800082c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <rpmsg_recv_callback>:
static void MX_RNG_Init(void);
/* USER CODE BEGIN PFP */

static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
                size_t len, uint32_t src, void *priv)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	603b      	str	r3, [r7, #0]

  memcpy(received_data_str, data, len);
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	4808      	ldr	r0, [pc, #32]	@ (800086c <rpmsg_recv_callback+0x34>)
 800084c:	f00b f8a7 	bl	800b99e <memcpy>
  message_received=1;
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <rpmsg_recv_callback+0x38>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, 1);
 8000856:	2201      	movs	r2, #1
 8000858:	2108      	movs	r1, #8
 800085a:	4806      	ldr	r0, [pc, #24]	@ (8000874 <rpmsg_recv_callback+0x3c>)
 800085c:	f003 fc6a 	bl	8004134 <HAL_GPIO_WritePin>

  return 0;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	000003ec 	.word	0x000003ec
 8000870:	000003e4 	.word	0x000003e4
 8000874:	58022800 	.word	0x58022800

08000878 <receive_message>:

unsigned int receive_message(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  while (message_received == 0 && service_created == 1)
 800087c:	e001      	b.n	8000882 <receive_message+0xa>
  {
    OPENAMP_check_for_message();
 800087e:	f00a fbe7 	bl	800b050 <OPENAMP_check_for_message>
  while (message_received == 0 && service_created == 1)
 8000882:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <receive_message+0x28>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d103      	bne.n	8000892 <receive_message+0x1a>
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <receive_message+0x2c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d0f5      	beq.n	800087e <receive_message+0x6>
  }
  message_received = 0;
 8000892:	4b03      	ldr	r3, [pc, #12]	@ (80008a0 <receive_message+0x28>)
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]

  return received_data_str;
 8000898:	4b03      	ldr	r3, [pc, #12]	@ (80008a8 <receive_message+0x30>)
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	000003e4 	.word	0x000003e4
 80008a4:	000003e8 	.word	0x000003e8
 80008a8:	000003ec 	.word	0x000003ec

080008ac <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* this function is called while remote endpoint as been destroyed, the
   * service is no more available
   */
  service_created = 0;
 80008b4:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <service_destroy_cb+0x1c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	000003e8 	.word	0x000003e8

080008cc <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  /* create a endpoint for rmpsg communication */
  OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <new_service_cb+0x2c>)
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <new_service_cb+0x30>)
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	4807      	ldr	r0, [pc, #28]	@ (8000900 <new_service_cb+0x34>)
 80008e4:	f00a fb96 	bl	800b014 <OPENAMP_create_endpoint>
                          service_destroy_cb);
  service_created = 1;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <new_service_cb+0x38>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	080008ad 	.word	0x080008ad
 80008fc:	08000839 	.word	0x08000839
 8000900:	000004ec 	.word	0x000004ec
 8000904:	000003e8 	.word	0x000003e8

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

  int32_t timeout, status = 0, counter=0, i=0;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800091a:	f000 fa5d 	bl	8000dd8 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800091e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000922:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000924:	bf00      	nop
 8000926:	4b70      	ldr	r3, [pc, #448]	@ (8000ae8 <main+0x1e0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800092e:	2b00      	cmp	r3, #0
 8000930:	d004      	beq.n	800093c <main+0x34>
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	1e5a      	subs	r2, r3, #1
 8000936:	61fa      	str	r2, [r7, #28]
 8000938:	2b00      	cmp	r3, #0
 800093a:	dcf4      	bgt.n	8000926 <main+0x1e>
  if ( timeout < 0 )
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	2b00      	cmp	r3, #0
 8000940:	da01      	bge.n	8000946 <main+0x3e>
  {
  Error_Handler();
 8000942:	f000 fa76 	bl	8000e32 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000946:	f000 fe7b 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094a:	f000 f8ed 	bl	8000b28 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800094e:	4b66      	ldr	r3, [pc, #408]	@ (8000ae8 <main+0x1e0>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	4a64      	ldr	r2, [pc, #400]	@ (8000ae8 <main+0x1e0>)
 8000956:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095e:	4b62      	ldr	r3, [pc, #392]	@ (8000ae8 <main+0x1e0>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800096c:	2000      	movs	r0, #0
 800096e:	f003 fbfb 	bl	8004168 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000972:	2100      	movs	r1, #0
 8000974:	2000      	movs	r0, #0
 8000976:	f003 fc11 	bl	800419c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800097a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800097e:	61fb      	str	r3, [r7, #28]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000980:	bf00      	nop
 8000982:	4b59      	ldr	r3, [pc, #356]	@ (8000ae8 <main+0x1e0>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d104      	bne.n	8000998 <main+0x90>
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	61fa      	str	r2, [r7, #28]
 8000994:	2b00      	cmp	r3, #0
 8000996:	dcf4      	bgt.n	8000982 <main+0x7a>
	if ( timeout < 0 )
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	2b00      	cmp	r3, #0
 800099c:	da01      	bge.n	80009a2 <main+0x9a>
	{
		Error_Handler();
 800099e:	f000 fa48 	bl	8000e32 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_2 */
  /* Resource Manager Utility initialisation ---------------------------------*/
  MX_RESMGR_UTILITY_Init();
 80009a2:	f000 fa4d 	bl	8000e40 <MX_RESMGR_UTILITY_Init>

  /* USER CODE BEGIN SysInit */
  /* COM Pre-Initialization*/
  	COM_Init.BaudRate = 115200;
 80009a6:	4b51      	ldr	r3, [pc, #324]	@ (8000aec <main+0x1e4>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009ac:	601a      	str	r2, [r3, #0]
  	COM_Init.WordLength = COM_WORDLENGTH_8B;
 80009ae:	4b4f      	ldr	r3, [pc, #316]	@ (8000aec <main+0x1e4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  	COM_Init.StopBits = COM_STOPBITS_1;
 80009b4:	4b4d      	ldr	r3, [pc, #308]	@ (8000aec <main+0x1e4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	811a      	strh	r2, [r3, #8]
  	COM_Init.Parity = COM_PARITY_NONE;
 80009ba:	4b4c      	ldr	r3, [pc, #304]	@ (8000aec <main+0x1e4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	815a      	strh	r2, [r3, #10]
  	COM_Init.HwFlowCtl = COM_HWCONTROL_NONE;
 80009c0:	4b4a      	ldr	r3, [pc, #296]	@ (8000aec <main+0x1e4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	819a      	strh	r2, [r3, #12]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c6:	f000 f9c3 	bl	8000d50 <MX_GPIO_Init>
  MX_CRYP_Init();
 80009ca:	f000 f923 	bl	8000c14 <MX_CRYP_Init>
  MX_USART1_UART_Init();
 80009ce:	f000 f96b 	bl	8000ca8 <MX_USART1_UART_Init>
  MX_RNG_Init();
 80009d2:	f000 f947 	bl	8000c64 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize the mailbox use notify the other core on new message */
    MAILBOX_Init();
 80009d6:	f00a f96d 	bl	800acb4 <MAILBOX_Init>

    /* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
    rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY, NULL, NULL);
 80009da:	2300      	movs	r3, #0
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	2300      	movs	r3, #0
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009ea:	4941      	ldr	r1, [pc, #260]	@ (8000af0 <main+0x1e8>)
 80009ec:	4841      	ldr	r0, [pc, #260]	@ (8000af4 <main+0x1ec>)
 80009ee:	f7ff ff05 	bl	80007fc <rpmsg_init_ept>
    /* Initialize OpenAmp and libmetal libraries */
    if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 80009f2:	4941      	ldr	r1, [pc, #260]	@ (8000af8 <main+0x1f0>)
 80009f4:	2000      	movs	r0, #0
 80009f6:	f00a fa77 	bl	800aee8 <MX_OPENAMP_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <main+0xfc>
      Error_Handler();
 8000a00:	f000 fa17 	bl	8000e32 <Error_Handler>

    /*
     * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
     * callback is received on service creation. Wait for the callback
     */
    OPENAMP_Wait_EndPointready(&rp_endpoint);
 8000a04:	483b      	ldr	r0, [pc, #236]	@ (8000af4 <main+0x1ec>)
 8000a06:	f00a fb2f 	bl	800b068 <OPENAMP_Wait_EndPointready>

    /* Send the massage to the remote CPU */
    status = OPENAMP_send(&rp_endpoint, str2cm4, sizeof(char));
 8000a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8000afc <main+0x1f4>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4838      	ldr	r0, [pc, #224]	@ (8000af4 <main+0x1ec>)
 8000a14:	f7ff fed2 	bl	80007bc <rpmsg_send>
 8000a18:	60f8      	str	r0, [r7, #12]
    	      if (status < 0)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	da01      	bge.n	8000a24 <main+0x11c>
    	      	Error_Handler();
 8000a20:	f000 fa07 	bl	8000e32 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  receive_message();
 8000a24:	f7ff ff28 	bl	8000878 <receive_message>

	  for (i = 0; i < 4; i++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	e00f      	b.n	8000a4e <main+0x146>
		  if (HAL_RNG_GenerateRandomNumber(&hrng, &pInitVectCRYP[i]) != HAL_OK) {
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4a33      	ldr	r2, [pc, #204]	@ (8000b00 <main+0x1f8>)
 8000a34:	4413      	add	r3, r2
 8000a36:	4619      	mov	r1, r3
 8000a38:	4832      	ldr	r0, [pc, #200]	@ (8000b04 <main+0x1fc>)
 8000a3a:	f006 fafd 	bl	8007038 <HAL_RNG_GenerateRandomNumber>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <main+0x140>
			  Error_Handler();
 8000a44:	f000 f9f5 	bl	8000e32 <Error_Handler>
	  for (i = 0; i < 4; i++) {
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	ddec      	ble.n	8000a2e <main+0x126>
		  }
	  }


	  counter++;
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	3301      	adds	r3, #1
 8000a58:	61bb      	str	r3, [r7, #24]
	  HAL_CRYP_Encrypt(&hcryp, (uint32_t*) (&received_data_str), BUFFER_SIZE, Ciphertext, HSE_TIMEOUT_VALUE);
 8000a5a:	2364      	movs	r3, #100	@ 0x64
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b08 <main+0x200>)
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	492a      	ldr	r1, [pc, #168]	@ (8000b0c <main+0x204>)
 8000a64:	482a      	ldr	r0, [pc, #168]	@ (8000b10 <main+0x208>)
 8000a66:	f001 f875 	bl	8001b54 <HAL_CRYP_Encrypt>
//	  HAL_CRYP_Decrypt(&hcryp, Ciphertext, BUFFER_SIZE, ptx, HSE_TIMEOUT_VALUE);
	  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2108      	movs	r1, #8
 8000a6e:	4829      	ldr	r0, [pc, #164]	@ (8000b14 <main+0x20c>)
 8000a70:	f003 fb60 	bl	8004134 <HAL_GPIO_WritePin>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		BSP_COM_Init(COM1, &COM_Init);
 8000a74:	491d      	ldr	r1, [pc, #116]	@ (8000aec <main+0x1e4>)
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 fcaa 	bl	80013d0 <BSP_COM_Init>
		int seconds = HAL_GetTick()/1000;
 8000a7c:	f000 fe66 	bl	800174c <HAL_GetTick>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4a25      	ldr	r2, [pc, #148]	@ (8000b18 <main+0x210>)
 8000a84:	fba2 2303 	umull	r2, r3, r2, r3
 8000a88:	099b      	lsrs	r3, r3, #6
 8000a8a:	60bb      	str	r3, [r7, #8]
		printf("M7 writes to UART at time %d: The encrypted buffer %d is \n\r", seconds, counter);
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	68b9      	ldr	r1, [r7, #8]
 8000a90:	4822      	ldr	r0, [pc, #136]	@ (8000b1c <main+0x214>)
 8000a92:	f00a fea9 	bl	800b7e8 <iprintf>
		for (int i=0; i< BUFFER_SIZE/2; i++) {
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	e00a      	b.n	8000ab2 <main+0x1aa>
			printf("%x  ", Ciphertext[i]);
 8000a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8000b08 <main+0x200>)
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481e      	ldr	r0, [pc, #120]	@ (8000b20 <main+0x218>)
 8000aa8:	f00a fe9e 	bl	800b7e8 <iprintf>
		for (int i=0; i< BUFFER_SIZE/2; i++) {
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ab6:	d9f1      	bls.n	8000a9c <main+0x194>
		}
		printf("\n\n");
 8000ab8:	481a      	ldr	r0, [pc, #104]	@ (8000b24 <main+0x21c>)
 8000aba:	f00a fefd 	bl	800b8b8 <puts>
//		for (int i=0; i< BUFFER_SIZE/2; i++) {
//			printf("%x  ", ptx[i]);
//		}
//		printf("\n\n");

		HAL_Delay(3000);
 8000abe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000ac2:	f000 fe4f 	bl	8001764 <HAL_Delay>
		BSP_COM_DeInit(COM1);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 fcc2 	bl	8001450 <BSP_COM_DeInit>

		status = OPENAMP_send(&rp_endpoint, str2cm4, sizeof(char));
 8000acc:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <main+0x1f4>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4807      	ldr	r0, [pc, #28]	@ (8000af4 <main+0x1ec>)
 8000ad6:	f7ff fe71 	bl	80007bc <rpmsg_send>
 8000ada:	60f8      	str	r0, [r7, #12]
	    if (status < 0)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	daa0      	bge.n	8000a24 <main+0x11c>
	      	Error_Handler();
 8000ae2:	f000 f9a6 	bl	8000e32 <Error_Handler>
  {
 8000ae6:	e79d      	b.n	8000a24 <main+0x11c>
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	0000072c 	.word	0x0000072c
 8000af0:	0800c538 	.word	0x0800c538
 8000af4:	000004ec 	.word	0x000004ec
 8000af8:	080008cd 	.word	0x080008cd
 8000afc:	00000008 	.word	0x00000008
 8000b00:	0800c7a0 	.word	0x0800c7a0
 8000b04:	0000033c 	.word	0x0000033c
 8000b08:	0000052c 	.word	0x0000052c
 8000b0c:	000003ec 	.word	0x000003ec
 8000b10:	000002dc 	.word	0x000002dc
 8000b14:	58022800 	.word	0x58022800
 8000b18:	10624dd3 	.word	0x10624dd3
 8000b1c:	0800c548 	.word	0x0800c548
 8000b20:	0800c584 	.word	0x0800c584
 8000b24:	0800c58c 	.word	0x0800c58c

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b09c      	sub	sp, #112	@ 0x70
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b32:	224c      	movs	r2, #76	@ 0x4c
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f00a feeb 	bl	800b912 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2220      	movs	r2, #32
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f00a fee5 	bl	800b912 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b48:	2004      	movs	r0, #4
 8000b4a:	f003 fb67 	bl	800421c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b2d      	ldr	r3, [pc, #180]	@ (8000c08 <SystemClock_Config+0xe0>)
 8000b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b56:	4a2c      	ldr	r2, [pc, #176]	@ (8000c08 <SystemClock_Config+0xe0>)
 8000b58:	f023 0301 	bic.w	r3, r3, #1
 8000b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <SystemClock_Config+0xe0>)
 8000b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <SystemClock_Config+0xe4>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b70:	4a26      	ldr	r2, [pc, #152]	@ (8000c0c <SystemClock_Config+0xe4>)
 8000b72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <SystemClock_Config+0xe4>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b84:	bf00      	nop
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <SystemClock_Config+0xe4>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b92:	d1f8      	bne.n	8000b86 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000b94:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <SystemClock_Config+0xe8>)
 8000b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b98:	4a1d      	ldr	r2, [pc, #116]	@ (8000c10 <SystemClock_Config+0xe8>)
 8000b9a:	f023 0303 	bic.w	r3, r3, #3
 8000b9e:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000ba0:	2322      	movs	r3, #34	@ 0x22
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba8:	2340      	movs	r3, #64	@ 0x40
 8000baa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bac:	2301      	movs	r3, #1
 8000bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 fb89 	bl	80042d0 <HAL_RCC_OscConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000bc4:	f000 f935 	bl	8000e32 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc8:	233f      	movs	r3, #63	@ 0x3f
 8000bca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bdc:	2340      	movs	r3, #64	@ 0x40
 8000bde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000be0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2101      	movs	r1, #1
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 ffc8 	bl	8004b84 <HAL_RCC_ClockConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000bfa:	f000 f91a 	bl	8000e32 <Error_Handler>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3770      	adds	r7, #112	@ 0x70
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	58000400 	.word	0x58000400
 8000c0c:	58024800 	.word	0x58024800
 8000c10:	58024400 	.word	0x58024400

08000c14 <MX_CRYP_Init>:
  * @brief CRYP Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRYP_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END CRYP_Init 0 */

  /* USER CODE BEGIN CRYP_Init 1 */

  /* USER CODE END CRYP_Init 1 */
  hcryp.Instance = CRYP;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <MX_CRYP_Init+0x40>)
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c58 <MX_CRYP_Init+0x44>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <MX_CRYP_Init+0x40>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_256B;
 8000c24:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <MX_CRYP_Init+0x40>)
 8000c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c2a:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyCRYP;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <MX_CRYP_Init+0x40>)
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c5c <MX_CRYP_Init+0x48>)
 8000c30:	60da      	str	r2, [r3, #12]
  hcryp.Init.pInitVect = (uint32_t *)pInitVectCRYP;
 8000c32:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <MX_CRYP_Init+0x40>)
 8000c34:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <MX_CRYP_Init+0x4c>)
 8000c36:	611a      	str	r2, [r3, #16]
  hcryp.Init.Algorithm = CRYP_AES_CBC;
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <MX_CRYP_Init+0x40>)
 8000c3a:	2228      	movs	r2, #40	@ 0x28
 8000c3c:	615a      	str	r2, [r3, #20]
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_CRYP_Init+0x40>)
 8000c40:	f000 ff48 	bl	8001ad4 <HAL_CRYP_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_CRYP_Init+0x3a>
  {
    Error_Handler();
 8000c4a:	f000 f8f2 	bl	8000e32 <Error_Handler>
  }
  /* USER CODE BEGIN CRYP_Init 2 */

  /* USER CODE END CRYP_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	000002dc 	.word	0x000002dc
 8000c58:	48021000 	.word	0x48021000
 8000c5c:	0800c780 	.word	0x0800c780
 8000c60:	0800c7a0 	.word	0x0800c7a0

08000c64 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_RNG, RESMGR_FLAGS_ACCESS_NORMAL | \
 8000c68:	2300      	movs	r3, #0
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	210a      	movs	r1, #10
 8000c6e:	200e      	movs	r0, #14
 8000c70:	f00a fafa 	bl	800b268 <ResMgr_Request>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_RNG_Init+0x1a>
                  RESMGR_FLAGS_CPU1 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_RNG */
    Error_Handler();
 8000c7a:	f000 f8da 	bl	8000e32 <Error_Handler>
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <MX_RNG_Init+0x3c>)
 8000c80:	4a08      	ldr	r2, [pc, #32]	@ (8000ca4 <MX_RNG_Init+0x40>)
 8000c82:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_RNG_Init+0x3c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_RNG_Init+0x3c>)
 8000c8c:	f006 f972 	bl	8006f74 <HAL_RNG_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_RNG_Init+0x36>
  {
    Error_Handler();
 8000c96:	f000 f8cc 	bl	8000e32 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	0000033c 	.word	0x0000033c
 8000ca4:	48021800 	.word	0x48021800

08000ca8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_USART1, RESMGR_FLAGS_ACCESS_NORMAL | \
 8000cac:	2300      	movs	r3, #0
 8000cae:	2200      	movs	r2, #0
 8000cb0:	210a      	movs	r1, #10
 8000cb2:	2010      	movs	r0, #16
 8000cb4:	f00a fad8 	bl	800b268 <ResMgr_Request>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000cba:	4a24      	ldr	r2, [pc, #144]	@ (8000d4c <MX_USART1_UART_Init+0xa4>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cbe:	4b22      	ldr	r3, [pc, #136]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000ce6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cea:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf8:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cfe:	4812      	ldr	r0, [pc, #72]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000d00:	f006 fa6f 	bl	80071e2 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8000d0a:	f000 f892 	bl	8000e32 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000d12:	f007 fb44 	bl	800839e <HAL_UARTEx_SetTxFifoThreshold>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8000d1c:	f000 f889 	bl	8000e32 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d20:	2100      	movs	r1, #0
 8000d22:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000d24:	f007 fb79 	bl	800841a <HAL_UARTEx_SetRxFifoThreshold>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000d2e:	f000 f880 	bl	8000e32 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_USART1_UART_Init+0xa0>)
 8000d34:	f007 fafa 	bl	800832c <HAL_UARTEx_DisableFifoMode>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8000d3e:	f000 f878 	bl	8000e32 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	00000350 	.word	0x00000350
 8000d4c:	40011000 	.word	0x40011000

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <MX_GPIO_Init+0x80>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	4a18      	ldr	r2, [pc, #96]	@ (8000dd0 <MX_GPIO_Init+0x80>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <MX_GPIO_Init+0x80>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <MX_GPIO_Init+0x80>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	4a11      	ldr	r2, [pc, #68]	@ (8000dd0 <MX_GPIO_Init+0x80>)
 8000d8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d94:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <MX_GPIO_Init+0x80>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2108      	movs	r1, #8
 8000da6:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <MX_GPIO_Init+0x84>)
 8000da8:	f003 f9c4 	bl	8004134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dac:	2308      	movs	r3, #8
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4804      	ldr	r0, [pc, #16]	@ (8000dd4 <MX_GPIO_Init+0x84>)
 8000dc4:	f002 fefc 	bl	8003bc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc8:	bf00      	nop
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58022800 	.word	0x58022800

08000dd8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dea:	f000 fdfb 	bl	80019e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dee:	2301      	movs	r3, #1
 8000df0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000df6:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000dfa:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e10:	2301      	movs	r3, #1
 8000e12:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000e14:	2301      	movs	r3, #1
 8000e16:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fe18 	bl	8001a54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e24:	2004      	movs	r0, #4
 8000e26:	f000 fdf5 	bl	8001a14 <HAL_MPU_Enable>

}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e36:	b672      	cpsid	i
}
 8000e38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3a:	bf00      	nop
 8000e3c:	e7fd      	b.n	8000e3a <Error_Handler+0x8>
	...

08000e40 <MX_RESMGR_UTILITY_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* RESMGR_UTILITY init function */
void MX_RESMGR_UTILITY_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  if (ResMgr_Init(MX_RESMGR_UTILITY_SendMsg, MX_RESMGR_UTILITY_Callback) != RESMGR_OK)
 8000e44:	4905      	ldr	r1, [pc, #20]	@ (8000e5c <MX_RESMGR_UTILITY_Init+0x1c>)
 8000e46:	4806      	ldr	r0, [pc, #24]	@ (8000e60 <MX_RESMGR_UTILITY_Init+0x20>)
 8000e48:	f00a f970 	bl	800b12c <ResMgr_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_RESMGR_UTILITY_Init+0x16>
  {
    Error_Handler();
 8000e52:	f7ff ffee 	bl	8000e32 <Error_Handler>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	08000eb1 	.word	0x08000eb1
 8000e60:	08000e65 	.word	0x08000e65

08000e64 <MX_RESMGR_UTILITY_SendMsg>:

/* Resource Manager send message function */
__weak void MX_RESMGR_UTILITY_SendMsg(uint32_t id, uint32_t msg)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 4 */
    switch (msg)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2b05      	cmp	r3, #5
 8000e72:	d811      	bhi.n	8000e98 <MX_RESMGR_UTILITY_SendMsg+0x34>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2b05      	cmp	r3, #5
 8000e78:	d811      	bhi.n	8000e9e <MX_RESMGR_UTILITY_SendMsg+0x3a>
 8000e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e80 <MX_RESMGR_UTILITY_SendMsg+0x1c>)
 8000e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e80:	08000e9f 	.word	0x08000e9f
 8000e84:	08000e9f 	.word	0x08000e9f
 8000e88:	08000e9f 	.word	0x08000e9f
 8000e8c:	08000e9f 	.word	0x08000e9f
 8000e90:	08000e9f 	.word	0x08000e9f
 8000e94:	08000e9f 	.word	0x08000e9f
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	2bff      	cmp	r3, #255	@ 0xff
 8000e9c:	d001      	beq.n	8000ea2 <MX_RESMGR_UTILITY_SendMsg+0x3e>
        case RESMGR_MSG_REJECT:
            //User Code
            break;

        default:
            break;
 8000e9e:	bf00      	nop
 8000ea0:	e000      	b.n	8000ea4 <MX_RESMGR_UTILITY_SendMsg+0x40>
            break;
 8000ea2:	bf00      	nop
    }
      /* USER CODE END 4 */

    return;
 8000ea4:	bf00      	nop
}
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <MX_RESMGR_UTILITY_Callback>:

/* Resource Manager callback function */
__weak void MX_RESMGR_UTILITY_Callback(uint32_t id, uint32_t msg)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 5 */
    switch (msg)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2b15      	cmp	r3, #21
 8000ebe:	d831      	bhi.n	8000f24 <MX_RESMGR_UTILITY_Callback+0x74>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	2b15      	cmp	r3, #21
 8000ec4:	d831      	bhi.n	8000f2a <MX_RESMGR_UTILITY_Callback+0x7a>
 8000ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8000ecc <MX_RESMGR_UTILITY_Callback+0x1c>)
 8000ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ecc:	08000f2b 	.word	0x08000f2b
 8000ed0:	08000f2b 	.word	0x08000f2b
 8000ed4:	08000f2b 	.word	0x08000f2b
 8000ed8:	08000f2b 	.word	0x08000f2b
 8000edc:	08000f2b 	.word	0x08000f2b
 8000ee0:	08000f2b 	.word	0x08000f2b
 8000ee4:	08000f2b 	.word	0x08000f2b
 8000ee8:	08000f2b 	.word	0x08000f2b
 8000eec:	08000f2b 	.word	0x08000f2b
 8000ef0:	08000f2b 	.word	0x08000f2b
 8000ef4:	08000f2b 	.word	0x08000f2b
 8000ef8:	08000f2b 	.word	0x08000f2b
 8000efc:	08000f2b 	.word	0x08000f2b
 8000f00:	08000f2b 	.word	0x08000f2b
 8000f04:	08000f2b 	.word	0x08000f2b
 8000f08:	08000f2b 	.word	0x08000f2b
 8000f0c:	08000f2b 	.word	0x08000f2b
 8000f10:	08000f2b 	.word	0x08000f2b
 8000f14:	08000f2b 	.word	0x08000f2b
 8000f18:	08000f2b 	.word	0x08000f2b
 8000f1c:	08000f2b 	.word	0x08000f2b
 8000f20:	08000f2b 	.word	0x08000f2b
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2bff      	cmp	r3, #255	@ 0xff
 8000f28:	d001      	beq.n	8000f2e <MX_RESMGR_UTILITY_Callback+0x7e>
        case RESMGR_MSG_REJECTED:
            //User Code
            break;

        default:
            break;
 8000f2a:	bf00      	nop
 8000f2c:	e000      	b.n	8000f30 <MX_RESMGR_UTILITY_Callback+0x80>
            break;
 8000f2e:	bf00      	nop
    }
      /* USER CODE END 5 */

    return;
 8000f30:	bf00      	nop
}
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f48:	4a0f      	ldr	r2, [pc, #60]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f52:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2041      	movs	r0, #65	@ 0x41
 8000f66:	f000 fd08 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 8000f6a:	2041      	movs	r0, #65	@ 0x41
 8000f6c:	f000 fd1f 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	207d      	movs	r0, #125	@ 0x7d
 8000f76:	f000 fd00 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000f7a:	207d      	movs	r0, #125	@ 0x7d
 8000f7c:	f000 fd17 	bl	80019ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	58024400 	.word	0x58024400

08000f8c <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==CRYP)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc8 <HAL_CRYP_MspInit+0x3c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10e      	bne.n	8000fbc <HAL_CRYP_MspInit+0x30>
  {
  /* USER CODE BEGIN CRYP_MspInit 0 */

  /* USER CODE END CRYP_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRYP_CLK_ENABLE();
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_CRYP_MspInit+0x40>)
 8000fa0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000fa4:	4a09      	ldr	r2, [pc, #36]	@ (8000fcc <HAL_CRYP_MspInit+0x40>)
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000fae:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <HAL_CRYP_MspInit+0x40>)
 8000fb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRYP_MspInit 1 */

  /* USER CODE END CRYP_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	48021000 	.word	0x48021000
 8000fcc:	58024400 	.word	0x58024400

08000fd0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0b6      	sub	sp, #216	@ 0xd8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	22c8      	movs	r2, #200	@ 0xc8
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00a fc96 	bl	800b912 <memset>
  if(hrng->Instance==RNG)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a18      	ldr	r2, [pc, #96]	@ (800104c <HAL_RNG_MspInit+0x7c>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d129      	bne.n	8001044 <HAL_RNG_MspInit+0x74>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000ff0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	4618      	mov	r0, r3
 8001008:	f004 f948 	bl	800529c <HAL_RCCEx_PeriphCLKConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8001012:	f7ff ff0e 	bl	8000e32 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <HAL_RNG_MspInit+0x80>)
 8001018:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800101c:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <HAL_RNG_MspInit+0x80>)
 800101e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001022:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_RNG_MspInit+0x80>)
 8001028:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800102c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	2050      	movs	r0, #80	@ 0x50
 800103a:	f000 fc9e 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 800103e:	2050      	movs	r0, #80	@ 0x50
 8001040:	f000 fcb5 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	37d8      	adds	r7, #216	@ 0xd8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	48021800 	.word	0x48021800
 8001050:	58024400 	.word	0x58024400

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0bc      	sub	sp, #240	@ 0xf0
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	22c8      	movs	r2, #200	@ 0xc8
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f00a fc4c 	bl	800b912 <memset>
  if(huart->Instance==USART1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a26      	ldr	r2, [pc, #152]	@ (8001118 <HAL_UART_MspInit+0xc4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d145      	bne.n	8001110 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001084:	f04f 0201 	mov.w	r2, #1
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4618      	mov	r0, r3
 800109c:	f004 f8fe 	bl	800529c <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010a6:	f7ff fec4 	bl	8000e32 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <HAL_UART_MspInit+0xc8>)
 80010ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010b0:	4a1a      	ldr	r2, [pc, #104]	@ (800111c <HAL_UART_MspInit+0xc8>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <HAL_UART_MspInit+0xc8>)
 80010bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c8:	4b14      	ldr	r3, [pc, #80]	@ (800111c <HAL_UART_MspInit+0xc8>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ce:	4a13      	ldr	r2, [pc, #76]	@ (800111c <HAL_UART_MspInit+0xc8>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d8:	4b10      	ldr	r3, [pc, #64]	@ (800111c <HAL_UART_MspInit+0xc8>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010e6:	23c0      	movs	r3, #192	@ 0xc0
 80010e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010fe:	2307      	movs	r3, #7
 8001100:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001108:	4619      	mov	r1, r3
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <HAL_UART_MspInit+0xcc>)
 800110c:	f002 fd58 	bl	8003bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	37f0      	adds	r7, #240	@ 0xf0
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40011000 	.word	0x40011000
 800111c:	58024400 	.word	0x58024400
 8001120:	58020400 	.word	0x58020400

08001124 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a09      	ldr	r2, [pc, #36]	@ (8001158 <HAL_UART_MspDeInit+0x34>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10b      	bne.n	800114e <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <HAL_UART_MspDeInit+0x38>)
 8001138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800113c:	4a07      	ldr	r2, [pc, #28]	@ (800115c <HAL_UART_MspDeInit+0x38>)
 800113e:	f023 0310 	bic.w	r3, r3, #16
 8001142:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8001146:	21c0      	movs	r1, #192	@ 0xc0
 8001148:	4805      	ldr	r0, [pc, #20]	@ (8001160 <HAL_UART_MspDeInit+0x3c>)
 800114a:	f002 fee9 	bl	8003f20 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40011000 	.word	0x40011000
 800115c:	58024400 	.word	0x58024400
 8001160:	58020400 	.word	0x58020400

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <NMI_Handler+0x4>

0800116c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <MemManage_Handler+0x4>

0800117c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <UsageFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ba:	f000 fab3 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <HASH_RNG_IRQHandler+0x10>)
 80011d6:	f005 ff85 	bl	80070e4 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	0000033c 	.word	0x0000033c

080011e4 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80011e8:	f002 fffe 	bl	80041e8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return 1;
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_kill>:

int _kill(int pid, int sig)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800120a:	f00a fb9b 	bl	800b944 <__errno>
 800120e:	4603      	mov	r3, r0
 8001210:	2216      	movs	r2, #22
 8001212:	601a      	str	r2, [r3, #0]
  return -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_exit>:

void _exit (int status)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001228:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ffe7 	bl	8001200 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001232:	bf00      	nop
 8001234:	e7fd      	b.n	8001232 <_exit+0x12>

08001236 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e00a      	b.n	800125e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001248:	f3af 8000 	nop.w
 800124c:	4601      	mov	r1, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	60ba      	str	r2, [r7, #8]
 8001254:	b2ca      	uxtb	r2, r1
 8001256:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3301      	adds	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	429a      	cmp	r2, r3
 8001264:	dbf0      	blt.n	8001248 <_read+0x12>
  }

  return len;
 8001266:	687b      	ldr	r3, [r7, #4]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e009      	b.n	8001296 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	60ba      	str	r2, [r7, #8]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f940 	bl	8001510 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	dbf1      	blt.n	8001282 <_write+0x12>
  }
  return len;
 800129e:	687b      	ldr	r3, [r7, #4]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_close>:

int _close(int file)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012d0:	605a      	str	r2, [r3, #4]
  return 0;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <_isatty>:

int _isatty(int file)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001318:	4a14      	ldr	r2, [pc, #80]	@ (800136c <_sbrk+0x5c>)
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <_sbrk+0x60>)
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001324:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <_sbrk+0x64>)
 800132e:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <_sbrk+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	429a      	cmp	r2, r3
 800133e:	d207      	bcs.n	8001350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001340:	f00a fb00 	bl	800b944 <__errno>
 8001344:	4603      	mov	r3, r0
 8001346:	220c      	movs	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800134e:	e009      	b.n	8001364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <_sbrk+0x64>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <_sbrk+0x64>)
 8001360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20020000 	.word	0x20020000
 8001370:	00000400 	.word	0x00000400
 8001374:	0000073c 	.word	0x0000073c
 8001378:	000009e8 	.word	0x000009e8

0800137c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800137c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001380:	f7ff f986 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001386:	490d      	ldr	r1, [pc, #52]	@ (80013bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800139c:	4c0a      	ldr	r4, [pc, #40]	@ (80013c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013aa:	f00a fad1 	bl	800b950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ae:	f7ff faab 	bl	8000908 <main>
  bx  lr
 80013b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b8:	00000000 	.word	0x00000000
  ldr r1, =_edata
 80013bc:	0000011c 	.word	0x0000011c
  ldr r2, =_sidata
 80013c0:	0800c8d0 	.word	0x0800c8d0
  ldr r2, =_sbss
 80013c4:	000002c0 	.word	0x000002c0
  ldr r4, =_ebss
 80013c8:	000009e8 	.word	0x000009e8

080013cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC3_IRQHandler>
	...

080013d0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  * @retval BSP status
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013e6:	f06f 0301 	mvn.w	r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e026      	b.n	800143c <BSP_COM_Init+0x6c>
  }
  else
  {
    /* Init the UART Msp */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    USART1_MspInit(&hcom_uart[COM]);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2294      	movs	r2, #148	@ 0x94
 80013f2:	fb02 f303 	mul.w	r3, r2, r3
 80013f6:	4a14      	ldr	r2, [pc, #80]	@ (8001448 <BSP_COM_Init+0x78>)
 80013f8:	4413      	add	r3, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f8a4 	bl	8001548 <USART1_MspInit>
      {
        ret = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if(ret == BSP_ERROR_NONE)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d11a      	bne.n	800143c <BSP_COM_Init+0x6c>
    {
      /* USART configuration   */
      hcom_uart[COM].Instance = COM_USART[COM];
 8001406:	79fa      	ldrb	r2, [r7, #7]
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	4910      	ldr	r1, [pc, #64]	@ (800144c <BSP_COM_Init+0x7c>)
 800140c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001410:	490d      	ldr	r1, [pc, #52]	@ (8001448 <BSP_COM_Init+0x78>)
 8001412:	2094      	movs	r0, #148	@ 0x94
 8001414:	fb00 f303 	mul.w	r3, r0, r3
 8001418:	440b      	add	r3, r1
 800141a:	601a      	str	r2, [r3, #0]
      if(MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2294      	movs	r2, #148	@ 0x94
 8001420:	fb02 f303 	mul.w	r3, r2, r3
 8001424:	4a08      	ldr	r2, [pc, #32]	@ (8001448 <BSP_COM_Init+0x78>)
 8001426:	4413      	add	r3, r2
 8001428:	6839      	ldr	r1, [r7, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f83e 	bl	80014ac <MX_USART1_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <BSP_COM_Init+0x6c>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8001436:	f06f 0303 	mvn.w	r3, #3
 800143a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800143c:	68fb      	ldr	r3, [r7, #12]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	00000740 	.word	0x00000740
 800144c:	0000000c 	.word	0x0000000c

08001450 <BSP_COM_DeInit>:
  * @param  COM COM port to be configured.
  *          This parameter can be (COM1)
  * @retval BSP status
  */
int32_t BSP_COM_DeInit(COM_TypeDef COM)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <BSP_COM_DeInit+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001464:	f06f 0301 	mvn.w	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	e017      	b.n	800149c <BSP_COM_DeInit+0x4c>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    USART1_MspDeInit(&hcom_uart[COM]);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	2294      	movs	r2, #148	@ 0x94
 8001470:	fb02 f303 	mul.w	r3, r2, r3
 8001474:	4a0c      	ldr	r2, [pc, #48]	@ (80014a8 <BSP_COM_DeInit+0x58>)
 8001476:	4413      	add	r3, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f000 f8bd 	bl	80015f8 <USART1_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if(HAL_UART_DeInit(&hcom_uart[COM]) != HAL_OK)
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2294      	movs	r2, #148	@ 0x94
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <BSP_COM_DeInit+0x58>)
 8001488:	4413      	add	r3, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f005 fef9 	bl	8007282 <HAL_UART_DeInit>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <BSP_COM_DeInit+0x4c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001496:	f06f 0303 	mvn.w	r3, #3
 800149a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800149c:	68fb      	ldr	r3, [r7, #12]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	00000740 	.word	0x00000740

080014ac <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance          = COM_USART[COM1];
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <MX_USART1_Init+0x60>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate     = COM_Init->BaudRate;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode         = UART_MODE_TX_RX;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	220c      	movs	r2, #12
 80014ca:	615a      	str	r2, [r3, #20]
  huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	895b      	ldrh	r3, [r3, #10]
 80014d0:	461a      	mov	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength   = COM_Init->WordLength;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	891b      	ldrh	r3, [r3, #8]
 80014e2:	461a      	mov	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	899b      	ldrh	r3, [r3, #12]
 80014ec:	461a      	mov	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014f8:	61da      	str	r2, [r3, #28]

  return HAL_UART_Init(huart);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f005 fe71 	bl	80071e2 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	0000000c 	.word	0x0000000c

08001510 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar (int ch)
#else
int fputc (int ch, FILE *f)
#endif /* __GNUC__   */
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <__io_putchar+0x30>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	2394      	movs	r3, #148	@ 0x94
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	4a07      	ldr	r2, [pc, #28]	@ (8001544 <__io_putchar+0x34>)
 8001526:	1898      	adds	r0, r3, r2
 8001528:	1d39      	adds	r1, r7, #4
 800152a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152e:	2201      	movs	r2, #1
 8001530:	f005 fee6 	bl	8007300 <HAL_UART_Transmit>
  return ch;
 8001534:	687b      	ldr	r3, [r7, #4]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	000007d4 	.word	0x000007d4
 8001544:	00000740 	.word	0x00000740

08001548 <USART1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval None
  */
static void USART1_MspInit(UART_HandleTypeDef *huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001550:	4b27      	ldr	r3, [pc, #156]	@ (80015f0 <USART1_MspInit+0xa8>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001556:	4a26      	ldr	r2, [pc, #152]	@ (80015f0 <USART1_MspInit+0xa8>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001560:	4b23      	ldr	r3, [pc, #140]	@ (80015f0 <USART1_MspInit+0xa8>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800156e:	4b20      	ldr	r3, [pc, #128]	@ (80015f0 <USART1_MspInit+0xa8>)
 8001570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001574:	4a1e      	ldr	r2, [pc, #120]	@ (80015f0 <USART1_MspInit+0xa8>)
 8001576:	f043 0302 	orr.w	r3, r3, #2
 800157a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <USART1_MspInit+0xa8>)
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <USART1_MspInit+0xa8>)
 800158e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001592:	4a17      	ldr	r2, [pc, #92]	@ (80015f0 <USART1_MspInit+0xa8>)
 8001594:	f043 0310 	orr.w	r3, r3, #16
 8001598:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800159c:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <USART1_MspInit+0xa8>)
 800159e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80015aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015ae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80015bc:	2304      	movs	r3, #4
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	480b      	ldr	r0, [pc, #44]	@ (80015f4 <USART1_MspInit+0xac>)
 80015c8:	f002 fafa 	bl	8003bc0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80015cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015d0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80015d6:	2304      	movs	r3, #4
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4804      	ldr	r0, [pc, #16]	@ (80015f4 <USART1_MspInit+0xac>)
 80015e2:	f002 faed 	bl	8003bc0 <HAL_GPIO_Init>
}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	58024400 	.word	0x58024400
 80015f4:	58020400 	.word	0x58020400

080015f8 <USART1_MspDeInit>:
  * @brief  Initialize USART1 Msp part
  * @param  huart UART handle
  * @retval None
  */
static void USART1_MspDeInit(UART_HandleTypeDef *huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* COM GPIO pin configuration */
  gpio_init_structure.Pin  = COM1_TX_PIN;
 8001600:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001604:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(COM1_TX_GPIO_PORT, gpio_init_structure.Pin);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4619      	mov	r1, r3
 800160a:	480b      	ldr	r0, [pc, #44]	@ (8001638 <USART1_MspDeInit+0x40>)
 800160c:	f002 fc88 	bl	8003f20 <HAL_GPIO_DeInit>

  gpio_init_structure.Pin  = COM1_RX_PIN;
 8001610:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001614:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(COM1_RX_GPIO_PORT, gpio_init_structure.Pin);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4619      	mov	r1, r3
 800161a:	4807      	ldr	r0, [pc, #28]	@ (8001638 <USART1_MspDeInit+0x40>)
 800161c:	f002 fc80 	bl	8003f20 <HAL_GPIO_DeInit>

  /* Disable USART clock */
  COM1_CLK_DISABLE();
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <USART1_MspDeInit+0x44>)
 8001622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <USART1_MspDeInit+0x44>)
 8001628:	f023 0310 	bic.w	r3, r3, #16
 800162c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	58020400 	.word	0x58020400
 800163c:	58024400 	.word	0x58024400

08001640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001646:	2003      	movs	r0, #3
 8001648:	f000 f98c 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800164c:	f003 fc50 	bl	8004ef0 <HAL_RCC_GetSysClockFreq>
 8001650:	4602      	mov	r2, r0
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_Init+0x68>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	4913      	ldr	r1, [pc, #76]	@ (80016ac <HAL_Init+0x6c>)
 800165e:	5ccb      	ldrb	r3, [r1, r3]
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
 8001668:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <HAL_Init+0x68>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	4a0e      	ldr	r2, [pc, #56]	@ (80016ac <HAL_Init+0x6c>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
 8001680:	4a0b      	ldr	r2, [pc, #44]	@ (80016b0 <HAL_Init+0x70>)
 8001682:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001684:	4a0b      	ldr	r2, [pc, #44]	@ (80016b4 <HAL_Init+0x74>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800168a:	200f      	movs	r0, #15
 800168c:	f000 f814 	bl	80016b8 <HAL_InitTick>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e002      	b.n	80016a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800169a:	f7ff fc4f 	bl	8000f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	58024400 	.word	0x58024400
 80016ac:	0800c770 	.word	0x0800c770
 80016b0:	00000004 	.word	0x00000004
 80016b4:	00000000 	.word	0x00000000

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016c0:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <HAL_InitTick+0x60>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e021      	b.n	8001710 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <HAL_InitTick+0x64>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_InitTick+0x60>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f971 	bl	80019ca <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001700:	f000 f93b 	bl	800197a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	@ (8001720 <HAL_InitTick+0x68>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	00000014 	.word	0x00000014
 800171c:	00000000 	.word	0x00000000
 8001720:	00000010 	.word	0x00000010

08001724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	00000014 	.word	0x00000014
 8001748:	000007d8 	.word	0x000007d8

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	@ (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	000007d8 	.word	0x000007d8

08001764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff ffee 	bl	800174c <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800177c:	d005      	beq.n	800178a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177e:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178a:	bf00      	nop
 800178c:	f7ff ffde 	bl	800174c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f7      	bhi.n	800178c <HAL_Delay+0x28>
  {
  }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	00000014 	.word	0x00000014

080017ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <HAL_GetREVID+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0c1b      	lsrs	r3, r3, #16
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	5c001000 	.word	0x5c001000

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <__NVIC_SetPriorityGrouping+0x40>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <__NVIC_SetPriorityGrouping+0x40>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00
 8001808:	05fa0000 	.word	0x05fa0000

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	@ (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	@ (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	@ (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	@ 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	@ 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001944:	f7ff ff8e 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff29 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff40 	bl	800180c <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff90 	bl	80018b8 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5f 	bl	8001864 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff33 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffa4 	bl	8001920 <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019e8:	f3bf 8f5f 	dmb	sy
}
 80019ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80019ee:	4b07      	ldr	r3, [pc, #28]	@ (8001a0c <HAL_MPU_Disable+0x28>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	4a06      	ldr	r2, [pc, #24]	@ (8001a0c <HAL_MPU_Disable+0x28>)
 80019f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019fa:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <HAL_MPU_Disable+0x2c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	e000ed90 	.word	0xe000ed90

08001a14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <HAL_MPU_Enable+0x38>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_MPU_Enable+0x3c>)
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2a:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <HAL_MPU_Enable+0x3c>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a30:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a32:	f3bf 8f4f 	dsb	sy
}
 8001a36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a38:	f3bf 8f6f 	isb	sy
}
 8001a3c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed90 	.word	0xe000ed90
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	785a      	ldrb	r2, [r3, #1]
 8001a60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a62:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	4a19      	ldr	r2, [pc, #100]	@ (8001ad0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001a70:	4a17      	ldr	r2, [pc, #92]	@ (8001ad0 <HAL_MPU_ConfigRegion+0x7c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7b1b      	ldrb	r3, [r3, #12]
 8001a7c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7adb      	ldrb	r3, [r3, #11]
 8001a82:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7a9b      	ldrb	r3, [r3, #10]
 8001a8a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7b5b      	ldrb	r3, [r3, #13]
 8001a92:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7b9b      	ldrb	r3, [r3, #14]
 8001a9a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7bdb      	ldrb	r3, [r3, #15]
 8001aa2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001aa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7a5b      	ldrb	r3, [r3, #9]
 8001aaa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001aac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7a1b      	ldrb	r3, [r3, #8]
 8001ab2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ab4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001abc:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001abe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ac0:	6113      	str	r3, [r2, #16]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed90 	.word	0xe000ed90

08001ad4 <HAL_CRYP_Init>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e030      	b.n	8001b48 <HAL_CRYP_Init+0x74>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fa46 	bl	8000f8c <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size(This bit field is don't care in the DES or TDES modes) data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, CRYP_CR_DATATYPE | CRYP_CR_KEYSIZE | CRYP_CR_ALGOMODE,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <HAL_CRYP_Init+0x7c>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6851      	ldr	r1, [r2, #4]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6892      	ldr	r2, [r2, #8]
 8001b12:	4311      	orrs	r1, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6952      	ldr	r2, [r2, #20]
 8001b18:	4311      	orrs	r1, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	430b      	orrs	r3, r1
 8001b20:	6013      	str	r3, [r2, #0]
             hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
#if !defined (CRYP_VER_2_2)
  /* Read Device ID to indicate CRYP1 IP Version */
  hcryp->Version = HAL_GetREVID();
 8001b22:	f7ff fe43 	bl	80017ac <HAL_GetREVID>
 8001b26:	4602      	mov	r2, r0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /*End of not defined CRYP_VER_2_2*/
  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	fff7fc07 	.word	0xfff7fc07

08001b54 <HAL_CRYP_Encrypt>:
  * @param  Timeout: Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output,
                                   uint32_t Timeout)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	4613      	mov	r3, r2
 8001b62:	80fb      	strh	r3, [r7, #6]
  uint32_t algo;
  HAL_StatusTypeDef status;

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	f040 811a 	bne.w	8001da6 <HAL_CRYP_Encrypt+0x252>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /* Process locked */
    __HAL_LOCK(hcryp);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_CRYP_Encrypt+0x34>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e11b      	b.n	8001dc0 <HAL_CRYP_Encrypt+0x26c>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr, pCrypOutBuffPtr and Size parameters*/
    hcryp->CrypInCount = 0U;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hcryp->CrypOutCount = 0U;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
    hcryp->pCrypInBuffPtr = Input;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	631a      	str	r2, [r3, #48]	@ 0x30
    hcryp->pCrypOutBuffPtr = Output;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	635a      	str	r2, [r3, #52]	@ 0x34

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <HAL_CRYP_Encrypt+0x68>
    {
      hcryp->Size = Size * 4U;
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001bba:	e002      	b.n	8001bc2 <HAL_CRYP_Encrypt+0x6e>
    }
    else
    {
      hcryp->Size = Size;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	88fa      	ldrh	r2, [r7, #6]
 8001bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }

    /* Set Encryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, CRYP_CR_ALGODIR, CRYP_OPERATINGMODE_ENCRYPT);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0204 	bic.w	r2, r2, #4
 8001bd0:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & CRYP_CR_ALGOMODE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b7b      	ldr	r3, [pc, #492]	@ (8001dc8 <HAL_CRYP_Encrypt+0x274>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]

    switch (algo)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	f1b3 1f08 	cmp.w	r3, #524296	@ 0x80008
 8001be4:	f000 80c3 	beq.w	8001d6e <HAL_CRYP_Encrypt+0x21a>
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	f1b3 1f08 	cmp.w	r3, #524296	@ 0x80008
 8001bee:	f200 80c5 	bhi.w	8001d7c <HAL_CRYP_Encrypt+0x228>
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001bf8:	f000 80b2 	beq.w	8001d60 <HAL_CRYP_Encrypt+0x20c>
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001c02:	f200 80bb 	bhi.w	8001d7c <HAL_CRYP_Encrypt+0x228>
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	2b10      	cmp	r3, #16
 8001c0a:	d849      	bhi.n	8001ca0 <HAL_CRYP_Encrypt+0x14c>
 8001c0c:	e03a      	b.n	8001c84 <HAL_CRYP_Encrypt+0x130>
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	3b18      	subs	r3, #24
 8001c12:	2b18      	cmp	r3, #24
 8001c14:	f200 80b2 	bhi.w	8001d7c <HAL_CRYP_Encrypt+0x228>
 8001c18:	a201      	add	r2, pc, #4	@ (adr r2, 8001c20 <HAL_CRYP_Encrypt+0xcc>)
 8001c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1e:	bf00      	nop
 8001c20:	08001caf 	.word	0x08001caf
 8001c24:	08001d7d 	.word	0x08001d7d
 8001c28:	08001d7d 	.word	0x08001d7d
 8001c2c:	08001d7d 	.word	0x08001d7d
 8001c30:	08001d7d 	.word	0x08001d7d
 8001c34:	08001d7d 	.word	0x08001d7d
 8001c38:	08001d7d 	.word	0x08001d7d
 8001c3c:	08001d7d 	.word	0x08001d7d
 8001c40:	08001d53 	.word	0x08001d53
 8001c44:	08001d7d 	.word	0x08001d7d
 8001c48:	08001d7d 	.word	0x08001d7d
 8001c4c:	08001d7d 	.word	0x08001d7d
 8001c50:	08001d7d 	.word	0x08001d7d
 8001c54:	08001d7d 	.word	0x08001d7d
 8001c58:	08001d7d 	.word	0x08001d7d
 8001c5c:	08001d7d 	.word	0x08001d7d
 8001c60:	08001d53 	.word	0x08001d53
 8001c64:	08001d7d 	.word	0x08001d7d
 8001c68:	08001d7d 	.word	0x08001d7d
 8001c6c:	08001d7d 	.word	0x08001d7d
 8001c70:	08001d7d 	.word	0x08001d7d
 8001c74:	08001d7d 	.word	0x08001d7d
 8001c78:	08001d7d 	.word	0x08001d7d
 8001c7c:	08001d7d 	.word	0x08001d7d
 8001c80:	08001d53 	.word	0x08001d53
 8001c84:	4a51      	ldr	r2, [pc, #324]	@ (8001dcc <HAL_CRYP_Encrypt+0x278>)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d107      	bne.n	8001cae <HAL_CRYP_Encrypt+0x15a>
 8001c9e:	e06d      	b.n	8001d7c <HAL_CRYP_Encrypt+0x228>
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b30      	cmp	r3, #48	@ 0x30
 8001ca4:	d86a      	bhi.n	8001d7c <HAL_CRYP_Encrypt+0x228>
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b18      	cmp	r3, #24
 8001caa:	d2b0      	bcs.n	8001c0e <HAL_CRYP_Encrypt+0xba>
 8001cac:	e066      	b.n	8001d7c <HAL_CRYP_Encrypt+0x228>
      case CRYP_DES_CBC:
      case CRYP_TDES_ECB:
      case CRYP_TDES_CBC:

        /*Set Key */
        hcryp->Instance->K1LR = *(uint32_t *)(hcryp->Init.pKey);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	629a      	str	r2, [r3, #40]	@ 0x28
        hcryp->Instance->K1RR = *(uint32_t *)(hcryp->Init.pKey + 1);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6852      	ldr	r2, [r2, #4]
 8001cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
        if ((hcryp->Init.Algorithm == CRYP_TDES_ECB) || (hcryp->Init.Algorithm == CRYP_TDES_CBC))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_CRYP_Encrypt+0x182>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d117      	bne.n	8001d06 <HAL_CRYP_Encrypt+0x1b2>
        {
          hcryp->Instance->K2LR = *(uint32_t *)(hcryp->Init.pKey + 2);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6892      	ldr	r2, [r2, #8]
 8001ce0:	631a      	str	r2, [r3, #48]	@ 0x30
          hcryp->Instance->K2RR = *(uint32_t *)(hcryp->Init.pKey + 3);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68d2      	ldr	r2, [r2, #12]
 8001cec:	635a      	str	r2, [r3, #52]	@ 0x34
          hcryp->Instance->K3LR = *(uint32_t *)(hcryp->Init.pKey + 4);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6912      	ldr	r2, [r2, #16]
 8001cf8:	639a      	str	r2, [r3, #56]	@ 0x38
          hcryp->Instance->K3RR = *(uint32_t *)(hcryp->Init.pKey + 5);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6952      	ldr	r2, [r2, #20]
 8001d04:	63da      	str	r2, [r3, #60]	@ 0x3c
        }

        /*Set Initialization Vector (IV)*/
        if ((hcryp->Init.Algorithm == CRYP_DES_CBC) || (hcryp->Init.Algorithm == CRYP_TDES_CBC))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	2b18      	cmp	r3, #24
 8001d0c:	d003      	beq.n	8001d16 <HAL_CRYP_Encrypt+0x1c2>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d10b      	bne.n	8001d2e <HAL_CRYP_Encrypt+0x1da>
        {
          hcryp->Instance->IV0LR = *(uint32_t *)(hcryp->Init.pInitVect);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	641a      	str	r2, [r3, #64]	@ 0x40
          hcryp->Instance->IV0RR = *(uint32_t *)(hcryp->Init.pInitVect + 1);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6852      	ldr	r2, [r2, #4]
 8001d2c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Flush FIFO */
        HAL_CRYP_FIFO_FLUSH(hcryp);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Set the phase */
        hcryp->Phase = CRYP_PHASE_PROCESS;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2202      	movs	r2, #2
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Start DES/TDES encryption process */
        status = CRYP_TDES_Process(hcryp, Timeout);
 8001d44:	6a39      	ldr	r1, [r7, #32]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f84c 	bl	8001de4 <CRYP_TDES_Process>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	75fb      	strb	r3, [r7, #23]
        break;
 8001d50:	e01d      	b.n	8001d8e <HAL_CRYP_Encrypt+0x23a>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 8001d52:	6a39      	ldr	r1, [r7, #32]
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 f909 	bl	8001f6c <CRYP_AES_Encrypt>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	75fb      	strb	r3, [r7, #23]
        break;
 8001d5e:	e016      	b.n	8001d8e <HAL_CRYP_Encrypt+0x23a>

      case CRYP_AES_GCM:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout);
 8001d60:	6a39      	ldr	r1, [r7, #32]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 faca 	bl	80022fc <CRYP_AESGCM_Process>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	75fb      	strb	r3, [r7, #23]
        break;
 8001d6c:	e00f      	b.n	8001d8e <HAL_CRYP_Encrypt+0x23a>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8001d6e:	6a39      	ldr	r1, [r7, #32]
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 fd4c 	bl	800280e <CRYP_AESCCM_Process>
 8001d76:	4603      	mov	r3, r0
 8001d78:	75fb      	strb	r3, [r7, #23]
        break;
 8001d7a:	e008      	b.n	8001d8e <HAL_CRYP_Encrypt+0x23a>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d80:	f043 0220 	orr.w	r2, r3, #32
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	651a      	str	r2, [r3, #80]	@ 0x50
        status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	75fb      	strb	r3, [r7, #23]
        break;
 8001d8c:	bf00      	nop
    }

    if (status == HAL_OK)
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d114      	bne.n	8001dbe <HAL_CRYP_Encrypt+0x26a>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8001da4:	e00b      	b.n	8001dbe <HAL_CRYP_Encrypt+0x26a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001db2:	f043 0208 	orr.w	r2, r3, #8
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	651a      	str	r2, [r3, #80]	@ 0x50
    status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status ;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	00080038 	.word	0x00080038
 8001dcc:	00010101 	.word	0x00010101

08001dd0 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CRYP_ErrorCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <CRYP_TDES_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout: Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_TDES_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t temp;  /* Temporary CrypOutBuff */
  uint16_t incount; /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dfc:	601a      	str	r2, [r3, #0]
  /*Temporary CrypOutCount Value*/
  outcount = hcryp->CrypOutCount;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001e02:	81fb      	strh	r3, [r7, #14]

  /*Start processing*/
  while ((hcryp->CrypInCount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8001e04:	e090      	b.n	8001f28 <CRYP_TDES_Process+0x144>
  {
    /* Temporary CrypInCount Value */
    incount = hcryp->CrypInCount;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001e0a:	81bb      	strh	r3, [r7, #12]
    /* Write plain data and get cipher data */
    if (((hcryp->Instance->SR & CRYP_FLAG_IFNF) != 0x0U) && (incount < (hcryp->Size / 4U)))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d02a      	beq.n	8001e70 <CRYP_TDES_Process+0x8c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	89ba      	ldrh	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d223      	bcs.n	8001e70 <CRYP_TDES_Process+0x8c>
    {
      /* Write the input block in the IN FIFO */
      hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	441a      	add	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	875a      	strh	r2, [r3, #58]	@ 0x3a
      hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	441a      	add	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	875a      	strh	r2, [r3, #58]	@ 0x3a
    }

    /* Wait for OFNE flag to be raised */
    if (CRYP_WaitOnOFNEFlag(hcryp, Timeout) != HAL_OK)
 8001e70:	6839      	ldr	r1, [r7, #0]
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f001 fe7e 	bl	8003b74 <CRYP_WaitOnOFNEFlag>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d018      	beq.n	8001eb0 <CRYP_TDES_Process+0xcc>
    {
      /* Disable the CRYP peripheral clock */
      __HAL_CRYP_DISABLE(hcryp);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e8c:	601a      	str	r2, [r3, #0]

      /* Change state & errorCode*/
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e92:	f043 0210 	orr.w	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	651a      	str	r2, [r3, #80]	@ 0x50
      hcryp->State = HAL_CRYP_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ff90 	bl	8001dd0 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /*Temporary CrypOutCount Value*/
    outcount = hcryp->CrypOutCount;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001eb4:	81fb      	strh	r3, [r7, #14]

    if (((hcryp->Instance->SR & CRYP_FLAG_OFNE) != 0x0U) && (outcount < (hcryp->Size / 4U)))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d02e      	beq.n	8001f22 <CRYP_TDES_Process+0x13e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	89fa      	ldrh	r2, [r7, #14]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d227      	bcs.n	8001f22 <CRYP_TDES_Process+0x13e>
    {
      /* Read the output block from the Output FIFO and put them in temporary Buffer
       then get CrypOutBuff from temporary buffer  */
      temp = hcryp->Instance->DOUT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	601a      	str	r2, [r3, #0]
      hcryp->CrypOutCount++;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	879a      	strh	r2, [r3, #60]	@ 0x3c
      temp = hcryp->Instance->DOUT;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	601a      	str	r2, [r3, #0]
      hcryp->CrypOutCount++;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	879a      	strh	r2, [r3, #60]	@ 0x3c
    }
    /*Temporary CrypOutCount Value*/
    outcount = hcryp->CrypOutCount;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001f26:	81fb      	strh	r3, [r7, #14]
  while ((hcryp->CrypInCount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d207      	bcs.n	8001f4a <CRYP_TDES_Process+0x166>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	89fa      	ldrh	r2, [r7, #14]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	f4ff af5e 	bcc.w	8001e06 <CRYP_TDES_Process+0x22>
  }
  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f58:	601a      	str	r2, [r3, #0]
  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <CRYP_AES_Encrypt>:
  * @param  hcryp: pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout: specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8001f76:	2301      	movs	r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d109      	bne.n	8001f96 <CRYP_AES_Encrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <CRYP_AES_Encrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	e002      	b.n	8001f96 <CRYP_AES_Encrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d121      	bne.n	8001fe0 <CRYP_AES_Encrypt+0x74>
  {
    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f91f 	bl	80021e6 <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d017      	beq.n	8001fe0 <CRYP_AES_Encrypt+0x74>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IV0LR = *(uint32_t *)(hcryp->Init.pInitVect);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40
      hcryp->Instance->IV0RR = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6852      	ldr	r2, [r2, #4]
 8001fc6:	645a      	str	r2, [r3, #68]	@ 0x44
      hcryp->Instance->IV1LR = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6892      	ldr	r2, [r2, #8]
 8001fd2:	649a      	str	r2, [r3, #72]	@ 0x48
      hcryp->Instance->IV1RR = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68d2      	ldr	r2, [r2, #12]
 8001fde:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ff4:	601a      	str	r2, [r3, #0]
  /*Temporary CrypOutCount Value*/
  outcount = hcryp->CrypOutCount;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001ffa:	81fb      	strh	r3, [r7, #14]

  while ((hcryp->CrypInCount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8001ffc:	e006      	b.n	800200c <CRYP_AES_Encrypt+0xa0>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8001ffe:	6839      	ldr	r1, [r7, #0]
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f824 	bl	800204e <CRYP_AES_ProcessData>
    /*Temporary CrypOutCount Value*/
    outcount = hcryp->CrypOutCount;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800200a:	81fb      	strh	r3, [r7, #14]
  while ((hcryp->CrypInCount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002010:	b29a      	uxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	b29b      	uxth	r3, r3
 800201a:	429a      	cmp	r2, r3
 800201c:	d206      	bcs.n	800202c <CRYP_AES_Encrypt+0xc0>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	b29b      	uxth	r3, r3
 8002026:	89fa      	ldrh	r2, [r7, #14]
 8002028:	429a      	cmp	r2, r3
 800202a:	d3e8      	bcc.n	8001ffe <CRYP_AES_Encrypt+0x92>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800203a:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout: Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b088      	sub	sp, #32
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t i;

  /*Temporary CrypOutCount Value*/
  incount = hcryp->CrypInCount;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800205c:	837b      	strh	r3, [r7, #26]

  if (((hcryp->Instance->SR & CRYP_FLAG_IFNF) != 0x0U) && (incount < ((hcryp->Size) / 4U)))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d04e      	beq.n	800210a <CRYP_AES_ProcessData+0xbc>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	b29b      	uxth	r3, r3
 8002074:	8b7a      	ldrh	r2, [r7, #26]
 8002076:	429a      	cmp	r2, r3
 8002078:	d247      	bcs.n	800210a <CRYP_AES_ProcessData+0xbc>
  {
    /* Write the input block in the IN FIFO */
    hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002082:	b29b      	uxth	r3, r3
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	441a      	add	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	609a      	str	r2, [r3, #8]
    hcryp->CrypInCount++;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002094:	b29b      	uxth	r3, r3
 8002096:	3301      	adds	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	441a      	add	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	609a      	str	r2, [r3, #8]
    hcryp->CrypInCount++;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	441a      	add	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	609a      	str	r2, [r3, #8]
    hcryp->CrypInCount++;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	875a      	strh	r2, [r3, #58]	@ 0x3a
    hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	441a      	add	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	609a      	str	r2, [r3, #8]
    hcryp->CrypInCount++;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002100:	b29b      	uxth	r3, r3
 8002102:	3301      	adds	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	875a      	strh	r2, [r3, #58]	@ 0x3a
  }

  /* Wait for OFNE flag to be raised */
  if (CRYP_WaitOnOFNEFlag(hcryp, Timeout) != HAL_OK)
 800210a:	6839      	ldr	r1, [r7, #0]
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f001 fd31 	bl	8003b74 <CRYP_WaitOnOFNEFlag>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d018      	beq.n	800214a <CRYP_AES_ProcessData+0xfc>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002126:	601a      	str	r2, [r3, #0]

    /* Change state & error code*/
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212c:	f043 0210 	orr.w	r2, r3, #16
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	651a      	str	r2, [r3, #80]	@ 0x50
    hcryp->State = HAL_CRYP_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fe43 	bl	8001dd0 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }
  /*Temporary CrypOutCount Value*/
  outcount = hcryp->CrypOutCount;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800214e:	833b      	strh	r3, [r7, #24]

  if (((hcryp->Instance->SR & CRYP_FLAG_OFNE) != 0x0U) && (outcount < ((hcryp->Size) / 4U)))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d03f      	beq.n	80021de <CRYP_AES_ProcessData+0x190>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	b29b      	uxth	r3, r3
 8002166:	8b3a      	ldrh	r2, [r7, #24]
 8002168:	429a      	cmp	r2, r3
 800216a:	d238      	bcs.n	80021de <CRYP_AES_ProcessData+0x190>
  {
    /* Read the output block from the Output FIFO and put them in temporary buffer
       then get CrypOutBuff from temporary buffer  */
    for (i = 0U; i < 4U; i++)
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	e00b      	b.n	800218a <CRYP_AES_ProcessData+0x13c>
    {
      temp[i] = hcryp->Instance->DOUT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	3320      	adds	r3, #32
 800217e:	443b      	add	r3, r7
 8002180:	f843 2c18 	str.w	r2, [r3, #-24]
    for (i = 0U; i < 4U; i++)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	3301      	adds	r3, #1
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d9f0      	bls.n	8002172 <CRYP_AES_ProcessData+0x124>
    }
    i = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
    while (((hcryp->CrypOutCount < ((hcryp->Size) / 4U))) && (i < 4U))
 8002194:	e017      	b.n	80021c6 <CRYP_AES_ProcessData+0x178>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800219e:	b29b      	uxth	r3, r3
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	441a      	add	r2, r3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	3320      	adds	r3, #32
 80021aa:	443b      	add	r3, r7
 80021ac:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80021b0:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3301      	adds	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	879a      	strh	r2, [r3, #60]	@ 0x3c
      i++;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	3301      	adds	r3, #1
 80021c4:	61fb      	str	r3, [r7, #28]
    while (((hcryp->CrypOutCount < ((hcryp->Size) / 4U))) && (i < 4U))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d202      	bcs.n	80021de <CRYP_AES_ProcessData+0x190>
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d9db      	bls.n	8002196 <CRYP_AES_ProcessData+0x148>
    }
  }
}
 80021de:	bf00      	nop
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <CRYP_SetKey>:
  *         the configuration information for CRYP module
  * @param  KeySize: Size of Key
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  switch (KeySize)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021f6:	d00b      	beq.n	8002210 <CRYP_SetKey+0x2a>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021fe:	d876      	bhi.n	80022ee <CRYP_SetKey+0x108>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d05a      	beq.n	80022bc <CRYP_SetKey+0xd6>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800220c:	d031      	beq.n	8002272 <CRYP_SetKey+0x8c>
      hcryp->Instance->K3LR = *(uint32_t *)(hcryp->Init.pKey + 2);
      hcryp->Instance->K3RR = *(uint32_t *)(hcryp->Init.pKey + 3);

      break;
    default:
      break;
 800220e:	e06e      	b.n	80022ee <CRYP_SetKey+0x108>
      hcryp->Instance->K0LR = *(uint32_t *)(hcryp->Init.pKey);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	621a      	str	r2, [r3, #32]
      hcryp->Instance->K0RR = *(uint32_t *)(hcryp->Init.pKey + 1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6852      	ldr	r2, [r2, #4]
 8002226:	625a      	str	r2, [r3, #36]	@ 0x24
      hcryp->Instance->K1LR = *(uint32_t *)(hcryp->Init.pKey + 2);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6892      	ldr	r2, [r2, #8]
 8002232:	629a      	str	r2, [r3, #40]	@ 0x28
      hcryp->Instance->K1RR = *(uint32_t *)(hcryp->Init.pKey + 3);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68d2      	ldr	r2, [r2, #12]
 800223e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hcryp->Instance->K2LR = *(uint32_t *)(hcryp->Init.pKey + 4);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6912      	ldr	r2, [r2, #16]
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
      hcryp->Instance->K2RR = *(uint32_t *)(hcryp->Init.pKey + 5);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6952      	ldr	r2, [r2, #20]
 8002256:	635a      	str	r2, [r3, #52]	@ 0x34
      hcryp->Instance->K3LR = *(uint32_t *)(hcryp->Init.pKey + 6);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6992      	ldr	r2, [r2, #24]
 8002262:	639a      	str	r2, [r3, #56]	@ 0x38
      hcryp->Instance->K3RR = *(uint32_t *)(hcryp->Init.pKey + 7);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	69d2      	ldr	r2, [r2, #28]
 800226e:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8002270:	e03e      	b.n	80022f0 <CRYP_SetKey+0x10a>
      hcryp->Instance->K1LR = *(uint32_t *)(hcryp->Init.pKey);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	629a      	str	r2, [r3, #40]	@ 0x28
      hcryp->Instance->K1RR = *(uint32_t *)(hcryp->Init.pKey + 1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6852      	ldr	r2, [r2, #4]
 8002288:	62da      	str	r2, [r3, #44]	@ 0x2c
      hcryp->Instance->K2LR = *(uint32_t *)(hcryp->Init.pKey + 2);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6892      	ldr	r2, [r2, #8]
 8002294:	631a      	str	r2, [r3, #48]	@ 0x30
      hcryp->Instance->K2RR = *(uint32_t *)(hcryp->Init.pKey + 3);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68d2      	ldr	r2, [r2, #12]
 80022a0:	635a      	str	r2, [r3, #52]	@ 0x34
      hcryp->Instance->K3LR = *(uint32_t *)(hcryp->Init.pKey + 4);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6912      	ldr	r2, [r2, #16]
 80022ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hcryp->Instance->K3RR = *(uint32_t *)(hcryp->Init.pKey + 5);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6952      	ldr	r2, [r2, #20]
 80022b8:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 80022ba:	e019      	b.n	80022f0 <CRYP_SetKey+0x10a>
      hcryp->Instance->K2LR = *(uint32_t *)(hcryp->Init.pKey);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hcryp->Instance->K2RR = *(uint32_t *)(hcryp->Init.pKey + 1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6852      	ldr	r2, [r2, #4]
 80022d2:	635a      	str	r2, [r3, #52]	@ 0x34
      hcryp->Instance->K3LR = *(uint32_t *)(hcryp->Init.pKey + 2);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6892      	ldr	r2, [r2, #8]
 80022de:	639a      	str	r2, [r3, #56]	@ 0x38
      hcryp->Instance->K3RR = *(uint32_t *)(hcryp->Init.pKey + 3);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68d2      	ldr	r2, [r2, #12]
 80022ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 80022ec:	e000      	b.n	80022f0 <CRYP_SetKey+0x10a>
      break;
 80022ee:	bf00      	nop
  }
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b090      	sub	sp, #64	@ 0x40
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = (uint32_t)(hcryp->Size) / 4U;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	b29b      	uxth	r3, r3
 800230e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t index ;
  uint32_t lastwordsize ;
  uint32_t nolastpaddingbytes;
  uint8_t *pval;
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002310:	2301      	movs	r3, #1
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002318:	2b01      	cmp	r3, #1
 800231a:	d116      	bne.n	800234a <CRYP_AESGCM_Process+0x4e>
  {
    if (hcryp->KeyIVConfig == 1U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002320:	2b01      	cmp	r3, #1
 8002322:	d109      	bne.n	8002338 <CRYP_AESGCM_Process+0x3c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	62fb      	str	r3, [r7, #44]	@ 0x2c
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
 8002330:	441a      	add	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002336:	e00d      	b.n	8002354 <CRYP_AESGCM_Process+0x58>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	659a      	str	r2, [r3, #88]	@ 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002342:	461a      	mov	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002348:	e004      	b.n	8002354 <CRYP_AESGCM_Process+0x58>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800234e:	461a      	mov	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8002354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002356:	2b01      	cmp	r3, #1
 8002358:	f040 80a3 	bne.w	80024a2 <CRYP_AESGCM_Process+0x1a6>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	871a      	strh	r2, [r3, #56]	@ 0x38

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	4619      	mov	r1, r3
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff2e 	bl	80021e6 <CRYP_SetKey>

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IV0LR = *(uint32_t *)(hcryp->Init.pInitVect);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	641a      	str	r2, [r3, #64]	@ 0x40
    hcryp->Instance->IV0RR = *(uint32_t *)(hcryp->Init.pInitVect + 1);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6852      	ldr	r2, [r2, #4]
 80023a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hcryp->Instance->IV1LR = *(uint32_t *)(hcryp->Init.pInitVect + 2);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6892      	ldr	r2, [r2, #8]
 80023ac:	649a      	str	r2, [r3, #72]	@ 0x48
    hcryp->Instance->IV1RR = *(uint32_t *)(hcryp->Init.pInitVect + 3);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68d2      	ldr	r2, [r2, #12]
 80023b8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023c8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023ca:	f7ff f9bf 	bl	800174c <HAL_GetTick>
 80023ce:	62b8      	str	r0, [r7, #40]	@ 0x28

    /*Wait for the CRYPEN bit to be cleared*/
    while ((hcryp->Instance->CR & CRYP_CR_CRYPEN) == CRYP_CR_CRYPEN)
 80023d0:	e026      	b.n	8002420 <CRYP_AESGCM_Process+0x124>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023d8:	d022      	beq.n	8002420 <CRYP_AESGCM_Process+0x124>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023da:	f7ff f9b7 	bl	800174c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d302      	bcc.n	80023f0 <CRYP_AESGCM_Process+0xf4>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d117      	bne.n	8002420 <CRYP_AESGCM_Process+0x124>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023fe:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002404:	f043 0210 	orr.w	r2, r3, #16
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	651a      	str	r2, [r3, #80]	@ 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e1f2      	b.n	8002806 <CRYP_AESGCM_Process+0x50a>
    while ((hcryp->Instance->CR & CRYP_CR_CRYPEN) == CRYP_CR_CRYPEN)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800242a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800242e:	d0d0      	beq.n	80023d2 <CRYP_AESGCM_Process+0xd6>
      }
    }

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8002430:	6839      	ldr	r1, [r7, #0]
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fcea 	bl	8002e0c <CRYP_GCMCCM_SetHeaderPhase>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <CRYP_AESGCM_Process+0x146>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e1e1      	b.n	8002806 <CRYP_AESGCM_Process+0x50a>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Disable the CRYP peripheral */
    __HAL_CRYP_DISABLE(hcryp);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002456:	601a      	str	r2, [r3, #0]

#if !defined (CRYP_VER_2_2)
    if (hcryp->Version >= REV_ID_B)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002460:	d307      	bcc.n	8002472 <CRYP_AESGCM_Process+0x176>
#endif /*End of not defined CRYP_VER_2_2*/
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, CRYP_CR_NPBLB, 0U);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002470:	601a      	str	r2, [r3, #0]
    }

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002490:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024a0:	601a      	str	r2, [r3, #0]
  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <CRYP_AESGCM_Process+0x1bc>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 80024b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b2:	f023 0303 	bic.w	r3, r3, #3
 80024b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b8:	f7ff f948 	bl	800174c <HAL_GetTick>
 80024bc:	62b8      	str	r0, [r7, #40]	@ 0x28
  /*Temporary CrypOutCount Value*/
  outcount = hcryp->CrypOutCount;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80024c2:	867b      	strh	r3, [r7, #50]	@ 0x32

  /* Write input data and get output Data */
  while ((hcryp->CrypInCount < wordsize) && (outcount < wordsize))
 80024c4:	e02d      	b.n	8002522 <CRYP_AESGCM_Process+0x226>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80024c6:	6839      	ldr	r1, [r7, #0]
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff fdc0 	bl	800204e <CRYP_AES_ProcessData>

    /*Temporary CrypOutCount Value*/
    outcount = hcryp->CrypOutCount;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80024d2:	867b      	strh	r3, [r7, #50]	@ 0x32

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024da:	d022      	beq.n	8002522 <CRYP_AESGCM_Process+0x226>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024dc:	f7ff f936 	bl	800174c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d302      	bcc.n	80024f2 <CRYP_AESGCM_Process+0x1f6>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d117      	bne.n	8002522 <CRYP_AESGCM_Process+0x226>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002500:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002506:	f043 0210 	orr.w	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	651a      	str	r2, [r3, #80]	@ 0x50
        hcryp->State = HAL_CRYP_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e171      	b.n	8002806 <CRYP_AESGCM_Process+0x50a>
  while ((hcryp->CrypInCount < wordsize) && (outcount < wordsize))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800252c:	4293      	cmp	r3, r2
 800252e:	d903      	bls.n	8002538 <CRYP_AESGCM_Process+0x23c>
 8002530:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002532:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002534:	429a      	cmp	r2, r3
 8002536:	d8c6      	bhi.n	80024c6 <CRYP_AESGCM_Process+0x1ca>
      }
    }
  }

  if ((hcryp->Size % 16U) != 0U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 815e 	beq.w	8002804 <CRYP_AESGCM_Process+0x508>
  {

#if !defined (CRYP_VER_2_2)
    if (hcryp->Version >= REV_ID_B)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002550:	f0c0 8154 	bcc.w	80027fc <CRYP_AESGCM_Process+0x500>
#endif /*End of not defined CRYP_VER_2_2*/
    {
      /* Compute the number of padding bytes in last block of payload */
      npblb = ((((uint32_t)(hcryp->Size) / 16U) + 1U) * 16U) - (uint32_t)(hcryp->Size);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	b29b      	uxth	r3, r3
 800255c:	3301      	adds	r3, #1
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24

      /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
      if ((hcryp->Instance->CR & CRYP_CR_ALGODIR) == CRYP_OPERATINGMODE_ENCRYPT)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d11a      	bne.n	80025ac <CRYP_AESGCM_Process+0x2b0>
      {
        /* Disable the CRYP */
        __HAL_CRYP_DISABLE(hcryp);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002584:	601a      	str	r2, [r3, #0]

        /* Specify the number of non-valid bytes using NPBLB register*/
        MODIFY_REG(hcryp->Instance->CR, CRYP_CR_NPBLB, npblb << 20);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	051a      	lsls	r2, r3, #20
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

        /* Enable CRYP to start the final phase */
        __HAL_CRYP_ENABLE(hcryp);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025aa:	601a      	str	r2, [r3, #0]
      }
      /* Number of valid words (lastwordsize) in last block */
      if ((npblb % 4U) == 0U)
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d105      	bne.n	80025c2 <CRYP_AESGCM_Process+0x2c6>
      {
        lastwordsize = (16U - npblb) / 4U;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	f1c3 0310 	rsb	r3, r3, #16
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	637b      	str	r3, [r7, #52]	@ 0x34
 80025c0:	e005      	b.n	80025ce <CRYP_AESGCM_Process+0x2d2>
      }
      else
      {
        lastwordsize = ((16U - npblb) / 4U) + 1U;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	f1c3 0310 	rsb	r3, r3, #16
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	3301      	adds	r3, #1
 80025cc:	637b      	str	r3, [r7, #52]	@ 0x34
      }

      /* Write the last input block in the IN FIFO */
      for (index = 0U; index < lastwordsize; index ++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025d2:	e014      	b.n	80025fe <CRYP_AESGCM_Process+0x302>
      {
        hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	441a      	add	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	609a      	str	r2, [r3, #8]
        hcryp->CrypInCount++;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3301      	adds	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	875a      	strh	r2, [r3, #58]	@ 0x3a
      for (index = 0U; index < lastwordsize; index ++)
 80025f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fa:	3301      	adds	r3, #1
 80025fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002602:	429a      	cmp	r2, r3
 8002604:	d3e6      	bcc.n	80025d4 <CRYP_AESGCM_Process+0x2d8>
      }

      /* Pad the data with zeros to have a complete block */
      while (index < 4U)
 8002606:	e006      	b.n	8002616 <CRYP_AESGCM_Process+0x31a>
      {
        hcryp->Instance->DIN  = 0U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
        index++;
 8002610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002612:	3301      	adds	r3, #1
 8002614:	63bb      	str	r3, [r7, #56]	@ 0x38
      while (index < 4U)
 8002616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002618:	2b03      	cmp	r3, #3
 800261a:	d9f5      	bls.n	8002608 <CRYP_AESGCM_Process+0x30c>
      }

      /* Wait for OFNE flag to be raised */
      if (CRYP_WaitOnOFNEFlag(hcryp, Timeout) != HAL_OK)
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f001 faa8 	bl	8003b74 <CRYP_WaitOnOFNEFlag>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d018      	beq.n	800265c <CRYP_AESGCM_Process+0x360>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002638:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263e:	f043 0210 	orr.w	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	651a      	str	r2, [r3, #80]	@ 0x50
        hcryp->State = HAL_CRYP_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        /* Process Unlocked */
        __HAL_UNLOCK(hcryp);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        hcryp->ErrorCallback(hcryp);
#else
        /*Call legacy weak error callback*/
        HAL_CRYP_ErrorCallback(hcryp);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fbba 	bl	8001dd0 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
      }

      /*Read the output block from the output FIFO */
      if ((hcryp->Instance->SR & CRYP_FLAG_OFNE) != 0x0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80cc 	beq.w	8002804 <CRYP_AESGCM_Process+0x508>
      {
        for (index = 0U; index < 4U; index++)
 800266c:	2300      	movs	r3, #0
 800266e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002670:	e00b      	b.n	800268a <CRYP_AESGCM_Process+0x38e>
        {
          /* Read the output block from the output FIFO and put them in temporary buffer
          then get CrypOutBuff from temporary buffer */
          temp[index] = hcryp->Instance->DOUT;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	3340      	adds	r3, #64	@ 0x40
 800267e:	443b      	add	r3, r7
 8002680:	f843 2c34 	str.w	r2, [r3, #-52]
        for (index = 0U; index < 4U; index++)
 8002684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002686:	3301      	adds	r3, #1
 8002688:	63bb      	str	r3, [r7, #56]	@ 0x38
 800268a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800268c:	2b03      	cmp	r3, #3
 800268e:	d9f0      	bls.n	8002672 <CRYP_AESGCM_Process+0x376>
        }

        for (index = 0U; index < lastwordsize; index++)
 8002690:	2300      	movs	r3, #0
 8002692:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002694:	e0ac      	b.n	80027f0 <CRYP_AESGCM_Process+0x4f4>
        {
          pval = (uint8_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800269e:	b29b      	uxth	r3, r3
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	623b      	str	r3, [r7, #32]

          if (index == (lastwordsize - 1U))
 80026a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a8:	3b01      	subs	r3, #1
 80026aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026ac:	429a      	cmp	r2, r3
 80026ae:	f040 8087 	bne.w	80027c0 <CRYP_AESGCM_Process+0x4c4>
          {
            nolastpaddingbytes = npblb % 4U;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	61fb      	str	r3, [r7, #28]

            switch (nolastpaddingbytes)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d044      	beq.n	800274a <CRYP_AESGCM_Process+0x44e>
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d84b      	bhi.n	800275e <CRYP_AESGCM_Process+0x462>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d003      	beq.n	80026d4 <CRYP_AESGCM_Process+0x3d8>
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d024      	beq.n	800271c <CRYP_AESGCM_Process+0x420>
 80026d2:	e044      	b.n	800275e <CRYP_AESGCM_Process+0x462>
            {
              case 1:
                *(pval) = (uint8_t)(temp[index]);
 80026d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	3340      	adds	r3, #64	@ 0x40
 80026da:	443b      	add	r3, r7
 80026dc:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	701a      	strb	r2, [r3, #0]
                pval++;
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	3301      	adds	r3, #1
 80026ea:	623b      	str	r3, [r7, #32]
                *(pval) = (uint8_t)(temp[index] >> 8U);
 80026ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	3340      	adds	r3, #64	@ 0x40
 80026f2:	443b      	add	r3, r7
 80026f4:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	701a      	strb	r2, [r3, #0]
                pval++;
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	3301      	adds	r3, #1
 8002704:	623b      	str	r3, [r7, #32]
                *(pval) = (uint8_t)(temp[index] >> 16U);
 8002706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	3340      	adds	r3, #64	@ 0x40
 800270c:	443b      	add	r3, r7
 800270e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002712:	0c1b      	lsrs	r3, r3, #16
 8002714:	b2da      	uxtb	r2, r3
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	701a      	strb	r2, [r3, #0]
                break;
 800271a:	e05f      	b.n	80027dc <CRYP_AESGCM_Process+0x4e0>
              case 2:
                *(pval) = (uint8_t)(temp[index]);
 800271c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	3340      	adds	r3, #64	@ 0x40
 8002722:	443b      	add	r3, r7
 8002724:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	701a      	strb	r2, [r3, #0]
                pval++;
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	3301      	adds	r3, #1
 8002732:	623b      	str	r3, [r7, #32]
                *(pval) = (uint8_t)(temp[index] >> 8U);
 8002734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	3340      	adds	r3, #64	@ 0x40
 800273a:	443b      	add	r3, r7
 800273c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	b2da      	uxtb	r2, r3
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	701a      	strb	r2, [r3, #0]
                break;
 8002748:	e048      	b.n	80027dc <CRYP_AESGCM_Process+0x4e0>
              case 3:
                *(pval) = (uint8_t)(temp[index]);
 800274a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	3340      	adds	r3, #64	@ 0x40
 8002750:	443b      	add	r3, r7
 8002752:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	701a      	strb	r2, [r3, #0]
                break;
 800275c:	e03e      	b.n	80027dc <CRYP_AESGCM_Process+0x4e0>
              default:
                *(pval) = (uint8_t)(temp[index]);
 800275e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	3340      	adds	r3, #64	@ 0x40
 8002764:	443b      	add	r3, r7
 8002766:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800276a:	b2da      	uxtb	r2, r3
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	701a      	strb	r2, [r3, #0]
                pval++;
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	3301      	adds	r3, #1
 8002774:	623b      	str	r3, [r7, #32]
                *(pval) = (uint8_t)(temp[index] >> 8U);
 8002776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	3340      	adds	r3, #64	@ 0x40
 800277c:	443b      	add	r3, r7
 800277e:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	b2da      	uxtb	r2, r3
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	701a      	strb	r2, [r3, #0]
                pval++;
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	3301      	adds	r3, #1
 800278e:	623b      	str	r3, [r7, #32]
                *(pval) = (uint8_t)(temp[index] >> 16U);
 8002790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	3340      	adds	r3, #64	@ 0x40
 8002796:	443b      	add	r3, r7
 8002798:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800279c:	0c1b      	lsrs	r3, r3, #16
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	701a      	strb	r2, [r3, #0]
                pval++;
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	3301      	adds	r3, #1
 80027a8:	623b      	str	r3, [r7, #32]
                *(pval) = (uint8_t)(temp[index] >> 24U);
 80027aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	3340      	adds	r3, #64	@ 0x40
 80027b0:	443b      	add	r3, r7
 80027b2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80027b6:	0e1b      	lsrs	r3, r3, #24
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	701a      	strb	r2, [r3, #0]
                break;
 80027be:	e00d      	b.n	80027dc <CRYP_AESGCM_Process+0x4e0>
            }
          }
          else
          {
            *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	441a      	add	r2, r3
 80027ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	3340      	adds	r3, #64	@ 0x40
 80027d4:	443b      	add	r3, r7
 80027d6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80027da:	6013      	str	r3, [r2, #0]
          }

          hcryp->CrypOutCount++;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3301      	adds	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
        for (index = 0U; index < lastwordsize; index++)
 80027ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ec:	3301      	adds	r3, #1
 80027ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f4:	429a      	cmp	r2, r3
 80027f6:	f4ff af4e 	bcc.w	8002696 <CRYP_AESGCM_Process+0x39a>
 80027fa:	e003      	b.n	8002804 <CRYP_AESGCM_Process+0x508>
#if !defined (CRYP_VER_2_2)
    else /*  Workaround to be used */
    {
      /*  Workaround 2 for STM32H7 below rev.B To generate correct TAG only when size of the last block of
      payload is inferior to 128 bits, in case of GCM encryption or CCM decryption*/
      CRYP_Workaround(hcryp, Timeout);
 80027fc:	6839      	ldr	r1, [r7, #0]
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fcbe 	bl	8003180 <CRYP_Workaround>
    } /* end of NPBLB or Workaround*/
#endif /*End of not defined CRYP_VER_2_2*/
  }

  /* Return function status */
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3740      	adds	r7, #64	@ 0x40
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b0a2      	sub	sp, #136	@ 0x88
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = (uint32_t)(hcryp->Size) / 4U;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	b29b      	uxth	r3, r3
 8002820:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t npblb ;
  uint32_t lastwordsize ;
  uint32_t temp[4] ;  /* Temporary CrypOutBuff */
  uint32_t index ;
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002824:	2301      	movs	r3, #1
 8002826:	677b      	str	r3, [r7, #116]	@ 0x74

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282c:	2b01      	cmp	r3, #1
 800282e:	d116      	bne.n	800285e <CRYP_AESCCM_Process+0x50>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002834:	2b01      	cmp	r3, #1
 8002836:	d109      	bne.n	800284c <CRYP_AESCCM_Process+0x3e>
    {
      /* If the Key and IV configuration has to be done only once
      and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	677b      	str	r3, [r7, #116]	@ 0x74
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
 8002844:	441a      	add	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	65da      	str	r2, [r3, #92]	@ 0x5c
 800284a:	e00d      	b.n	8002868 <CRYP_AESCCM_Process+0x5a>
    else
    {
      /* If the Key and IV configuration has to be done only once
      and if it has not been done already, do it and set KeyIVConfig
      to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	659a      	str	r2, [r3, #88]	@ 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002856:	461a      	mov	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800285c:	e004      	b.n	8002868 <CRYP_AESCCM_Process+0x5a>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002862:	461a      	mov	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8002868:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800286a:	2b01      	cmp	r3, #1
 800286c:	f040 81a4 	bne.w	8002bb8 <CRYP_AESCCM_Process+0x3aa>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	871a      	strh	r2, [r3, #56]	@ 0x38

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	4619      	mov	r1, r3
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff fca4 	bl	80021e6 <CRYP_SetKey>

    /* Set the initialization vector (IV) with CTR1 information */
    hcryp->Instance->IV0LR = (hcryp->Init.B0[0]) & CRYP_CCM_CTR1_0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 80028ac:	641a      	str	r2, [r3, #64]	@ 0x40
    hcryp->Instance->IV0RR = hcryp->Init.B0[1];
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1a      	ldr	r2, [r3, #32]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6852      	ldr	r2, [r2, #4]
 80028b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hcryp->Instance->IV1LR = hcryp->Init.B0[2];
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1a      	ldr	r2, [r3, #32]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6892      	ldr	r2, [r2, #8]
 80028c4:	649a      	str	r2, [r3, #72]	@ 0x48
    hcryp->Instance->IV1RR = (hcryp->Init.B0[3] & CRYP_CCM_CTR1_1) |  CRYP_CCM_CTR1_2;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	330c      	adds	r3, #12
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028ea:	601a      	str	r2, [r3, #0]
      hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.B0 + 1);
      hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.B0 + 2);
      hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.B0 + 3);
    }
#else
    if (hcryp->Version >= REV_ID_B)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028f4:	d318      	bcc.n	8002928 <CRYP_AESCCM_Process+0x11a>
    {
      /* for STM32H7 rev.B and above Write  B0 packet into CRYP_DR*/
      hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.B0);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1a      	ldr	r2, [r3, #32]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	609a      	str	r2, [r3, #8]
      hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.B0 + 1);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1a      	ldr	r2, [r3, #32]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6852      	ldr	r2, [r2, #4]
 800290c:	609a      	str	r2, [r3, #8]
      hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.B0 + 2);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1a      	ldr	r2, [r3, #32]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6892      	ldr	r2, [r2, #8]
 8002918:	609a      	str	r2, [r3, #8]
      hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.B0 + 3);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1a      	ldr	r2, [r3, #32]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68d2      	ldr	r2, [r2, #12]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	e0db      	b.n	8002ae0 <CRYP_AESCCM_Process+0x2d2>
    }
    else /* data has to be swapped according to the DATATYPE */
    {
      if (hcryp->Init.DataType == CRYP_BYTE_SWAP)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b80      	cmp	r3, #128	@ 0x80
 800292e:	d127      	bne.n	8002980 <CRYP_AESCCM_Process+0x172>
      {
        hcryp->Instance->DIN = __REV(*(uint32_t *)(hcryp->Init.B0));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	65fa      	str	r2, [r7, #92]	@ 0x5c
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 800293c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800293e:	ba12      	rev	r2, r2
 8002940:	609a      	str	r2, [r3, #8]
        hcryp->Instance->DIN = __REV(*(uint32_t *)(hcryp->Init.B0 + 1));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	3304      	adds	r3, #4
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	663a      	str	r2, [r7, #96]	@ 0x60
 8002950:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002952:	ba12      	rev	r2, r2
 8002954:	609a      	str	r2, [r3, #8]
        hcryp->Instance->DIN = __REV(*(uint32_t *)(hcryp->Init.B0 + 2));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	3308      	adds	r3, #8
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	667a      	str	r2, [r7, #100]	@ 0x64
 8002964:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002966:	ba12      	rev	r2, r2
 8002968:	609a      	str	r2, [r3, #8]
        hcryp->Instance->DIN = __REV(*(uint32_t *)(hcryp->Init.B0 + 3));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	330c      	adds	r3, #12
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002978:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800297a:	ba12      	rev	r2, r2
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	e0af      	b.n	8002ae0 <CRYP_AESCCM_Process+0x2d2>
      }
      else if (hcryp->Init.DataType == CRYP_HALFWORD_SWAP)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b40      	cmp	r3, #64	@ 0x40
 8002986:	d15b      	bne.n	8002a40 <CRYP_AESCCM_Process+0x232>
      {
        hcryp->Instance->DIN = __ROR(*(uint32_t *)(hcryp->Init.B0), 16);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	643b      	str	r3, [r7, #64]	@ 0x40
 8002994:	2310      	movs	r3, #16
 8002996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 8002998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (op2 == 0U)
 80029a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <CRYP_AESCCM_Process+0x19c>
  {
    return op1;
 80029a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029a8:	e003      	b.n	80029b2 <CRYP_AESCCM_Process+0x1a4>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 80029aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ae:	fa61 f303 	ror.w	r3, r1, r3
 80029b2:	6093      	str	r3, [r2, #8]
        hcryp->Instance->DIN = __ROR(*(uint32_t *)(hcryp->Init.B0 + 1), 16);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	3304      	adds	r3, #4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029c2:	2310      	movs	r3, #16
 80029c4:	647b      	str	r3, [r7, #68]	@ 0x44
  op2 %= 32U;
 80029c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (op2 == 0U)
 80029ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <CRYP_AESCCM_Process+0x1ca>
    return op1;
 80029d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029d6:	e003      	b.n	80029e0 <CRYP_AESCCM_Process+0x1d2>
  return (op1 >> op2) | (op1 << (32U - op2));
 80029d8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80029da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029dc:	fa61 f303 	ror.w	r3, r1, r3
 80029e0:	6093      	str	r3, [r2, #8]
        hcryp->Instance->DIN = __ROR(*(uint32_t *)(hcryp->Init.B0 + 2), 16);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	3308      	adds	r3, #8
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80029f0:	2310      	movs	r3, #16
 80029f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  op2 %= 32U;
 80029f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (op2 == 0U)
 80029fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <CRYP_AESCCM_Process+0x1f8>
    return op1;
 8002a02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a04:	e003      	b.n	8002a0e <CRYP_AESCCM_Process+0x200>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002a06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a0a:	fa61 f303 	ror.w	r3, r1, r3
 8002a0e:	6093      	str	r3, [r2, #8]
        hcryp->Instance->DIN = __ROR(*(uint32_t *)(hcryp->Init.B0 + 3), 16);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	330c      	adds	r3, #12
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a1e:	2310      	movs	r3, #16
 8002a20:	657b      	str	r3, [r7, #84]	@ 0x54
  op2 %= 32U;
 8002a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	657b      	str	r3, [r7, #84]	@ 0x54
  if (op2 == 0U)
 8002a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <CRYP_AESCCM_Process+0x226>
    return op1;
 8002a30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a32:	e003      	b.n	8002a3c <CRYP_AESCCM_Process+0x22e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002a34:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a38:	fa61 f303 	ror.w	r3, r1, r3
 8002a3c:	6093      	str	r3, [r2, #8]
 8002a3e:	e04f      	b.n	8002ae0 <CRYP_AESCCM_Process+0x2d2>
      }
      else if (hcryp->Init.DataType == CRYP_BIT_SWAP)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a46:	d133      	bne.n	8002ab0 <CRYP_AESCCM_Process+0x2a2>
      {
        hcryp->Instance->DIN = __RBIT(*(uint32_t *)(hcryp->Init.B0));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	623a      	str	r2, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	6a3a      	ldr	r2, [r7, #32]
 8002a56:	fa92 f2a2 	rbit	r2, r2
 8002a5a:	61fa      	str	r2, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	609a      	str	r2, [r3, #8]
        hcryp->Instance->DIN = __RBIT(*(uint32_t *)(hcryp->Init.B0 + 1));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	3304      	adds	r3, #4
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a70:	fa92 f2a2 	rbit	r2, r2
 8002a74:	627a      	str	r2, [r7, #36]	@ 0x24
  return result;
 8002a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a78:	609a      	str	r2, [r3, #8]
        hcryp->Instance->DIN = __RBIT(*(uint32_t *)(hcryp->Init.B0 + 2));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	3308      	adds	r3, #8
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a8a:	fa92 f2a2 	rbit	r2, r2
 8002a8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
  return result;
 8002a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a92:	609a      	str	r2, [r3, #8]
        hcryp->Instance->DIN = __RBIT(*(uint32_t *)(hcryp->Init.B0 + 3));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	330c      	adds	r3, #12
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	63ba      	str	r2, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002aa4:	fa92 f2a2 	rbit	r2, r2
 8002aa8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002aaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	e017      	b.n	8002ae0 <CRYP_AESCCM_Process+0x2d2>
      }
      else
      {
        hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.B0);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1a      	ldr	r2, [r3, #32]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	609a      	str	r2, [r3, #8]
        hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.B0 + 1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1a      	ldr	r2, [r3, #32]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6852      	ldr	r2, [r2, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
        hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.B0 + 2);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1a      	ldr	r2, [r3, #32]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6892      	ldr	r2, [r2, #8]
 8002ad2:	609a      	str	r2, [r3, #8]
        hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.B0 + 3);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1a      	ldr	r2, [r3, #32]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68d2      	ldr	r2, [r2, #12]
 8002ade:	609a      	str	r2, [r3, #8]
      }
    }
#endif /* CRYP_VER_2_2 */
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ae0:	f7fe fe34 	bl	800174c <HAL_GetTick>
 8002ae4:	6738      	str	r0, [r7, #112]	@ 0x70

    /*Wait for the CRYPEN bit to be cleared*/
    while ((hcryp->Instance->CR & CRYP_CR_CRYPEN) == CRYP_CR_CRYPEN)
 8002ae6:	e026      	b.n	8002b36 <CRYP_AESCCM_Process+0x328>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aee:	d022      	beq.n	8002b36 <CRYP_AESCCM_Process+0x328>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002af0:	f7fe fe2c 	bl	800174c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d302      	bcc.n	8002b06 <CRYP_AESCCM_Process+0x2f8>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d117      	bne.n	8002b36 <CRYP_AESCCM_Process+0x328>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b14:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b1a:	f043 0210 	orr.w	r2, r3, #16
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	651a      	str	r2, [r3, #80]	@ 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e166      	b.n	8002e04 <CRYP_AESCCM_Process+0x5f6>
    while ((hcryp->Instance->CR & CRYP_CR_CRYPEN) == CRYP_CR_CRYPEN)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b44:	d0d0      	beq.n	8002ae8 <CRYP_AESCCM_Process+0x2da>

    /************************* Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp, Timeout) != HAL_OK)
 8002b46:	6839      	ldr	r1, [r7, #0]
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f95f 	bl	8002e0c <CRYP_GCMCCM_SetHeaderPhase>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <CRYP_AESCCM_Process+0x34a>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e155      	b.n	8002e04 <CRYP_AESCCM_Process+0x5f6>
    }
    /********************** Payload phase ***************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Disable the CRYP peripheral */
    __HAL_CRYP_DISABLE(hcryp);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b6c:	601a      	str	r2, [r3, #0]
#if !defined (CRYP_VER_2_2)
    if (hcryp->Version >= REV_ID_B)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b76:	d307      	bcc.n	8002b88 <CRYP_AESCCM_Process+0x37a>
#endif /*End of not defined CRYP_VER_2_2*/
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, CRYP_CR_NPBLB, 0U);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b86:	601a      	str	r2, [r3, #0]
    }

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002ba6:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bb6:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <CRYP_AESCCM_Process+0x3c4>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8002bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bca:	f023 0303 	bic.w	r3, r3, #3
 8002bce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd2:	f7fe fdbb 	bl	800174c <HAL_GetTick>
 8002bd6:	6738      	str	r0, [r7, #112]	@ 0x70

  /*Temporary CrypOutCount Value*/
  outcount = hcryp->CrypOutCount;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002bdc:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

  /* Write input data and get output data */
  while ((hcryp->CrypInCount < wordsize) && (outcount < wordsize))
 8002be0:	e02e      	b.n	8002c40 <CRYP_AESCCM_Process+0x432>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002be2:	6839      	ldr	r1, [r7, #0]
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff fa32 	bl	800204e <CRYP_AES_ProcessData>

    /*Temporary CrypOutCount Value*/
    outcount = hcryp->CrypOutCount;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002bee:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bf8:	d022      	beq.n	8002c40 <CRYP_AESCCM_Process+0x432>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bfa:	f7fe fda7 	bl	800174c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d302      	bcc.n	8002c10 <CRYP_AESCCM_Process+0x402>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d117      	bne.n	8002c40 <CRYP_AESCCM_Process+0x432>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c24:	f043 0210 	orr.w	r2, r3, #16
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	651a      	str	r2, [r3, #80]	@ 0x50
        hcryp->State = HAL_CRYP_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0e1      	b.n	8002e04 <CRYP_AESCCM_Process+0x5f6>
  while ((hcryp->CrypInCount < wordsize) && (outcount < wordsize))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d905      	bls.n	8002c5c <CRYP_AESCCM_Process+0x44e>
 8002c50:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002c54:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d8c2      	bhi.n	8002be2 <CRYP_AESCCM_Process+0x3d4>
      }
    }
  }

  if ((hcryp->Size % 16U) != 0U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80cb 	beq.w	8002e02 <CRYP_AESCCM_Process+0x5f4>
  {
#if !defined (CRYP_VER_2_2)
    if (hcryp->Version >= REV_ID_B)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c74:	f0c0 80c1 	bcc.w	8002dfa <CRYP_AESCCM_Process+0x5ec>
#endif /*End of not defined CRYP_VER_2_2*/
    {
      /* Compute the number of padding bytes in last block of payload */
      npblb = ((((uint32_t)(hcryp->Size) / 16U) + 1U) * 16U) - (uint32_t)(hcryp->Size);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c

      if ((hcryp->Instance->CR & CRYP_CR_ALGODIR) == CRYP_OPERATINGMODE_DECRYPT)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d11a      	bne.n	8002cd0 <CRYP_AESCCM_Process+0x4c2>
      {
        /* Disable the CRYP */
        __HAL_CRYP_DISABLE(hcryp);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ca8:	601a      	str	r2, [r3, #0]

        /* Set Npblb in case of AES CCM payload decryption to get right tag  */
        MODIFY_REG(hcryp->Instance->CR, CRYP_CR_NPBLB, npblb << 20);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002cb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cb6:	051a      	lsls	r2, r3, #20
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Enable CRYP to start the final phase */
        __HAL_CRYP_ENABLE(hcryp);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cce:	601a      	str	r2, [r3, #0]
      }

      /* Number of valid words (lastwordsize) in last block */
      if ((npblb % 4U) == 0U)
 8002cd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <CRYP_AESCCM_Process+0x4da>
      {
        lastwordsize = (16U - npblb) / 4U;
 8002cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cdc:	f1c3 0310 	rsb	r3, r3, #16
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ce6:	e006      	b.n	8002cf6 <CRYP_AESCCM_Process+0x4e8>
      }
      else
      {
        lastwordsize = ((16U - npblb) / 4U) + 1U;
 8002ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cea:	f1c3 0310 	rsb	r3, r3, #16
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      }

      /* Write the last input block in the IN FIFO */
      for (index = 0U; index < lastwordsize; index ++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002cfa:	e014      	b.n	8002d26 <CRYP_AESCCM_Process+0x518>
      {
        hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	441a      	add	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	609a      	str	r2, [r3, #8]
        hcryp->CrypInCount++;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	875a      	strh	r2, [r3, #58]	@ 0x3a
      for (index = 0U; index < lastwordsize; index ++)
 8002d20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d22:	3301      	adds	r3, #1
 8002d24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d26:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002d28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d3e5      	bcc.n	8002cfc <CRYP_AESCCM_Process+0x4ee>
      }

      /* Pad the data with zeros to have a complete block */
      while (index < 4U)
 8002d30:	e006      	b.n	8002d40 <CRYP_AESCCM_Process+0x532>
      {
        hcryp->Instance->DIN  = 0U;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
        index++;
 8002d3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      while (index < 4U)
 8002d40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d9f5      	bls.n	8002d32 <CRYP_AESCCM_Process+0x524>
      }

      /* Wait for OFNE flag to be raised */
      if (CRYP_WaitOnOFNEFlag(hcryp, Timeout) != HAL_OK)
 8002d46:	6839      	ldr	r1, [r7, #0]
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 ff13 	bl	8003b74 <CRYP_WaitOnOFNEFlag>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d018      	beq.n	8002d86 <CRYP_AESCCM_Process+0x578>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d62:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d68:	f043 0210 	orr.w	r2, r3, #16
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	651a      	str	r2, [r3, #80]	@ 0x50
        hcryp->State = HAL_CRYP_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        /* Process Unlocked */
        __HAL_UNLOCK(hcryp);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        hcryp->ErrorCallback(hcryp);
#else
        /*Call legacy weak error callback*/
        HAL_CRYP_ErrorCallback(hcryp);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff f825 	bl	8001dd0 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
      }

      /*Read the output block from the output FIFO */
      if ((hcryp->Instance->SR & CRYP_FLAG_OFNE) != 0x0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d036      	beq.n	8002e02 <CRYP_AESCCM_Process+0x5f4>
      {
        for (index = 0U; index < 4U; index++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d98:	e00b      	b.n	8002db2 <CRYP_AESCCM_Process+0x5a4>
        {
          /* Read the output block from the output FIFO and put them in temporary buffer
          then get CrypOutBuff from temporary buffer */
          temp[index] = hcryp->Instance->DOUT;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	3388      	adds	r3, #136	@ 0x88
 8002da6:	443b      	add	r3, r7
 8002da8:	f843 2c7c 	str.w	r2, [r3, #-124]
        for (index = 0U; index < 4U; index++)
 8002dac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dae:	3301      	adds	r3, #1
 8002db0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002db2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d9f0      	bls.n	8002d9a <CRYP_AESCCM_Process+0x58c>
        }
        for (index = 0; index < lastwordsize; index++)
 8002db8:	2300      	movs	r3, #0
 8002dba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002dbc:	e017      	b.n	8002dee <CRYP_AESCCM_Process+0x5e0>
        {
          *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[index];
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	441a      	add	r2, r3
 8002dcc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	3388      	adds	r3, #136	@ 0x88
 8002dd2:	443b      	add	r3, r7
 8002dd4:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002dd8:	6013      	str	r3, [r2, #0]
          hcryp->CrypOutCount++;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	879a      	strh	r2, [r3, #60]	@ 0x3c
        for (index = 0; index < lastwordsize; index++)
 8002de8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002dea:	3301      	adds	r3, #1
 8002dec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002dee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002df0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d3e2      	bcc.n	8002dbe <CRYP_AESCCM_Process+0x5b0>
 8002df8:	e003      	b.n	8002e02 <CRYP_AESCCM_Process+0x5f4>
    else /* No NPBLB, Workaround to be used */
    {
      /* CRYP Workaround :  CRYP1 generates correct TAG  during CCM decryption only when ciphertext
      blocks size is multiple of 128 bits. If lthe size of the last block of payload is inferior to 128 bits,
      when CCM decryption is selected, then the TAG message will be wrong.*/
      CRYP_Workaround(hcryp, Timeout);
 8002dfa:	6839      	ldr	r1, [r7, #0]
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f9bf 	bl	8003180 <CRYP_Workaround>
    }
#endif /*End of not defined CRYP_VER_2_2*/
  }

  /* Return function status */
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3788      	adds	r7, #136	@ 0x88
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout: Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	b08b      	sub	sp, #44	@ 0x2c
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  uint32_t mask[4] = {0x0U, 0x0FFU, 0x0FFFFU, 0x0FFFFFFU};
 8002e16:	4b8e      	ldr	r3, [pc, #568]	@ (8003050 <CRYP_GCMCCM_SetHeaderPhase+0x244>)
 8002e18:	f107 040c 	add.w	r4, r7, #12
 8002e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /***************************** Header phase for GCM/GMAC or CCM *********************************/


  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <CRYP_GCMCCM_SetHeaderPhase+0x28>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	623b      	str	r3, [r7, #32]
 8002e32:	e002      	b.n	8002e3a <CRYP_GCMCCM_SetHeaderPhase+0x2e>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	623b      	str	r3, [r7, #32]
  }

  if ((size_in_bytes != 0U))
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 819a 	beq.w	8003176 <CRYP_GCMCCM_SetHeaderPhase+0x36a>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e60:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e70:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d172      	bne.n	8002f62 <CRYP_GCMCCM_SetHeaderPhase+0x156>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e80:	e069      	b.n	8002f56 <CRYP_GCMCCM_SetHeaderPhase+0x14a>

      {
        hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	441a      	add	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	871a      	strh	r2, [r3, #56]	@ 0x38
        hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	441a      	add	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	871a      	strh	r2, [r3, #56]	@ 0x38
        hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	441a      	add	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	871a      	strh	r2, [r3, #56]	@ 0x38
        hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	441a      	add	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	871a      	strh	r2, [r3, #56]	@ 0x38

        /* Wait for IFEM to be raised */
        if (CRYP_WaitOnIFEMFlag(hcryp, Timeout) != HAL_OK)
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fde1 	bl	8003adc <CRYP_WaitOnIFEMFlag>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d017      	beq.n	8002f50 <CRYP_GCMCCM_SetHeaderPhase+0x144>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f2e:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	651a      	str	r2, [r3, #80]	@ 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
          return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e113      	b.n	8003178 <CRYP_GCMCCM_SetHeaderPhase+0x36c>
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	3304      	adds	r3, #4
 8002f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d390      	bcc.n	8002e82 <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8002f60:	e0ea      	b.n	8003138 <CRYP_GCMCCM_SetHeaderPhase+0x32c>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8002f62:	2300      	movs	r3, #0
 8002f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f66:	e069      	b.n	800303c <CRYP_GCMCCM_SetHeaderPhase+0x230>
      {
        hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	441a      	add	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	871a      	strh	r2, [r3, #56]	@ 0x38
        hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	441a      	add	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3301      	adds	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	871a      	strh	r2, [r3, #56]	@ 0x38
        hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699a      	ldr	r2, [r3, #24]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	441a      	add	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3301      	adds	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	871a      	strh	r2, [r3, #56]	@ 0x38
        hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699a      	ldr	r2, [r3, #24]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	441a      	add	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	871a      	strh	r2, [r3, #56]	@ 0x38

        /* Wait for IFEM to be raised */
        if (CRYP_WaitOnIFEMFlag(hcryp, Timeout) != HAL_OK)
 8002ff8:	6839      	ldr	r1, [r7, #0]
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fd6e 	bl	8003adc <CRYP_WaitOnIFEMFlag>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d017      	beq.n	8003036 <CRYP_GCMCCM_SetHeaderPhase+0x22a>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003014:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800301a:	f043 0210 	orr.w	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	651a      	str	r2, [r3, #80]	@ 0x50
          hcryp->State = HAL_CRYP_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0a0      	b.n	8003178 <CRYP_GCMCCM_SetHeaderPhase+0x36c>
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	3304      	adds	r3, #4
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003044:	429a      	cmp	r2, r3
 8003046:	d38f      	bcc.n	8002f68 <CRYP_GCMCCM_SetHeaderPhase+0x15c>
        }
      }
      /*  Last block optionally pad the data with zeros*/
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
 800304c:	e017      	b.n	800307e <CRYP_GCMCCM_SetHeaderPhase+0x272>
 800304e:	bf00      	nop
 8003050:	0800c590 	.word	0x0800c590
      {
        hcryp->Instance->DIN = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699a      	ldr	r2, [r3, #24]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800305c:	b29b      	uxth	r3, r3
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	441a      	add	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800306e:	b29b      	uxth	r3, r3
 8003070:	3301      	adds	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	871a      	strh	r2, [r3, #56]	@ 0x38
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	3301      	adds	r3, #1
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003088:	429a      	cmp	r2, r3
 800308a:	d3e3      	bcc.n	8003054 <CRYP_GCMCCM_SetHeaderPhase+0x248>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <CRYP_GCMCCM_SetHeaderPhase+0x2a2>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8003096:	e006      	b.n	80030a6 <CRYP_GCMCCM_SetHeaderPhase+0x29a>
        {
          hcryp->Instance->DIN = 0x0U;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
          loopcounter++;
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	3301      	adds	r3, #1
 80030a4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (loopcounter < 4U)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d9f5      	bls.n	8003098 <CRYP_GCMCCM_SetHeaderPhase+0x28c>
 80030ac:	e025      	b.n	80030fa <CRYP_GCMCCM_SetHeaderPhase+0x2ee>
        }
      }
      else
      {
        /* Enter last bytes, padded with zeroes */
        tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	61fb      	str	r3, [r7, #28]
        tmp &= mask[size_in_bytes % 4U];
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	3328      	adds	r3, #40	@ 0x28
 80030ca:	443b      	add	r3, r7
 80030cc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61fb      	str	r3, [r7, #28]
        hcryp->Instance->DIN = tmp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	609a      	str	r2, [r3, #8]
        loopcounter++;
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	3301      	adds	r3, #1
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 80030e4:	e006      	b.n	80030f4 <CRYP_GCMCCM_SetHeaderPhase+0x2e8>
        {
          hcryp->Instance->DIN = 0x0U;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
          loopcounter++;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	3301      	adds	r3, #1
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
        while (loopcounter < 4U)
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d9f5      	bls.n	80030e6 <CRYP_GCMCCM_SetHeaderPhase+0x2da>
        }
      }
      /* Wait for CCF IFEM to be raised */
      if (CRYP_WaitOnIFEMFlag(hcryp, Timeout) != HAL_OK)
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fced 	bl	8003adc <CRYP_WaitOnIFEMFlag>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d017      	beq.n	8003138 <CRYP_GCMCCM_SetHeaderPhase+0x32c>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003116:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800311c:	f043 0210 	orr.w	r2, r3, #16
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	651a      	str	r2, [r3, #80]	@ 0x50
        hcryp->State = HAL_CRYP_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e01f      	b.n	8003178 <CRYP_GCMCCM_SetHeaderPhase+0x36c>
      }
    }
    /* Wait until the complete message has been processed */
    if (CRYP_WaitOnBUSYFlag(hcryp, Timeout) != HAL_OK)
 8003138:	6839      	ldr	r1, [r7, #0]
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fcf4 	bl	8003b28 <CRYP_WaitOnBUSYFlag>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d017      	beq.n	8003176 <CRYP_GCMCCM_SetHeaderPhase+0x36a>
    {
      /* Disable the CRYP peripheral clock */
      __HAL_CRYP_DISABLE(hcryp);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003154:	601a      	str	r2, [r3, #0]

      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800315a:	f043 0210 	orr.w	r2, r3, #16
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	651a      	str	r2, [r3, #80]	@ 0x50
      hcryp->State = HAL_CRYP_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <CRYP_GCMCCM_SetHeaderPhase+0x36c>
    }
  }
  /* Return function status */
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	372c      	adds	r7, #44	@ 0x2c
 800317c:	46bd      	mov	sp, r7
 800317e:	bd90      	pop	{r4, r7, pc}

08003180 <CRYP_Workaround>:
  *         the configuration information for CRYP module
  * @param  Timeout: Timeout value
  * @retval None
  */
static void CRYP_Workaround(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b0a2      	sub	sp, #136	@ 0x88
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t  iv1temp;
  uint32_t  temp[4] = {0};
 800318a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	60da      	str	r2, [r3, #12]
  uint32_t  temp2[4] = {0};
 8003198:	f107 031c 	add.w	r3, r7, #28
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	60da      	str	r2, [r3, #12]
  uint32_t intermediate_data[4] = {0};
 80031a6:	f107 030c 	add.w	r3, r7, #12
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	605a      	str	r2, [r3, #4]
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	60da      	str	r2, [r3, #12]
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t npblb;

  /* Compute the number of padding bytes in last block of payload */
  npblb = ((((uint32_t)(hcryp->Size) / 16U) + 1U) * 16U) - (uint32_t)(hcryp->Size);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	8fd2      	ldrh	r2, [r2, #62]	@ 0x3e
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	67fb      	str	r3, [r7, #124]	@ 0x7c

  /* Number of valid words (lastwordsize) in last block */
  if ((npblb % 4U) == 0U)
 80031c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <CRYP_Workaround+0x60>
  {
    lastwordsize = (16U - npblb) / 4U;
 80031d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031d4:	f1c3 0310 	rsb	r3, r3, #16
 80031d8:	089b      	lsrs	r3, r3, #2
 80031da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031de:	e006      	b.n	80031ee <CRYP_Workaround+0x6e>
  }
  else
  {
    lastwordsize = ((16U - npblb) / 4U) + 1U;
 80031e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031e2:	f1c3 0310 	rsb	r3, r3, #16
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	3301      	adds	r3, #1
 80031ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }

  /* Workaround 2, case GCM encryption */
  if (hcryp->Init.Algorithm == CRYP_AES_GCM)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031f6:	f040 82ad 	bne.w	8003754 <CRYP_Workaround+0x5d4>
  {
    if ((hcryp->Instance->CR & CRYP_CR_ALGODIR) == CRYP_OPERATINGMODE_ENCRYPT)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d120      	bne.n	800324a <CRYP_Workaround+0xca>
    {
      /*Workaround in order to properly compute authentication tags while doing
       a GCM encryption with the last block of payload size inferior to 128 bits*/
      /* Disable CRYP to start the final phase */
      __HAL_CRYP_DISABLE(hcryp);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003216:	601a      	str	r2, [r3, #0]

      /*Update CRYP_IV1R register and ALGOMODE*/
      hcryp->Instance->IV1RR = ((hcryp->Instance->CSGCMCCM7R) - 1U);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3a01      	subs	r2, #1
 8003224:	64da      	str	r2, [r3, #76]	@ 0x4c
      MODIFY_REG(hcryp->Instance->CR, CRYP_CR_ALGOMODE, CRYP_AES_CTR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4ba9      	ldr	r3, [pc, #676]	@ (80034d4 <CRYP_Workaround+0x354>)
 800322e:	4013      	ands	r3, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003238:	6013      	str	r3, [r2, #0]

      /* Enable CRYP to start the final phase */
      __HAL_CRYP_ENABLE(hcryp);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003248:	601a      	str	r2, [r3, #0]
    }

    for (index = 0; index < lastwordsize ; index ++)
 800324a:	2300      	movs	r3, #0
 800324c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003250:	e016      	b.n	8003280 <CRYP_Workaround+0x100>
    {
      /* Write the last input block in the IN FIFO */
      hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800325a:	b29b      	uxth	r3, r3
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	441a      	add	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800326c:	b29b      	uxth	r3, r3
 800326e:	3301      	adds	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	875a      	strh	r2, [r3, #58]	@ 0x3a
    for (index = 0; index < lastwordsize ; index ++)
 8003276:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800327a:	3301      	adds	r3, #1
 800327c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003280:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003284:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003288:	429a      	cmp	r2, r3
 800328a:	d3e2      	bcc.n	8003252 <CRYP_Workaround+0xd2>
    }
    while (index < 4U)
 800328c:	e008      	b.n	80032a0 <CRYP_Workaround+0x120>
    {
      /* Pad the data with zeros to have a complete block */
      hcryp->Instance->DIN  = 0U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
      index++;
 8003296:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800329a:	3301      	adds	r3, #1
 800329c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (index < 4U)
 80032a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d9f2      	bls.n	800328e <CRYP_Workaround+0x10e>
    }
    /* Wait for OFNE flag to be raised */
    if (CRYP_WaitOnOFNEFlag(hcryp, Timeout) != HAL_OK)
 80032a8:	6839      	ldr	r1, [r7, #0]
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fc62 	bl	8003b74 <CRYP_WaitOnOFNEFlag>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d018      	beq.n	80032e8 <CRYP_Workaround+0x168>
    {
      /* Disable the CRYP peripheral clock */
      __HAL_CRYP_DISABLE(hcryp);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032c4:	601a      	str	r2, [r3, #0]

      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ca:	f043 0210 	orr.w	r2, r3, #16
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	651a      	str	r2, [r3, #80]	@ 0x50
      hcryp->State = HAL_CRYP_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Process Unlocked */
      __HAL_UNLOCK(hcryp);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fe fd74 	bl	8001dd0 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }
    if ((hcryp->Instance->SR & CRYP_FLAG_OFNE) != 0x0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d02c      	beq.n	8003350 <CRYP_Workaround+0x1d0>
    {
      for (index = 0U; index < 4U; index++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032fc:	e024      	b.n	8003348 <CRYP_Workaround+0x1c8>
      {
        /* Read the output block from the output FIFO */
        intermediate_data[index] = hcryp->Instance->DOUT;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	3388      	adds	r3, #136	@ 0x88
 800330c:	443b      	add	r3, r7
 800330e:	f843 2c7c 	str.w	r2, [r3, #-124]

        /* Intermediate data buffer to be used in for the workaround*/
        *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = intermediate_data[index];
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800331a:	b29b      	uxth	r3, r3
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	441a      	add	r2, r3
 8003320:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	3388      	adds	r3, #136	@ 0x88
 8003328:	443b      	add	r3, r7
 800332a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800332e:	6013      	str	r3, [r2, #0]
        hcryp->CrypOutCount++;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8003334:	b29b      	uxth	r3, r3
 8003336:	3301      	adds	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (index = 0U; index < 4U; index++)
 800333e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003342:	3301      	adds	r3, #1
 8003344:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003348:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800334c:	2b03      	cmp	r3, #3
 800334e:	d9d6      	bls.n	80032fe <CRYP_Workaround+0x17e>
      }
    }

    if ((hcryp->Instance->CR & CRYP_CR_ALGODIR) == CRYP_OPERATINGMODE_ENCRYPT)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 83b2 	bne.w	8003ac4 <CRYP_Workaround+0x944>
    {
      /*workaround in order to properly compute authentication tags while doing
      a GCM encryption with the last block of payload size inferior to 128 bits*/
      /* Change the AES mode to GCM mode and Select Final phase */
      /* configured  CHMOD GCM   */
      MODIFY_REG(hcryp->Instance->CR, CRYP_CR_ALGOMODE, CRYP_AES_GCM);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b5b      	ldr	r3, [pc, #364]	@ (80034d4 <CRYP_Workaround+0x354>)
 8003368:	4013      	ands	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6812      	ldr	r2, [r2, #0]
 800336e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003372:	6013      	str	r3, [r2, #0]

      /* configured  final phase  */
      MODIFY_REG(hcryp->Instance->CR, CRYP_CR_GCM_CCMPH, CRYP_PHASE_FINAL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8003382:	601a      	str	r2, [r3, #0]

      if ((hcryp->Instance->CR & CRYP_CR_DATATYPE) == CRYP_NO_SWAP)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d146      	bne.n	8003420 <CRYP_Workaround+0x2a0>
      {
        if ((npblb % 4U) == 1U)
 8003392:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d111      	bne.n	80033c0 <CRYP_Workaround+0x240>
        {
          intermediate_data[lastwordsize - 1U] &= 0xFFFFFF00U;
 800339c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033a0:	3b01      	subs	r3, #1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	3388      	adds	r3, #136	@ 0x88
 80033a6:	443b      	add	r3, r7
 80033a8:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 80033ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033b0:	3b01      	subs	r3, #1
 80033b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	3388      	adds	r3, #136	@ 0x88
 80033ba:	443b      	add	r3, r7
 80033bc:	f843 2c7c 	str.w	r2, [r3, #-124]
        }
        if ((npblb % 4U) == 2U)
 80033c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d111      	bne.n	80033ee <CRYP_Workaround+0x26e>
        {
          intermediate_data[lastwordsize - 1U] &= 0xFFFF0000U;
 80033ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033ce:	3b01      	subs	r3, #1
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	3388      	adds	r3, #136	@ 0x88
 80033d4:	443b      	add	r3, r7
 80033d6:	f853 1c7c 	ldr.w	r1, [r3, #-124]
 80033da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033de:	3b01      	subs	r3, #1
 80033e0:	4a3d      	ldr	r2, [pc, #244]	@ (80034d8 <CRYP_Workaround+0x358>)
 80033e2:	400a      	ands	r2, r1
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	3388      	adds	r3, #136	@ 0x88
 80033e8:	443b      	add	r3, r7
 80033ea:	f843 2c7c 	str.w	r2, [r3, #-124]
        }
        if ((npblb % 4U) == 3U)
 80033ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	f040 8146 	bne.w	8003686 <CRYP_Workaround+0x506>
        {
          intermediate_data[lastwordsize - 1U] &= 0xFF000000U;
 80033fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033fe:	3b01      	subs	r3, #1
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	3388      	adds	r3, #136	@ 0x88
 8003404:	443b      	add	r3, r7
 8003406:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 800340a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800340e:	3b01      	subs	r3, #1
 8003410:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	3388      	adds	r3, #136	@ 0x88
 8003418:	443b      	add	r3, r7
 800341a:	f843 2c7c 	str.w	r2, [r3, #-124]
 800341e:	e132      	b.n	8003686 <CRYP_Workaround+0x506>
        }
      }
      else if ((hcryp->Instance->CR & CRYP_CR_DATATYPE) == CRYP_BYTE_SWAP)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800342a:	2b80      	cmp	r3, #128	@ 0x80
 800342c:	d156      	bne.n	80034dc <CRYP_Workaround+0x35c>
      {
        if ((npblb % 4U) == 1U)
 800342e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b01      	cmp	r3, #1
 8003436:	d115      	bne.n	8003464 <CRYP_Workaround+0x2e4>
 8003438:	f06f 03ff 	mvn.w	r3, #255	@ 0xff
 800343c:	677b      	str	r3, [r7, #116]	@ 0x74
  return __builtin_bswap32(value);
 800343e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003440:	ba19      	rev	r1, r3
        {
          intermediate_data[lastwordsize - 1U] &= __REV(0xFFFFFF00U);
 8003442:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003446:	3b01      	subs	r3, #1
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	3388      	adds	r3, #136	@ 0x88
 800344c:	443b      	add	r3, r7
 800344e:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 8003452:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003456:	3b01      	subs	r3, #1
 8003458:	400a      	ands	r2, r1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	3388      	adds	r3, #136	@ 0x88
 800345e:	443b      	add	r3, r7
 8003460:	f843 2c7c 	str.w	r2, [r3, #-124]
        }
        if ((npblb % 4U) == 2U)
 8003464:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d114      	bne.n	8003498 <CRYP_Workaround+0x318>
 800346e:	4b1a      	ldr	r3, [pc, #104]	@ (80034d8 <CRYP_Workaround+0x358>)
 8003470:	673b      	str	r3, [r7, #112]	@ 0x70
 8003472:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003474:	ba19      	rev	r1, r3
        {
          intermediate_data[lastwordsize - 1U] &= __REV(0xFFFF0000U);
 8003476:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800347a:	3b01      	subs	r3, #1
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	3388      	adds	r3, #136	@ 0x88
 8003480:	443b      	add	r3, r7
 8003482:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 8003486:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800348a:	3b01      	subs	r3, #1
 800348c:	400a      	ands	r2, r1
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	3388      	adds	r3, #136	@ 0x88
 8003492:	443b      	add	r3, r7
 8003494:	f843 2c7c 	str.w	r2, [r3, #-124]
        }
        if ((npblb % 4U) == 3U)
 8003498:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b03      	cmp	r3, #3
 80034a0:	f040 80f1 	bne.w	8003686 <CRYP_Workaround+0x506>
 80034a4:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80034a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034ac:	ba19      	rev	r1, r3
        {
          intermediate_data[lastwordsize - 1U] &= __REV(0xFF000000U);
 80034ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034b2:	3b01      	subs	r3, #1
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	3388      	adds	r3, #136	@ 0x88
 80034b8:	443b      	add	r3, r7
 80034ba:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 80034be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034c2:	3b01      	subs	r3, #1
 80034c4:	400a      	ands	r2, r1
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	3388      	adds	r3, #136	@ 0x88
 80034ca:	443b      	add	r3, r7
 80034cc:	f843 2c7c 	str.w	r2, [r3, #-124]
 80034d0:	e0d9      	b.n	8003686 <CRYP_Workaround+0x506>
 80034d2:	bf00      	nop
 80034d4:	fff7ffc7 	.word	0xfff7ffc7
 80034d8:	ffff0000 	.word	0xffff0000
        }
      }
      else if ((hcryp->Instance->CR & CRYP_CR_DATATYPE) == CRYP_HALFWORD_SWAP)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80034e6:	2b40      	cmp	r3, #64	@ 0x40
 80034e8:	d174      	bne.n	80035d4 <CRYP_Workaround+0x454>
      {
        if ((npblb % 4U) == 1U)
 80034ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d121      	bne.n	8003538 <CRYP_Workaround+0x3b8>
 80034f4:	f06f 03ff 	mvn.w	r3, #255	@ 0xff
 80034f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034fa:	2310      	movs	r3, #16
 80034fc:	667b      	str	r3, [r7, #100]	@ 0x64
  op2 %= 32U;
 80034fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	667b      	str	r3, [r7, #100]	@ 0x64
  if (op2 == 0U)
 8003506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <CRYP_Workaround+0x390>
    return op1;
 800350c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800350e:	e002      	b.n	8003516 <CRYP_Workaround+0x396>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003510:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003512:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003514:	41da      	rors	r2, r3
        {
          intermediate_data[lastwordsize - 1U] &= __ROR((0xFFFFFF00U), 16);
 8003516:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800351a:	3b01      	subs	r3, #1
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	3388      	adds	r3, #136	@ 0x88
 8003520:	443b      	add	r3, r7
 8003522:	f853 1c7c 	ldr.w	r1, [r3, #-124]
 8003526:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800352a:	3b01      	subs	r3, #1
 800352c:	400a      	ands	r2, r1
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	3388      	adds	r3, #136	@ 0x88
 8003532:	443b      	add	r3, r7
 8003534:	f843 2c7c 	str.w	r2, [r3, #-124]
        }
        if ((npblb % 4U) == 2U)
 8003538:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d120      	bne.n	8003584 <CRYP_Workaround+0x404>
 8003542:	4ba3      	ldr	r3, [pc, #652]	@ (80037d0 <CRYP_Workaround+0x650>)
 8003544:	663b      	str	r3, [r7, #96]	@ 0x60
 8003546:	2310      	movs	r3, #16
 8003548:	65fb      	str	r3, [r7, #92]	@ 0x5c
  op2 %= 32U;
 800354a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (op2 == 0U)
 8003552:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <CRYP_Workaround+0x3dc>
    return op1;
 8003558:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800355a:	e002      	b.n	8003562 <CRYP_Workaround+0x3e2>
  return (op1 >> op2) | (op1 << (32U - op2));
 800355c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800355e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003560:	41da      	rors	r2, r3
        {
          intermediate_data[lastwordsize - 1U] &= __ROR((0xFFFF0000U), 16);
 8003562:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003566:	3b01      	subs	r3, #1
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	3388      	adds	r3, #136	@ 0x88
 800356c:	443b      	add	r3, r7
 800356e:	f853 1c7c 	ldr.w	r1, [r3, #-124]
 8003572:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003576:	3b01      	subs	r3, #1
 8003578:	400a      	ands	r2, r1
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	3388      	adds	r3, #136	@ 0x88
 800357e:	443b      	add	r3, r7
 8003580:	f843 2c7c 	str.w	r2, [r3, #-124]
        }
        if ((npblb % 4U) == 3U)
 8003584:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b03      	cmp	r3, #3
 800358c:	d17b      	bne.n	8003686 <CRYP_Workaround+0x506>
 800358e:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003592:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003594:	2310      	movs	r3, #16
 8003596:	657b      	str	r3, [r7, #84]	@ 0x54
  op2 %= 32U;
 8003598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359a:	f003 031f 	and.w	r3, r3, #31
 800359e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (op2 == 0U)
 80035a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <CRYP_Workaround+0x42a>
    return op1;
 80035a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035a8:	e002      	b.n	80035b0 <CRYP_Workaround+0x430>
  return (op1 >> op2) | (op1 << (32U - op2));
 80035aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ae:	41da      	rors	r2, r3
        {
          intermediate_data[lastwordsize - 1U] &= __ROR((0xFF000000U), 16);
 80035b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035b4:	3b01      	subs	r3, #1
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	3388      	adds	r3, #136	@ 0x88
 80035ba:	443b      	add	r3, r7
 80035bc:	f853 1c7c 	ldr.w	r1, [r3, #-124]
 80035c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035c4:	3b01      	subs	r3, #1
 80035c6:	400a      	ands	r2, r1
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	3388      	adds	r3, #136	@ 0x88
 80035cc:	443b      	add	r3, r7
 80035ce:	f843 2c7c 	str.w	r2, [r3, #-124]
 80035d2:	e058      	b.n	8003686 <CRYP_Workaround+0x506>
        }
      }
      else /*CRYP_BIT_SWAP*/
      {
        if ((npblb % 4U) == 1U)
 80035d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d118      	bne.n	8003610 <CRYP_Workaround+0x490>
 80035de:	f06f 03ff 	mvn.w	r3, #255	@ 0xff
 80035e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80035ec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
        {
          intermediate_data[lastwordsize - 1U] &= __RBIT(0xFFFFFF00U);
 80035ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035f2:	3b01      	subs	r3, #1
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	3388      	adds	r3, #136	@ 0x88
 80035f8:	443b      	add	r3, r7
 80035fa:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 80035fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003602:	3b01      	subs	r3, #1
 8003604:	400a      	ands	r2, r1
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	3388      	adds	r3, #136	@ 0x88
 800360a:	443b      	add	r3, r7
 800360c:	f843 2c7c 	str.w	r2, [r3, #-124]
        }
        if ((npblb % 4U) == 2U)
 8003610:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d117      	bne.n	800364a <CRYP_Workaround+0x4ca>
 800361a:	4b6d      	ldr	r3, [pc, #436]	@ (80037d0 <CRYP_Workaround+0x650>)
 800361c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	647b      	str	r3, [r7, #68]	@ 0x44
  return result;
 8003626:	6c79      	ldr	r1, [r7, #68]	@ 0x44
        {
          intermediate_data[lastwordsize - 1U] &= __RBIT(0xFFFF0000U);
 8003628:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800362c:	3b01      	subs	r3, #1
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	3388      	adds	r3, #136	@ 0x88
 8003632:	443b      	add	r3, r7
 8003634:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 8003638:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800363c:	3b01      	subs	r3, #1
 800363e:	400a      	ands	r2, r1
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	3388      	adds	r3, #136	@ 0x88
 8003644:	443b      	add	r3, r7
 8003646:	f843 2c7c 	str.w	r2, [r3, #-124]
        }
        if ((npblb % 4U) == 3U)
 800364a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b03      	cmp	r3, #3
 8003652:	d118      	bne.n	8003686 <CRYP_Workaround+0x506>
 8003654:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003658:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003662:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
        {
          intermediate_data[lastwordsize - 1U] &= __RBIT(0xFF000000U);
 8003664:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003668:	3b01      	subs	r3, #1
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	3388      	adds	r3, #136	@ 0x88
 800366e:	443b      	add	r3, r7
 8003670:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 8003674:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003678:	3b01      	subs	r3, #1
 800367a:	400a      	ands	r2, r1
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	3388      	adds	r3, #136	@ 0x88
 8003680:	443b      	add	r3, r7
 8003682:	f843 2c7c 	str.w	r2, [r3, #-124]
        }
      }

      for (index = 0U; index < lastwordsize ; index ++)
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800368c:	e00e      	b.n	80036ac <CRYP_Workaround+0x52c>
      {
        /*Write the intermediate_data in the IN FIFO */
        hcryp->Instance->DIN = intermediate_data[index];
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	3388      	adds	r3, #136	@ 0x88
 800369a:	443b      	add	r3, r7
 800369c:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80036a0:	6093      	str	r3, [r2, #8]
      for (index = 0U; index < lastwordsize ; index ++)
 80036a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036a6:	3301      	adds	r3, #1
 80036a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80036b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d3ea      	bcc.n	800368e <CRYP_Workaround+0x50e>
      }
      while (index < 4U)
 80036b8:	e008      	b.n	80036cc <CRYP_Workaround+0x54c>
      {
        /* Pad the data with zeros to have a complete block */
        hcryp->Instance->DIN  = 0x0U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
        index++;
 80036c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036c6:	3301      	adds	r3, #1
 80036c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      while (index < 4U)
 80036cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d9f2      	bls.n	80036ba <CRYP_Workaround+0x53a>
      }
      /* Wait for OFNE flag to be raised */
      if (CRYP_WaitOnOFNEFlag(hcryp, Timeout) != HAL_OK)
 80036d4:	6839      	ldr	r1, [r7, #0]
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fa4c 	bl	8003b74 <CRYP_WaitOnOFNEFlag>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d018      	beq.n	8003714 <CRYP_Workaround+0x594>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036f0:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f6:	f043 0210 	orr.w	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	651a      	str	r2, [r3, #80]	@ 0x50
        hcryp->State = HAL_CRYP_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
        /*Call registered error callback*/
        hcryp->ErrorCallback(hcryp);
#else
        /*Call legacy weak error callback*/
        HAL_CRYP_ErrorCallback(hcryp);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fe fb5e 	bl	8001dd0 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
      }

      if ((hcryp->Instance->SR & CRYP_FLAG_OFNE) != 0x0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 81d0 	beq.w	8003ac4 <CRYP_Workaround+0x944>
      {
        for (index = 0U; index < 4U; index++)
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800372a:	e00e      	b.n	800374a <CRYP_Workaround+0x5ca>
        {
          intermediate_data[index] = hcryp->Instance->DOUT;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	3388      	adds	r3, #136	@ 0x88
 800373a:	443b      	add	r3, r7
 800373c:	f843 2c7c 	str.w	r2, [r3, #-124]
        for (index = 0U; index < 4U; index++)
 8003740:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003744:	3301      	adds	r3, #1
 8003746:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800374a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800374e:	2b03      	cmp	r3, #3
 8003750:	d9ec      	bls.n	800372c <CRYP_Workaround+0x5ac>
 8003752:	e1b7      	b.n	8003ac4 <CRYP_Workaround+0x944>
  {
    /* Workaround 2, case CCM decryption, in order to properly compute
      authentication tags while doing a CCM decryption with the last block
      of payload size inferior to 128 bits*/

    if ((hcryp->Instance->CR & CRYP_CR_ALGODIR) == CRYP_OPERATINGMODE_DECRYPT)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b04      	cmp	r3, #4
 8003760:	d131      	bne.n	80037c6 <CRYP_Workaround+0x646>
    {
      iv1temp = hcryp->Instance->CSGCMCCM7R;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003768:	67bb      	str	r3, [r7, #120]	@ 0x78

      /* Disable CRYP to start the final phase */
      __HAL_CRYP_DISABLE(hcryp);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003778:	601a      	str	r2, [r3, #0]

      temp[0] =  hcryp->Instance->CSGCMCCM0R;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003780:	62fb      	str	r3, [r7, #44]	@ 0x2c
      temp[1] =  hcryp->Instance->CSGCMCCM1R;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003788:	633b      	str	r3, [r7, #48]	@ 0x30
      temp[2] =  hcryp->Instance->CSGCMCCM2R;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003790:	637b      	str	r3, [r7, #52]	@ 0x34
      temp[3] =  hcryp->Instance->CSGCMCCM3R;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003798:	63bb      	str	r3, [r7, #56]	@ 0x38

      hcryp->Instance->IV1RR = iv1temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80037a0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Configured  CHMOD CTR   */
      MODIFY_REG(hcryp->Instance->CR, CRYP_CR_ALGOMODE, CRYP_AES_CTR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <CRYP_Workaround+0x654>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80037b4:	6013      	str	r3, [r2, #0]

      /* Enable CRYP to start the final phase */
      __HAL_CRYP_ENABLE(hcryp);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037c4:	601a      	str	r2, [r3, #0]
    }
    /*  Last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037cc:	e01b      	b.n	8003806 <CRYP_Workaround+0x686>
 80037ce:	bf00      	nop
 80037d0:	ffff0000 	.word	0xffff0000
 80037d4:	fff7ffc7 	.word	0xfff7ffc7
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DIN  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3301      	adds	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	875a      	strh	r2, [r3, #58]	@ 0x3a
    for (index = 0U; index < lastwordsize; index ++)
 80037fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003800:	3301      	adds	r3, #1
 8003802:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003806:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800380a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800380e:	429a      	cmp	r2, r3
 8003810:	d3e2      	bcc.n	80037d8 <CRYP_Workaround+0x658>
    }
    while (index < 4U)
 8003812:	e008      	b.n	8003826 <CRYP_Workaround+0x6a6>
    {
      /* Pad the data with zeros to have a complete block */
      hcryp->Instance->DIN  = 0U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2200      	movs	r2, #0
 800381a:	609a      	str	r2, [r3, #8]
      index++;
 800381c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003820:	3301      	adds	r3, #1
 8003822:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (index < 4U)
 8003826:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800382a:	2b03      	cmp	r3, #3
 800382c:	d9f2      	bls.n	8003814 <CRYP_Workaround+0x694>
    }
    /* Wait for OFNE flag to be raised */
    if (CRYP_WaitOnOFNEFlag(hcryp, Timeout) != HAL_OK)
 800382e:	6839      	ldr	r1, [r7, #0]
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f99f 	bl	8003b74 <CRYP_WaitOnOFNEFlag>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d018      	beq.n	800386e <CRYP_Workaround+0x6ee>
    {
      /* Disable the CRYP peripheral clock */
      __HAL_CRYP_DISABLE(hcryp);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800384a:	601a      	str	r2, [r3, #0]

      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003850:	f043 0210 	orr.w	r2, r3, #16
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	651a      	str	r2, [r3, #80]	@ 0x50
      hcryp->State = HAL_CRYP_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

      /* Process Unlocked */
      __HAL_UNLOCK(hcryp);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7fe fab1 	bl	8001dd0 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    if ((hcryp->Instance->SR & CRYP_FLAG_OFNE) != 0x0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d02c      	beq.n	80038d6 <CRYP_Workaround+0x756>
    {
      for (index = 0U; index < 4U; index++)
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003882:	e024      	b.n	80038ce <CRYP_Workaround+0x74e>
      {
        /* Read the Output block from the Output FIFO */
        intermediate_data[index] = hcryp->Instance->DOUT;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	3388      	adds	r3, #136	@ 0x88
 8003892:	443b      	add	r3, r7
 8003894:	f843 2c7c 	str.w	r2, [r3, #-124]

        /*intermediate data buffer to be used in for the workaround*/
        *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = intermediate_data[index];
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	441a      	add	r2, r3
 80038a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	3388      	adds	r3, #136	@ 0x88
 80038ae:	443b      	add	r3, r7
 80038b0:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80038b4:	6013      	str	r3, [r2, #0]
        hcryp->CrypOutCount++;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (index = 0U; index < 4U; index++)
 80038c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038c8:	3301      	adds	r3, #1
 80038ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d9d6      	bls.n	8003884 <CRYP_Workaround+0x704>
      }
    }

    if ((hcryp->Instance->CR & CRYP_CR_ALGODIR) == CRYP_OPERATINGMODE_DECRYPT)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	f040 80ef 	bne.w	8003ac4 <CRYP_Workaround+0x944>
    {
      temp2[0] =  hcryp->Instance->CSGCMCCM0R;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ec:	61fb      	str	r3, [r7, #28]
      temp2[1] =  hcryp->Instance->CSGCMCCM1R;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f4:	623b      	str	r3, [r7, #32]
      temp2[2] =  hcryp->Instance->CSGCMCCM2R;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
      temp2[3] =  hcryp->Instance->CSGCMCCM3R;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003904:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* configured  CHMOD CCM   */
      MODIFY_REG(hcryp->Instance->CR, CRYP_CR_ALGOMODE, CRYP_AES_CCM);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4b71      	ldr	r3, [pc, #452]	@ (8003ad4 <CRYP_Workaround+0x954>)
 800390e:	4013      	ands	r3, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	f043 1308 	orr.w	r3, r3, #524296	@ 0x80008
 8003918:	6013      	str	r3, [r2, #0]

      /* configured  Header phase  */
      MODIFY_REG(hcryp->Instance->CR, CRYP_CR_GCM_CCMPH, CRYP_PHASE_HEADER);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800392c:	601a      	str	r2, [r3, #0]

      /*set to zero the bits corresponding to the padded bits*/
      for (index = lastwordsize; index < 4U; index ++)
 800392e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003932:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003936:	e00c      	b.n	8003952 <CRYP_Workaround+0x7d2>
      {
        intermediate_data[index] = 0U;
 8003938:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	3388      	adds	r3, #136	@ 0x88
 8003940:	443b      	add	r3, r7
 8003942:	2200      	movs	r2, #0
 8003944:	f843 2c7c 	str.w	r2, [r3, #-124]
      for (index = lastwordsize; index < 4U; index ++)
 8003948:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800394c:	3301      	adds	r3, #1
 800394e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003952:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003956:	2b03      	cmp	r3, #3
 8003958:	d9ee      	bls.n	8003938 <CRYP_Workaround+0x7b8>
      }

      if ((npblb % 4U) == 1U)
 800395a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d111      	bne.n	8003988 <CRYP_Workaround+0x808>
      {
        intermediate_data[lastwordsize - 1U] &= 0xFFFFFF00U;
 8003964:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003968:	3b01      	subs	r3, #1
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	3388      	adds	r3, #136	@ 0x88
 800396e:	443b      	add	r3, r7
 8003970:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 8003974:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003978:	3b01      	subs	r3, #1
 800397a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	3388      	adds	r3, #136	@ 0x88
 8003982:	443b      	add	r3, r7
 8003984:	f843 2c7c 	str.w	r2, [r3, #-124]
      }
      if ((npblb % 4U) == 2U)
 8003988:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d111      	bne.n	80039b6 <CRYP_Workaround+0x836>
      {
        intermediate_data[lastwordsize - 1U] &= 0xFFFF0000U;
 8003992:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003996:	3b01      	subs	r3, #1
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	3388      	adds	r3, #136	@ 0x88
 800399c:	443b      	add	r3, r7
 800399e:	f853 1c7c 	ldr.w	r1, [r3, #-124]
 80039a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039a6:	3b01      	subs	r3, #1
 80039a8:	4a4b      	ldr	r2, [pc, #300]	@ (8003ad8 <CRYP_Workaround+0x958>)
 80039aa:	400a      	ands	r2, r1
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	3388      	adds	r3, #136	@ 0x88
 80039b0:	443b      	add	r3, r7
 80039b2:	f843 2c7c 	str.w	r2, [r3, #-124]
      }
      if ((npblb % 4U) == 3U)
 80039b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d111      	bne.n	80039e4 <CRYP_Workaround+0x864>
      {
        intermediate_data[lastwordsize - 1U] &= 0xFF000000U;
 80039c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039c4:	3b01      	subs	r3, #1
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	3388      	adds	r3, #136	@ 0x88
 80039ca:	443b      	add	r3, r7
 80039cc:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 80039d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039d4:	3b01      	subs	r3, #1
 80039d6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	3388      	adds	r3, #136	@ 0x88
 80039de:	443b      	add	r3, r7
 80039e0:	f843 2c7c 	str.w	r2, [r3, #-124]
      }

      for (index = 0U; index < 4U ; index ++)
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039ea:	e030      	b.n	8003a4e <CRYP_Workaround+0x8ce>
      {
        intermediate_data[index] ^=  temp[index];
 80039ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	3388      	adds	r3, #136	@ 0x88
 80039f4:	443b      	add	r3, r7
 80039f6:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 80039fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	3388      	adds	r3, #136	@ 0x88
 8003a02:	443b      	add	r3, r7
 8003a04:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8003a08:	405a      	eors	r2, r3
 8003a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	3388      	adds	r3, #136	@ 0x88
 8003a12:	443b      	add	r3, r7
 8003a14:	f843 2c7c 	str.w	r2, [r3, #-124]
        intermediate_data[index] ^=  temp2[index];
 8003a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	3388      	adds	r3, #136	@ 0x88
 8003a20:	443b      	add	r3, r7
 8003a22:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 8003a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	3388      	adds	r3, #136	@ 0x88
 8003a2e:	443b      	add	r3, r7
 8003a30:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8003a34:	405a      	eors	r2, r3
 8003a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	3388      	adds	r3, #136	@ 0x88
 8003a3e:	443b      	add	r3, r7
 8003a40:	f843 2c7c 	str.w	r2, [r3, #-124]
      for (index = 0U; index < 4U ; index ++)
 8003a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d9ca      	bls.n	80039ec <CRYP_Workaround+0x86c>
      }
      for (index = 0U; index < 4U; index ++)
 8003a56:	2300      	movs	r3, #0
 8003a58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a5c:	e00e      	b.n	8003a7c <CRYP_Workaround+0x8fc>
      {
        /* Write the last Input block in the IN FIFO */
        hcryp->Instance->DIN  = intermediate_data[index] ;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	3388      	adds	r3, #136	@ 0x88
 8003a6a:	443b      	add	r3, r7
 8003a6c:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8003a70:	6093      	str	r3, [r2, #8]
      for (index = 0U; index < 4U; index ++)
 8003a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a76:	3301      	adds	r3, #1
 8003a78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d9ec      	bls.n	8003a5e <CRYP_Workaround+0x8de>
      }

      /* Wait for BUSY flag to be raised */
      if (CRYP_WaitOnBUSYFlag(hcryp, Timeout) != HAL_OK)
 8003a84:	6839      	ldr	r1, [r7, #0]
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f84e 	bl	8003b28 <CRYP_WaitOnBUSYFlag>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d018      	beq.n	8003ac4 <CRYP_Workaround+0x944>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa6:	f043 0210 	orr.w	r2, r3, #16
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	651a      	str	r2, [r3, #80]	@ 0x50
        hcryp->State = HAL_CRYP_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

        /* Process Unlocked */
        __HAL_UNLOCK(hcryp);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        hcryp->ErrorCallback(hcryp);
#else
        /*Call legacy weak error callback*/
        HAL_CRYP_ErrorCallback(hcryp);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fe f986 	bl	8001dd0 <HAL_CRYP_ErrorCallback>
      }
    }
  } /* End of CCM WKA*/

  /* Process Unlocked */
  __HAL_UNLOCK(hcryp);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8003acc:	bf00      	nop
 8003ace:	3788      	adds	r7, #136	@ 0x88
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	fff7ffc7 	.word	0xfff7ffc7
 8003ad8:	ffff0000 	.word	0xffff0000

08003adc <CRYP_WaitOnIFEMFlag>:
  *         the configuration information for CRYP module.
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnIFEMFlag(const CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003ae6:	f7fd fe31 	bl	800174c <HAL_GetTick>
 8003aea:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_IFEM))
 8003aec:	e010      	b.n	8003b10 <CRYP_WaitOnIFEMFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003af4:	d00c      	beq.n	8003b10 <CRYP_WaitOnIFEMFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003af6:	f7fd fe29 	bl	800174c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <CRYP_WaitOnIFEMFlag+0x30>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <CRYP_WaitOnIFEMFlag+0x34>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e007      	b.n	8003b20 <CRYP_WaitOnIFEMFlag+0x44>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_IFEM))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0e7      	beq.n	8003aee <CRYP_WaitOnIFEMFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <CRYP_WaitOnBUSYFlag>:
  *         the configuration information for CRYP module.
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnBUSYFlag(const CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003b32:	f7fd fe0b 	bl	800174c <HAL_GetTick>
 8003b36:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8003b38:	e010      	b.n	8003b5c <CRYP_WaitOnBUSYFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b40:	d00c      	beq.n	8003b5c <CRYP_WaitOnBUSYFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b42:	f7fd fe03 	bl	800174c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d302      	bcc.n	8003b58 <CRYP_WaitOnBUSYFlag+0x30>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <CRYP_WaitOnBUSYFlag+0x34>
      {
        return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e007      	b.n	8003b6c <CRYP_WaitOnBUSYFlag+0x44>
  while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d0e7      	beq.n	8003b3a <CRYP_WaitOnBUSYFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <CRYP_WaitOnOFNEFlag>:
  *         the configuration information for CRYP module.
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnOFNEFlag(const CRYP_HandleTypeDef  *hcryp, uint32_t Timeout)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003b7e:	f7fd fde5 	bl	800174c <HAL_GetTick>
 8003b82:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_OFNE))
 8003b84:	e010      	b.n	8003ba8 <CRYP_WaitOnOFNEFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b8c:	d00c      	beq.n	8003ba8 <CRYP_WaitOnOFNEFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fd fddd 	bl	800174c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <CRYP_WaitOnOFNEFlag+0x30>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <CRYP_WaitOnOFNEFlag+0x34>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e007      	b.n	8003bb8 <CRYP_WaitOnOFNEFlag+0x44>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_OFNE))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0e7      	beq.n	8003b86 <CRYP_WaitOnOFNEFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b089      	sub	sp, #36	@ 0x24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003bce:	4b89      	ldr	r3, [pc, #548]	@ (8003df4 <HAL_GPIO_Init+0x234>)
 8003bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bd2:	e194      	b.n	8003efe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2101      	movs	r1, #1
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	4013      	ands	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8186 	beq.w	8003ef8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d005      	beq.n	8003c04 <HAL_GPIO_Init+0x44>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d130      	bne.n	8003c66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	2203      	movs	r2, #3
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4013      	ands	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	f003 0201 	and.w	r2, r3, #1
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d017      	beq.n	8003ca2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d123      	bne.n	8003cf6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	08da      	lsrs	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3208      	adds	r2, #8
 8003cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	220f      	movs	r2, #15
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	08da      	lsrs	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3208      	adds	r2, #8
 8003cf0:	69b9      	ldr	r1, [r7, #24]
 8003cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	2203      	movs	r2, #3
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 0203 	and.w	r2, r3, #3
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80e0 	beq.w	8003ef8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d38:	4b2f      	ldr	r3, [pc, #188]	@ (8003df8 <HAL_GPIO_Init+0x238>)
 8003d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8003df8 <HAL_GPIO_Init+0x238>)
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003d48:	4b2b      	ldr	r3, [pc, #172]	@ (8003df8 <HAL_GPIO_Init+0x238>)
 8003d4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d56:	4a29      	ldr	r2, [pc, #164]	@ (8003dfc <HAL_GPIO_Init+0x23c>)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	089b      	lsrs	r3, r3, #2
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	220f      	movs	r2, #15
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a20      	ldr	r2, [pc, #128]	@ (8003e00 <HAL_GPIO_Init+0x240>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d052      	beq.n	8003e28 <HAL_GPIO_Init+0x268>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a1f      	ldr	r2, [pc, #124]	@ (8003e04 <HAL_GPIO_Init+0x244>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d031      	beq.n	8003dee <HAL_GPIO_Init+0x22e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <HAL_GPIO_Init+0x248>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d02b      	beq.n	8003dea <HAL_GPIO_Init+0x22a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <HAL_GPIO_Init+0x24c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d025      	beq.n	8003de6 <HAL_GPIO_Init+0x226>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e10 <HAL_GPIO_Init+0x250>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d01f      	beq.n	8003de2 <HAL_GPIO_Init+0x222>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <HAL_GPIO_Init+0x254>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d019      	beq.n	8003dde <HAL_GPIO_Init+0x21e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1a      	ldr	r2, [pc, #104]	@ (8003e18 <HAL_GPIO_Init+0x258>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d013      	beq.n	8003dda <HAL_GPIO_Init+0x21a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a19      	ldr	r2, [pc, #100]	@ (8003e1c <HAL_GPIO_Init+0x25c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00d      	beq.n	8003dd6 <HAL_GPIO_Init+0x216>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a18      	ldr	r2, [pc, #96]	@ (8003e20 <HAL_GPIO_Init+0x260>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d007      	beq.n	8003dd2 <HAL_GPIO_Init+0x212>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a17      	ldr	r2, [pc, #92]	@ (8003e24 <HAL_GPIO_Init+0x264>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d101      	bne.n	8003dce <HAL_GPIO_Init+0x20e>
 8003dca:	2309      	movs	r3, #9
 8003dcc:	e02d      	b.n	8003e2a <HAL_GPIO_Init+0x26a>
 8003dce:	230a      	movs	r3, #10
 8003dd0:	e02b      	b.n	8003e2a <HAL_GPIO_Init+0x26a>
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	e029      	b.n	8003e2a <HAL_GPIO_Init+0x26a>
 8003dd6:	2307      	movs	r3, #7
 8003dd8:	e027      	b.n	8003e2a <HAL_GPIO_Init+0x26a>
 8003dda:	2306      	movs	r3, #6
 8003ddc:	e025      	b.n	8003e2a <HAL_GPIO_Init+0x26a>
 8003dde:	2305      	movs	r3, #5
 8003de0:	e023      	b.n	8003e2a <HAL_GPIO_Init+0x26a>
 8003de2:	2304      	movs	r3, #4
 8003de4:	e021      	b.n	8003e2a <HAL_GPIO_Init+0x26a>
 8003de6:	2303      	movs	r3, #3
 8003de8:	e01f      	b.n	8003e2a <HAL_GPIO_Init+0x26a>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e01d      	b.n	8003e2a <HAL_GPIO_Init+0x26a>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e01b      	b.n	8003e2a <HAL_GPIO_Init+0x26a>
 8003df2:	bf00      	nop
 8003df4:	58000080 	.word	0x58000080
 8003df8:	58024400 	.word	0x58024400
 8003dfc:	58000400 	.word	0x58000400
 8003e00:	58020000 	.word	0x58020000
 8003e04:	58020400 	.word	0x58020400
 8003e08:	58020800 	.word	0x58020800
 8003e0c:	58020c00 	.word	0x58020c00
 8003e10:	58021000 	.word	0x58021000
 8003e14:	58021400 	.word	0x58021400
 8003e18:	58021800 	.word	0x58021800
 8003e1c:	58021c00 	.word	0x58021c00
 8003e20:	58022000 	.word	0x58022000
 8003e24:	58022400 	.word	0x58022400
 8003e28:	2300      	movs	r3, #0
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	f002 0203 	and.w	r2, r2, #3
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	4093      	lsls	r3, r2
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e3a:	4938      	ldr	r1, [pc, #224]	@ (8003f1c <HAL_GPIO_Init+0x35c>)
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	3302      	adds	r3, #2
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4013      	ands	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	3301      	adds	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f47f ae63 	bne.w	8003bd4 <HAL_GPIO_Init+0x14>
  }
}
 8003f0e:	bf00      	nop
 8003f10:	bf00      	nop
 8003f12:	3724      	adds	r7, #36	@ 0x24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	58000400 	.word	0x58000400

08003f20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f2e:	4b75      	ldr	r3, [pc, #468]	@ (8004104 <HAL_GPIO_DeInit+0x1e4>)
 8003f30:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8003f32:	e0d9      	b.n	80040e8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8003f34:	2201      	movs	r2, #1
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80cc 	beq.w	80040e2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f4a:	4a6f      	ldr	r2, [pc, #444]	@ (8004108 <HAL_GPIO_DeInit+0x1e8>)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3302      	adds	r3, #2
 8003f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f56:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a67      	ldr	r2, [pc, #412]	@ (800410c <HAL_GPIO_DeInit+0x1ec>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d037      	beq.n	8003fe4 <HAL_GPIO_DeInit+0xc4>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a66      	ldr	r2, [pc, #408]	@ (8004110 <HAL_GPIO_DeInit+0x1f0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d031      	beq.n	8003fe0 <HAL_GPIO_DeInit+0xc0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a65      	ldr	r2, [pc, #404]	@ (8004114 <HAL_GPIO_DeInit+0x1f4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d02b      	beq.n	8003fdc <HAL_GPIO_DeInit+0xbc>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a64      	ldr	r2, [pc, #400]	@ (8004118 <HAL_GPIO_DeInit+0x1f8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d025      	beq.n	8003fd8 <HAL_GPIO_DeInit+0xb8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a63      	ldr	r2, [pc, #396]	@ (800411c <HAL_GPIO_DeInit+0x1fc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d01f      	beq.n	8003fd4 <HAL_GPIO_DeInit+0xb4>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a62      	ldr	r2, [pc, #392]	@ (8004120 <HAL_GPIO_DeInit+0x200>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d019      	beq.n	8003fd0 <HAL_GPIO_DeInit+0xb0>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a61      	ldr	r2, [pc, #388]	@ (8004124 <HAL_GPIO_DeInit+0x204>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d013      	beq.n	8003fcc <HAL_GPIO_DeInit+0xac>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a60      	ldr	r2, [pc, #384]	@ (8004128 <HAL_GPIO_DeInit+0x208>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00d      	beq.n	8003fc8 <HAL_GPIO_DeInit+0xa8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a5f      	ldr	r2, [pc, #380]	@ (800412c <HAL_GPIO_DeInit+0x20c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <HAL_GPIO_DeInit+0xa4>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8004130 <HAL_GPIO_DeInit+0x210>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d101      	bne.n	8003fc0 <HAL_GPIO_DeInit+0xa0>
 8003fbc:	2309      	movs	r3, #9
 8003fbe:	e012      	b.n	8003fe6 <HAL_GPIO_DeInit+0xc6>
 8003fc0:	230a      	movs	r3, #10
 8003fc2:	e010      	b.n	8003fe6 <HAL_GPIO_DeInit+0xc6>
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	e00e      	b.n	8003fe6 <HAL_GPIO_DeInit+0xc6>
 8003fc8:	2307      	movs	r3, #7
 8003fca:	e00c      	b.n	8003fe6 <HAL_GPIO_DeInit+0xc6>
 8003fcc:	2306      	movs	r3, #6
 8003fce:	e00a      	b.n	8003fe6 <HAL_GPIO_DeInit+0xc6>
 8003fd0:	2305      	movs	r3, #5
 8003fd2:	e008      	b.n	8003fe6 <HAL_GPIO_DeInit+0xc6>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	e006      	b.n	8003fe6 <HAL_GPIO_DeInit+0xc6>
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e004      	b.n	8003fe6 <HAL_GPIO_DeInit+0xc6>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e002      	b.n	8003fe6 <HAL_GPIO_DeInit+0xc6>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_GPIO_DeInit+0xc6>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	f002 0203 	and.w	r2, r2, #3
 8003fec:	0092      	lsls	r2, r2, #2
 8003fee:	4093      	lsls	r3, r2
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d136      	bne.n	8004064 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	401a      	ands	r2, r3
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	43db      	mvns	r3, r3
 800400c:	401a      	ands	r2, r3
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	43db      	mvns	r3, r3
 800401c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004020:	4013      	ands	r3, r2
 8004022:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	43db      	mvns	r3, r3
 800402e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004032:	4013      	ands	r3, r2
 8004034:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	220f      	movs	r2, #15
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004046:	4a30      	ldr	r2, [pc, #192]	@ (8004108 <HAL_GPIO_DeInit+0x1e8>)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	089b      	lsrs	r3, r3, #2
 800404c:	3302      	adds	r3, #2
 800404e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	43da      	mvns	r2, r3
 8004056:	482c      	ldr	r0, [pc, #176]	@ (8004108 <HAL_GPIO_DeInit+0x1e8>)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	400a      	ands	r2, r1
 800405e:	3302      	adds	r3, #2
 8004060:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2103      	movs	r1, #3
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	08da      	lsrs	r2, r3, #3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3208      	adds	r2, #8
 8004080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	220f      	movs	r2, #15
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	08d2      	lsrs	r2, r2, #3
 8004098:	4019      	ands	r1, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3208      	adds	r2, #8
 800409e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	2103      	movs	r1, #3
 80040ac:	fa01 f303 	lsl.w	r3, r1, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	401a      	ands	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	2101      	movs	r1, #1
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	fa01 f303 	lsl.w	r3, r1, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	401a      	ands	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	2103      	movs	r1, #3
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	401a      	ands	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	3301      	adds	r3, #1
 80040e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	fa22 f303 	lsr.w	r3, r2, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f47f af1f 	bne.w	8003f34 <HAL_GPIO_DeInit+0x14>
  }
}
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	58000080 	.word	0x58000080
 8004108:	58000400 	.word	0x58000400
 800410c:	58020000 	.word	0x58020000
 8004110:	58020400 	.word	0x58020400
 8004114:	58020800 	.word	0x58020800
 8004118:	58020c00 	.word	0x58020c00
 800411c:	58021000 	.word	0x58021000
 8004120:	58021400 	.word	0x58021400
 8004124:	58021800 	.word	0x58021800
 8004128:	58021c00 	.word	0x58021c00
 800412c:	58022000 	.word	0x58022000
 8004130:	58022400 	.word	0x58022400

08004134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	807b      	strh	r3, [r7, #2]
 8004140:	4613      	mov	r3, r2
 8004142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004144:	787b      	ldrb	r3, [r7, #1]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800414a:	887a      	ldrh	r2, [r7, #2]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004150:	e003      	b.n	800415a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004152:	887b      	ldrh	r3, [r7, #2]
 8004154:	041a      	lsls	r2, r3, #16
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	619a      	str	r2, [r3, #24]
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004170:	4a08      	ldr	r2, [pc, #32]	@ (8004194 <HAL_HSEM_FastTake+0x2c>)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3320      	adds	r3, #32
 8004176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417a:	4a07      	ldr	r2, [pc, #28]	@ (8004198 <HAL_HSEM_FastTake+0x30>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	e000      	b.n	8004186 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	58026400 	.word	0x58026400
 8004198:	80000300 	.word	0x80000300

0800419c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80041a6:	4906      	ldr	r1, [pc, #24]	@ (80041c0 <HAL_HSEM_Release+0x24>)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	58026400 	.word	0x58026400

080041c4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 80041cc:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <HAL_HSEM_ActivateNotification+0x20>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4904      	ldr	r1, [pc, #16]	@ (80041e4 <HAL_HSEM_ActivateNotification+0x20>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	600b      	str	r3, [r1, #0]
#endif
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	58026500 	.word	0x58026500

080041e8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80041ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004218 <HAL_HSEM_IRQHandler+0x30>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80041f4:	4b08      	ldr	r3, [pc, #32]	@ (8004218 <HAL_HSEM_IRQHandler+0x30>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	43db      	mvns	r3, r3
 80041fc:	4906      	ldr	r1, [pc, #24]	@ (8004218 <HAL_HSEM_IRQHandler+0x30>)
 80041fe:	4013      	ands	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004202:	4a05      	ldr	r2, [pc, #20]	@ (8004218 <HAL_HSEM_IRQHandler+0x30>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f006 fd43 	bl	800ac94 <HAL_HSEM_FreeCallback>
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	58026500 	.word	0x58026500

0800421c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004224:	4b29      	ldr	r3, [pc, #164]	@ (80042cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	2b06      	cmp	r3, #6
 800422e:	d00a      	beq.n	8004246 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004230:	4b26      	ldr	r3, [pc, #152]	@ (80042cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d001      	beq.n	8004242 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e040      	b.n	80042c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e03e      	b.n	80042c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004246:	4b21      	ldr	r3, [pc, #132]	@ (80042cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800424e:	491f      	ldr	r1, [pc, #124]	@ (80042cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4313      	orrs	r3, r2
 8004254:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004256:	f7fd fa79 	bl	800174c <HAL_GetTick>
 800425a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800425c:	e009      	b.n	8004272 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800425e:	f7fd fa75 	bl	800174c <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800426c:	d901      	bls.n	8004272 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e028      	b.n	80042c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004272:	4b16      	ldr	r3, [pc, #88]	@ (80042cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800427a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427e:	d1ee      	bne.n	800425e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b1e      	cmp	r3, #30
 8004284:	d008      	beq.n	8004298 <HAL_PWREx_ConfigSupply+0x7c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b2e      	cmp	r3, #46	@ 0x2e
 800428a:	d005      	beq.n	8004298 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b1d      	cmp	r3, #29
 8004290:	d002      	beq.n	8004298 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b2d      	cmp	r3, #45	@ 0x2d
 8004296:	d114      	bne.n	80042c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004298:	f7fd fa58 	bl	800174c <HAL_GetTick>
 800429c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800429e:	e009      	b.n	80042b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042a0:	f7fd fa54 	bl	800174c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042ae:	d901      	bls.n	80042b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e007      	b.n	80042c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80042b4:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <HAL_PWREx_ConfigSupply+0xb0>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c0:	d1ee      	bne.n	80042a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	58024800 	.word	0x58024800

080042d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08c      	sub	sp, #48	@ 0x30
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	f000 bc48 	b.w	8004b74 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8088 	beq.w	8004402 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f2:	4b99      	ldr	r3, [pc, #612]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042fc:	4b96      	ldr	r3, [pc, #600]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 80042fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004300:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004304:	2b10      	cmp	r3, #16
 8004306:	d007      	beq.n	8004318 <HAL_RCC_OscConfig+0x48>
 8004308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800430a:	2b18      	cmp	r3, #24
 800430c:	d111      	bne.n	8004332 <HAL_RCC_OscConfig+0x62>
 800430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d10c      	bne.n	8004332 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004318:	4b8f      	ldr	r3, [pc, #572]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d06d      	beq.n	8004400 <HAL_RCC_OscConfig+0x130>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d169      	bne.n	8004400 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f000 bc21 	b.w	8004b74 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800433a:	d106      	bne.n	800434a <HAL_RCC_OscConfig+0x7a>
 800433c:	4b86      	ldr	r3, [pc, #536]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a85      	ldr	r2, [pc, #532]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	e02e      	b.n	80043a8 <HAL_RCC_OscConfig+0xd8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10c      	bne.n	800436c <HAL_RCC_OscConfig+0x9c>
 8004352:	4b81      	ldr	r3, [pc, #516]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a80      	ldr	r2, [pc, #512]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	4b7e      	ldr	r3, [pc, #504]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a7d      	ldr	r2, [pc, #500]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004364:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	e01d      	b.n	80043a8 <HAL_RCC_OscConfig+0xd8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004374:	d10c      	bne.n	8004390 <HAL_RCC_OscConfig+0xc0>
 8004376:	4b78      	ldr	r3, [pc, #480]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a77      	ldr	r2, [pc, #476]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 800437c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	4b75      	ldr	r3, [pc, #468]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a74      	ldr	r2, [pc, #464]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	e00b      	b.n	80043a8 <HAL_RCC_OscConfig+0xd8>
 8004390:	4b71      	ldr	r3, [pc, #452]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a70      	ldr	r2, [pc, #448]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	4b6e      	ldr	r3, [pc, #440]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a6d      	ldr	r2, [pc, #436]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 80043a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d013      	beq.n	80043d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fd f9cc 	bl	800174c <HAL_GetTick>
 80043b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b8:	f7fd f9c8 	bl	800174c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b64      	cmp	r3, #100	@ 0x64
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e3d4      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043ca:	4b63      	ldr	r3, [pc, #396]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCC_OscConfig+0xe8>
 80043d6:	e014      	b.n	8004402 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fd f9b8 	bl	800174c <HAL_GetTick>
 80043dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e0:	f7fd f9b4 	bl	800174c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	@ 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e3c0      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043f2:	4b59      	ldr	r3, [pc, #356]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1f0      	bne.n	80043e0 <HAL_RCC_OscConfig+0x110>
 80043fe:	e000      	b.n	8004402 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80ca 	beq.w	80045a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004410:	4b51      	ldr	r3, [pc, #324]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004418:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800441a:	4b4f      	ldr	r3, [pc, #316]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 800441c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <HAL_RCC_OscConfig+0x166>
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	2b18      	cmp	r3, #24
 800442a:	d156      	bne.n	80044da <HAL_RCC_OscConfig+0x20a>
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d151      	bne.n	80044da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004436:	4b48      	ldr	r3, [pc, #288]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <HAL_RCC_OscConfig+0x17e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e392      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800444e:	4b42      	ldr	r3, [pc, #264]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 0219 	bic.w	r2, r3, #25
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	493f      	ldr	r1, [pc, #252]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 800445c:	4313      	orrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd f974 	bl	800174c <HAL_GetTick>
 8004464:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004468:	f7fd f970 	bl	800174c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e37c      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800447a:	4b37      	ldr	r3, [pc, #220]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004486:	f7fd f991 	bl	80017ac <HAL_GetREVID>
 800448a:	4603      	mov	r3, r0
 800448c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004490:	4293      	cmp	r3, r2
 8004492:	d817      	bhi.n	80044c4 <HAL_RCC_OscConfig+0x1f4>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b40      	cmp	r3, #64	@ 0x40
 800449a:	d108      	bne.n	80044ae <HAL_RCC_OscConfig+0x1de>
 800449c:	4b2e      	ldr	r3, [pc, #184]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80044a4:	4a2c      	ldr	r2, [pc, #176]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 80044a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ac:	e07a      	b.n	80045a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	031b      	lsls	r3, r3, #12
 80044bc:	4926      	ldr	r1, [pc, #152]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044c2:	e06f      	b.n	80045a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c4:	4b24      	ldr	r3, [pc, #144]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	4921      	ldr	r1, [pc, #132]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d8:	e064      	b.n	80045a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d047      	beq.n	8004572 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 0219 	bic.w	r2, r3, #25
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	491a      	ldr	r1, [pc, #104]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fd f92a 	bl	800174c <HAL_GetTick>
 80044f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044fc:	f7fd f926 	bl	800174c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e332      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800450e:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451a:	f7fd f947 	bl	80017ac <HAL_GetREVID>
 800451e:	4603      	mov	r3, r0
 8004520:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004524:	4293      	cmp	r3, r2
 8004526:	d819      	bhi.n	800455c <HAL_RCC_OscConfig+0x28c>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b40      	cmp	r3, #64	@ 0x40
 800452e:	d108      	bne.n	8004542 <HAL_RCC_OscConfig+0x272>
 8004530:	4b09      	ldr	r3, [pc, #36]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004538:	4a07      	ldr	r2, [pc, #28]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 800453a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800453e:	6053      	str	r3, [r2, #4]
 8004540:	e030      	b.n	80045a4 <HAL_RCC_OscConfig+0x2d4>
 8004542:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	031b      	lsls	r3, r3, #12
 8004550:	4901      	ldr	r1, [pc, #4]	@ (8004558 <HAL_RCC_OscConfig+0x288>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
 8004556:	e025      	b.n	80045a4 <HAL_RCC_OscConfig+0x2d4>
 8004558:	58024400 	.word	0x58024400
 800455c:	4b9a      	ldr	r3, [pc, #616]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	061b      	lsls	r3, r3, #24
 800456a:	4997      	ldr	r1, [pc, #604]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 800456c:	4313      	orrs	r3, r2
 800456e:	604b      	str	r3, [r1, #4]
 8004570:	e018      	b.n	80045a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004572:	4b95      	ldr	r3, [pc, #596]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a94      	ldr	r2, [pc, #592]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457e:	f7fd f8e5 	bl	800174c <HAL_GetTick>
 8004582:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004586:	f7fd f8e1 	bl	800174c <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e2ed      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004598:	4b8b      	ldr	r3, [pc, #556]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f0      	bne.n	8004586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80a9 	beq.w	8004704 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045b2:	4b85      	ldr	r3, [pc, #532]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045bc:	4b82      	ldr	r3, [pc, #520]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d007      	beq.n	80045d8 <HAL_RCC_OscConfig+0x308>
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2b18      	cmp	r3, #24
 80045cc:	d13a      	bne.n	8004644 <HAL_RCC_OscConfig+0x374>
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d135      	bne.n	8004644 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045d8:	4b7b      	ldr	r3, [pc, #492]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_OscConfig+0x320>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	2b80      	cmp	r3, #128	@ 0x80
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e2c1      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045f0:	f7fd f8dc 	bl	80017ac <HAL_GetREVID>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d817      	bhi.n	800462e <HAL_RCC_OscConfig+0x35e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	2b20      	cmp	r3, #32
 8004604:	d108      	bne.n	8004618 <HAL_RCC_OscConfig+0x348>
 8004606:	4b70      	ldr	r3, [pc, #448]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800460e:	4a6e      	ldr	r2, [pc, #440]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004610:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004614:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004616:	e075      	b.n	8004704 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004618:	4b6b      	ldr	r3, [pc, #428]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	069b      	lsls	r3, r3, #26
 8004626:	4968      	ldr	r1, [pc, #416]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004628:	4313      	orrs	r3, r2
 800462a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800462c:	e06a      	b.n	8004704 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800462e:	4b66      	ldr	r3, [pc, #408]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	061b      	lsls	r3, r3, #24
 800463c:	4962      	ldr	r1, [pc, #392]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 800463e:	4313      	orrs	r3, r2
 8004640:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004642:	e05f      	b.n	8004704 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d042      	beq.n	80046d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800464c:	4b5e      	ldr	r3, [pc, #376]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5d      	ldr	r2, [pc, #372]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fd f878 	bl	800174c <HAL_GetTick>
 800465c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004660:	f7fd f874 	bl	800174c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e280      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004672:	4b55      	ldr	r3, [pc, #340]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800467e:	f7fd f895 	bl	80017ac <HAL_GetREVID>
 8004682:	4603      	mov	r3, r0
 8004684:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004688:	4293      	cmp	r3, r2
 800468a:	d817      	bhi.n	80046bc <HAL_RCC_OscConfig+0x3ec>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	2b20      	cmp	r3, #32
 8004692:	d108      	bne.n	80046a6 <HAL_RCC_OscConfig+0x3d6>
 8004694:	4b4c      	ldr	r3, [pc, #304]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800469c:	4a4a      	ldr	r2, [pc, #296]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 800469e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046a2:	6053      	str	r3, [r2, #4]
 80046a4:	e02e      	b.n	8004704 <HAL_RCC_OscConfig+0x434>
 80046a6:	4b48      	ldr	r3, [pc, #288]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	069b      	lsls	r3, r3, #26
 80046b4:	4944      	ldr	r1, [pc, #272]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	604b      	str	r3, [r1, #4]
 80046ba:	e023      	b.n	8004704 <HAL_RCC_OscConfig+0x434>
 80046bc:	4b42      	ldr	r3, [pc, #264]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	061b      	lsls	r3, r3, #24
 80046ca:	493f      	ldr	r1, [pc, #252]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60cb      	str	r3, [r1, #12]
 80046d0:	e018      	b.n	8004704 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80046d2:	4b3d      	ldr	r3, [pc, #244]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a3c      	ldr	r2, [pc, #240]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 80046d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fd f835 	bl	800174c <HAL_GetTick>
 80046e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046e6:	f7fd f831 	bl	800174c <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e23d      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046f8:	4b33      	ldr	r3, [pc, #204]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d036      	beq.n	800477e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d019      	beq.n	800474c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004718:	4b2b      	ldr	r3, [pc, #172]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 800471a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471c:	4a2a      	ldr	r2, [pc, #168]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004724:	f7fd f812 	bl	800174c <HAL_GetTick>
 8004728:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800472c:	f7fd f80e 	bl	800174c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e21a      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800473e:	4b22      	ldr	r3, [pc, #136]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0f0      	beq.n	800472c <HAL_RCC_OscConfig+0x45c>
 800474a:	e018      	b.n	800477e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800474c:	4b1e      	ldr	r3, [pc, #120]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 800474e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004750:	4a1d      	ldr	r2, [pc, #116]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fc fff8 	bl	800174c <HAL_GetTick>
 800475c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004760:	f7fc fff4 	bl	800174c <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e200      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004772:	4b15      	ldr	r3, [pc, #84]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b00      	cmp	r3, #0
 8004788:	d039      	beq.n	80047fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01c      	beq.n	80047cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004792:	4b0d      	ldr	r3, [pc, #52]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a0c      	ldr	r2, [pc, #48]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 8004798:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800479c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800479e:	f7fc ffd5 	bl	800174c <HAL_GetTick>
 80047a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047a6:	f7fc ffd1 	bl	800174c <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e1dd      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047b8:	4b03      	ldr	r3, [pc, #12]	@ (80047c8 <HAL_RCC_OscConfig+0x4f8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCC_OscConfig+0x4d6>
 80047c4:	e01b      	b.n	80047fe <HAL_RCC_OscConfig+0x52e>
 80047c6:	bf00      	nop
 80047c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047cc:	4b9b      	ldr	r3, [pc, #620]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a9a      	ldr	r2, [pc, #616]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80047d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047d8:	f7fc ffb8 	bl	800174c <HAL_GetTick>
 80047dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047e0:	f7fc ffb4 	bl	800174c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e1c0      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047f2:	4b92      	ldr	r3, [pc, #584]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 8081 	beq.w	800490e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800480c:	4b8c      	ldr	r3, [pc, #560]	@ (8004a40 <HAL_RCC_OscConfig+0x770>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a8b      	ldr	r2, [pc, #556]	@ (8004a40 <HAL_RCC_OscConfig+0x770>)
 8004812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004816:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004818:	f7fc ff98 	bl	800174c <HAL_GetTick>
 800481c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004820:	f7fc ff94 	bl	800174c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	@ 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e1a0      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004832:	4b83      	ldr	r3, [pc, #524]	@ (8004a40 <HAL_RCC_OscConfig+0x770>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d106      	bne.n	8004854 <HAL_RCC_OscConfig+0x584>
 8004846:	4b7d      	ldr	r3, [pc, #500]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484a:	4a7c      	ldr	r2, [pc, #496]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	6713      	str	r3, [r2, #112]	@ 0x70
 8004852:	e02d      	b.n	80048b0 <HAL_RCC_OscConfig+0x5e0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10c      	bne.n	8004876 <HAL_RCC_OscConfig+0x5a6>
 800485c:	4b77      	ldr	r3, [pc, #476]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004860:	4a76      	ldr	r2, [pc, #472]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004862:	f023 0301 	bic.w	r3, r3, #1
 8004866:	6713      	str	r3, [r2, #112]	@ 0x70
 8004868:	4b74      	ldr	r3, [pc, #464]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486c:	4a73      	ldr	r2, [pc, #460]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 800486e:	f023 0304 	bic.w	r3, r3, #4
 8004872:	6713      	str	r3, [r2, #112]	@ 0x70
 8004874:	e01c      	b.n	80048b0 <HAL_RCC_OscConfig+0x5e0>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b05      	cmp	r3, #5
 800487c:	d10c      	bne.n	8004898 <HAL_RCC_OscConfig+0x5c8>
 800487e:	4b6f      	ldr	r3, [pc, #444]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004882:	4a6e      	ldr	r2, [pc, #440]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004884:	f043 0304 	orr.w	r3, r3, #4
 8004888:	6713      	str	r3, [r2, #112]	@ 0x70
 800488a:	4b6c      	ldr	r3, [pc, #432]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488e:	4a6b      	ldr	r2, [pc, #428]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	6713      	str	r3, [r2, #112]	@ 0x70
 8004896:	e00b      	b.n	80048b0 <HAL_RCC_OscConfig+0x5e0>
 8004898:	4b68      	ldr	r3, [pc, #416]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489c:	4a67      	ldr	r2, [pc, #412]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 800489e:	f023 0301 	bic.w	r3, r3, #1
 80048a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a4:	4b65      	ldr	r3, [pc, #404]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80048a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a8:	4a64      	ldr	r2, [pc, #400]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80048aa:	f023 0304 	bic.w	r3, r3, #4
 80048ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d015      	beq.n	80048e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fc ff48 	bl	800174c <HAL_GetTick>
 80048bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c0:	f7fc ff44 	bl	800174c <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e14e      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048d6:	4b59      	ldr	r3, [pc, #356]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0ee      	beq.n	80048c0 <HAL_RCC_OscConfig+0x5f0>
 80048e2:	e014      	b.n	800490e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e4:	f7fc ff32 	bl	800174c <HAL_GetTick>
 80048e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ec:	f7fc ff2e 	bl	800174c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e138      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004902:	4b4e      	ldr	r3, [pc, #312]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1ee      	bne.n	80048ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 812d 	beq.w	8004b72 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004918:	4b48      	ldr	r3, [pc, #288]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004920:	2b18      	cmp	r3, #24
 8004922:	f000 80bd 	beq.w	8004aa0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	2b02      	cmp	r3, #2
 800492c:	f040 809e 	bne.w	8004a6c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004930:	4b42      	ldr	r3, [pc, #264]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a41      	ldr	r2, [pc, #260]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800493a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fc ff06 	bl	800174c <HAL_GetTick>
 8004940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004944:	f7fc ff02 	bl	800174c <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e10e      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004956:	4b39      	ldr	r3, [pc, #228]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004962:	4b36      	ldr	r3, [pc, #216]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004964:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004966:	4b37      	ldr	r3, [pc, #220]	@ (8004a44 <HAL_RCC_OscConfig+0x774>)
 8004968:	4013      	ands	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004972:	0112      	lsls	r2, r2, #4
 8004974:	430a      	orrs	r2, r1
 8004976:	4931      	ldr	r1, [pc, #196]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	628b      	str	r3, [r1, #40]	@ 0x28
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004980:	3b01      	subs	r3, #1
 8004982:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800498a:	3b01      	subs	r3, #1
 800498c:	025b      	lsls	r3, r3, #9
 800498e:	b29b      	uxth	r3, r3
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004996:	3b01      	subs	r3, #1
 8004998:	041b      	lsls	r3, r3, #16
 800499a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a4:	3b01      	subs	r3, #1
 80049a6:	061b      	lsls	r3, r3, #24
 80049a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80049ac:	4923      	ldr	r1, [pc, #140]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80049b2:	4b22      	ldr	r3, [pc, #136]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	4a21      	ldr	r2, [pc, #132]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80049b8:	f023 0301 	bic.w	r3, r3, #1
 80049bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049be:	4b1f      	ldr	r3, [pc, #124]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80049c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049c2:	4b21      	ldr	r3, [pc, #132]	@ (8004a48 <HAL_RCC_OscConfig+0x778>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80049ca:	00d2      	lsls	r2, r2, #3
 80049cc:	491b      	ldr	r1, [pc, #108]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80049d2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80049d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d6:	f023 020c 	bic.w	r2, r3, #12
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	4917      	ldr	r1, [pc, #92]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80049e4:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	f023 0202 	bic.w	r2, r3, #2
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f0:	4912      	ldr	r1, [pc, #72]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049f6:	4b11      	ldr	r3, [pc, #68]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80049f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fa:	4a10      	ldr	r2, [pc, #64]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a02:	4b0e      	ldr	r3, [pc, #56]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a06:	4a0d      	ldr	r2, [pc, #52]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a12:	4a0a      	ldr	r2, [pc, #40]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a1a:	4b08      	ldr	r3, [pc, #32]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1e:	4a07      	ldr	r2, [pc, #28]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a26:	4b05      	ldr	r3, [pc, #20]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a04      	ldr	r2, [pc, #16]	@ (8004a3c <HAL_RCC_OscConfig+0x76c>)
 8004a2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fc fe8b 	bl	800174c <HAL_GetTick>
 8004a36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a38:	e011      	b.n	8004a5e <HAL_RCC_OscConfig+0x78e>
 8004a3a:	bf00      	nop
 8004a3c:	58024400 	.word	0x58024400
 8004a40:	58024800 	.word	0x58024800
 8004a44:	fffffc0c 	.word	0xfffffc0c
 8004a48:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fc fe7e 	bl	800174c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e08a      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a5e:	4b47      	ldr	r3, [pc, #284]	@ (8004b7c <HAL_RCC_OscConfig+0x8ac>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x77c>
 8004a6a:	e082      	b.n	8004b72 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6c:	4b43      	ldr	r3, [pc, #268]	@ (8004b7c <HAL_RCC_OscConfig+0x8ac>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a42      	ldr	r2, [pc, #264]	@ (8004b7c <HAL_RCC_OscConfig+0x8ac>)
 8004a72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fc fe68 	bl	800174c <HAL_GetTick>
 8004a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a80:	f7fc fe64 	bl	800174c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e070      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a92:	4b3a      	ldr	r3, [pc, #232]	@ (8004b7c <HAL_RCC_OscConfig+0x8ac>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x7b0>
 8004a9e:	e068      	b.n	8004b72 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004aa0:	4b36      	ldr	r3, [pc, #216]	@ (8004b7c <HAL_RCC_OscConfig+0x8ac>)
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004aa6:	4b35      	ldr	r3, [pc, #212]	@ (8004b7c <HAL_RCC_OscConfig+0x8ac>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d031      	beq.n	8004b18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f003 0203 	and.w	r2, r3, #3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d12a      	bne.n	8004b18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d122      	bne.n	8004b18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004adc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d11a      	bne.n	8004b18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	0a5b      	lsrs	r3, r3, #9
 8004ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d111      	bne.n	8004b18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	0c1b      	lsrs	r3, r3, #16
 8004af8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b00:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d108      	bne.n	8004b18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	0e1b      	lsrs	r3, r3, #24
 8004b0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e02b      	b.n	8004b74 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b1c:	4b17      	ldr	r3, [pc, #92]	@ (8004b7c <HAL_RCC_OscConfig+0x8ac>)
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b20:	08db      	lsrs	r3, r3, #3
 8004b22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b26:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d01f      	beq.n	8004b72 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b32:	4b12      	ldr	r3, [pc, #72]	@ (8004b7c <HAL_RCC_OscConfig+0x8ac>)
 8004b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b36:	4a11      	ldr	r2, [pc, #68]	@ (8004b7c <HAL_RCC_OscConfig+0x8ac>)
 8004b38:	f023 0301 	bic.w	r3, r3, #1
 8004b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b3e:	f7fc fe05 	bl	800174c <HAL_GetTick>
 8004b42:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004b44:	bf00      	nop
 8004b46:	f7fc fe01 	bl	800174c <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d0f9      	beq.n	8004b46 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b52:	4b0a      	ldr	r3, [pc, #40]	@ (8004b7c <HAL_RCC_OscConfig+0x8ac>)
 8004b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b56:	4b0a      	ldr	r3, [pc, #40]	@ (8004b80 <HAL_RCC_OscConfig+0x8b0>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b5e:	00d2      	lsls	r2, r2, #3
 8004b60:	4906      	ldr	r1, [pc, #24]	@ (8004b7c <HAL_RCC_OscConfig+0x8ac>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004b66:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <HAL_RCC_OscConfig+0x8ac>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6a:	4a04      	ldr	r2, [pc, #16]	@ (8004b7c <HAL_RCC_OscConfig+0x8ac>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3730      	adds	r7, #48	@ 0x30
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	58024400 	.word	0x58024400
 8004b80:	ffff0007 	.word	0xffff0007

08004b84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e19c      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b98:	4b8a      	ldr	r3, [pc, #552]	@ (8004dc4 <HAL_RCC_ClockConfig+0x240>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d910      	bls.n	8004bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b87      	ldr	r3, [pc, #540]	@ (8004dc4 <HAL_RCC_ClockConfig+0x240>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 020f 	bic.w	r2, r3, #15
 8004bae:	4985      	ldr	r1, [pc, #532]	@ (8004dc4 <HAL_RCC_ClockConfig+0x240>)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b83      	ldr	r3, [pc, #524]	@ (8004dc4 <HAL_RCC_ClockConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e184      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d010      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	4b7b      	ldr	r3, [pc, #492]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d908      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004be4:	4b78      	ldr	r3, [pc, #480]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	4975      	ldr	r1, [pc, #468]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d010      	beq.n	8004c24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	4b70      	ldr	r3, [pc, #448]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d908      	bls.n	8004c24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c12:	4b6d      	ldr	r3, [pc, #436]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	496a      	ldr	r1, [pc, #424]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d010      	beq.n	8004c52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699a      	ldr	r2, [r3, #24]
 8004c34:	4b64      	ldr	r3, [pc, #400]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d908      	bls.n	8004c52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c40:	4b61      	ldr	r3, [pc, #388]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	495e      	ldr	r1, [pc, #376]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d010      	beq.n	8004c80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69da      	ldr	r2, [r3, #28]
 8004c62:	4b59      	ldr	r3, [pc, #356]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d908      	bls.n	8004c80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c6e:	4b56      	ldr	r3, [pc, #344]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	4953      	ldr	r1, [pc, #332]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d010      	beq.n	8004cae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	4b4d      	ldr	r3, [pc, #308]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d908      	bls.n	8004cae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c9c:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f023 020f 	bic.w	r2, r3, #15
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4947      	ldr	r1, [pc, #284]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d055      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004cba:	4b43      	ldr	r3, [pc, #268]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	4940      	ldr	r1, [pc, #256]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d121      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0f6      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cec:	4b36      	ldr	r3, [pc, #216]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d115      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0ea      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d107      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d04:	4b30      	ldr	r3, [pc, #192]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0de      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d14:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0d6      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d24:	4b28      	ldr	r3, [pc, #160]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f023 0207 	bic.w	r2, r3, #7
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4925      	ldr	r1, [pc, #148]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d36:	f7fc fd09 	bl	800174c <HAL_GetTick>
 8004d3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d3e:	f7fc fd05 	bl	800174c <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e0be      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d54:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d1eb      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d010      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	4b14      	ldr	r3, [pc, #80]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d208      	bcs.n	8004d94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d82:	4b11      	ldr	r3, [pc, #68]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	f023 020f 	bic.w	r2, r3, #15
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	490e      	ldr	r1, [pc, #56]	@ (8004dc8 <HAL_RCC_ClockConfig+0x244>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d94:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <HAL_RCC_ClockConfig+0x240>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d214      	bcs.n	8004dcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da2:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <HAL_RCC_ClockConfig+0x240>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f023 020f 	bic.w	r2, r3, #15
 8004daa:	4906      	ldr	r1, [pc, #24]	@ (8004dc4 <HAL_RCC_ClockConfig+0x240>)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db2:	4b04      	ldr	r3, [pc, #16]	@ (8004dc4 <HAL_RCC_ClockConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e086      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x34e>
 8004dc4:	52002000 	.word	0x52002000
 8004dc8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d010      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d208      	bcs.n	8004dfa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004de8:	4b3c      	ldr	r3, [pc, #240]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	4939      	ldr	r1, [pc, #228]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d010      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	4b34      	ldr	r3, [pc, #208]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d208      	bcs.n	8004e28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e16:	4b31      	ldr	r3, [pc, #196]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	492e      	ldr	r1, [pc, #184]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d010      	beq.n	8004e56 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699a      	ldr	r2, [r3, #24]
 8004e38:	4b28      	ldr	r3, [pc, #160]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d208      	bcs.n	8004e56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e44:	4b25      	ldr	r3, [pc, #148]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	4922      	ldr	r1, [pc, #136]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d010      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69da      	ldr	r2, [r3, #28]
 8004e66:	4b1d      	ldr	r3, [pc, #116]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d208      	bcs.n	8004e84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e72:	4b1a      	ldr	r3, [pc, #104]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	4917      	ldr	r1, [pc, #92]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e84:	f000 f834 	bl	8004ef0 <HAL_RCC_GetSysClockFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b14      	ldr	r3, [pc, #80]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	0a1b      	lsrs	r3, r3, #8
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	4912      	ldr	r1, [pc, #72]	@ (8004ee0 <HAL_RCC_ClockConfig+0x35c>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8004edc <HAL_RCC_ClockConfig+0x358>)
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8004ee0 <HAL_RCC_ClockConfig+0x35c>)
 8004eac:	5cd3      	ldrb	r3, [r2, r3]
 8004eae:	f003 031f 	and.w	r3, r3, #31
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee4 <HAL_RCC_ClockConfig+0x360>)
 8004eba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee8 <HAL_RCC_ClockConfig+0x364>)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <HAL_RCC_ClockConfig+0x368>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fc fbf6 	bl	80016b8 <HAL_InitTick>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	0800c770 	.word	0x0800c770
 8004ee4:	00000004 	.word	0x00000004
 8004ee8:	00000000 	.word	0x00000000
 8004eec:	00000010 	.word	0x00000010

08004ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b089      	sub	sp, #36	@ 0x24
 8004ef4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef6:	4bb3      	ldr	r3, [pc, #716]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004efe:	2b18      	cmp	r3, #24
 8004f00:	f200 8155 	bhi.w	80051ae <HAL_RCC_GetSysClockFreq+0x2be>
 8004f04:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0a:	bf00      	nop
 8004f0c:	08004f71 	.word	0x08004f71
 8004f10:	080051af 	.word	0x080051af
 8004f14:	080051af 	.word	0x080051af
 8004f18:	080051af 	.word	0x080051af
 8004f1c:	080051af 	.word	0x080051af
 8004f20:	080051af 	.word	0x080051af
 8004f24:	080051af 	.word	0x080051af
 8004f28:	080051af 	.word	0x080051af
 8004f2c:	08004f97 	.word	0x08004f97
 8004f30:	080051af 	.word	0x080051af
 8004f34:	080051af 	.word	0x080051af
 8004f38:	080051af 	.word	0x080051af
 8004f3c:	080051af 	.word	0x080051af
 8004f40:	080051af 	.word	0x080051af
 8004f44:	080051af 	.word	0x080051af
 8004f48:	080051af 	.word	0x080051af
 8004f4c:	08004f9d 	.word	0x08004f9d
 8004f50:	080051af 	.word	0x080051af
 8004f54:	080051af 	.word	0x080051af
 8004f58:	080051af 	.word	0x080051af
 8004f5c:	080051af 	.word	0x080051af
 8004f60:	080051af 	.word	0x080051af
 8004f64:	080051af 	.word	0x080051af
 8004f68:	080051af 	.word	0x080051af
 8004f6c:	08004fa3 	.word	0x08004fa3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f70:	4b94      	ldr	r3, [pc, #592]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0320 	and.w	r3, r3, #32
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d009      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f7c:	4b91      	ldr	r3, [pc, #580]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	08db      	lsrs	r3, r3, #3
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	4a90      	ldr	r2, [pc, #576]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f88:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f8e:	e111      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f90:	4b8d      	ldr	r3, [pc, #564]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f92:	61bb      	str	r3, [r7, #24]
      break;
 8004f94:	e10e      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f96:	4b8d      	ldr	r3, [pc, #564]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f98:	61bb      	str	r3, [r7, #24]
      break;
 8004f9a:	e10b      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f9c:	4b8c      	ldr	r3, [pc, #560]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f9e:	61bb      	str	r3, [r7, #24]
      break;
 8004fa0:	e108      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fa2:	4b88      	ldr	r3, [pc, #544]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004fac:	4b85      	ldr	r3, [pc, #532]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	091b      	lsrs	r3, r3, #4
 8004fb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fb6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004fb8:	4b82      	ldr	r3, [pc, #520]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004fc2:	4b80      	ldr	r3, [pc, #512]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc6:	08db      	lsrs	r3, r3, #3
 8004fc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fda:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 80e1 	beq.w	80051a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	f000 8083 	beq.w	80050f4 <HAL_RCC_GetSysClockFreq+0x204>
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	f200 80a1 	bhi.w	8005138 <HAL_RCC_GetSysClockFreq+0x248>
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0x114>
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d056      	beq.n	80050b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005002:	e099      	b.n	8005138 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005004:	4b6f      	ldr	r3, [pc, #444]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0320 	and.w	r3, r3, #32
 800500c:	2b00      	cmp	r3, #0
 800500e:	d02d      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005010:	4b6c      	ldr	r3, [pc, #432]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	08db      	lsrs	r3, r3, #3
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	4a6b      	ldr	r2, [pc, #428]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
 8005020:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	ee07 3a90 	vmov	s15, r3
 8005028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503a:	4b62      	ldr	r3, [pc, #392]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504a:	ed97 6a02 	vldr	s12, [r7, #8]
 800504e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80051d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005066:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800506a:	e087      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80051d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800507a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507e:	4b51      	ldr	r3, [pc, #324]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005092:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80051d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800509e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050ae:	e065      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80051dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80050be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c2:	4b40      	ldr	r3, [pc, #256]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80051d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050f2:	e043      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80051e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005106:	4b2f      	ldr	r3, [pc, #188]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005116:	ed97 6a02 	vldr	s12, [r7, #8]
 800511a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80051d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800511e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800512a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005132:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005136:	e021      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80051dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514a:	4b1e      	ldr	r3, [pc, #120]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800514c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515a:	ed97 6a02 	vldr	s12, [r7, #8]
 800515e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80051d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800516e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005176:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800517a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800517c:	4b11      	ldr	r3, [pc, #68]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800517e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005180:	0a5b      	lsrs	r3, r3, #9
 8005182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005186:	3301      	adds	r3, #1
 8005188:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005194:	edd7 6a07 	vldr	s13, [r7, #28]
 8005198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800519c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a0:	ee17 3a90 	vmov	r3, s15
 80051a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80051a6:	e005      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61bb      	str	r3, [r7, #24]
      break;
 80051ac:	e002      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80051ae:	4b07      	ldr	r3, [pc, #28]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051b0:	61bb      	str	r3, [r7, #24]
      break;
 80051b2:	bf00      	nop
  }

  return sysclockfreq;
 80051b4:	69bb      	ldr	r3, [r7, #24]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3724      	adds	r7, #36	@ 0x24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	58024400 	.word	0x58024400
 80051c8:	03d09000 	.word	0x03d09000
 80051cc:	003d0900 	.word	0x003d0900
 80051d0:	017d7840 	.word	0x017d7840
 80051d4:	46000000 	.word	0x46000000
 80051d8:	4c742400 	.word	0x4c742400
 80051dc:	4a742400 	.word	0x4a742400
 80051e0:	4bbebc20 	.word	0x4bbebc20

080051e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051ea:	f7ff fe81 	bl	8004ef0 <HAL_RCC_GetSysClockFreq>
 80051ee:	4602      	mov	r2, r0
 80051f0:	4b10      	ldr	r3, [pc, #64]	@ (8005234 <HAL_RCC_GetHCLKFreq+0x50>)
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	0a1b      	lsrs	r3, r3, #8
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	490f      	ldr	r1, [pc, #60]	@ (8005238 <HAL_RCC_GetHCLKFreq+0x54>)
 80051fc:	5ccb      	ldrb	r3, [r1, r3]
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	fa22 f303 	lsr.w	r3, r2, r3
 8005206:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005208:	4b0a      	ldr	r3, [pc, #40]	@ (8005234 <HAL_RCC_GetHCLKFreq+0x50>)
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	4a09      	ldr	r2, [pc, #36]	@ (8005238 <HAL_RCC_GetHCLKFreq+0x54>)
 8005212:	5cd3      	ldrb	r3, [r2, r3]
 8005214:	f003 031f 	and.w	r3, r3, #31
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	fa22 f303 	lsr.w	r3, r2, r3
 800521e:	4a07      	ldr	r2, [pc, #28]	@ (800523c <HAL_RCC_GetHCLKFreq+0x58>)
 8005220:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005222:	4a07      	ldr	r2, [pc, #28]	@ (8005240 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005228:	4b04      	ldr	r3, [pc, #16]	@ (800523c <HAL_RCC_GetHCLKFreq+0x58>)
 800522a:	681b      	ldr	r3, [r3, #0]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	58024400 	.word	0x58024400
 8005238:	0800c770 	.word	0x0800c770
 800523c:	00000004 	.word	0x00000004
 8005240:	00000000 	.word	0x00000000

08005244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005248:	f7ff ffcc 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 800524c:	4602      	mov	r2, r0
 800524e:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	4904      	ldr	r1, [pc, #16]	@ (800526c <HAL_RCC_GetPCLK1Freq+0x28>)
 800525a:	5ccb      	ldrb	r3, [r1, r3]
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	58024400 	.word	0x58024400
 800526c:	0800c770 	.word	0x0800c770

08005270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005274:	f7ff ffb6 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4904      	ldr	r1, [pc, #16]	@ (8005298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005290:	4618      	mov	r0, r3
 8005292:	bd80      	pop	{r7, pc}
 8005294:	58024400 	.word	0x58024400
 8005298:	0800c770 	.word	0x0800c770

0800529c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800529c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a0:	b0cc      	sub	sp, #304	@ 0x130
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052ae:	2300      	movs	r3, #0
 80052b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80052c0:	2500      	movs	r5, #0
 80052c2:	ea54 0305 	orrs.w	r3, r4, r5
 80052c6:	d049      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80052c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052d2:	d02f      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80052d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052d8:	d828      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80052da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052de:	d01a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80052e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052e4:	d822      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80052ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052ee:	d007      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052f0:	e01c      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f2:	4bb8      	ldr	r3, [pc, #736]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f6:	4ab7      	ldr	r2, [pc, #732]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052fe:	e01a      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005304:	3308      	adds	r3, #8
 8005306:	2102      	movs	r1, #2
 8005308:	4618      	mov	r0, r3
 800530a:	f001 fccf 	bl	8006cac <RCCEx_PLL2_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005314:	e00f      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800531a:	3328      	adds	r3, #40	@ 0x28
 800531c:	2102      	movs	r1, #2
 800531e:	4618      	mov	r0, r3
 8005320:	f001 fd76 	bl	8006e10 <RCCEx_PLL3_Config>
 8005324:	4603      	mov	r3, r0
 8005326:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800532a:	e004      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005332:	e000      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005336:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800533e:	4ba5      	ldr	r3, [pc, #660]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005342:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800534a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800534c:	4aa1      	ldr	r2, [pc, #644]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800534e:	430b      	orrs	r3, r1
 8005350:	6513      	str	r3, [r2, #80]	@ 0x50
 8005352:	e003      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005358:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800535c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005368:	f04f 0900 	mov.w	r9, #0
 800536c:	ea58 0309 	orrs.w	r3, r8, r9
 8005370:	d047      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005372:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005378:	2b04      	cmp	r3, #4
 800537a:	d82a      	bhi.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800537c:	a201      	add	r2, pc, #4	@ (adr r2, 8005384 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	08005399 	.word	0x08005399
 8005388:	080053a7 	.word	0x080053a7
 800538c:	080053bd 	.word	0x080053bd
 8005390:	080053db 	.word	0x080053db
 8005394:	080053db 	.word	0x080053db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005398:	4b8e      	ldr	r3, [pc, #568]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800539a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539c:	4a8d      	ldr	r2, [pc, #564]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800539e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053a4:	e01a      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053aa:	3308      	adds	r3, #8
 80053ac:	2100      	movs	r1, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f001 fc7c 	bl	8006cac <RCCEx_PLL2_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053ba:	e00f      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053c0:	3328      	adds	r3, #40	@ 0x28
 80053c2:	2100      	movs	r1, #0
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 fd23 	bl	8006e10 <RCCEx_PLL3_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053d0:	e004      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80053d8:	e000      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80053da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053e4:	4b7b      	ldr	r3, [pc, #492]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053e8:	f023 0107 	bic.w	r1, r3, #7
 80053ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f2:	4a78      	ldr	r2, [pc, #480]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053f4:	430b      	orrs	r3, r1
 80053f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80053f8:	e003      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005402:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800540e:	f04f 0b00 	mov.w	fp, #0
 8005412:	ea5a 030b 	orrs.w	r3, sl, fp
 8005416:	d04c      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005418:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800541c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800541e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005422:	d030      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005428:	d829      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800542a:	2bc0      	cmp	r3, #192	@ 0xc0
 800542c:	d02d      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800542e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005430:	d825      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005432:	2b80      	cmp	r3, #128	@ 0x80
 8005434:	d018      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005436:	2b80      	cmp	r3, #128	@ 0x80
 8005438:	d821      	bhi.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800543e:	2b40      	cmp	r3, #64	@ 0x40
 8005440:	d007      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005442:	e01c      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005444:	4b63      	ldr	r3, [pc, #396]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005448:	4a62      	ldr	r2, [pc, #392]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800544a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800544e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005450:	e01c      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005452:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005456:	3308      	adds	r3, #8
 8005458:	2100      	movs	r1, #0
 800545a:	4618      	mov	r0, r3
 800545c:	f001 fc26 	bl	8006cac <RCCEx_PLL2_Config>
 8005460:	4603      	mov	r3, r0
 8005462:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005466:	e011      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005468:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800546c:	3328      	adds	r3, #40	@ 0x28
 800546e:	2100      	movs	r1, #0
 8005470:	4618      	mov	r0, r3
 8005472:	f001 fccd 	bl	8006e10 <RCCEx_PLL3_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800547c:	e006      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005484:	e002      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005486:	bf00      	nop
 8005488:	e000      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800548a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005494:	4b4f      	ldr	r3, [pc, #316]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005498:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800549c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a2:	4a4c      	ldr	r2, [pc, #304]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80054a8:	e003      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80054b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80054be:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80054c2:	2300      	movs	r3, #0
 80054c4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80054c8:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80054cc:	460b      	mov	r3, r1
 80054ce:	4313      	orrs	r3, r2
 80054d0:	d053      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80054d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80054da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054de:	d035      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80054e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054e4:	d82e      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80054ea:	d031      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80054ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80054f0:	d828      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054f6:	d01a      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80054f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054fc:	d822      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005502:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005506:	d007      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005508:	e01c      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800550a:	4b32      	ldr	r3, [pc, #200]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	4a31      	ldr	r2, [pc, #196]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005514:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005516:	e01c      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005518:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800551c:	3308      	adds	r3, #8
 800551e:	2100      	movs	r1, #0
 8005520:	4618      	mov	r0, r3
 8005522:	f001 fbc3 	bl	8006cac <RCCEx_PLL2_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800552c:	e011      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800552e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005532:	3328      	adds	r3, #40	@ 0x28
 8005534:	2100      	movs	r1, #0
 8005536:	4618      	mov	r0, r3
 8005538:	f001 fc6a 	bl	8006e10 <RCCEx_PLL3_Config>
 800553c:	4603      	mov	r3, r0
 800553e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005542:	e006      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800554a:	e002      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005552:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800555a:	4b1e      	ldr	r3, [pc, #120]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800555c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005562:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005566:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800556a:	4a1a      	ldr	r2, [pc, #104]	@ (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800556c:	430b      	orrs	r3, r1
 800556e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005570:	e003      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005572:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005576:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800557a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005586:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800558a:	2300      	movs	r3, #0
 800558c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005590:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005594:	460b      	mov	r3, r1
 8005596:	4313      	orrs	r3, r2
 8005598:	d056      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800559a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800559e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055a6:	d038      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80055a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055ac:	d831      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80055ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055b2:	d034      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80055b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055b8:	d82b      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80055ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055be:	d01d      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80055c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055c4:	d825      	bhi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d006      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80055ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055ce:	d00a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80055d0:	e01f      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80055d2:	bf00      	nop
 80055d4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d8:	4ba2      	ldr	r3, [pc, #648]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055dc:	4aa1      	ldr	r2, [pc, #644]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055e4:	e01c      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055ea:	3308      	adds	r3, #8
 80055ec:	2100      	movs	r1, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f001 fb5c 	bl	8006cac <RCCEx_PLL2_Config>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80055fa:	e011      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005600:	3328      	adds	r3, #40	@ 0x28
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f001 fc03 	bl	8006e10 <RCCEx_PLL3_Config>
 800560a:	4603      	mov	r3, r0
 800560c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005610:	e006      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005618:	e002      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800561a:	bf00      	nop
 800561c:	e000      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800561e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005620:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10b      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005628:	4b8e      	ldr	r3, [pc, #568]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800562a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005630:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005634:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005638:	4a8a      	ldr	r2, [pc, #552]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800563a:	430b      	orrs	r3, r1
 800563c:	6593      	str	r3, [r2, #88]	@ 0x58
 800563e:	e003      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005640:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005644:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005648:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005654:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005658:	2300      	movs	r3, #0
 800565a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800565e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005662:	460b      	mov	r3, r1
 8005664:	4313      	orrs	r3, r2
 8005666:	d03a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800566c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800566e:	2b30      	cmp	r3, #48	@ 0x30
 8005670:	d01f      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005672:	2b30      	cmp	r3, #48	@ 0x30
 8005674:	d819      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005676:	2b20      	cmp	r3, #32
 8005678:	d00c      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800567a:	2b20      	cmp	r3, #32
 800567c:	d815      	bhi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d019      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005682:	2b10      	cmp	r3, #16
 8005684:	d111      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005686:	4b77      	ldr	r3, [pc, #476]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568a:	4a76      	ldr	r2, [pc, #472]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800568c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005690:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005692:	e011      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005694:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005698:	3308      	adds	r3, #8
 800569a:	2102      	movs	r1, #2
 800569c:	4618      	mov	r0, r3
 800569e:	f001 fb05 	bl	8006cac <RCCEx_PLL2_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80056a8:	e006      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80056b0:	e002      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80056b2:	bf00      	nop
 80056b4:	e000      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80056b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80056c0:	4b68      	ldr	r3, [pc, #416]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80056c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ce:	4a65      	ldr	r2, [pc, #404]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056d0:	430b      	orrs	r3, r1
 80056d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056d4:	e003      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80056de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80056ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80056ee:	2300      	movs	r3, #0
 80056f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80056f4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80056f8:	460b      	mov	r3, r1
 80056fa:	4313      	orrs	r3, r2
 80056fc:	d051      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80056fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005702:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005704:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005708:	d035      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800570a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800570e:	d82e      	bhi.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005710:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005714:	d031      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005716:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800571a:	d828      	bhi.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800571c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005720:	d01a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005726:	d822      	bhi.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800572c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005730:	d007      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005732:	e01c      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005734:	4b4b      	ldr	r3, [pc, #300]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	4a4a      	ldr	r2, [pc, #296]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800573a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800573e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005740:	e01c      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005742:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005746:	3308      	adds	r3, #8
 8005748:	2100      	movs	r1, #0
 800574a:	4618      	mov	r0, r3
 800574c:	f001 faae 	bl	8006cac <RCCEx_PLL2_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005756:	e011      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005758:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800575c:	3328      	adds	r3, #40	@ 0x28
 800575e:	2100      	movs	r1, #0
 8005760:	4618      	mov	r0, r3
 8005762:	f001 fb55 	bl	8006e10 <RCCEx_PLL3_Config>
 8005766:	4603      	mov	r3, r0
 8005768:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800576c:	e006      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005774:	e002      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005776:	bf00      	nop
 8005778:	e000      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800577a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005784:	4b37      	ldr	r3, [pc, #220]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005788:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800578c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005790:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005792:	4a34      	ldr	r2, [pc, #208]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005794:	430b      	orrs	r3, r1
 8005796:	6513      	str	r3, [r2, #80]	@ 0x50
 8005798:	e003      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800579e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80057a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80057ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80057b2:	2300      	movs	r3, #0
 80057b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80057b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80057bc:	460b      	mov	r3, r1
 80057be:	4313      	orrs	r3, r2
 80057c0:	d056      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80057c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057cc:	d033      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80057ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057d2:	d82c      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057d8:	d02f      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80057da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057de:	d826      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80057e4:	d02b      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80057e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80057ea:	d820      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057f0:	d012      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80057f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057f6:	d81a      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d022      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80057fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005800:	d115      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005802:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005806:	3308      	adds	r3, #8
 8005808:	2101      	movs	r1, #1
 800580a:	4618      	mov	r0, r3
 800580c:	f001 fa4e 	bl	8006cac <RCCEx_PLL2_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005816:	e015      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005818:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800581c:	3328      	adds	r3, #40	@ 0x28
 800581e:	2101      	movs	r1, #1
 8005820:	4618      	mov	r0, r3
 8005822:	f001 faf5 	bl	8006e10 <RCCEx_PLL3_Config>
 8005826:	4603      	mov	r3, r0
 8005828:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800582c:	e00a      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005834:	e006      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005836:	bf00      	nop
 8005838:	e004      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800583a:	bf00      	nop
 800583c:	e002      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800583e:	bf00      	nop
 8005840:	e000      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005844:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10d      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800584c:	4b05      	ldr	r3, [pc, #20]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800584e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005850:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005854:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005858:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800585a:	4a02      	ldr	r2, [pc, #8]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800585c:	430b      	orrs	r3, r1
 800585e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005860:	e006      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005862:	bf00      	nop
 8005864:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005868:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800586c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005870:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800587c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005880:	2300      	movs	r3, #0
 8005882:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005886:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800588a:	460b      	mov	r3, r1
 800588c:	4313      	orrs	r3, r2
 800588e:	d055      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005890:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005894:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800589c:	d033      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800589e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058a2:	d82c      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80058a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058a8:	d02f      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80058aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ae:	d826      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80058b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058b4:	d02b      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80058b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058ba:	d820      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80058bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058c0:	d012      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80058c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058c6:	d81a      	bhi.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d022      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80058cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058d0:	d115      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80058d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058d6:	3308      	adds	r3, #8
 80058d8:	2101      	movs	r1, #1
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 f9e6 	bl	8006cac <RCCEx_PLL2_Config>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80058e6:	e015      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058ec:	3328      	adds	r3, #40	@ 0x28
 80058ee:	2101      	movs	r1, #1
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 fa8d 	bl	8006e10 <RCCEx_PLL3_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80058fc:	e00a      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005904:	e006      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005906:	bf00      	nop
 8005908:	e004      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800590a:	bf00      	nop
 800590c:	e002      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800590e:	bf00      	nop
 8005910:	e000      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005914:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10b      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800591c:	4bb6      	ldr	r3, [pc, #728]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800591e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005920:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005924:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005928:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800592c:	4ab2      	ldr	r2, [pc, #712]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800592e:	430b      	orrs	r3, r1
 8005930:	6593      	str	r3, [r2, #88]	@ 0x58
 8005932:	e003      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005934:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005938:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800593c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800594c:	2300      	movs	r3, #0
 800594e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005952:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005956:	460b      	mov	r3, r1
 8005958:	4313      	orrs	r3, r2
 800595a:	d02a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 800595c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005962:	2b00      	cmp	r3, #0
 8005964:	d011      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800596a:	d10a      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800596c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005970:	3308      	adds	r3, #8
 8005972:	2101      	movs	r1, #1
 8005974:	4618      	mov	r0, r3
 8005976:	f001 f999 	bl	8006cac <RCCEx_PLL2_Config>
 800597a:	4603      	mov	r3, r0
 800597c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005980:	e004      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005988:	e000      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800598a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005994:	4b98      	ldr	r3, [pc, #608]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005998:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800599c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a2:	4a95      	ldr	r2, [pc, #596]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059a4:	430b      	orrs	r3, r1
 80059a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059a8:	e003      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80059be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059c2:	2300      	movs	r3, #0
 80059c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80059c8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059cc:	460b      	mov	r3, r1
 80059ce:	4313      	orrs	r3, r2
 80059d0:	d037      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80059d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059dc:	d00e      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x760>
 80059de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059e2:	d816      	bhi.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d018      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80059e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059ec:	d111      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ee:	4b82      	ldr	r3, [pc, #520]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f2:	4a81      	ldr	r2, [pc, #516]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059fa:	e00f      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a00:	3308      	adds	r3, #8
 8005a02:	2101      	movs	r1, #1
 8005a04:	4618      	mov	r0, r3
 8005a06:	f001 f951 	bl	8006cac <RCCEx_PLL2_Config>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a10:	e004      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a18:	e000      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a24:	4b74      	ldr	r3, [pc, #464]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a28:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a32:	4a71      	ldr	r2, [pc, #452]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a38:	e003      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005a4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a52:	2300      	movs	r3, #0
 8005a54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a58:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	d03a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d81d      	bhi.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a72:	bf00      	nop
 8005a74:	08005ab1 	.word	0x08005ab1
 8005a78:	08005a85 	.word	0x08005a85
 8005a7c:	08005a93 	.word	0x08005a93
 8005a80:	08005ab1 	.word	0x08005ab1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a84:	4b5c      	ldr	r3, [pc, #368]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	4a5b      	ldr	r2, [pc, #364]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a90:	e00f      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a96:	3308      	adds	r3, #8
 8005a98:	2102      	movs	r1, #2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f001 f906 	bl	8006cac <RCCEx_PLL2_Config>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005aa6:	e004      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005aae:	e000      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005aba:	4b4f      	ldr	r3, [pc, #316]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005abe:	f023 0103 	bic.w	r1, r3, #3
 8005ac2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac8:	4a4b      	ldr	r2, [pc, #300]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005aca:	430b      	orrs	r3, r1
 8005acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ace:	e003      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ad4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ae4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005aee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005af2:	460b      	mov	r3, r1
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f000 80a0 	beq.w	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005afa:	4b40      	ldr	r3, [pc, #256]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a3f      	ldr	r2, [pc, #252]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b06:	f7fb fe21 	bl	800174c <HAL_GetTick>
 8005b0a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b0e:	e00b      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b10:	f7fb fe1c 	bl	800174c <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b64      	cmp	r3, #100	@ 0x64
 8005b1e:	d903      	bls.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b26:	e005      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b28:	4b34      	ldr	r3, [pc, #208]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0ed      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005b34:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d17a      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b48:	4053      	eors	r3, r2
 8005b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d015      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b52:	4b29      	ldr	r3, [pc, #164]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b5e:	4b26      	ldr	r3, [pc, #152]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b62:	4a25      	ldr	r2, [pc, #148]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b68:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b6a:	4b23      	ldr	r3, [pc, #140]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b6e:	4a22      	ldr	r2, [pc, #136]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b74:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b76:	4a20      	ldr	r2, [pc, #128]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b78:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005b7c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b82:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b8a:	d118      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8c:	f7fb fdde 	bl	800174c <HAL_GetTick>
 8005b90:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b94:	e00d      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b96:	f7fb fdd9 	bl	800174c <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ba0:	1ad2      	subs	r2, r2, r3
 8005ba2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d903      	bls.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8005bb0:	e005      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bb2:	4b11      	ldr	r3, [pc, #68]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0eb      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005bbe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d130      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bd6:	d115      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005bd8:	4b07      	ldr	r3, [pc, #28]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005be4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005be8:	091a      	lsrs	r2, r3, #4
 8005bea:	4b05      	ldr	r3, [pc, #20]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	4a02      	ldr	r2, [pc, #8]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6113      	str	r3, [r2, #16]
 8005bf4:	e00c      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005bf6:	bf00      	nop
 8005bf8:	58024400 	.word	0x58024400
 8005bfc:	58024800 	.word	0x58024800
 8005c00:	00ffffcf 	.word	0x00ffffcf
 8005c04:	4bd4      	ldr	r3, [pc, #848]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	4ad3      	ldr	r2, [pc, #844]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c0a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c0e:	6113      	str	r3, [r2, #16]
 8005c10:	4bd1      	ldr	r3, [pc, #836]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c12:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005c14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c20:	4acd      	ldr	r2, [pc, #820]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c22:	430b      	orrs	r3, r1
 8005c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c26:	e008      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c2c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8005c30:	e003      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c36:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f002 0301 	and.w	r3, r2, #1
 8005c46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f000 808b 	beq.w	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c64:	2b28      	cmp	r3, #40	@ 0x28
 8005c66:	d86b      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005c68:	a201      	add	r2, pc, #4	@ (adr r2, 8005c70 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6e:	bf00      	nop
 8005c70:	08005d49 	.word	0x08005d49
 8005c74:	08005d41 	.word	0x08005d41
 8005c78:	08005d41 	.word	0x08005d41
 8005c7c:	08005d41 	.word	0x08005d41
 8005c80:	08005d41 	.word	0x08005d41
 8005c84:	08005d41 	.word	0x08005d41
 8005c88:	08005d41 	.word	0x08005d41
 8005c8c:	08005d41 	.word	0x08005d41
 8005c90:	08005d15 	.word	0x08005d15
 8005c94:	08005d41 	.word	0x08005d41
 8005c98:	08005d41 	.word	0x08005d41
 8005c9c:	08005d41 	.word	0x08005d41
 8005ca0:	08005d41 	.word	0x08005d41
 8005ca4:	08005d41 	.word	0x08005d41
 8005ca8:	08005d41 	.word	0x08005d41
 8005cac:	08005d41 	.word	0x08005d41
 8005cb0:	08005d2b 	.word	0x08005d2b
 8005cb4:	08005d41 	.word	0x08005d41
 8005cb8:	08005d41 	.word	0x08005d41
 8005cbc:	08005d41 	.word	0x08005d41
 8005cc0:	08005d41 	.word	0x08005d41
 8005cc4:	08005d41 	.word	0x08005d41
 8005cc8:	08005d41 	.word	0x08005d41
 8005ccc:	08005d41 	.word	0x08005d41
 8005cd0:	08005d49 	.word	0x08005d49
 8005cd4:	08005d41 	.word	0x08005d41
 8005cd8:	08005d41 	.word	0x08005d41
 8005cdc:	08005d41 	.word	0x08005d41
 8005ce0:	08005d41 	.word	0x08005d41
 8005ce4:	08005d41 	.word	0x08005d41
 8005ce8:	08005d41 	.word	0x08005d41
 8005cec:	08005d41 	.word	0x08005d41
 8005cf0:	08005d49 	.word	0x08005d49
 8005cf4:	08005d41 	.word	0x08005d41
 8005cf8:	08005d41 	.word	0x08005d41
 8005cfc:	08005d41 	.word	0x08005d41
 8005d00:	08005d41 	.word	0x08005d41
 8005d04:	08005d41 	.word	0x08005d41
 8005d08:	08005d41 	.word	0x08005d41
 8005d0c:	08005d41 	.word	0x08005d41
 8005d10:	08005d49 	.word	0x08005d49
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d18:	3308      	adds	r3, #8
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 ffc5 	bl	8006cac <RCCEx_PLL2_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d28:	e00f      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d2e:	3328      	adds	r3, #40	@ 0x28
 8005d30:	2101      	movs	r1, #1
 8005d32:	4618      	mov	r0, r3
 8005d34:	f001 f86c 	bl	8006e10 <RCCEx_PLL3_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d3e:	e004      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d46:	e000      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d4a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d52:	4b81      	ldr	r3, [pc, #516]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d56:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005d5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d62:	4a7d      	ldr	r2, [pc, #500]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d64:	430b      	orrs	r3, r1
 8005d66:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d68:	e003      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f002 0302 	and.w	r3, r2, #2
 8005d7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d82:	2300      	movs	r3, #0
 8005d84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d88:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	d042      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d98:	2b05      	cmp	r3, #5
 8005d9a:	d825      	bhi.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005da4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005df1 	.word	0x08005df1
 8005da8:	08005dbd 	.word	0x08005dbd
 8005dac:	08005dd3 	.word	0x08005dd3
 8005db0:	08005df1 	.word	0x08005df1
 8005db4:	08005df1 	.word	0x08005df1
 8005db8:	08005df1 	.word	0x08005df1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 ff71 	bl	8006cac <RCCEx_PLL2_Config>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dd0:	e00f      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dd6:	3328      	adds	r3, #40	@ 0x28
 8005dd8:	2101      	movs	r1, #1
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f001 f818 	bl	8006e10 <RCCEx_PLL3_Config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005de6:	e004      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005dee:	e000      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10a      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005dfa:	4b57      	ldr	r3, [pc, #348]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfe:	f023 0107 	bic.w	r1, r3, #7
 8005e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e08:	4a53      	ldr	r2, [pc, #332]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005e0e:	e003      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e14:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	f002 0304 	and.w	r3, r2, #4
 8005e24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e2e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005e32:	460b      	mov	r3, r1
 8005e34:	4313      	orrs	r3, r2
 8005e36:	d044      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e40:	2b05      	cmp	r3, #5
 8005e42:	d825      	bhi.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005e44:	a201      	add	r2, pc, #4	@ (adr r2, 8005e4c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005e99 	.word	0x08005e99
 8005e50:	08005e65 	.word	0x08005e65
 8005e54:	08005e7b 	.word	0x08005e7b
 8005e58:	08005e99 	.word	0x08005e99
 8005e5c:	08005e99 	.word	0x08005e99
 8005e60:	08005e99 	.word	0x08005e99
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e68:	3308      	adds	r3, #8
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 ff1d 	bl	8006cac <RCCEx_PLL2_Config>
 8005e72:	4603      	mov	r3, r0
 8005e74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e78:	e00f      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e7e:	3328      	adds	r3, #40	@ 0x28
 8005e80:	2101      	movs	r1, #1
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 ffc4 	bl	8006e10 <RCCEx_PLL3_Config>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e8e:	e004      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10b      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea6:	f023 0107 	bic.w	r1, r3, #7
 8005eaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005eb2:	4a29      	ldr	r2, [pc, #164]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005eb8:	e003      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ebe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f002 0320 	and.w	r3, r2, #32
 8005ece:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ed8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005edc:	460b      	mov	r3, r1
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	d057      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005eee:	d035      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ef4:	d82c      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005efa:	d031      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f00:	d826      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005f02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f06:	d02d      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005f08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f0c:	d820      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f12:	d012      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f18:	d81a      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d024      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005f1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f22:	d115      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f28:	3308      	adds	r3, #8
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 febd 	bl	8006cac <RCCEx_PLL2_Config>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f38:	e017      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f3e:	3328      	adds	r3, #40	@ 0x28
 8005f40:	2102      	movs	r1, #2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 ff64 	bl	8006e10 <RCCEx_PLL3_Config>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f4e:	e00c      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f56:	e008      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005f58:	58024400 	.word	0x58024400
        break;
 8005f5c:	bf00      	nop
 8005f5e:	e004      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005f60:	bf00      	nop
 8005f62:	e002      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005f64:	bf00      	nop
 8005f66:	e000      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10b      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f72:	4bc2      	ldr	r3, [pc, #776]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f76:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f82:	4abe      	ldr	r2, [pc, #760]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f84:	430b      	orrs	r3, r1
 8005f86:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f88:	e003      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f8e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005fa8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	d055      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005fb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005fba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005fbe:	d033      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005fc0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005fc4:	d82c      	bhi.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fca:	d02f      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd0:	d826      	bhi.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005fd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fd6:	d02b      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005fd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005fdc:	d820      	bhi.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005fde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fe2:	d012      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005fe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fe8:	d81a      	bhi.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d022      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff2:	d115      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ff4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 fe55 	bl	8006cac <RCCEx_PLL2_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006008:	e015      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800600a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800600e:	3328      	adds	r3, #40	@ 0x28
 8006010:	2102      	movs	r1, #2
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fefc 	bl	8006e10 <RCCEx_PLL3_Config>
 8006018:	4603      	mov	r3, r0
 800601a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800601e:	e00a      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006026:	e006      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006028:	bf00      	nop
 800602a:	e004      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800602c:	bf00      	nop
 800602e:	e002      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006030:	bf00      	nop
 8006032:	e000      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006036:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10b      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800603e:	4b8f      	ldr	r3, [pc, #572]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006042:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006046:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800604a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800604e:	4a8b      	ldr	r2, [pc, #556]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006050:	430b      	orrs	r3, r1
 8006052:	6593      	str	r3, [r2, #88]	@ 0x58
 8006054:	e003      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006056:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800605a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800605e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800606a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800606e:	2300      	movs	r3, #0
 8006070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006074:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006078:	460b      	mov	r3, r1
 800607a:	4313      	orrs	r3, r2
 800607c:	d055      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800607e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006082:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006086:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800608a:	d033      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800608c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006090:	d82c      	bhi.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006096:	d02f      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800609c:	d826      	bhi.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800609e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80060a2:	d02b      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80060a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80060a8:	d820      	bhi.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80060aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060ae:	d012      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80060b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060b4:	d81a      	bhi.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d022      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80060ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060be:	d115      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060c4:	3308      	adds	r3, #8
 80060c6:	2100      	movs	r1, #0
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fdef 	bl	8006cac <RCCEx_PLL2_Config>
 80060ce:	4603      	mov	r3, r0
 80060d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060d4:	e015      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060da:	3328      	adds	r3, #40	@ 0x28
 80060dc:	2102      	movs	r1, #2
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fe96 	bl	8006e10 <RCCEx_PLL3_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060ea:	e00a      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060f2:	e006      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060f4:	bf00      	nop
 80060f6:	e004      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060f8:	bf00      	nop
 80060fa:	e002      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060fc:	bf00      	nop
 80060fe:	e000      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006102:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800610a:	4b5c      	ldr	r3, [pc, #368]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800610c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006112:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006116:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800611a:	4a58      	ldr	r2, [pc, #352]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800611c:	430b      	orrs	r3, r1
 800611e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006120:	e003      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006122:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006126:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800612a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	f002 0308 	and.w	r3, r2, #8
 8006136:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800613a:	2300      	movs	r3, #0
 800613c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006140:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006144:	460b      	mov	r3, r1
 8006146:	4313      	orrs	r3, r2
 8006148:	d01e      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800614a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006156:	d10c      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006158:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800615c:	3328      	adds	r3, #40	@ 0x28
 800615e:	2102      	movs	r1, #2
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fe55 	bl	8006e10 <RCCEx_PLL3_Config>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006172:	4b42      	ldr	r3, [pc, #264]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006176:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800617a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006182:	4a3e      	ldr	r2, [pc, #248]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006184:	430b      	orrs	r3, r1
 8006186:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006188:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	f002 0310 	and.w	r3, r2, #16
 8006194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006198:	2300      	movs	r3, #0
 800619a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800619e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80061a2:	460b      	mov	r3, r1
 80061a4:	4313      	orrs	r3, r2
 80061a6:	d01e      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80061a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b4:	d10c      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ba:	3328      	adds	r3, #40	@ 0x28
 80061bc:	2102      	movs	r1, #2
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fe26 	bl	8006e10 <RCCEx_PLL3_Config>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061d0:	4b2a      	ldr	r3, [pc, #168]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061e0:	4a26      	ldr	r2, [pc, #152]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061e2:	430b      	orrs	r3, r1
 80061e4:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80061f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061f6:	2300      	movs	r3, #0
 80061f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006200:	460b      	mov	r3, r1
 8006202:	4313      	orrs	r3, r2
 8006204:	d040      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006206:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800620a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800620e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006212:	d022      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8006214:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006218:	d81b      	bhi.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800621e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006222:	d00b      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8006224:	e015      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006226:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800622a:	3308      	adds	r3, #8
 800622c:	2100      	movs	r1, #0
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fd3c 	bl	8006cac <RCCEx_PLL2_Config>
 8006234:	4603      	mov	r3, r0
 8006236:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800623a:	e00f      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800623c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006240:	3328      	adds	r3, #40	@ 0x28
 8006242:	2102      	movs	r1, #2
 8006244:	4618      	mov	r0, r3
 8006246:	f000 fde3 	bl	8006e10 <RCCEx_PLL3_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006250:	e004      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006258:	e000      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800625a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10d      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006264:	4b05      	ldr	r3, [pc, #20]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006268:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800626c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006270:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006274:	4a01      	ldr	r2, [pc, #4]	@ (800627c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006276:	430b      	orrs	r3, r1
 8006278:	6593      	str	r3, [r2, #88]	@ 0x58
 800627a:	e005      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800627c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006280:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006284:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006294:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006296:	2300      	movs	r3, #0
 8006298:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800629a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800629e:	460b      	mov	r3, r1
 80062a0:	4313      	orrs	r3, r2
 80062a2:	d03b      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80062a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062b0:	d01f      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80062b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80062b6:	d818      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80062b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062bc:	d003      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80062be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062c2:	d007      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80062c4:	e011      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c6:	4b64      	ldr	r3, [pc, #400]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ca:	4a63      	ldr	r2, [pc, #396]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80062d2:	e00f      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062d8:	3328      	adds	r3, #40	@ 0x28
 80062da:	2101      	movs	r1, #1
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fd97 	bl	8006e10 <RCCEx_PLL3_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80062e8:	e004      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80062f0:	e000      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80062f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10b      	bne.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062fc:	4b56      	ldr	r3, [pc, #344]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006300:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006304:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800630c:	4a52      	ldr	r2, [pc, #328]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800630e:	430b      	orrs	r3, r1
 8006310:	6553      	str	r3, [r2, #84]	@ 0x54
 8006312:	e003      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006314:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006318:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800631c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006328:	673b      	str	r3, [r7, #112]	@ 0x70
 800632a:	2300      	movs	r3, #0
 800632c:	677b      	str	r3, [r7, #116]	@ 0x74
 800632e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006332:	460b      	mov	r3, r1
 8006334:	4313      	orrs	r3, r2
 8006336:	d031      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800633c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8006342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006346:	d007      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006348:	e011      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800634a:	4b43      	ldr	r3, [pc, #268]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	4a42      	ldr	r2, [pc, #264]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006354:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006356:	e00e      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006358:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800635c:	3308      	adds	r3, #8
 800635e:	2102      	movs	r1, #2
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fca3 	bl	8006cac <RCCEx_PLL2_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800636c:	e003      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006376:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800637e:	4b36      	ldr	r3, [pc, #216]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006382:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006386:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800638a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800638c:	4a32      	ldr	r2, [pc, #200]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800638e:	430b      	orrs	r3, r1
 8006390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006392:	e003      	b.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006394:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006398:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800639c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80063a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063aa:	2300      	movs	r3, #0
 80063ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80063b2:	460b      	mov	r3, r1
 80063b4:	4313      	orrs	r3, r2
 80063b6:	d00c      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063bc:	3328      	adds	r3, #40	@ 0x28
 80063be:	2102      	movs	r1, #2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fd25 	bl	8006e10 <RCCEx_PLL3_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80063de:	663b      	str	r3, [r7, #96]	@ 0x60
 80063e0:	2300      	movs	r3, #0
 80063e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80063e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80063e8:	460b      	mov	r3, r1
 80063ea:	4313      	orrs	r3, r2
 80063ec:	d03a      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80063ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063fa:	d018      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80063fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006400:	d811      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006402:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006406:	d014      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800640c:	d80b      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d011      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006416:	d106      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006418:	4b0f      	ldr	r3, [pc, #60]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800641a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641c:	4a0e      	ldr	r2, [pc, #56]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800641e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006424:	e008      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800642c:	e004      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800642e:	bf00      	nop
 8006430:	e002      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006432:	bf00      	nop
 8006434:	e000      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006438:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10d      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006440:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006444:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006448:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800644c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006450:	4a01      	ldr	r2, [pc, #4]	@ (8006458 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006452:	430b      	orrs	r3, r1
 8006454:	6553      	str	r3, [r2, #84]	@ 0x54
 8006456:	e005      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006458:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006460:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006464:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006470:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006472:	2300      	movs	r3, #0
 8006474:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006476:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800647a:	460b      	mov	r3, r1
 800647c:	4313      	orrs	r3, r2
 800647e:	d009      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006480:	4baa      	ldr	r3, [pc, #680]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006484:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006488:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800648c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800648e:	4aa7      	ldr	r2, [pc, #668]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006490:	430b      	orrs	r3, r1
 8006492:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80064a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80064a2:	2300      	movs	r3, #0
 80064a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80064a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80064aa:	460b      	mov	r3, r1
 80064ac:	4313      	orrs	r3, r2
 80064ae:	d00a      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80064b0:	4b9e      	ldr	r3, [pc, #632]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80064b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80064c0:	4a9a      	ldr	r2, [pc, #616]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064c2:	430b      	orrs	r3, r1
 80064c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80064d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064d4:	2300      	movs	r3, #0
 80064d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80064dc:	460b      	mov	r3, r1
 80064de:	4313      	orrs	r3, r2
 80064e0:	d009      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064e2:	4b92      	ldr	r3, [pc, #584]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80064ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f0:	4a8e      	ldr	r2, [pc, #568]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064f2:	430b      	orrs	r3, r1
 80064f4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006502:	643b      	str	r3, [r7, #64]	@ 0x40
 8006504:	2300      	movs	r3, #0
 8006506:	647b      	str	r3, [r7, #68]	@ 0x44
 8006508:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800650c:	460b      	mov	r3, r1
 800650e:	4313      	orrs	r3, r2
 8006510:	d00e      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006512:	4b86      	ldr	r3, [pc, #536]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	4a85      	ldr	r2, [pc, #532]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006518:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800651c:	6113      	str	r3, [r2, #16]
 800651e:	4b83      	ldr	r3, [pc, #524]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006520:	6919      	ldr	r1, [r3, #16]
 8006522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006526:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800652a:	4a80      	ldr	r2, [pc, #512]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800652c:	430b      	orrs	r3, r1
 800652e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006530:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800653c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800653e:	2300      	movs	r3, #0
 8006540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006542:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006546:	460b      	mov	r3, r1
 8006548:	4313      	orrs	r3, r2
 800654a:	d009      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800654c:	4b77      	ldr	r3, [pc, #476]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800654e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006550:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006554:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655a:	4a74      	ldr	r2, [pc, #464]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800655c:	430b      	orrs	r3, r1
 800655e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006560:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006568:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800656c:	633b      	str	r3, [r7, #48]	@ 0x30
 800656e:	2300      	movs	r3, #0
 8006570:	637b      	str	r3, [r7, #52]	@ 0x34
 8006572:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006576:	460b      	mov	r3, r1
 8006578:	4313      	orrs	r3, r2
 800657a:	d00a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800657c:	4b6b      	ldr	r3, [pc, #428]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800657e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006580:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006584:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800658c:	4a67      	ldr	r2, [pc, #412]	@ (800672c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800658e:	430b      	orrs	r3, r1
 8006590:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006592:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	2100      	movs	r1, #0
 800659c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80065a8:	460b      	mov	r3, r1
 80065aa:	4313      	orrs	r3, r2
 80065ac:	d011      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065b2:	3308      	adds	r3, #8
 80065b4:	2100      	movs	r1, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fb78 	bl	8006cac <RCCEx_PLL2_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80065c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80065d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	2100      	movs	r1, #0
 80065dc:	6239      	str	r1, [r7, #32]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065e8:	460b      	mov	r3, r1
 80065ea:	4313      	orrs	r3, r2
 80065ec:	d011      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065f2:	3308      	adds	r3, #8
 80065f4:	2101      	movs	r1, #1
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fb58 	bl	8006cac <RCCEx_PLL2_Config>
 80065fc:	4603      	mov	r3, r0
 80065fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006602:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800660e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006612:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	2100      	movs	r1, #0
 800661c:	61b9      	str	r1, [r7, #24]
 800661e:	f003 0304 	and.w	r3, r3, #4
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006628:	460b      	mov	r3, r1
 800662a:	4313      	orrs	r3, r2
 800662c:	d011      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800662e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006632:	3308      	adds	r3, #8
 8006634:	2102      	movs	r1, #2
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fb38 	bl	8006cac <RCCEx_PLL2_Config>
 800663c:	4603      	mov	r3, r0
 800663e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006642:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800664e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006652:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	2100      	movs	r1, #0
 800665c:	6139      	str	r1, [r7, #16]
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006668:	460b      	mov	r3, r1
 800666a:	4313      	orrs	r3, r2
 800666c:	d011      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800666e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006672:	3328      	adds	r3, #40	@ 0x28
 8006674:	2100      	movs	r1, #0
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fbca 	bl	8006e10 <RCCEx_PLL3_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8006682:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800668e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006692:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	2100      	movs	r1, #0
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80066a8:	460b      	mov	r3, r1
 80066aa:	4313      	orrs	r3, r2
 80066ac:	d011      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066b2:	3328      	adds	r3, #40	@ 0x28
 80066b4:	2101      	movs	r1, #1
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fbaa 	bl	8006e10 <RCCEx_PLL3_Config>
 80066bc:	4603      	mov	r3, r0
 80066be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80066c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80066d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	2100      	movs	r1, #0
 80066dc:	6039      	str	r1, [r7, #0]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	607b      	str	r3, [r7, #4]
 80066e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066e8:	460b      	mov	r3, r1
 80066ea:	4313      	orrs	r3, r2
 80066ec:	d011      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066f2:	3328      	adds	r3, #40	@ 0x28
 80066f4:	2102      	movs	r1, #2
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fb8a 	bl	8006e10 <RCCEx_PLL3_Config>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006702:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800670e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006712:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006716:	2b00      	cmp	r3, #0
 8006718:	d101      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	e000      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
}
 8006720:	4618      	mov	r0, r3
 8006722:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006726:	46bd      	mov	sp, r7
 8006728:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800672c:	58024400 	.word	0x58024400

08006730 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006734:	f7fe fd56 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8006738:	4602      	mov	r2, r0
 800673a:	4b06      	ldr	r3, [pc, #24]	@ (8006754 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	091b      	lsrs	r3, r3, #4
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	4904      	ldr	r1, [pc, #16]	@ (8006758 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006746:	5ccb      	ldrb	r3, [r1, r3]
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006750:	4618      	mov	r0, r3
 8006752:	bd80      	pop	{r7, pc}
 8006754:	58024400 	.word	0x58024400
 8006758:	0800c770 	.word	0x0800c770

0800675c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800675c:	b480      	push	{r7}
 800675e:	b089      	sub	sp, #36	@ 0x24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006764:	4ba1      	ldr	r3, [pc, #644]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800676e:	4b9f      	ldr	r3, [pc, #636]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006772:	0b1b      	lsrs	r3, r3, #12
 8006774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006778:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800677a:	4b9c      	ldr	r3, [pc, #624]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800677c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677e:	091b      	lsrs	r3, r3, #4
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006786:	4b99      	ldr	r3, [pc, #612]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800678a:	08db      	lsrs	r3, r3, #3
 800678c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	fb02 f303 	mul.w	r3, r2, r3
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8111 	beq.w	80069cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	f000 8083 	beq.w	80068b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	f200 80a1 	bhi.w	80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d056      	beq.n	8006874 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067c6:	e099      	b.n	80068fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067c8:	4b88      	ldr	r3, [pc, #544]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d02d      	beq.n	8006830 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067d4:	4b85      	ldr	r3, [pc, #532]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	08db      	lsrs	r3, r3, #3
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	4a84      	ldr	r2, [pc, #528]	@ (80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067e0:	fa22 f303 	lsr.w	r3, r2, r3
 80067e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	ee07 3a90 	vmov	s15, r3
 80067ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067fe:	4b7b      	ldr	r3, [pc, #492]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006812:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80069f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800681a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800681e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800682a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800682e:	e087      	b.n	8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	ee07 3a90 	vmov	s15, r3
 8006836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80069f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800683e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006842:	4b6a      	ldr	r3, [pc, #424]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006852:	ed97 6a03 	vldr	s12, [r7, #12]
 8006856:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80069f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800685a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800685e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800686a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006872:	e065      	b.n	8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80069fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006886:	4b59      	ldr	r3, [pc, #356]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006896:	ed97 6a03 	vldr	s12, [r7, #12]
 800689a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80069f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800689e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068b6:	e043      	b.n	8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	ee07 3a90 	vmov	s15, r3
 80068be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006a00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ca:	4b48      	ldr	r3, [pc, #288]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068da:	ed97 6a03 	vldr	s12, [r7, #12]
 80068de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80069f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068fa:	e021      	b.n	8006940 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006906:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80069fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800690a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800690e:	4b37      	ldr	r3, [pc, #220]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800691e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006922:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80069f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800692e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800693e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006940:	4b2a      	ldr	r3, [pc, #168]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006944:	0a5b      	lsrs	r3, r3, #9
 8006946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006952:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006956:	ee37 7a87 	vadd.f32	s14, s15, s14
 800695a:	edd7 6a07 	vldr	s13, [r7, #28]
 800695e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006966:	ee17 2a90 	vmov	r2, s15
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800696e:	4b1f      	ldr	r3, [pc, #124]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006972:	0c1b      	lsrs	r3, r3, #16
 8006974:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006978:	ee07 3a90 	vmov	s15, r3
 800697c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006980:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006984:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006988:	edd7 6a07 	vldr	s13, [r7, #28]
 800698c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006994:	ee17 2a90 	vmov	r2, s15
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800699c:	4b13      	ldr	r3, [pc, #76]	@ (80069ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800699e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a0:	0e1b      	lsrs	r3, r3, #24
 80069a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80069b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80069ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069c2:	ee17 2a90 	vmov	r2, s15
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069ca:	e008      	b.n	80069de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	609a      	str	r2, [r3, #8]
}
 80069de:	bf00      	nop
 80069e0:	3724      	adds	r7, #36	@ 0x24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	58024400 	.word	0x58024400
 80069f0:	03d09000 	.word	0x03d09000
 80069f4:	46000000 	.word	0x46000000
 80069f8:	4c742400 	.word	0x4c742400
 80069fc:	4a742400 	.word	0x4a742400
 8006a00:	4bbebc20 	.word	0x4bbebc20

08006a04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b089      	sub	sp, #36	@ 0x24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a0c:	4ba1      	ldr	r3, [pc, #644]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a10:	f003 0303 	and.w	r3, r3, #3
 8006a14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006a16:	4b9f      	ldr	r3, [pc, #636]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1a:	0d1b      	lsrs	r3, r3, #20
 8006a1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a22:	4b9c      	ldr	r3, [pc, #624]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a26:	0a1b      	lsrs	r3, r3, #8
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006a2e:	4b99      	ldr	r3, [pc, #612]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a32:	08db      	lsrs	r3, r3, #3
 8006a34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	fb02 f303 	mul.w	r3, r2, r3
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 8111 	beq.w	8006c74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	f000 8083 	beq.w	8006b60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	f200 80a1 	bhi.w	8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d056      	beq.n	8006b1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a6e:	e099      	b.n	8006ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a70:	4b88      	ldr	r3, [pc, #544]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d02d      	beq.n	8006ad8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a7c:	4b85      	ldr	r3, [pc, #532]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	08db      	lsrs	r3, r3, #3
 8006a82:	f003 0303 	and.w	r3, r3, #3
 8006a86:	4a84      	ldr	r2, [pc, #528]	@ (8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a88:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	ee07 3a90 	vmov	s15, r3
 8006a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa6:	4b7b      	ldr	r3, [pc, #492]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ad6:	e087      	b.n	8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aea:	4b6a      	ldr	r3, [pc, #424]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006afe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b1a:	e065      	b.n	8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2e:	4b59      	ldr	r3, [pc, #356]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b5e:	e043      	b.n	8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b72:	4b48      	ldr	r3, [pc, #288]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ba2:	e021      	b.n	8006be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb6:	4b37      	ldr	r3, [pc, #220]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006be6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006be8:	4b2a      	ldr	r3, [pc, #168]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bec:	0a5b      	lsrs	r3, r3, #9
 8006bee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c02:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c0e:	ee17 2a90 	vmov	r2, s15
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006c16:	4b1f      	ldr	r3, [pc, #124]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1a:	0c1b      	lsrs	r3, r3, #16
 8006c1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c20:	ee07 3a90 	vmov	s15, r3
 8006c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c30:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c3c:	ee17 2a90 	vmov	r2, s15
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c44:	4b13      	ldr	r3, [pc, #76]	@ (8006c94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c48:	0e1b      	lsrs	r3, r3, #24
 8006c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c6a:	ee17 2a90 	vmov	r2, s15
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c72:	e008      	b.n	8006c86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	609a      	str	r2, [r3, #8]
}
 8006c86:	bf00      	nop
 8006c88:	3724      	adds	r7, #36	@ 0x24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	58024400 	.word	0x58024400
 8006c98:	03d09000 	.word	0x03d09000
 8006c9c:	46000000 	.word	0x46000000
 8006ca0:	4c742400 	.word	0x4c742400
 8006ca4:	4a742400 	.word	0x4a742400
 8006ca8:	4bbebc20 	.word	0x4bbebc20

08006cac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cba:	4b53      	ldr	r3, [pc, #332]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d101      	bne.n	8006cca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e099      	b.n	8006dfe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006cca:	4b4f      	ldr	r3, [pc, #316]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a4e      	ldr	r2, [pc, #312]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006cd0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006cd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd6:	f7fa fd39 	bl	800174c <HAL_GetTick>
 8006cda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cdc:	e008      	b.n	8006cf0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cde:	f7fa fd35 	bl	800174c <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d901      	bls.n	8006cf0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e086      	b.n	8006dfe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cf0:	4b45      	ldr	r3, [pc, #276]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1f0      	bne.n	8006cde <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006cfc:	4b42      	ldr	r3, [pc, #264]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d00:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	031b      	lsls	r3, r3, #12
 8006d0a:	493f      	ldr	r1, [pc, #252]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	025b      	lsls	r3, r3, #9
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	041b      	lsls	r3, r3, #16
 8006d2e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	061b      	lsls	r3, r3, #24
 8006d3c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d40:	4931      	ldr	r1, [pc, #196]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d46:	4b30      	ldr	r3, [pc, #192]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	492d      	ldr	r1, [pc, #180]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d58:	4b2b      	ldr	r3, [pc, #172]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5c:	f023 0220 	bic.w	r2, r3, #32
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	4928      	ldr	r1, [pc, #160]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d6a:	4b27      	ldr	r3, [pc, #156]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6e:	4a26      	ldr	r2, [pc, #152]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006d70:	f023 0310 	bic.w	r3, r3, #16
 8006d74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d76:	4b24      	ldr	r3, [pc, #144]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006d78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d7a:	4b24      	ldr	r3, [pc, #144]	@ (8006e0c <RCCEx_PLL2_Config+0x160>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	69d2      	ldr	r2, [r2, #28]
 8006d82:	00d2      	lsls	r2, r2, #3
 8006d84:	4920      	ldr	r1, [pc, #128]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006d90:	f043 0310 	orr.w	r3, r3, #16
 8006d94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d106      	bne.n	8006daa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da0:	4a19      	ldr	r2, [pc, #100]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006da2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006da6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006da8:	e00f      	b.n	8006dca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d106      	bne.n	8006dbe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006db0:	4b15      	ldr	r3, [pc, #84]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db4:	4a14      	ldr	r2, [pc, #80]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006dbc:	e005      	b.n	8006dca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006dbe:	4b12      	ldr	r3, [pc, #72]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc2:	4a11      	ldr	r2, [pc, #68]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006dc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006dca:	4b0f      	ldr	r3, [pc, #60]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a0e      	ldr	r2, [pc, #56]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006dd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dd6:	f7fa fcb9 	bl	800174c <HAL_GetTick>
 8006dda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ddc:	e008      	b.n	8006df0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dde:	f7fa fcb5 	bl	800174c <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d901      	bls.n	8006df0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e006      	b.n	8006dfe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006df0:	4b05      	ldr	r3, [pc, #20]	@ (8006e08 <RCCEx_PLL2_Config+0x15c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0f0      	beq.n	8006dde <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	58024400 	.word	0x58024400
 8006e0c:	ffff0007 	.word	0xffff0007

08006e10 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e1e:	4b53      	ldr	r3, [pc, #332]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e22:	f003 0303 	and.w	r3, r3, #3
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d101      	bne.n	8006e2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e099      	b.n	8006f62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006e2e:	4b4f      	ldr	r3, [pc, #316]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a4e      	ldr	r2, [pc, #312]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006e34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e3a:	f7fa fc87 	bl	800174c <HAL_GetTick>
 8006e3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e40:	e008      	b.n	8006e54 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e42:	f7fa fc83 	bl	800174c <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d901      	bls.n	8006e54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e086      	b.n	8006f62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e54:	4b45      	ldr	r3, [pc, #276]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1f0      	bne.n	8006e42 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e60:	4b42      	ldr	r3, [pc, #264]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e64:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	051b      	lsls	r3, r3, #20
 8006e6e:	493f      	ldr	r1, [pc, #252]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	025b      	lsls	r3, r3, #9
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	041b      	lsls	r3, r3, #16
 8006e92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	061b      	lsls	r3, r3, #24
 8006ea0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ea4:	4931      	ldr	r1, [pc, #196]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006eaa:	4b30      	ldr	r3, [pc, #192]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	492d      	ldr	r1, [pc, #180]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	4928      	ldr	r1, [pc, #160]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006ece:	4b27      	ldr	r3, [pc, #156]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed2:	4a26      	ldr	r2, [pc, #152]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006ed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006eda:	4b24      	ldr	r3, [pc, #144]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ede:	4b24      	ldr	r3, [pc, #144]	@ (8006f70 <RCCEx_PLL3_Config+0x160>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	69d2      	ldr	r2, [r2, #28]
 8006ee6:	00d2      	lsls	r2, r2, #3
 8006ee8:	4920      	ldr	r1, [pc, #128]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006eee:	4b1f      	ldr	r3, [pc, #124]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d106      	bne.n	8006f0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f00:	4b1a      	ldr	r3, [pc, #104]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f04:	4a19      	ldr	r2, [pc, #100]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006f06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006f0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f0c:	e00f      	b.n	8006f2e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d106      	bne.n	8006f22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f14:	4b15      	ldr	r3, [pc, #84]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f18:	4a14      	ldr	r2, [pc, #80]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006f1a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f20:	e005      	b.n	8006f2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f22:	4b12      	ldr	r3, [pc, #72]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f26:	4a11      	ldr	r2, [pc, #68]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006f28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a0e      	ldr	r2, [pc, #56]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f3a:	f7fa fc07 	bl	800174c <HAL_GetTick>
 8006f3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f40:	e008      	b.n	8006f54 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f42:	f7fa fc03 	bl	800174c <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d901      	bls.n	8006f54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e006      	b.n	8006f62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f54:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <RCCEx_PLL3_Config+0x15c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d0f0      	beq.n	8006f42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	58024400 	.word	0x58024400
 8006f70:	ffff0007 	.word	0xffff0007

08006f74 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e054      	b.n	8007030 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	7a5b      	ldrb	r3, [r3, #9]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d105      	bne.n	8006f9c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7fa f81a 	bl	8000fd0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f023 0120 	bic.w	r1, r3, #32
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0204 	orr.w	r2, r2, #4
 8006fc6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd2:	2b40      	cmp	r3, #64	@ 0x40
 8006fd4:	d104      	bne.n	8006fe0 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2204      	movs	r2, #4
 8006fda:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e027      	b.n	8007030 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8006fe0:	f7fa fbb4 	bl	800174c <HAL_GetTick>
 8006fe4:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006fe6:	e015      	b.n	8007014 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006fe8:	f7fa fbb0 	bl	800174c <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d90e      	bls.n	8007014 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b04      	cmp	r3, #4
 8007002:	d107      	bne.n	8007014 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2204      	movs	r2, #4
 8007008:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2202      	movs	r2, #2
 800700e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e00d      	b.n	8007030 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b04      	cmp	r3, #4
 8007020:	d0e2      	beq.n	8006fe8 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	7a1b      	ldrb	r3, [r3, #8]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <HAL_RNG_GenerateRandomNumber+0x1a>
 800704e:	2302      	movs	r3, #2
 8007050:	e044      	b.n	80070dc <HAL_RNG_GenerateRandomNumber+0xa4>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7a5b      	ldrb	r3, [r3, #9]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b01      	cmp	r3, #1
 8007060:	d133      	bne.n	80070ca <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8007068:	f7fa fb70 	bl	800174c <HAL_GetTick>
 800706c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800706e:	e018      	b.n	80070a2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007070:	f7fa fb6c 	bl	800174c <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d911      	bls.n	80070a2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b01      	cmp	r3, #1
 800708a:	d00a      	beq.n	80070a2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2202      	movs	r2, #2
 8007096:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e01c      	b.n	80070dc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d1df      	bne.n	8007070 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691a      	ldr	r2, [r3, #16]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	725a      	strb	r2, [r3, #9]
 80070c8:	e004      	b.n	80070d4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2204      	movs	r2, #4
 80070ce:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	721a      	strb	r2, [r3, #8]

  return status;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2210      	movs	r2, #16
 8007106:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8007108:	2301      	movs	r3, #1
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	e01f      	b.n	800714e <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01a      	beq.n	800714e <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f003 0304 	and.w	r3, r3, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	d108      	bne.n	8007134 <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	e00c      	b.n	800714e <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2208      	movs	r2, #8
 8007138:	60da      	str	r2, [r3, #12]
      rngclockerror = 1U;
 800713a:	2301      	movs	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0208 	bic.w	r2, r2, #8
 800714c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d10b      	bne.n	800716c <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2204      	movs	r2, #4
 8007158:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f837 	bl	80071ce <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8007168:	605a      	str	r2, [r3, #4]

    return;
 800716a:	e022      	b.n	80071b2 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01d      	beq.n	80071b2 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0208 	bic.w	r2, r2, #8
 8007184:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	7a5b      	ldrb	r3, [r3, #9]
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b04      	cmp	r3, #4
 8007198:	d00b      	beq.n	80071b2 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f803 	bl	80071b8 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b082      	sub	sp, #8
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e042      	b.n	800727a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d106      	bne.n	800720c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7f9 ff24 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2224      	movs	r2, #36	@ 0x24
 8007210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0201 	bic.w	r2, r2, #1
 8007222:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fe5d 	bl	8007eec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f8f2 	bl	800741c <UART_SetConfig>
 8007238:	4603      	mov	r3, r0
 800723a:	2b01      	cmp	r3, #1
 800723c:	d101      	bne.n	8007242 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e01b      	b.n	800727a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007250:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007260:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f042 0201 	orr.w	r2, r2, #1
 8007270:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fedc 	bl	8008030 <UART_CheckIdleState>
 8007278:	4603      	mov	r3, r0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b082      	sub	sp, #8
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e031      	b.n	80072f8 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2224      	movs	r2, #36	@ 0x24
 8007298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2200      	movs	r2, #0
 80072ba:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2200      	movs	r2, #0
 80072c2:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7f9 ff2d 	bl	8001124 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08a      	sub	sp, #40	@ 0x28
 8007304:	af02      	add	r7, sp, #8
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	603b      	str	r3, [r7, #0]
 800730c:	4613      	mov	r3, r2
 800730e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007316:	2b20      	cmp	r3, #32
 8007318:	d17b      	bne.n	8007412 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <HAL_UART_Transmit+0x26>
 8007320:	88fb      	ldrh	r3, [r7, #6]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e074      	b.n	8007414 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2221      	movs	r2, #33	@ 0x21
 8007336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800733a:	f7fa fa07 	bl	800174c <HAL_GetTick>
 800733e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	88fa      	ldrh	r2, [r7, #6]
 8007344:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	88fa      	ldrh	r2, [r7, #6]
 800734c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007358:	d108      	bne.n	800736c <HAL_UART_Transmit+0x6c>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d104      	bne.n	800736c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007362:	2300      	movs	r3, #0
 8007364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	e003      	b.n	8007374 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007370:	2300      	movs	r3, #0
 8007372:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007374:	e030      	b.n	80073d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2200      	movs	r2, #0
 800737e:	2180      	movs	r1, #128	@ 0x80
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 feff 	bl	8008184 <UART_WaitOnFlagUntilTimeout>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d005      	beq.n	8007398 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e03d      	b.n	8007414 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10b      	bne.n	80073b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	3302      	adds	r3, #2
 80073b2:	61bb      	str	r3, [r7, #24]
 80073b4:	e007      	b.n	80073c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	781a      	ldrb	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	3301      	adds	r3, #1
 80073c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1c8      	bne.n	8007376 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2200      	movs	r2, #0
 80073ec:	2140      	movs	r1, #64	@ 0x40
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 fec8 	bl	8008184 <UART_WaitOnFlagUntilTimeout>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d005      	beq.n	8007406 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e006      	b.n	8007414 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2220      	movs	r2, #32
 800740a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	e000      	b.n	8007414 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007412:	2302      	movs	r3, #2
  }
}
 8007414:	4618      	mov	r0, r3
 8007416:	3720      	adds	r7, #32
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800741c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007420:	b092      	sub	sp, #72	@ 0x48
 8007422:	af00      	add	r7, sp, #0
 8007424:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	431a      	orrs	r2, r3
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	431a      	orrs	r2, r3
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	4313      	orrs	r3, r2
 8007442:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	4bbe      	ldr	r3, [pc, #760]	@ (8007744 <UART_SetConfig+0x328>)
 800744c:	4013      	ands	r3, r2
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	6812      	ldr	r2, [r2, #0]
 8007452:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007454:	430b      	orrs	r3, r1
 8007456:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4ab3      	ldr	r2, [pc, #716]	@ (8007748 <UART_SetConfig+0x32c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d004      	beq.n	8007488 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007484:	4313      	orrs	r3, r2
 8007486:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	4baf      	ldr	r3, [pc, #700]	@ (800774c <UART_SetConfig+0x330>)
 8007490:	4013      	ands	r3, r2
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	6812      	ldr	r2, [r2, #0]
 8007496:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007498:	430b      	orrs	r3, r1
 800749a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a2:	f023 010f 	bic.w	r1, r3, #15
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4aa6      	ldr	r2, [pc, #664]	@ (8007750 <UART_SetConfig+0x334>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d177      	bne.n	80075ac <UART_SetConfig+0x190>
 80074bc:	4ba5      	ldr	r3, [pc, #660]	@ (8007754 <UART_SetConfig+0x338>)
 80074be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074c4:	2b28      	cmp	r3, #40	@ 0x28
 80074c6:	d86d      	bhi.n	80075a4 <UART_SetConfig+0x188>
 80074c8:	a201      	add	r2, pc, #4	@ (adr r2, 80074d0 <UART_SetConfig+0xb4>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	08007575 	.word	0x08007575
 80074d4:	080075a5 	.word	0x080075a5
 80074d8:	080075a5 	.word	0x080075a5
 80074dc:	080075a5 	.word	0x080075a5
 80074e0:	080075a5 	.word	0x080075a5
 80074e4:	080075a5 	.word	0x080075a5
 80074e8:	080075a5 	.word	0x080075a5
 80074ec:	080075a5 	.word	0x080075a5
 80074f0:	0800757d 	.word	0x0800757d
 80074f4:	080075a5 	.word	0x080075a5
 80074f8:	080075a5 	.word	0x080075a5
 80074fc:	080075a5 	.word	0x080075a5
 8007500:	080075a5 	.word	0x080075a5
 8007504:	080075a5 	.word	0x080075a5
 8007508:	080075a5 	.word	0x080075a5
 800750c:	080075a5 	.word	0x080075a5
 8007510:	08007585 	.word	0x08007585
 8007514:	080075a5 	.word	0x080075a5
 8007518:	080075a5 	.word	0x080075a5
 800751c:	080075a5 	.word	0x080075a5
 8007520:	080075a5 	.word	0x080075a5
 8007524:	080075a5 	.word	0x080075a5
 8007528:	080075a5 	.word	0x080075a5
 800752c:	080075a5 	.word	0x080075a5
 8007530:	0800758d 	.word	0x0800758d
 8007534:	080075a5 	.word	0x080075a5
 8007538:	080075a5 	.word	0x080075a5
 800753c:	080075a5 	.word	0x080075a5
 8007540:	080075a5 	.word	0x080075a5
 8007544:	080075a5 	.word	0x080075a5
 8007548:	080075a5 	.word	0x080075a5
 800754c:	080075a5 	.word	0x080075a5
 8007550:	08007595 	.word	0x08007595
 8007554:	080075a5 	.word	0x080075a5
 8007558:	080075a5 	.word	0x080075a5
 800755c:	080075a5 	.word	0x080075a5
 8007560:	080075a5 	.word	0x080075a5
 8007564:	080075a5 	.word	0x080075a5
 8007568:	080075a5 	.word	0x080075a5
 800756c:	080075a5 	.word	0x080075a5
 8007570:	0800759d 	.word	0x0800759d
 8007574:	2301      	movs	r3, #1
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757a:	e222      	b.n	80079c2 <UART_SetConfig+0x5a6>
 800757c:	2304      	movs	r3, #4
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007582:	e21e      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007584:	2308      	movs	r3, #8
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758a:	e21a      	b.n	80079c2 <UART_SetConfig+0x5a6>
 800758c:	2310      	movs	r3, #16
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007592:	e216      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007594:	2320      	movs	r3, #32
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759a:	e212      	b.n	80079c2 <UART_SetConfig+0x5a6>
 800759c:	2340      	movs	r3, #64	@ 0x40
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a2:	e20e      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80075a4:	2380      	movs	r3, #128	@ 0x80
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075aa:	e20a      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a69      	ldr	r2, [pc, #420]	@ (8007758 <UART_SetConfig+0x33c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d130      	bne.n	8007618 <UART_SetConfig+0x1fc>
 80075b6:	4b67      	ldr	r3, [pc, #412]	@ (8007754 <UART_SetConfig+0x338>)
 80075b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	2b05      	cmp	r3, #5
 80075c0:	d826      	bhi.n	8007610 <UART_SetConfig+0x1f4>
 80075c2:	a201      	add	r2, pc, #4	@ (adr r2, 80075c8 <UART_SetConfig+0x1ac>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	080075e1 	.word	0x080075e1
 80075cc:	080075e9 	.word	0x080075e9
 80075d0:	080075f1 	.word	0x080075f1
 80075d4:	080075f9 	.word	0x080075f9
 80075d8:	08007601 	.word	0x08007601
 80075dc:	08007609 	.word	0x08007609
 80075e0:	2300      	movs	r3, #0
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e6:	e1ec      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80075e8:	2304      	movs	r3, #4
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ee:	e1e8      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80075f0:	2308      	movs	r3, #8
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f6:	e1e4      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80075f8:	2310      	movs	r3, #16
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fe:	e1e0      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007600:	2320      	movs	r3, #32
 8007602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007606:	e1dc      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007608:	2340      	movs	r3, #64	@ 0x40
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760e:	e1d8      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007610:	2380      	movs	r3, #128	@ 0x80
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007616:	e1d4      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a4f      	ldr	r2, [pc, #316]	@ (800775c <UART_SetConfig+0x340>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d130      	bne.n	8007684 <UART_SetConfig+0x268>
 8007622:	4b4c      	ldr	r3, [pc, #304]	@ (8007754 <UART_SetConfig+0x338>)
 8007624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	2b05      	cmp	r3, #5
 800762c:	d826      	bhi.n	800767c <UART_SetConfig+0x260>
 800762e:	a201      	add	r2, pc, #4	@ (adr r2, 8007634 <UART_SetConfig+0x218>)
 8007630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007634:	0800764d 	.word	0x0800764d
 8007638:	08007655 	.word	0x08007655
 800763c:	0800765d 	.word	0x0800765d
 8007640:	08007665 	.word	0x08007665
 8007644:	0800766d 	.word	0x0800766d
 8007648:	08007675 	.word	0x08007675
 800764c:	2300      	movs	r3, #0
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007652:	e1b6      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007654:	2304      	movs	r3, #4
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765a:	e1b2      	b.n	80079c2 <UART_SetConfig+0x5a6>
 800765c:	2308      	movs	r3, #8
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007662:	e1ae      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007664:	2310      	movs	r3, #16
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766a:	e1aa      	b.n	80079c2 <UART_SetConfig+0x5a6>
 800766c:	2320      	movs	r3, #32
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007672:	e1a6      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007674:	2340      	movs	r3, #64	@ 0x40
 8007676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767a:	e1a2      	b.n	80079c2 <UART_SetConfig+0x5a6>
 800767c:	2380      	movs	r3, #128	@ 0x80
 800767e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007682:	e19e      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a35      	ldr	r2, [pc, #212]	@ (8007760 <UART_SetConfig+0x344>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d130      	bne.n	80076f0 <UART_SetConfig+0x2d4>
 800768e:	4b31      	ldr	r3, [pc, #196]	@ (8007754 <UART_SetConfig+0x338>)
 8007690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	2b05      	cmp	r3, #5
 8007698:	d826      	bhi.n	80076e8 <UART_SetConfig+0x2cc>
 800769a:	a201      	add	r2, pc, #4	@ (adr r2, 80076a0 <UART_SetConfig+0x284>)
 800769c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a0:	080076b9 	.word	0x080076b9
 80076a4:	080076c1 	.word	0x080076c1
 80076a8:	080076c9 	.word	0x080076c9
 80076ac:	080076d1 	.word	0x080076d1
 80076b0:	080076d9 	.word	0x080076d9
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	2300      	movs	r3, #0
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076be:	e180      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80076c0:	2304      	movs	r3, #4
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c6:	e17c      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80076c8:	2308      	movs	r3, #8
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ce:	e178      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80076d0:	2310      	movs	r3, #16
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d6:	e174      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80076d8:	2320      	movs	r3, #32
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076de:	e170      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80076e0:	2340      	movs	r3, #64	@ 0x40
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e6:	e16c      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80076e8:	2380      	movs	r3, #128	@ 0x80
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ee:	e168      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007764 <UART_SetConfig+0x348>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d142      	bne.n	8007780 <UART_SetConfig+0x364>
 80076fa:	4b16      	ldr	r3, [pc, #88]	@ (8007754 <UART_SetConfig+0x338>)
 80076fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	2b05      	cmp	r3, #5
 8007704:	d838      	bhi.n	8007778 <UART_SetConfig+0x35c>
 8007706:	a201      	add	r2, pc, #4	@ (adr r2, 800770c <UART_SetConfig+0x2f0>)
 8007708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770c:	08007725 	.word	0x08007725
 8007710:	0800772d 	.word	0x0800772d
 8007714:	08007735 	.word	0x08007735
 8007718:	0800773d 	.word	0x0800773d
 800771c:	08007769 	.word	0x08007769
 8007720:	08007771 	.word	0x08007771
 8007724:	2300      	movs	r3, #0
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772a:	e14a      	b.n	80079c2 <UART_SetConfig+0x5a6>
 800772c:	2304      	movs	r3, #4
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007732:	e146      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007734:	2308      	movs	r3, #8
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800773a:	e142      	b.n	80079c2 <UART_SetConfig+0x5a6>
 800773c:	2310      	movs	r3, #16
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007742:	e13e      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007744:	cfff69f3 	.word	0xcfff69f3
 8007748:	58000c00 	.word	0x58000c00
 800774c:	11fff4ff 	.word	0x11fff4ff
 8007750:	40011000 	.word	0x40011000
 8007754:	58024400 	.word	0x58024400
 8007758:	40004400 	.word	0x40004400
 800775c:	40004800 	.word	0x40004800
 8007760:	40004c00 	.word	0x40004c00
 8007764:	40005000 	.word	0x40005000
 8007768:	2320      	movs	r3, #32
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776e:	e128      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007770:	2340      	movs	r3, #64	@ 0x40
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007776:	e124      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007778:	2380      	movs	r3, #128	@ 0x80
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777e:	e120      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4acb      	ldr	r2, [pc, #812]	@ (8007ab4 <UART_SetConfig+0x698>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d176      	bne.n	8007878 <UART_SetConfig+0x45c>
 800778a:	4bcb      	ldr	r3, [pc, #812]	@ (8007ab8 <UART_SetConfig+0x69c>)
 800778c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800778e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007792:	2b28      	cmp	r3, #40	@ 0x28
 8007794:	d86c      	bhi.n	8007870 <UART_SetConfig+0x454>
 8007796:	a201      	add	r2, pc, #4	@ (adr r2, 800779c <UART_SetConfig+0x380>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	08007841 	.word	0x08007841
 80077a0:	08007871 	.word	0x08007871
 80077a4:	08007871 	.word	0x08007871
 80077a8:	08007871 	.word	0x08007871
 80077ac:	08007871 	.word	0x08007871
 80077b0:	08007871 	.word	0x08007871
 80077b4:	08007871 	.word	0x08007871
 80077b8:	08007871 	.word	0x08007871
 80077bc:	08007849 	.word	0x08007849
 80077c0:	08007871 	.word	0x08007871
 80077c4:	08007871 	.word	0x08007871
 80077c8:	08007871 	.word	0x08007871
 80077cc:	08007871 	.word	0x08007871
 80077d0:	08007871 	.word	0x08007871
 80077d4:	08007871 	.word	0x08007871
 80077d8:	08007871 	.word	0x08007871
 80077dc:	08007851 	.word	0x08007851
 80077e0:	08007871 	.word	0x08007871
 80077e4:	08007871 	.word	0x08007871
 80077e8:	08007871 	.word	0x08007871
 80077ec:	08007871 	.word	0x08007871
 80077f0:	08007871 	.word	0x08007871
 80077f4:	08007871 	.word	0x08007871
 80077f8:	08007871 	.word	0x08007871
 80077fc:	08007859 	.word	0x08007859
 8007800:	08007871 	.word	0x08007871
 8007804:	08007871 	.word	0x08007871
 8007808:	08007871 	.word	0x08007871
 800780c:	08007871 	.word	0x08007871
 8007810:	08007871 	.word	0x08007871
 8007814:	08007871 	.word	0x08007871
 8007818:	08007871 	.word	0x08007871
 800781c:	08007861 	.word	0x08007861
 8007820:	08007871 	.word	0x08007871
 8007824:	08007871 	.word	0x08007871
 8007828:	08007871 	.word	0x08007871
 800782c:	08007871 	.word	0x08007871
 8007830:	08007871 	.word	0x08007871
 8007834:	08007871 	.word	0x08007871
 8007838:	08007871 	.word	0x08007871
 800783c:	08007869 	.word	0x08007869
 8007840:	2301      	movs	r3, #1
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e0bc      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007848:	2304      	movs	r3, #4
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e0b8      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007850:	2308      	movs	r3, #8
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007856:	e0b4      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007858:	2310      	movs	r3, #16
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785e:	e0b0      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007860:	2320      	movs	r3, #32
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007866:	e0ac      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007868:	2340      	movs	r3, #64	@ 0x40
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786e:	e0a8      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007870:	2380      	movs	r3, #128	@ 0x80
 8007872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007876:	e0a4      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a8f      	ldr	r2, [pc, #572]	@ (8007abc <UART_SetConfig+0x6a0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d130      	bne.n	80078e4 <UART_SetConfig+0x4c8>
 8007882:	4b8d      	ldr	r3, [pc, #564]	@ (8007ab8 <UART_SetConfig+0x69c>)
 8007884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	2b05      	cmp	r3, #5
 800788c:	d826      	bhi.n	80078dc <UART_SetConfig+0x4c0>
 800788e:	a201      	add	r2, pc, #4	@ (adr r2, 8007894 <UART_SetConfig+0x478>)
 8007890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007894:	080078ad 	.word	0x080078ad
 8007898:	080078b5 	.word	0x080078b5
 800789c:	080078bd 	.word	0x080078bd
 80078a0:	080078c5 	.word	0x080078c5
 80078a4:	080078cd 	.word	0x080078cd
 80078a8:	080078d5 	.word	0x080078d5
 80078ac:	2300      	movs	r3, #0
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e086      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80078b4:	2304      	movs	r3, #4
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ba:	e082      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80078bc:	2308      	movs	r3, #8
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c2:	e07e      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80078c4:	2310      	movs	r3, #16
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ca:	e07a      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80078cc:	2320      	movs	r3, #32
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d2:	e076      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80078d4:	2340      	movs	r3, #64	@ 0x40
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078da:	e072      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80078dc:	2380      	movs	r3, #128	@ 0x80
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e2:	e06e      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a75      	ldr	r2, [pc, #468]	@ (8007ac0 <UART_SetConfig+0x6a4>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d130      	bne.n	8007950 <UART_SetConfig+0x534>
 80078ee:	4b72      	ldr	r3, [pc, #456]	@ (8007ab8 <UART_SetConfig+0x69c>)
 80078f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	2b05      	cmp	r3, #5
 80078f8:	d826      	bhi.n	8007948 <UART_SetConfig+0x52c>
 80078fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007900 <UART_SetConfig+0x4e4>)
 80078fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007900:	08007919 	.word	0x08007919
 8007904:	08007921 	.word	0x08007921
 8007908:	08007929 	.word	0x08007929
 800790c:	08007931 	.word	0x08007931
 8007910:	08007939 	.word	0x08007939
 8007914:	08007941 	.word	0x08007941
 8007918:	2300      	movs	r3, #0
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e050      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007920:	2304      	movs	r3, #4
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e04c      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007928:	2308      	movs	r3, #8
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792e:	e048      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007930:	2310      	movs	r3, #16
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e044      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007938:	2320      	movs	r3, #32
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e040      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007940:	2340      	movs	r3, #64	@ 0x40
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007946:	e03c      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007948:	2380      	movs	r3, #128	@ 0x80
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794e:	e038      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a5b      	ldr	r2, [pc, #364]	@ (8007ac4 <UART_SetConfig+0x6a8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d130      	bne.n	80079bc <UART_SetConfig+0x5a0>
 800795a:	4b57      	ldr	r3, [pc, #348]	@ (8007ab8 <UART_SetConfig+0x69c>)
 800795c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	2b05      	cmp	r3, #5
 8007964:	d826      	bhi.n	80079b4 <UART_SetConfig+0x598>
 8007966:	a201      	add	r2, pc, #4	@ (adr r2, 800796c <UART_SetConfig+0x550>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	08007985 	.word	0x08007985
 8007970:	0800798d 	.word	0x0800798d
 8007974:	08007995 	.word	0x08007995
 8007978:	0800799d 	.word	0x0800799d
 800797c:	080079a5 	.word	0x080079a5
 8007980:	080079ad 	.word	0x080079ad
 8007984:	2302      	movs	r3, #2
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e01a      	b.n	80079c2 <UART_SetConfig+0x5a6>
 800798c:	2304      	movs	r3, #4
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e016      	b.n	80079c2 <UART_SetConfig+0x5a6>
 8007994:	2308      	movs	r3, #8
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e012      	b.n	80079c2 <UART_SetConfig+0x5a6>
 800799c:	2310      	movs	r3, #16
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e00e      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80079a4:	2320      	movs	r3, #32
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e00a      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80079ac:	2340      	movs	r3, #64	@ 0x40
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b2:	e006      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80079b4:	2380      	movs	r3, #128	@ 0x80
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ba:	e002      	b.n	80079c2 <UART_SetConfig+0x5a6>
 80079bc:	2380      	movs	r3, #128	@ 0x80
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ac4 <UART_SetConfig+0x6a8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	f040 80f8 	bne.w	8007bbe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	dc46      	bgt.n	8007a64 <UART_SetConfig+0x648>
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	f2c0 8082 	blt.w	8007ae0 <UART_SetConfig+0x6c4>
 80079dc:	3b02      	subs	r3, #2
 80079de:	2b1e      	cmp	r3, #30
 80079e0:	d87e      	bhi.n	8007ae0 <UART_SetConfig+0x6c4>
 80079e2:	a201      	add	r2, pc, #4	@ (adr r2, 80079e8 <UART_SetConfig+0x5cc>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	08007a6b 	.word	0x08007a6b
 80079ec:	08007ae1 	.word	0x08007ae1
 80079f0:	08007a73 	.word	0x08007a73
 80079f4:	08007ae1 	.word	0x08007ae1
 80079f8:	08007ae1 	.word	0x08007ae1
 80079fc:	08007ae1 	.word	0x08007ae1
 8007a00:	08007a83 	.word	0x08007a83
 8007a04:	08007ae1 	.word	0x08007ae1
 8007a08:	08007ae1 	.word	0x08007ae1
 8007a0c:	08007ae1 	.word	0x08007ae1
 8007a10:	08007ae1 	.word	0x08007ae1
 8007a14:	08007ae1 	.word	0x08007ae1
 8007a18:	08007ae1 	.word	0x08007ae1
 8007a1c:	08007ae1 	.word	0x08007ae1
 8007a20:	08007a93 	.word	0x08007a93
 8007a24:	08007ae1 	.word	0x08007ae1
 8007a28:	08007ae1 	.word	0x08007ae1
 8007a2c:	08007ae1 	.word	0x08007ae1
 8007a30:	08007ae1 	.word	0x08007ae1
 8007a34:	08007ae1 	.word	0x08007ae1
 8007a38:	08007ae1 	.word	0x08007ae1
 8007a3c:	08007ae1 	.word	0x08007ae1
 8007a40:	08007ae1 	.word	0x08007ae1
 8007a44:	08007ae1 	.word	0x08007ae1
 8007a48:	08007ae1 	.word	0x08007ae1
 8007a4c:	08007ae1 	.word	0x08007ae1
 8007a50:	08007ae1 	.word	0x08007ae1
 8007a54:	08007ae1 	.word	0x08007ae1
 8007a58:	08007ae1 	.word	0x08007ae1
 8007a5c:	08007ae1 	.word	0x08007ae1
 8007a60:	08007ad3 	.word	0x08007ad3
 8007a64:	2b40      	cmp	r3, #64	@ 0x40
 8007a66:	d037      	beq.n	8007ad8 <UART_SetConfig+0x6bc>
 8007a68:	e03a      	b.n	8007ae0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a6a:	f7fe fe61 	bl	8006730 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a70:	e03c      	b.n	8007aec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fe fe70 	bl	800675c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a80:	e034      	b.n	8007aec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a82:	f107 0318 	add.w	r3, r7, #24
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe ffbc 	bl	8006a04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a90:	e02c      	b.n	8007aec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a92:	4b09      	ldr	r3, [pc, #36]	@ (8007ab8 <UART_SetConfig+0x69c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d016      	beq.n	8007acc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a9e:	4b06      	ldr	r3, [pc, #24]	@ (8007ab8 <UART_SetConfig+0x69c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	08db      	lsrs	r3, r3, #3
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	4a07      	ldr	r2, [pc, #28]	@ (8007ac8 <UART_SetConfig+0x6ac>)
 8007aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8007aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ab0:	e01c      	b.n	8007aec <UART_SetConfig+0x6d0>
 8007ab2:	bf00      	nop
 8007ab4:	40011400 	.word	0x40011400
 8007ab8:	58024400 	.word	0x58024400
 8007abc:	40007800 	.word	0x40007800
 8007ac0:	40007c00 	.word	0x40007c00
 8007ac4:	58000c00 	.word	0x58000c00
 8007ac8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007acc:	4b9d      	ldr	r3, [pc, #628]	@ (8007d44 <UART_SetConfig+0x928>)
 8007ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ad0:	e00c      	b.n	8007aec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ad2:	4b9d      	ldr	r3, [pc, #628]	@ (8007d48 <UART_SetConfig+0x92c>)
 8007ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ad6:	e009      	b.n	8007aec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ad8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ade:	e005      	b.n	8007aec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007aea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 81de 	beq.w	8007eb0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af8:	4a94      	ldr	r2, [pc, #592]	@ (8007d4c <UART_SetConfig+0x930>)
 8007afa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007afe:	461a      	mov	r2, r3
 8007b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b02:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b06:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	4413      	add	r3, r2
 8007b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d305      	bcc.n	8007b24 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d903      	bls.n	8007b2c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b2a:	e1c1      	b.n	8007eb0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b2e:	2200      	movs	r2, #0
 8007b30:	60bb      	str	r3, [r7, #8]
 8007b32:	60fa      	str	r2, [r7, #12]
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b38:	4a84      	ldr	r2, [pc, #528]	@ (8007d4c <UART_SetConfig+0x930>)
 8007b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2200      	movs	r2, #0
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	607a      	str	r2, [r7, #4]
 8007b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b4e:	f7f8 fc27 	bl	80003a0 <__aeabi_uldivmod>
 8007b52:	4602      	mov	r2, r0
 8007b54:	460b      	mov	r3, r1
 8007b56:	4610      	mov	r0, r2
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f04f 0200 	mov.w	r2, #0
 8007b5e:	f04f 0300 	mov.w	r3, #0
 8007b62:	020b      	lsls	r3, r1, #8
 8007b64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b68:	0202      	lsls	r2, r0, #8
 8007b6a:	6979      	ldr	r1, [r7, #20]
 8007b6c:	6849      	ldr	r1, [r1, #4]
 8007b6e:	0849      	lsrs	r1, r1, #1
 8007b70:	2000      	movs	r0, #0
 8007b72:	460c      	mov	r4, r1
 8007b74:	4605      	mov	r5, r0
 8007b76:	eb12 0804 	adds.w	r8, r2, r4
 8007b7a:	eb43 0905 	adc.w	r9, r3, r5
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	469a      	mov	sl, r3
 8007b86:	4693      	mov	fp, r2
 8007b88:	4652      	mov	r2, sl
 8007b8a:	465b      	mov	r3, fp
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	4649      	mov	r1, r9
 8007b90:	f7f8 fc06 	bl	80003a0 <__aeabi_uldivmod>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	4613      	mov	r3, r2
 8007b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ba2:	d308      	bcc.n	8007bb6 <UART_SetConfig+0x79a>
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007baa:	d204      	bcs.n	8007bb6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bb2:	60da      	str	r2, [r3, #12]
 8007bb4:	e17c      	b.n	8007eb0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007bbc:	e178      	b.n	8007eb0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bc6:	f040 80c5 	bne.w	8007d54 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007bca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	dc48      	bgt.n	8007c64 <UART_SetConfig+0x848>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	db7b      	blt.n	8007cce <UART_SetConfig+0x8b2>
 8007bd6:	2b20      	cmp	r3, #32
 8007bd8:	d879      	bhi.n	8007cce <UART_SetConfig+0x8b2>
 8007bda:	a201      	add	r2, pc, #4	@ (adr r2, 8007be0 <UART_SetConfig+0x7c4>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007c6b 	.word	0x08007c6b
 8007be4:	08007c73 	.word	0x08007c73
 8007be8:	08007ccf 	.word	0x08007ccf
 8007bec:	08007ccf 	.word	0x08007ccf
 8007bf0:	08007c7b 	.word	0x08007c7b
 8007bf4:	08007ccf 	.word	0x08007ccf
 8007bf8:	08007ccf 	.word	0x08007ccf
 8007bfc:	08007ccf 	.word	0x08007ccf
 8007c00:	08007c8b 	.word	0x08007c8b
 8007c04:	08007ccf 	.word	0x08007ccf
 8007c08:	08007ccf 	.word	0x08007ccf
 8007c0c:	08007ccf 	.word	0x08007ccf
 8007c10:	08007ccf 	.word	0x08007ccf
 8007c14:	08007ccf 	.word	0x08007ccf
 8007c18:	08007ccf 	.word	0x08007ccf
 8007c1c:	08007ccf 	.word	0x08007ccf
 8007c20:	08007c9b 	.word	0x08007c9b
 8007c24:	08007ccf 	.word	0x08007ccf
 8007c28:	08007ccf 	.word	0x08007ccf
 8007c2c:	08007ccf 	.word	0x08007ccf
 8007c30:	08007ccf 	.word	0x08007ccf
 8007c34:	08007ccf 	.word	0x08007ccf
 8007c38:	08007ccf 	.word	0x08007ccf
 8007c3c:	08007ccf 	.word	0x08007ccf
 8007c40:	08007ccf 	.word	0x08007ccf
 8007c44:	08007ccf 	.word	0x08007ccf
 8007c48:	08007ccf 	.word	0x08007ccf
 8007c4c:	08007ccf 	.word	0x08007ccf
 8007c50:	08007ccf 	.word	0x08007ccf
 8007c54:	08007ccf 	.word	0x08007ccf
 8007c58:	08007ccf 	.word	0x08007ccf
 8007c5c:	08007ccf 	.word	0x08007ccf
 8007c60:	08007cc1 	.word	0x08007cc1
 8007c64:	2b40      	cmp	r3, #64	@ 0x40
 8007c66:	d02e      	beq.n	8007cc6 <UART_SetConfig+0x8aa>
 8007c68:	e031      	b.n	8007cce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c6a:	f7fd faeb 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8007c6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c70:	e033      	b.n	8007cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c72:	f7fd fafd 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 8007c76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c78:	e02f      	b.n	8007cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe fd6c 	bl	800675c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c88:	e027      	b.n	8007cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c8a:	f107 0318 	add.w	r3, r7, #24
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe feb8 	bl	8006a04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c98:	e01f      	b.n	8007cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8007d50 <UART_SetConfig+0x934>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d009      	beq.n	8007cba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8007d50 <UART_SetConfig+0x934>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	08db      	lsrs	r3, r3, #3
 8007cac:	f003 0303 	and.w	r3, r3, #3
 8007cb0:	4a24      	ldr	r2, [pc, #144]	@ (8007d44 <UART_SetConfig+0x928>)
 8007cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cb8:	e00f      	b.n	8007cda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007cba:	4b22      	ldr	r3, [pc, #136]	@ (8007d44 <UART_SetConfig+0x928>)
 8007cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cbe:	e00c      	b.n	8007cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cc0:	4b21      	ldr	r3, [pc, #132]	@ (8007d48 <UART_SetConfig+0x92c>)
 8007cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cc4:	e009      	b.n	8007cda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ccc:	e005      	b.n	8007cda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007cd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 80e7 	beq.w	8007eb0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce6:	4a19      	ldr	r2, [pc, #100]	@ (8007d4c <UART_SetConfig+0x930>)
 8007ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cec:	461a      	mov	r2, r3
 8007cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cf4:	005a      	lsls	r2, r3, #1
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	085b      	lsrs	r3, r3, #1
 8007cfc:	441a      	add	r2, r3
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0a:	2b0f      	cmp	r3, #15
 8007d0c:	d916      	bls.n	8007d3c <UART_SetConfig+0x920>
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d14:	d212      	bcs.n	8007d3c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f023 030f 	bic.w	r3, r3, #15
 8007d1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d22:	085b      	lsrs	r3, r3, #1
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	f003 0307 	and.w	r3, r3, #7
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007d38:	60da      	str	r2, [r3, #12]
 8007d3a:	e0b9      	b.n	8007eb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d42:	e0b5      	b.n	8007eb0 <UART_SetConfig+0xa94>
 8007d44:	03d09000 	.word	0x03d09000
 8007d48:	003d0900 	.word	0x003d0900
 8007d4c:	0800c7b0 	.word	0x0800c7b0
 8007d50:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	dc49      	bgt.n	8007df0 <UART_SetConfig+0x9d4>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	db7c      	blt.n	8007e5a <UART_SetConfig+0xa3e>
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	d87a      	bhi.n	8007e5a <UART_SetConfig+0xa3e>
 8007d64:	a201      	add	r2, pc, #4	@ (adr r2, 8007d6c <UART_SetConfig+0x950>)
 8007d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6a:	bf00      	nop
 8007d6c:	08007df7 	.word	0x08007df7
 8007d70:	08007dff 	.word	0x08007dff
 8007d74:	08007e5b 	.word	0x08007e5b
 8007d78:	08007e5b 	.word	0x08007e5b
 8007d7c:	08007e07 	.word	0x08007e07
 8007d80:	08007e5b 	.word	0x08007e5b
 8007d84:	08007e5b 	.word	0x08007e5b
 8007d88:	08007e5b 	.word	0x08007e5b
 8007d8c:	08007e17 	.word	0x08007e17
 8007d90:	08007e5b 	.word	0x08007e5b
 8007d94:	08007e5b 	.word	0x08007e5b
 8007d98:	08007e5b 	.word	0x08007e5b
 8007d9c:	08007e5b 	.word	0x08007e5b
 8007da0:	08007e5b 	.word	0x08007e5b
 8007da4:	08007e5b 	.word	0x08007e5b
 8007da8:	08007e5b 	.word	0x08007e5b
 8007dac:	08007e27 	.word	0x08007e27
 8007db0:	08007e5b 	.word	0x08007e5b
 8007db4:	08007e5b 	.word	0x08007e5b
 8007db8:	08007e5b 	.word	0x08007e5b
 8007dbc:	08007e5b 	.word	0x08007e5b
 8007dc0:	08007e5b 	.word	0x08007e5b
 8007dc4:	08007e5b 	.word	0x08007e5b
 8007dc8:	08007e5b 	.word	0x08007e5b
 8007dcc:	08007e5b 	.word	0x08007e5b
 8007dd0:	08007e5b 	.word	0x08007e5b
 8007dd4:	08007e5b 	.word	0x08007e5b
 8007dd8:	08007e5b 	.word	0x08007e5b
 8007ddc:	08007e5b 	.word	0x08007e5b
 8007de0:	08007e5b 	.word	0x08007e5b
 8007de4:	08007e5b 	.word	0x08007e5b
 8007de8:	08007e5b 	.word	0x08007e5b
 8007dec:	08007e4d 	.word	0x08007e4d
 8007df0:	2b40      	cmp	r3, #64	@ 0x40
 8007df2:	d02e      	beq.n	8007e52 <UART_SetConfig+0xa36>
 8007df4:	e031      	b.n	8007e5a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007df6:	f7fd fa25 	bl	8005244 <HAL_RCC_GetPCLK1Freq>
 8007dfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007dfc:	e033      	b.n	8007e66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dfe:	f7fd fa37 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 8007e02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e04:	e02f      	b.n	8007e66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe fca6 	bl	800675c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e14:	e027      	b.n	8007e66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e16:	f107 0318 	add.w	r3, r7, #24
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe fdf2 	bl	8006a04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e24:	e01f      	b.n	8007e66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e26:	4b2d      	ldr	r3, [pc, #180]	@ (8007edc <UART_SetConfig+0xac0>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0320 	and.w	r3, r3, #32
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d009      	beq.n	8007e46 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e32:	4b2a      	ldr	r3, [pc, #168]	@ (8007edc <UART_SetConfig+0xac0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	08db      	lsrs	r3, r3, #3
 8007e38:	f003 0303 	and.w	r3, r3, #3
 8007e3c:	4a28      	ldr	r2, [pc, #160]	@ (8007ee0 <UART_SetConfig+0xac4>)
 8007e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e44:	e00f      	b.n	8007e66 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e46:	4b26      	ldr	r3, [pc, #152]	@ (8007ee0 <UART_SetConfig+0xac4>)
 8007e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e4a:	e00c      	b.n	8007e66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e4c:	4b25      	ldr	r3, [pc, #148]	@ (8007ee4 <UART_SetConfig+0xac8>)
 8007e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e50:	e009      	b.n	8007e66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e58:	e005      	b.n	8007e66 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e64:	bf00      	nop
    }

    if (pclk != 0U)
 8007e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d021      	beq.n	8007eb0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e70:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee8 <UART_SetConfig+0xacc>)
 8007e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e76:	461a      	mov	r2, r3
 8007e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	085b      	lsrs	r3, r3, #1
 8007e84:	441a      	add	r2, r3
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e92:	2b0f      	cmp	r3, #15
 8007e94:	d909      	bls.n	8007eaa <UART_SetConfig+0xa8e>
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e9c:	d205      	bcs.n	8007eaa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	60da      	str	r2, [r3, #12]
 8007ea8:	e002      	b.n	8007eb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ecc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3748      	adds	r7, #72	@ 0x48
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eda:	bf00      	nop
 8007edc:	58024400 	.word	0x58024400
 8007ee0:	03d09000 	.word	0x03d09000
 8007ee4:	003d0900 	.word	0x003d0900
 8007ee8:	0800c7b0 	.word	0x0800c7b0

08007eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef8:	f003 0308 	and.w	r3, r3, #8
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00a      	beq.n	8007f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00a      	beq.n	8007f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f5e:	f003 0304 	and.w	r3, r3, #4
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00a      	beq.n	8007f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f80:	f003 0310 	and.w	r3, r3, #16
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00a      	beq.n	8007f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d01a      	beq.n	8008002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fea:	d10a      	bne.n	8008002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	430a      	orrs	r2, r1
 8008000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	605a      	str	r2, [r3, #4]
  }
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b098      	sub	sp, #96	@ 0x60
 8008034:	af02      	add	r7, sp, #8
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008040:	f7f9 fb84 	bl	800174c <HAL_GetTick>
 8008044:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0308 	and.w	r3, r3, #8
 8008050:	2b08      	cmp	r3, #8
 8008052:	d12f      	bne.n	80080b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008054:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800805c:	2200      	movs	r2, #0
 800805e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f88e 	bl	8008184 <UART_WaitOnFlagUntilTimeout>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d022      	beq.n	80080b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008076:	e853 3f00 	ldrex	r3, [r3]
 800807a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800807c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800807e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008082:	653b      	str	r3, [r7, #80]	@ 0x50
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	461a      	mov	r2, r3
 800808a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800808c:	647b      	str	r3, [r7, #68]	@ 0x44
 800808e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008094:	e841 2300 	strex	r3, r2, [r1]
 8008098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800809a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1e6      	bne.n	800806e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2220      	movs	r2, #32
 80080a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e063      	b.n	800817c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0304 	and.w	r3, r3, #4
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d149      	bne.n	8008156 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ca:	2200      	movs	r2, #0
 80080cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f857 	bl	8008184 <UART_WaitOnFlagUntilTimeout>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d03c      	beq.n	8008156 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	623b      	str	r3, [r7, #32]
   return(result);
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80080fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e6      	bne.n	80080dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3308      	adds	r3, #8
 8008114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	60fb      	str	r3, [r7, #12]
   return(result);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f023 0301 	bic.w	r3, r3, #1
 8008124:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3308      	adds	r3, #8
 800812c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800812e:	61fa      	str	r2, [r7, #28]
 8008130:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	69b9      	ldr	r1, [r7, #24]
 8008134:	69fa      	ldr	r2, [r7, #28]
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	617b      	str	r3, [r7, #20]
   return(result);
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e5      	bne.n	800810e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2220      	movs	r2, #32
 8008146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e012      	b.n	800817c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2220      	movs	r2, #32
 800815a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2220      	movs	r2, #32
 8008162:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3758      	adds	r7, #88	@ 0x58
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	4613      	mov	r3, r2
 8008192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008194:	e04f      	b.n	8008236 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800819c:	d04b      	beq.n	8008236 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800819e:	f7f9 fad5 	bl	800174c <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d302      	bcc.n	80081b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e04e      	b.n	8008256 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0304 	and.w	r3, r3, #4
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d037      	beq.n	8008236 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2b80      	cmp	r3, #128	@ 0x80
 80081ca:	d034      	beq.n	8008236 <UART_WaitOnFlagUntilTimeout+0xb2>
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2b40      	cmp	r3, #64	@ 0x40
 80081d0:	d031      	beq.n	8008236 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	f003 0308 	and.w	r3, r3, #8
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d110      	bne.n	8008202 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2208      	movs	r2, #8
 80081e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f839 	bl	8008260 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2208      	movs	r2, #8
 80081f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e029      	b.n	8008256 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	69db      	ldr	r3, [r3, #28]
 8008208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800820c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008210:	d111      	bne.n	8008236 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800821a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 f81f 	bl	8008260 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2220      	movs	r2, #32
 8008226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e00f      	b.n	8008256 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	69da      	ldr	r2, [r3, #28]
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	4013      	ands	r3, r2
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	429a      	cmp	r2, r3
 8008244:	bf0c      	ite	eq
 8008246:	2301      	moveq	r3, #1
 8008248:	2300      	movne	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	461a      	mov	r2, r3
 800824e:	79fb      	ldrb	r3, [r7, #7]
 8008250:	429a      	cmp	r2, r3
 8008252:	d0a0      	beq.n	8008196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
	...

08008260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008260:	b480      	push	{r7}
 8008262:	b095      	sub	sp, #84	@ 0x54
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800827c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008286:	643b      	str	r3, [r7, #64]	@ 0x40
 8008288:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800828c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e6      	bne.n	8008268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3308      	adds	r3, #8
 80082a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	e853 3f00 	ldrex	r3, [r3]
 80082a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	4b1e      	ldr	r3, [pc, #120]	@ (8008328 <UART_EndRxTransfer+0xc8>)
 80082ae:	4013      	ands	r3, r2
 80082b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3308      	adds	r3, #8
 80082b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082c2:	e841 2300 	strex	r3, r2, [r1]
 80082c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1e5      	bne.n	800829a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d118      	bne.n	8008308 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f023 0310 	bic.w	r3, r3, #16
 80082ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082f4:	61bb      	str	r3, [r7, #24]
 80082f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6979      	ldr	r1, [r7, #20]
 80082fa:	69ba      	ldr	r2, [r7, #24]
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	613b      	str	r3, [r7, #16]
   return(result);
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e6      	bne.n	80082d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2220      	movs	r2, #32
 800830c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800831c:	bf00      	nop
 800831e:	3754      	adds	r7, #84	@ 0x54
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	effffffe 	.word	0xeffffffe

0800832c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800833a:	2b01      	cmp	r3, #1
 800833c:	d101      	bne.n	8008342 <HAL_UARTEx_DisableFifoMode+0x16>
 800833e:	2302      	movs	r3, #2
 8008340:	e027      	b.n	8008392 <HAL_UARTEx_DisableFifoMode+0x66>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2224      	movs	r2, #36	@ 0x24
 800834e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 0201 	bic.w	r2, r2, #1
 8008368:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008370:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2220      	movs	r2, #32
 8008384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083b2:	2302      	movs	r3, #2
 80083b4:	e02d      	b.n	8008412 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2224      	movs	r2, #36	@ 0x24
 80083c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f850 	bl	8008498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800842a:	2b01      	cmp	r3, #1
 800842c:	d101      	bne.n	8008432 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800842e:	2302      	movs	r3, #2
 8008430:	e02d      	b.n	800848e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2224      	movs	r2, #36	@ 0x24
 800843e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f022 0201 	bic.w	r2, r2, #1
 8008458:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f812 	bl	8008498 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d108      	bne.n	80084ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084b8:	e031      	b.n	800851e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084ba:	2310      	movs	r3, #16
 80084bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084be:	2310      	movs	r3, #16
 80084c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	0e5b      	lsrs	r3, r3, #25
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f003 0307 	and.w	r3, r3, #7
 80084d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	0f5b      	lsrs	r3, r3, #29
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f003 0307 	and.w	r3, r3, #7
 80084e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	7b3a      	ldrb	r2, [r7, #12]
 80084e6:	4911      	ldr	r1, [pc, #68]	@ (800852c <UARTEx_SetNbDataToProcess+0x94>)
 80084e8:	5c8a      	ldrb	r2, [r1, r2]
 80084ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084ee:	7b3a      	ldrb	r2, [r7, #12]
 80084f0:	490f      	ldr	r1, [pc, #60]	@ (8008530 <UARTEx_SetNbDataToProcess+0x98>)
 80084f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	7b7a      	ldrb	r2, [r7, #13]
 8008504:	4909      	ldr	r1, [pc, #36]	@ (800852c <UARTEx_SetNbDataToProcess+0x94>)
 8008506:	5c8a      	ldrb	r2, [r1, r2]
 8008508:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800850c:	7b7a      	ldrb	r2, [r7, #13]
 800850e:	4908      	ldr	r1, [pc, #32]	@ (8008530 <UARTEx_SetNbDataToProcess+0x98>)
 8008510:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008512:	fb93 f3f2 	sdiv	r3, r3, r2
 8008516:	b29a      	uxth	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800851e:	bf00      	nop
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	0800c7c8 	.word	0x0800c7c8
 8008530:	0800c7d0 	.word	0x0800c7d0

08008534 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	605a      	str	r2, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	601a      	str	r2, [r3, #0]
}
 800854a:	bf00      	nop
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8008556:	b480      	push	{r7}
 8008558:	b083      	sub	sp, #12
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	601a      	str	r2, [r3, #0]
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff ffdd 	bl	8008556 <metal_list_add_before>
}
 800859c:	bf00      	nop
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 ff95 	bl	800a4e0 <metal_machine_cache_flush>
}
 80085b6:	bf00      	nop
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b082      	sub	sp, #8
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f001 ff93 	bl	800a4f6 <metal_machine_cache_invalidate>
}
 80085d0:	bf00      	nop
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff ffdd 	bl	80085a4 <__metal_cache_flush>
}
 80085ea:	bf00      	nop
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7ff ffdd 	bl	80085be <__metal_cache_invalidate>
}
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d008      	beq.n	800862c <metal_bus_register+0x20>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d004      	beq.n	800862c <metal_bus_register+0x20>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d102      	bne.n	8008632 <metal_bus_register+0x26>
		return -EINVAL;
 800862c:	f06f 0315 	mvn.w	r3, #21
 8008630:	e026      	b.n	8008680 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2100      	movs	r1, #0
 8008638:	4618      	mov	r0, r3
 800863a:	f000 f82b 	bl	8008694 <metal_bus_find>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d102      	bne.n	800864a <metal_bus_register+0x3e>
		return -EEXIST;
 8008644:	f06f 0310 	mvn.w	r3, #16
 8008648:	e01a      	b.n	8008680 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	331c      	adds	r3, #28
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff ff70 	bl	8008534 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3324      	adds	r3, #36	@ 0x24
 8008658:	4619      	mov	r1, r3
 800865a:	480b      	ldr	r0, [pc, #44]	@ (8008688 <metal_bus_register+0x7c>)
 800865c:	f7ff ff95 	bl	800858a <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8008660:	4b0a      	ldr	r3, [pc, #40]	@ (800868c <metal_bus_register+0x80>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b06      	cmp	r3, #6
 8008666:	d90a      	bls.n	800867e <metal_bus_register+0x72>
 8008668:	4b08      	ldr	r3, [pc, #32]	@ (800868c <metal_bus_register+0x80>)
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d006      	beq.n	800867e <metal_bus_register+0x72>
 8008670:	4b06      	ldr	r3, [pc, #24]	@ (800868c <metal_bus_register+0x80>)
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	6812      	ldr	r2, [r2, #0]
 8008678:	4905      	ldr	r1, [pc, #20]	@ (8008690 <metal_bus_register+0x84>)
 800867a:	2007      	movs	r0, #7
 800867c:	4798      	blx	r3
	return 0;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	000007e4 	.word	0x000007e4
 800868c:	000007dc 	.word	0x000007dc
 8008690:	0800c5a0 	.word	0x0800c5a0

08008694 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 800869e:	4b13      	ldr	r3, [pc, #76]	@ (80086ec <metal_bus_find+0x58>)
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	e017      	b.n	80086d6 <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3b24      	subs	r3, #36	@ 0x24
 80086aa:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7f7 fe14 	bl	80002e0 <strcmp>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d107      	bne.n	80086ce <metal_bus_find+0x3a>
			continue;
		if (result)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <metal_bus_find+0x36>
			*result = bus;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	601a      	str	r2, [r3, #0]
		return 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e009      	b.n	80086e2 <metal_bus_find+0x4e>
			continue;
 80086ce:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	60fb      	str	r3, [r7, #12]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	4a05      	ldr	r2, [pc, #20]	@ (80086f0 <metal_bus_find+0x5c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d1e3      	bne.n	80086a6 <metal_bus_find+0x12>
	}
	return -ENOENT;
 80086de:	f06f 0301 	mvn.w	r3, #1
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	000007dc 	.word	0x000007dc
 80086f0:	000007e4 	.word	0x000007e4

080086f4 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00d      	beq.n	8008722 <metal_device_open+0x2e>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d009      	beq.n	8008722 <metal_device_open+0x2e>
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d006      	beq.n	8008722 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d002      	beq.n	8008722 <metal_device_open+0x2e>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d102      	bne.n	8008728 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8008722:	f06f 0315 	mvn.w	r3, #21
 8008726:	e01f      	b.n	8008768 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8008728:	f107 0310 	add.w	r3, r7, #16
 800872c:	4619      	mov	r1, r3
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7ff ffb0 	bl	8008694 <metal_bus_find>
 8008734:	6178      	str	r0, [r7, #20]
	if (error)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <metal_device_open+0x4c>
		return error;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	e013      	b.n	8008768 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d102      	bne.n	800874e <metal_device_open+0x5a>
		return -ENODEV;
 8008748:	f06f 0312 	mvn.w	r3, #18
 800874c:	e00c      	b.n	8008768 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	6938      	ldr	r0, [r7, #16]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	68b9      	ldr	r1, [r7, #8]
 8008758:	4798      	blx	r3
 800875a:	6178      	str	r0, [r7, #20]
	if (error)
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <metal_device_open+0x72>
		return error;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	e000      	b.n	8008768 <metal_device_open+0x74>

	return 0;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d008      	beq.n	8008792 <metal_register_generic_device+0x22>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 800878e:	2b02      	cmp	r3, #2
 8008790:	d902      	bls.n	8008798 <metal_register_generic_device+0x28>
		return -EINVAL;
 8008792:	f06f 0315 	mvn.w	r3, #21
 8008796:	e009      	b.n	80087ac <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a06      	ldr	r2, [pc, #24]	@ (80087b4 <metal_register_generic_device+0x44>)
 800879c:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	336c      	adds	r3, #108	@ 0x6c
 80087a2:	4619      	mov	r1, r3
 80087a4:	4804      	ldr	r0, [pc, #16]	@ (80087b8 <metal_register_generic_device+0x48>)
 80087a6:	f7ff fef0 	bl	800858a <metal_list_add_tail>
			    &device->node);
	return 0;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	00000018 	.word	0x00000018
 80087b8:	000007f4 	.word	0x000007f4

080087bc <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 80087c8:	4b12      	ldr	r3, [pc, #72]	@ (8008814 <metal_generic_dev_open+0x58>)
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	e017      	b.n	8008800 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	3b6c      	subs	r3, #108	@ 0x6c
 80087d4:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68b9      	ldr	r1, [r7, #8]
 80087dc:	4618      	mov	r0, r3
 80087de:	f7f7 fd7f 	bl	80002e0 <strcmp>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d107      	bne.n	80087f8 <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 80087ee:	6938      	ldr	r0, [r7, #16]
 80087f0:	f000 f890 	bl	8008914 <metal_generic_dev_sys_open>
 80087f4:	4603      	mov	r3, r0
 80087f6:	e009      	b.n	800880c <metal_generic_dev_open+0x50>
			continue;
 80087f8:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	617b      	str	r3, [r7, #20]
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	4a05      	ldr	r2, [pc, #20]	@ (8008818 <metal_generic_dev_open+0x5c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d1e3      	bne.n	80087d0 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8008808:	f06f 0312 	mvn.w	r3, #18
}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	000007dc 	.word	0x000007dc
 8008818:	000007f4 	.word	0x000007f4

0800881c <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 800882a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d009      	beq.n	8008846 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8008832:	6a3a      	ldr	r2, [r7, #32]
 8008834:	4613      	mov	r3, r2
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	461a      	mov	r2, r3
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008842:	f003 f8ac 	bl	800b99e <memcpy>
	for (i = 0; i < nents_in; i++) {
 8008846:	2300      	movs	r3, #0
 8008848:	617b      	str	r3, [r7, #20]
 800884a:	e02f      	b.n	80088ac <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b02      	cmp	r3, #2
 8008850:	d114      	bne.n	800887c <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4613      	mov	r3, r2
 8008856:	005b      	lsls	r3, r3, #1
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	461a      	mov	r2, r3
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008860:	4413      	add	r3, r2
 8008862:	6818      	ldr	r0, [r3, #0]
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4613      	mov	r3, r2
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	4413      	add	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	461a      	mov	r2, r3
 8008870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008872:	4413      	add	r3, r2
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	4619      	mov	r1, r3
 8008878:	f7ff feae 	bl	80085d8 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	4613      	mov	r3, r2
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	461a      	mov	r2, r3
 8008888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888a:	4413      	add	r3, r2
 800888c:	6818      	ldr	r0, [r3, #0]
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	4613      	mov	r3, r2
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	461a      	mov	r2, r3
 800889a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889c:	4413      	add	r3, r2
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	4619      	mov	r1, r3
 80088a2:	f7ff fea6 	bl	80085f2 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	3301      	adds	r3, #1
 80088aa:	617b      	str	r3, [r7, #20]
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	6a3b      	ldr	r3, [r7, #32]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	dbcb      	blt.n	800884c <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 80088b4:	6a3b      	ldr	r3, [r7, #32]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b086      	sub	sp, #24
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
 80088ca:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 80088cc:	2300      	movs	r3, #0
 80088ce:	617b      	str	r3, [r7, #20]
 80088d0:	e017      	b.n	8008902 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	4613      	mov	r3, r2
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	4413      	add	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	461a      	mov	r2, r3
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	4413      	add	r3, r2
 80088e2:	6818      	ldr	r0, [r3, #0]
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	4613      	mov	r3, r2
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	4413      	add	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	461a      	mov	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	4413      	add	r3, r2
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	4619      	mov	r1, r3
 80088f8:	f7ff fe7b 	bl	80085f2 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	3301      	adds	r3, #1
 8008900:	617b      	str	r3, [r7, #20]
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	429a      	cmp	r2, r3
 8008908:	dbe3      	blt.n	80088d2 <metal_generic_dev_dma_unmap+0x14>
	}
}
 800890a:	bf00      	nop
 800890c:	bf00      	nop
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 800891c:	2300      	movs	r3, #0
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	e013      	b.n	800894a <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	4613      	mov	r3, r2
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	4413      	add	r3, r2
 800892a:	011b      	lsls	r3, r3, #4
 800892c:	3308      	adds	r3, #8
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	4413      	add	r3, r2
 8008932:	3304      	adds	r3, #4
 8008934:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00b      	beq.n	8008956 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 800893e:	68b8      	ldr	r0, [r7, #8]
 8008940:	f000 f81e 	bl	8008980 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3301      	adds	r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	429a      	cmp	r2, r3
 8008952:	d3e6      	bcc.n	8008922 <metal_generic_dev_sys_open+0xe>
 8008954:	e000      	b.n	8008958 <metal_generic_dev_sys_open+0x44>
			break;
 8008956:	bf00      	nop
	}

	return 0;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 800896c:	4803      	ldr	r0, [pc, #12]	@ (800897c <metal_sys_init+0x18>)
 800896e:	f7ff fe4d 	bl	800860c <metal_bus_register>
	return 0;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	00000018 	.word	0x00000018

08008980 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	613b      	str	r3, [r7, #16]
	if (psize) {
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d02c      	beq.n	80089f4 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	fa22 f303 	lsr.w	r3, r2, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d005      	beq.n	80089b4 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	2201      	movs	r2, #1
 80089ae:	fa02 f303 	lsl.w	r3, r2, r3
 80089b2:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 80089b4:	2300      	movs	r3, #0
 80089b6:	617b      	str	r3, [r7, #20]
 80089b8:	e013      	b.n	80089e2 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	6819      	ldr	r1, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f001 fd9d 	bl	800a50c <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	4413      	add	r3, r2
 80089da:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	3301      	adds	r3, #1
 80089e0:	617b      	str	r3, [r7, #20]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689a      	ldr	r2, [r3, #8]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	fa22 f303 	lsr.w	r3, r2, r3
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d9e2      	bls.n	80089ba <metal_sys_io_mem_map+0x3a>
		}
	}
}
 80089f4:	bf00      	nop
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <metal_list_init>:
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	605a      	str	r2, [r3, #4]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	601a      	str	r2, [r3, #0]
}
 8008a12:	bf00      	nop
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
	...

08008a20 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
	int error = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	2100      	movs	r1, #0
 8008a30:	4810      	ldr	r0, [pc, #64]	@ (8008a74 <metal_init+0x54>)
 8008a32:	f002 ff6e 	bl	800b912 <memset>

	_metal.common.log_handler   = params->log_handler;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8008a74 <metal_init+0x54>)
 8008a3c:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	791a      	ldrb	r2, [r3, #4]
 8008a42:	4b0c      	ldr	r3, [pc, #48]	@ (8008a74 <metal_init+0x54>)
 8008a44:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8008a46:	480c      	ldr	r0, [pc, #48]	@ (8008a78 <metal_init+0x58>)
 8008a48:	f7ff ffd8 	bl	80089fc <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8008a4c:	480b      	ldr	r0, [pc, #44]	@ (8008a7c <metal_init+0x5c>)
 8008a4e:	f7ff ffd5 	bl	80089fc <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8008a52:	480b      	ldr	r0, [pc, #44]	@ (8008a80 <metal_init+0x60>)
 8008a54:	f7ff ffd2 	bl	80089fc <metal_list_init>

	error = metal_sys_init(params);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7ff ff83 	bl	8008964 <metal_sys_init>
 8008a5e:	60f8      	str	r0, [r7, #12]
	if (error)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <metal_init+0x4a>
		return error;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	e000      	b.n	8008a6c <metal_init+0x4c>

	return error;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	000007dc 	.word	0x000007dc
 8008a78:	000007e4 	.word	0x000007e4
 8008a7c:	000007ec 	.word	0x000007ec
 8008a80:	000007f4 	.word	0x000007f4

08008a84 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8008a92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a96:	d009      	beq.n	8008aac <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d804      	bhi.n	8008aac <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	e000      	b.n	8008aae <metal_io_virt+0x2a>
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8008aba:	b5b0      	push	{r4, r5, r7, lr}
 8008abc:	b08a      	sub	sp, #40	@ 0x28
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	60f8      	str	r0, [r7, #12]
 8008ac2:	60b9      	str	r1, [r7, #8]
 8008ac4:	607a      	str	r2, [r7, #4]
 8008ac6:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8008ac8:	f107 0310 	add.w	r3, r7, #16
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	605a      	str	r2, [r3, #4]
 8008ad2:	609a      	str	r2, [r3, #8]
 8008ad4:	60da      	str	r2, [r3, #12]
 8008ad6:	611a      	str	r2, [r3, #16]
 8008ad8:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	605a      	str	r2, [r3, #4]
	io->size = size;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008af0:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8008af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af4:	2b1f      	cmp	r3, #31
 8008af6:	d904      	bls.n	8008b02 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008afe:	611a      	str	r2, [r3, #16]
 8008b00:	e006      	b.n	8008b10 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8008b02:	2201      	movs	r2, #1
 8008b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b06:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0a:	1e5a      	subs	r2, r3, #1
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008b14:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8008b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00b      	beq.n	8008b34 <metal_io_init+0x7a>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b20:	f103 0418 	add.w	r4, r3, #24
 8008b24:	4615      	mov	r5, r2
 8008b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008b2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8008b32:	e00a      	b.n	8008b4a <metal_io_init+0x90>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f103 0418 	add.w	r4, r3, #24
 8008b3a:	f107 0510 	add.w	r5, r7, #16
 8008b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008b46:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f7ff ff18 	bl	8008980 <metal_sys_io_mem_map>
}
 8008b50:	bf00      	nop
 8008b52:	3728      	adds	r7, #40	@ 0x28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bdb0      	pop	{r4, r5, r7, pc}

08008b58 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8008b58:	b590      	push	{r4, r7, lr}
 8008b5a:	b08b      	sub	sp, #44	@ 0x2c
 8008b5c:	af02      	add	r7, sp, #8
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
 8008b64:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f7ff ff8b 	bl	8008a84 <metal_io_virt>
 8008b6e:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d902      	bls.n	8008b84 <metal_io_block_read+0x2c>
		return -ERANGE;
 8008b7e:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8008b82:	e05c      	b.n	8008c3e <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	441a      	add	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d904      	bls.n	8008b9c <metal_io_block_read+0x44>
		len = io->size - offset;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	689a      	ldr	r2, [r3, #8]
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00a      	beq.n	8008bbe <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6a1c      	ldr	r4, [r3, #32]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	2305      	movs	r3, #5
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	47a0      	blx	r4
 8008bba:	6178      	str	r0, [r7, #20]
 8008bbc:	e03e      	b.n	8008c3c <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8008bbe:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8008bc2:	e00c      	b.n	8008bde <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	701a      	strb	r2, [r3, #0]
			dest++;
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	61bb      	str	r3, [r7, #24]
			ptr++;
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	61fb      	str	r3, [r7, #28]
			len--;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	603b      	str	r3, [r7, #0]
		while ( len && (
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d017      	beq.n	8008c14 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1ea      	bne.n	8008bc4 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e5      	bne.n	8008bc4 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8008bf8:	e00c      	b.n	8008c14 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	3304      	adds	r3, #4
 8008c06:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	3b04      	subs	r3, #4
 8008c12:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	dcef      	bgt.n	8008bfa <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8008c1a:	e00c      	b.n	8008c36 <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	3301      	adds	r3, #1
 8008c28:	61bb      	str	r3, [r7, #24]
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	61fb      	str	r3, [r7, #28]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	3b01      	subs	r3, #1
 8008c34:	603b      	str	r3, [r7, #0]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1ef      	bne.n	8008c1c <metal_io_block_read+0xc4>
	}
	return retlen;
 8008c3c:	697b      	ldr	r3, [r7, #20]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3724      	adds	r7, #36	@ 0x24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd90      	pop	{r4, r7, pc}

08008c46 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8008c46:	b590      	push	{r4, r7, lr}
 8008c48:	b08b      	sub	sp, #44	@ 0x2c
 8008c4a:	af02      	add	r7, sp, #8
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
 8008c52:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8008c54:	68b9      	ldr	r1, [r7, #8]
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f7ff ff14 	bl	8008a84 <metal_io_virt>
 8008c5c:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d902      	bls.n	8008c72 <metal_io_block_write+0x2c>
		return -ERANGE;
 8008c6c:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8008c70:	e05b      	b.n	8008d2a <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	441a      	add	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d904      	bls.n	8008c8a <metal_io_block_write+0x44>
		len = io->size - offset;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	689a      	ldr	r2, [r3, #8]
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d017      	beq.n	8008cc6 <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	2305      	movs	r3, #5
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	68b9      	ldr	r1, [r7, #8]
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	47a0      	blx	r4
 8008ca8:	6178      	str	r0, [r7, #20]
 8008caa:	e03d      	b.n	8008d28 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	701a      	strb	r2, [r3, #0]
			ptr++;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	61fb      	str	r3, [r7, #28]
			source++;
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	61bb      	str	r3, [r7, #24]
			len--;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	603b      	str	r3, [r7, #0]
		while ( len && (
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d017      	beq.n	8008cfc <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1ea      	bne.n	8008cac <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e5      	bne.n	8008cac <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008ce0:	e00c      	b.n	8008cfc <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	3304      	adds	r3, #4
 8008cee:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	3b04      	subs	r3, #4
 8008cfa:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	dcef      	bgt.n	8008ce2 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8008d02:	e00c      	b.n	8008d1e <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	61fb      	str	r3, [r7, #28]
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	3301      	adds	r3, #1
 8008d16:	61bb      	str	r3, [r7, #24]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	603b      	str	r3, [r7, #0]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1ef      	bne.n	8008d04 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8008d24:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8008d28:	697b      	ldr	r3, [r7, #20]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3724      	adds	r7, #36	@ 0x24
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd90      	pop	{r4, r7, pc}

08008d32 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 8008d32:	b590      	push	{r4, r7, lr}
 8008d34:	b08b      	sub	sp, #44	@ 0x2c
 8008d36:	af02      	add	r7, sp, #8
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	603b      	str	r3, [r7, #0]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 8008d42:	68b9      	ldr	r1, [r7, #8]
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f7ff fe9d 	bl	8008a84 <metal_io_virt>
 8008d4a:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d902      	bls.n	8008d60 <metal_io_block_set+0x2e>
		return -ERANGE;
 8008d5a:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8008d5e:	e05d      	b.n	8008e1c <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	441a      	add	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d904      	bls.n	8008d78 <metal_io_block_set+0x46>
		len = io->size - offset;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	689a      	ldr	r2, [r3, #8]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d009      	beq.n	8008d98 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008d88:	79fa      	ldrb	r2, [r7, #7]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	2305      	movs	r3, #5
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	47a0      	blx	r4
 8008d96:	e040      	b.n	8008e1a <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	617b      	str	r3, [r7, #20]
 8008da0:	e00a      	b.n	8008db8 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 8008da2:	79fa      	ldrb	r2, [r7, #7]
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	3301      	adds	r3, #1
 8008db6:	617b      	str	r3, [r7, #20]
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	d9f1      	bls.n	8008da2 <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8008dbe:	e008      	b.n	8008dd2 <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	79fa      	ldrb	r2, [r7, #7]
 8008dc4:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	61fb      	str	r3, [r7, #28]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	603b      	str	r3, [r7, #0]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00e      	beq.n	8008df6 <metal_io_block_set+0xc4>
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1ee      	bne.n	8008dc0 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008de2:	e008      	b.n	8008df6 <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	3304      	adds	r3, #4
 8008dee:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	3b04      	subs	r3, #4
 8008df4:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	dcf3      	bgt.n	8008de4 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 8008dfc:	e008      	b.n	8008e10 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	79fa      	ldrb	r2, [r7, #7]
 8008e02:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	3301      	adds	r3, #1
 8008e08:	61fb      	str	r3, [r7, #28]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	603b      	str	r3, [r7, #0]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1f3      	bne.n	8008dfe <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 8008e16:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8008e1a:	693b      	ldr	r3, [r7, #16]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3724      	adds	r7, #36	@ 0x24
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd90      	pop	{r4, r7, pc}

08008e24 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8008e24:	b40e      	push	{r1, r2, r3}
 8008e26:	b480      	push	{r7}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8008e30:	bf00      	nop
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	b003      	add	sp, #12
 8008e3c:	4770      	bx	lr

08008e3e <metal_io_virt>:
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8008e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e50:	d009      	beq.n	8008e66 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d804      	bhi.n	8008e66 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	4413      	add	r3, r2
 8008e64:	e000      	b.n	8008e68 <metal_io_virt+0x2a>
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d201      	bcs.n	8008e96 <metal_io_virt_to_offset+0x22>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	e001      	b.n	8008e9a <metal_io_virt_to_offset+0x26>
 8008e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
	...

08008ea8 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8008ea8:	b5b0      	push	{r4, r5, r7, lr}
 8008eaa:	b08c      	sub	sp, #48	@ 0x30
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8008eb8:	68b9      	ldr	r1, [r7, #8]
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7ff ffbf 	bl	8008e3e <metal_io_virt>
 8008ec0:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d009      	beq.n	8008ede <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	699c      	ldr	r4, [r3, #24]
 8008ece:	79fa      	ldrb	r2, [r7, #7]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	47a0      	blx	r4
 8008ed8:	4604      	mov	r4, r0
 8008eda:	460d      	mov	r5, r1
 8008edc:	e059      	b.n	8008f92 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 8008ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d012      	beq.n	8008f0a <metal_io_read+0x62>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d10f      	bne.n	8008f0a <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8008eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef0:	f3bf 8f5b 	dmb	ish
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	f3bf 8f5b 	dmb	ish
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	76fb      	strb	r3, [r7, #27]
 8008efe:	7efb      	ldrb	r3, [r7, #27]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2200      	movs	r2, #0
 8008f04:	461c      	mov	r4, r3
 8008f06:	4615      	mov	r5, r2
 8008f08:	e043      	b.n	8008f92 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 8008f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d012      	beq.n	8008f36 <metal_io_read+0x8e>
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d10f      	bne.n	8008f36 <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8008f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1c:	f3bf 8f5b 	dmb	ish
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	f3bf 8f5b 	dmb	ish
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	833b      	strh	r3, [r7, #24]
 8008f2a:	8b3b      	ldrh	r3, [r7, #24]
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2200      	movs	r2, #0
 8008f30:	461c      	mov	r4, r3
 8008f32:	4615      	mov	r5, r2
 8008f34:	e02d      	b.n	8008f92 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 8008f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d010      	beq.n	8008f5e <metal_io_read+0xb6>
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d10d      	bne.n	8008f5e <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8008f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f44:	623b      	str	r3, [r7, #32]
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	f3bf 8f5b 	dmb	ish
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f3bf 8f5b 	dmb	ish
 8008f52:	617b      	str	r3, [r7, #20]
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	2200      	movs	r2, #0
 8008f58:	461c      	mov	r4, r3
 8008f5a:	4615      	mov	r5, r2
 8008f5c:	e019      	b.n	8008f92 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8008f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d010      	beq.n	8008f86 <metal_io_read+0xde>
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	d10d      	bne.n	8008f86 <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8008f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6c:	61fb      	str	r3, [r7, #28]
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	f3bf 8f5b 	dmb	ish
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f3bf 8f5b 	dmb	ish
 8008f7a:	613b      	str	r3, [r7, #16]
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	461c      	mov	r4, r3
 8008f82:	4615      	mov	r5, r2
 8008f84:	e005      	b.n	8008f92 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8008f86:	4b06      	ldr	r3, [pc, #24]	@ (8008fa0 <metal_io_read+0xf8>)
 8008f88:	4a06      	ldr	r2, [pc, #24]	@ (8008fa4 <metal_io_read+0xfc>)
 8008f8a:	21f0      	movs	r1, #240	@ 0xf0
 8008f8c:	4806      	ldr	r0, [pc, #24]	@ (8008fa8 <metal_io_read+0x100>)
 8008f8e:	f002 fa7b 	bl	800b488 <__assert_func>
	return 0; /* quiet compiler */
}
 8008f92:	4622      	mov	r2, r4
 8008f94:	462b      	mov	r3, r5
 8008f96:	4610      	mov	r0, r2
 8008f98:	4619      	mov	r1, r3
 8008f9a:	3730      	adds	r7, #48	@ 0x30
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8008fa0:	0800c654 	.word	0x0800c654
 8008fa4:	0800c81c 	.word	0x0800c81c
 8008fa8:	0800c658 	.word	0x0800c658

08008fac <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8008fac:	b590      	push	{r4, r7, lr}
 8008fae:	b08f      	sub	sp, #60	@ 0x3c
 8008fb0:	af02      	add	r7, sp, #8
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 8008fba:	68b9      	ldr	r1, [r7, #8]
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7ff ff3e 	bl	8008e3e <metal_io_virt>
 8008fc2:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (io->ops.write)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	69db      	ldr	r3, [r3, #28]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00c      	beq.n	8008fe6 <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	69dc      	ldr	r4, [r3, #28]
 8008fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fde:	68b9      	ldr	r1, [r7, #8]
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 8008fe4:	e04e      	b.n	8009084 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 8008fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00e      	beq.n	800900a <metal_io_write+0x5e>
 8008fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d10b      	bne.n	800900a <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 8008ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ff6:	783b      	ldrb	r3, [r7, #0]
 8008ff8:	76fb      	strb	r3, [r7, #27]
 8008ffa:	7efa      	ldrb	r2, [r7, #27]
 8008ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffe:	f3bf 8f5b 	dmb	ish
 8009002:	701a      	strb	r2, [r3, #0]
 8009004:	f3bf 8f5b 	dmb	ish
 8009008:	e03c      	b.n	8009084 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 800900a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00e      	beq.n	800902e <metal_io_write+0x82>
 8009010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009012:	2b02      	cmp	r3, #2
 8009014:	d10b      	bne.n	800902e <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 8009016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009018:	627b      	str	r3, [r7, #36]	@ 0x24
 800901a:	883b      	ldrh	r3, [r7, #0]
 800901c:	833b      	strh	r3, [r7, #24]
 800901e:	8b3a      	ldrh	r2, [r7, #24]
 8009020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009022:	f3bf 8f5b 	dmb	ish
 8009026:	801a      	strh	r2, [r3, #0]
 8009028:	f3bf 8f5b 	dmb	ish
 800902c:	e02a      	b.n	8009084 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 800902e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00e      	beq.n	8009052 <metal_io_write+0xa6>
 8009034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009036:	2b04      	cmp	r3, #4
 8009038:	d10b      	bne.n	8009052 <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 800903a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800903c:	623b      	str	r3, [r7, #32]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	617b      	str	r3, [r7, #20]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	f3bf 8f5b 	dmb	ish
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	f3bf 8f5b 	dmb	ish
 8009050:	e018      	b.n	8009084 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 8009052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00e      	beq.n	8009076 <metal_io_write+0xca>
 8009058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800905a:	2b04      	cmp	r3, #4
 800905c:	d10b      	bne.n	8009076 <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 800905e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009060:	61fb      	str	r3, [r7, #28]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	613b      	str	r3, [r7, #16]
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	f3bf 8f5b 	dmb	ish
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	f3bf 8f5b 	dmb	ish
 8009074:	e006      	b.n	8009084 <metal_io_write+0xd8>
		metal_assert (0);
 8009076:	4b05      	ldr	r3, [pc, #20]	@ (800908c <metal_io_write+0xe0>)
 8009078:	4a05      	ldr	r2, [pc, #20]	@ (8009090 <metal_io_write+0xe4>)
 800907a:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800907e:	4805      	ldr	r0, [pc, #20]	@ (8009094 <metal_io_write+0xe8>)
 8009080:	f002 fa02 	bl	800b488 <__assert_func>
}
 8009084:	bf00      	nop
 8009086:	3734      	adds	r7, #52	@ 0x34
 8009088:	46bd      	mov	sp, r7
 800908a:	bd90      	pop	{r4, r7, pc}
 800908c:	0800c654 	.word	0x0800c654
 8009090:	0800c82c 	.word	0x0800c82c
 8009094:	0800c658 	.word	0x0800c658

08009098 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f002 fa0f 	bl	800b4c4 <malloc>
 80090a6:	4603      	mov	r3, r0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
	free(ptr);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f002 fa0b 	bl	800b4d4 <free>
}
 80090be:	bf00      	nop
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b084      	sub	sp, #16
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3307      	adds	r3, #7
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f7ff ffde 	bl	8009098 <metal_allocate_memory>
 80090dc:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d004      	beq.n	80090ee <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	2100      	movs	r1, #0
 80090e8:	68b8      	ldr	r0, [r7, #8]
 80090ea:	f002 fc12 	bl	800b912 <memset>
	}

	return vqs;
 80090ee:	68bb      	ldr	r3, [r7, #8]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	891b      	ldrh	r3, [r3, #8]
 8009104:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	3b18      	subs	r3, #24
 8009110:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	429a      	cmp	r2, r3
 800911a:	d905      	bls.n	8009128 <rproc_virtio_virtqueue_notify+0x30>
 800911c:	4b0d      	ldr	r3, [pc, #52]	@ (8009154 <rproc_virtio_virtqueue_notify+0x5c>)
 800911e:	4a0e      	ldr	r2, [pc, #56]	@ (8009158 <rproc_virtio_virtqueue_notify+0x60>)
 8009120:	2133      	movs	r1, #51	@ 0x33
 8009122:	480e      	ldr	r0, [pc, #56]	@ (800915c <rproc_virtio_virtqueue_notify+0x64>)
 8009124:	f002 f9b0 	bl	800b488 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	4613      	mov	r3, r2
 8009130:	005b      	lsls	r3, r3, #1
 8009132:	4413      	add	r3, r2
 8009134:	00db      	lsls	r3, r3, #3
 8009136:	440b      	add	r3, r1
 8009138:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	6810      	ldr	r0, [r2, #0]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	6912      	ldr	r2, [r2, #16]
 8009146:	4611      	mov	r1, r2
 8009148:	4798      	blx	r3
}
 800914a:	bf00      	nop
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	0800c6a0 	.word	0x0800c6a0
 8009158:	0800c7fc 	.word	0x0800c7fc
 800915c:	0800c6bc 	.word	0x0800c6bc

08009160 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	3b18      	subs	r3, #24
 800916c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	3318      	adds	r3, #24
 800917e:	4619      	mov	r1, r3
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f7ff fe77 	bl	8008e74 <metal_io_virt_to_offset>
 8009186:	4601      	mov	r1, r0
 8009188:	2301      	movs	r3, #1
 800918a:	2205      	movs	r2, #5
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f7ff fe8b 	bl	8008ea8 <metal_io_read>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	4613      	mov	r3, r2
 8009198:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 800919a:	7afb      	ldrb	r3, [r7, #11]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 80091a4:	b5b0      	push	{r4, r5, r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af02      	add	r7, sp, #8
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	3b18      	subs	r3, #24
 80091b4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	3318      	adds	r3, #24
 80091c6:	4619      	mov	r1, r3
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f7ff fe53 	bl	8008e74 <metal_io_virt_to_offset>
 80091ce:	4601      	mov	r1, r0
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	2200      	movs	r2, #0
 80091d4:	461c      	mov	r4, r3
 80091d6:	4615      	mov	r5, r2
 80091d8:	2301      	movs	r3, #1
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	2305      	movs	r3, #5
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	4622      	mov	r2, r4
 80091e2:	462b      	mov	r3, r5
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f7ff fee1 	bl	8008fac <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	6810      	ldr	r0, [r2, #0]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	6812      	ldr	r2, [r2, #0]
 80091f6:	4611      	mov	r1, r2
 80091f8:	4798      	blx	r3
}
 80091fa:	bf00      	nop
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bdb0      	pop	{r4, r5, r7, pc}

08009202 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b086      	sub	sp, #24
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	3b18      	subs	r3, #24
 800920e:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	330c      	adds	r3, #12
 8009220:	4619      	mov	r1, r3
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f7ff fe26 	bl	8008e74 <metal_io_virt_to_offset>
 8009228:	4601      	mov	r1, r0
 800922a:	2304      	movs	r3, #4
 800922c:	2205      	movs	r2, #5
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f7ff fe3a 	bl	8008ea8 <metal_io_read>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4613      	mov	r3, r2
 800923a:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 800923c:	68bb      	ldr	r3, [r7, #8]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3718      	adds	r7, #24
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 8009246:	b5b0      	push	{r4, r5, r7, lr}
 8009248:	b088      	sub	sp, #32
 800924a:	af02      	add	r7, sp, #8
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	3b18      	subs	r3, #24
 8009254:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	330c      	adds	r3, #12
 8009266:	4619      	mov	r1, r3
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f7ff fe03 	bl	8008e74 <metal_io_virt_to_offset>
 800926e:	4601      	mov	r1, r0
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2200      	movs	r2, #0
 8009274:	461c      	mov	r4, r3
 8009276:	4615      	mov	r5, r2
 8009278:	2304      	movs	r3, #4
 800927a:	9301      	str	r3, [sp, #4]
 800927c:	2305      	movs	r3, #5
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	4622      	mov	r2, r4
 8009282:	462b      	mov	r3, r5
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f7ff fe91 	bl	8008fac <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	6810      	ldr	r0, [r2, #0]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	6812      	ldr	r2, [r2, #0]
 8009296:	4611      	mov	r1, r2
 8009298:	4798      	blx	r3
}
 800929a:	bf00      	nop
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bdb0      	pop	{r4, r5, r7, pc}

080092a2 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 80092a2:	b480      	push	{r7}
 80092a4:	b083      	sub	sp, #12
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	370c      	adds	r7, #12
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 80092ba:	b480      	push	{r7}
 80092bc:	b085      	sub	sp, #20
 80092be:	af00      	add	r7, sp, #0
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	60b9      	str	r1, [r7, #8]
 80092c4:	607a      	str	r2, [r7, #4]
 80092c6:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 80092c8:	bf00      	nop
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
 80092e0:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 80092e2:	bf00      	nop
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr

080092ee <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b082      	sub	sp, #8
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d103      	bne.n	8009306 <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 80092fe:	2140      	movs	r1, #64	@ 0x40
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff ff4f 	bl	80091a4 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 8009306:	bf00      	nop
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
	...

08009310 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b08e      	sub	sp, #56	@ 0x38
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
 800931c:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8009322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009324:	7e5b      	ldrb	r3, [r3, #25]
 8009326:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8009328:	2050      	movs	r0, #80	@ 0x50
 800932a:	f7ff feb5 	bl	8009098 <metal_allocate_memory>
 800932e:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 8009330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8009336:	2300      	movs	r3, #0
 8009338:	e092      	b.n	8009460 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 800933a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800933c:	4613      	mov	r3, r2
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	4413      	add	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff fea7 	bl	8009098 <metal_allocate_memory>
 800934a:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 800934c:	6a3b      	ldr	r3, [r7, #32]
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 8081 	beq.w	8009456 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8009354:	2250      	movs	r2, #80	@ 0x50
 8009356:	2100      	movs	r1, #0
 8009358:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800935a:	f002 fada 	bl	800b912 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 800935e:	2218      	movs	r2, #24
 8009360:	2100      	movs	r1, #0
 8009362:	6a38      	ldr	r0, [r7, #32]
 8009364:	f002 fad5 	bl	800b912 <memset>
	vdev = &rpvdev->vdev;
 8009368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936a:	3318      	adds	r3, #24
 800936c:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 800936e:	2300      	movs	r3, #0
 8009370:	637b      	str	r3, [r7, #52]	@ 0x34
 8009372:	e025      	b.n	80093c0 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8009378:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	3318      	adds	r3, #24
 8009384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009386:	4413      	add	r3, r2
 8009388:	3304      	adds	r3, #4
 800938a:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d102      	bne.n	8009398 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8009398:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800939a:	f7ff fe94 	bl	80090c6 <virtqueue_allocate>
 800939e:	6178      	str	r0, [r7, #20]
		if (!vq)
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d031      	beq.n	800940a <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 80093a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093a8:	4613      	mov	r3, r2
 80093aa:	005b      	lsls	r3, r3, #1
 80093ac:	4413      	add	r3, r2
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	461a      	mov	r2, r3
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	4413      	add	r3, r2
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 80093ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093bc:	3301      	adds	r3, #1
 80093be:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d3d5      	bcc.n	8009374 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093cc:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093d2:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	6a3a      	ldr	r2, [r7, #32]
 80093d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093de:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093f6:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093fc:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	4a19      	ldr	r2, [pc, #100]	@ (8009468 <rproc_virtio_create_vdev+0x158>)
 8009402:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8009404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009406:	3318      	adds	r3, #24
 8009408:	e02a      	b.n	8009460 <rproc_virtio_create_vdev+0x150>
			goto err1;
 800940a:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 800940c:	2300      	movs	r3, #0
 800940e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009410:	e019      	b.n	8009446 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8009412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009414:	4613      	mov	r3, r2
 8009416:	005b      	lsls	r3, r3, #1
 8009418:	4413      	add	r3, r2
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	461a      	mov	r2, r3
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	4413      	add	r3, r2
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00b      	beq.n	8009440 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8009428:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800942a:	4613      	mov	r3, r2
 800942c:	005b      	lsls	r3, r3, #1
 800942e:	4413      	add	r3, r2
 8009430:	00db      	lsls	r3, r3, #3
 8009432:	461a      	mov	r2, r3
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	4413      	add	r3, r2
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff fe38 	bl	80090b0 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8009440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009442:	3301      	adds	r3, #1
 8009444:	637b      	str	r3, [r7, #52]	@ 0x34
 8009446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944a:	429a      	cmp	r2, r3
 800944c:	d3e1      	bcc.n	8009412 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 800944e:	6a38      	ldr	r0, [r7, #32]
 8009450:	f7ff fe2e 	bl	80090b0 <metal_free_memory>
 8009454:	e000      	b.n	8009458 <rproc_virtio_create_vdev+0x148>
		goto err0;
 8009456:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8009458:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800945a:	f7ff fe29 	bl	80090b0 <metal_free_memory>
	return NULL;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3738      	adds	r7, #56	@ 0x38
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	0800c7d8 	.word	0x0800c7d8

0800946c <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 800946c:	b480      	push	{r7}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
 8009478:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800947e:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	429a      	cmp	r2, r3
 8009486:	d302      	bcc.n	800948e <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8009488:	f06f 0301 	mvn.w	r3, #1
 800948c:	e019      	b.n	80094c2 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	4613      	mov	r3, r2
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	4413      	add	r3, r2
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	440b      	add	r3, r1
 800949e:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	6a3a      	ldr	r2, [r7, #32]
 80094a4:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 80094b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094be:	609a      	str	r2, [r3, #8]

	return 0;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b086      	sub	sp, #24
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d102      	bne.n	80094e4 <rproc_virtio_notified+0x16>
		return -EINVAL;
 80094de:	f06f 0315 	mvn.w	r3, #21
 80094e2:	e02c      	b.n	800953e <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d101      	bne.n	80094f2 <rproc_virtio_notified+0x24>
		return 0;
 80094ee:	2300      	movs	r3, #0
 80094f0:	e025      	b.n	800953e <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f6:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 80094f8:	2300      	movs	r3, #0
 80094fa:	617b      	str	r3, [r7, #20]
 80094fc:	e01a      	b.n	8009534 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	4613      	mov	r3, r2
 8009506:	005b      	lsls	r3, r3, #1
 8009508:	4413      	add	r3, r2
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	440b      	add	r3, r1
 800950e:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	683a      	ldr	r2, [r7, #0]
 8009516:	429a      	cmp	r2, r3
 8009518:	d003      	beq.n	8009522 <rproc_virtio_notified+0x54>
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009520:	d105      	bne.n	800952e <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8009528:	68b8      	ldr	r0, [r7, #8]
 800952a:	f001 fb5a 	bl	800abe2 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	3301      	adds	r3, #1
 8009532:	617b      	str	r3, [r7, #20]
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	429a      	cmp	r2, r3
 800953a:	d3e0      	bcc.n	80094fe <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7ff fe02 	bl	8009160 <rproc_virtio_get_status>
 800955c:	4603      	mov	r3, r0
 800955e:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	f003 0304 	and.w	r3, r3, #4
 8009566:	2b00      	cmp	r3, #0
 8009568:	d102      	bne.n	8009570 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 800956a:	e7f4      	b.n	8009556 <rproc_virtio_wait_remote_ready+0x10>
		return;
 800956c:	bf00      	nop
 800956e:	e000      	b.n	8009572 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8009570:	bf00      	nop
	}
}
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8009580:	bf00      	nop
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	4611      	mov	r1, r2
 8009588:	f3bf 8f5b 	dmb	ish
 800958c:	e8d3 2f4f 	ldrexb	r2, [r3]
 8009590:	e8c3 1f40 	strexb	r0, r1, [r3]
 8009594:	2800      	cmp	r0, #0
 8009596:	d1f9      	bne.n	800958c <__metal_mutex_acquire+0x14>
 8009598:	f3bf 8f5b 	dmb	ish
 800959c:	b2d3      	uxtb	r3, r2
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1ef      	bne.n	8009582 <__metal_mutex_acquire+0xa>
		;
	}
}
 80095a2:	bf00      	nop
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f3bf 8f5b 	dmb	ish
 80095be:	2200      	movs	r2, #0
 80095c0:	701a      	strb	r2, [r3, #0]
 80095c2:	f3bf 8f5b 	dmb	ish
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b082      	sub	sp, #8
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff ffcc 	bl	8009578 <__metal_mutex_acquire>
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff ffdd 	bl	80095b0 <__metal_mutex_release>
}
 80095f6:	bf00      	nop
 80095f8:	3708      	adds	r7, #8
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <metal_list_add_before>:
{
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	601a      	str	r2, [r3, #0]
}
 8009626:	bf00      	nop
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <metal_list_add_tail>:
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7ff ffdd 	bl	80095fe <metal_list_add_before>
}
 8009644:	bf00      	nop
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	6852      	ldr	r2, [r2, #4]
 800965c:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	6812      	ldr	r2, [r2, #0]
 8009666:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	605a      	str	r2, [r3, #4]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	601a      	str	r2, [r3, #0]
}
 8009676:	bf00      	nop
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	095b      	lsrs	r3, r3, #5
 8009690:	009a      	lsls	r2, r3, #2
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	440a      	add	r2, r1
 8009696:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	f002 021f 	and.w	r2, r2, #31
 800969e:	2001      	movs	r0, #1
 80096a0:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	4403      	add	r3, r0
 80096aa:	430a      	orrs	r2, r1
 80096ac:	601a      	str	r2, [r3, #0]
}
 80096ae:	bf00      	nop
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	095b      	lsrs	r3, r3, #5
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	4413      	add	r3, r2
 80096ce:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	f003 031f 	and.w	r3, r3, #31
 80096d6:	2101      	movs	r1, #1
 80096d8:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 80096dc:	4013      	ands	r3, r2
}
 80096de:	4618      	mov	r0, r3
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	095b      	lsrs	r3, r3, #5
 80096f8:	009a      	lsls	r2, r3, #2
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	440a      	add	r2, r1
 80096fe:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8009700:	683a      	ldr	r2, [r7, #0]
 8009702:	f002 021f 	and.w	r2, r2, #31
 8009706:	2001      	movs	r0, #1
 8009708:	fa00 f202 	lsl.w	r2, r0, r2
 800970c:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	4403      	add	r3, r0
 8009714:	400a      	ands	r2, r1
 8009716:	601a      	str	r2, [r3, #0]
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7ff ffc2 	bl	80096ba <metal_bitmap_is_bit_set>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	bf0c      	ite	eq
 800973c:	2301      	moveq	r3, #1
 800973e:	2300      	movne	r3, #0
 8009740:	b2db      	uxtb	r3, r3
}
 8009742:	4618      	mov	r0, r3
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b086      	sub	sp, #24
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	60b9      	str	r1, [r7, #8]
 8009754:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	617b      	str	r3, [r7, #20]
 800975a:	e002      	b.n	8009762 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	3301      	adds	r3, #1
 8009760:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8009762:	697a      	ldr	r2, [r7, #20]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	429a      	cmp	r2, r3
 8009768:	d207      	bcs.n	800977a <metal_bitmap_next_clear_bit+0x30>
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	4619      	mov	r1, r3
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f7ff ffd8 	bl	8009724 <metal_bitmap_is_bit_clear>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d0f0      	beq.n	800975c <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 800977a:	697b      	ldr	r3, [r7, #20]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <rpmsg_init_ept>:
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
 8009790:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2220      	movs	r2, #32
 8009796:	68b9      	ldr	r1, [r7, #8]
 8009798:	4618      	mov	r0, r3
 800979a:	f002 f8a7 	bl	800b8ec <strncpy>
	ept->addr = src;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	69fa      	ldr	r2, [r7, #28]
 80097b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 80097c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097cc:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	461a      	mov	r2, r3
 80097d2:	2100      	movs	r1, #0
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff ffb8 	bl	800974a <metal_bitmap_next_clear_bit>
 80097da:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d206      	bcs.n	80097f2 <rpmsg_get_address+0x34>
		addr = nextbit;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff ff48 	bl	8009682 <metal_bitmap_set_bit>
	}

	return addr;
 80097f2:	68fb      	ldr	r3, [r7, #12]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	429a      	cmp	r2, r3
 800980e:	da03      	bge.n	8009818 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8009810:	6879      	ldr	r1, [r7, #4]
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f7ff ff69 	bl	80096ea <metal_bitmap_clear_bit>
}
 8009818:	bf00      	nop
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	429a      	cmp	r2, r3
 8009832:	da05      	bge.n	8009840 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8009834:	6879      	ldr	r1, [r7, #4]
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f7ff ff3f 	bl	80096ba <metal_bitmap_is_bit_set>
 800983c:	4603      	mov	r3, r0
 800983e:	e000      	b.n	8009842 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8009840:	4b02      	ldr	r3, [pc, #8]	@ (800984c <rpmsg_is_address_set+0x2c>)
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	fffff82d 	.word	0xfffff82d

08009850 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	429a      	cmp	r2, r3
 8009862:	da05      	bge.n	8009870 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8009864:	6879      	ldr	r1, [r7, #4]
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f7ff ff0b 	bl	8009682 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 800986c:	2300      	movs	r3, #0
 800986e:	e000      	b.n	8009872 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8009870:	4b02      	ldr	r3, [pc, #8]	@ (800987c <rpmsg_set_address+0x2c>)
	}
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	fffff82d 	.word	0xfffff82d

08009880 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8009880:	b590      	push	{r4, r7, lr}
 8009882:	b089      	sub	sp, #36	@ 0x24
 8009884:	af02      	add	r7, sp, #8
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00a      	beq.n	80098aa <rpmsg_send_offchannel_raw+0x2a>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d006      	beq.n	80098aa <rpmsg_send_offchannel_raw+0x2a>
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d003      	beq.n	80098aa <rpmsg_send_offchannel_raw+0x2a>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098a8:	d101      	bne.n	80098ae <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 80098aa:	4b0d      	ldr	r3, [pc, #52]	@ (80098e0 <rpmsg_send_offchannel_raw+0x60>)
 80098ac:	e014      	b.n	80098d8 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6a1b      	ldr	r3, [r3, #32]
 80098b2:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00c      	beq.n	80098d6 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 80098c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c2:	9301      	str	r3, [sp, #4]
 80098c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	68b9      	ldr	r1, [r7, #8]
 80098ce:	6978      	ldr	r0, [r7, #20]
 80098d0:	47a0      	blx	r4
 80098d2:	4603      	mov	r3, r0
 80098d4:	e000      	b.n	80098d8 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 80098d6:	4b02      	ldr	r3, [pc, #8]	@ (80098e0 <rpmsg_send_offchannel_raw+0x60>)
}
 80098d8:	4618      	mov	r0, r3
 80098da:	371c      	adds	r7, #28
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd90      	pop	{r4, r7, pc}
 80098e0:	fffff82d 	.word	0xfffff82d

080098e4 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b090      	sub	sp, #64	@ 0x40
 80098e8:	af02      	add	r7, sp, #8
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	f107 030c 	add.w	r3, r7, #12
 80098fe:	2220      	movs	r2, #32
 8009900:	4618      	mov	r0, r3
 8009902:	f001 fff3 	bl	800b8ec <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800990a:	f107 030c 	add.w	r3, r7, #12
 800990e:	2201      	movs	r2, #1
 8009910:	9201      	str	r2, [sp, #4]
 8009912:	2228      	movs	r2, #40	@ 0x28
 8009914:	9200      	str	r2, [sp, #0]
 8009916:	2235      	movs	r2, #53	@ 0x35
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f7ff ffb1 	bl	8009880 <rpmsg_send_offchannel_raw>
 800991e:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8009920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009922:	2b00      	cmp	r3, #0
 8009924:	da01      	bge.n	800992a <rpmsg_send_ns_message+0x46>
		return ret;
 8009926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009928:	e000      	b.n	800992c <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3738      	adds	r7, #56	@ 0x38
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b088      	sub	sp, #32
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	61fb      	str	r3, [r7, #28]
 8009948:	e04b      	b.n	80099e2 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	3b34      	subs	r3, #52	@ 0x34
 8009952:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800995a:	d006      	beq.n	800996a <rpmsg_get_endpoint+0x36>
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	429a      	cmp	r2, r3
 8009964:	d101      	bne.n	800996a <rpmsg_get_endpoint+0x36>
			return ept;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	e040      	b.n	80099ec <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	429a      	cmp	r2, r3
 8009972:	d106      	bne.n	8009982 <rpmsg_get_endpoint+0x4e>
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009978:	683a      	ldr	r2, [r7, #0]
 800997a:	429a      	cmp	r2, r3
 800997c:	d101      	bne.n	8009982 <rpmsg_get_endpoint+0x4e>
			return ept;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	e034      	b.n	80099ec <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00c      	beq.n	80099a2 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	2220      	movs	r2, #32
 800998c:	68b9      	ldr	r1, [r7, #8]
 800998e:	4618      	mov	r0, r3
 8009990:	f001 ff9a 	bl	800b8c8 <strncmp>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	bf0c      	ite	eq
 800999a:	2301      	moveq	r3, #1
 800999c:	2300      	movne	r3, #0
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d018      	beq.n	80099da <rpmsg_get_endpoint+0xa6>
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d015      	beq.n	80099da <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099b4:	d006      	beq.n	80099c4 <rpmsg_get_endpoint+0x90>
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d101      	bne.n	80099c4 <rpmsg_get_endpoint+0x90>
			return ept;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	e013      	b.n	80099ec <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099ca:	d107      	bne.n	80099dc <rpmsg_get_endpoint+0xa8>
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099d4:	d102      	bne.n	80099dc <rpmsg_get_endpoint+0xa8>
			return ept;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	e008      	b.n	80099ec <rpmsg_get_endpoint+0xb8>
			continue;
 80099da:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	61fb      	str	r3, [r7, #28]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d1af      	bne.n	800994a <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3720      	adds	r7, #32
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d016      	beq.n	8009a30 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a10:	d008      	beq.n	8009a24 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	2180      	movs	r1, #128	@ 0x80
 8009a20:	f7ff feec 	bl	80097fc <rpmsg_release_address>
	metal_list_del(&ept->node);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3334      	adds	r3, #52	@ 0x34
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff fe0f 	bl	800964c <metal_list_del>
 8009a2e:	e000      	b.n	8009a32 <rpmsg_unregister_endpoint+0x3e>
		return;
 8009a30:	bf00      	nop
}
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	3334      	adds	r3, #52	@ 0x34
 8009a4e:	4619      	mov	r1, r3
 8009a50:	4610      	mov	r0, r2
 8009a52:	f7ff fdee 	bl	8009632 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af02      	add	r7, sp, #8
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	613b      	str	r3, [r7, #16]

	if (!ept)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8009a78:	4b37      	ldr	r3, [pc, #220]	@ (8009b58 <rpmsg_create_ept+0xf8>)
 8009a7a:	e068      	b.n	8009b4e <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	3358      	adds	r3, #88	@ 0x58
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7ff fda6 	bl	80095d2 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a8c:	d018      	beq.n	8009ac0 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	3348      	adds	r3, #72	@ 0x48
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	2180      	movs	r1, #128	@ 0x80
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7ff fec2 	bl	8009820 <rpmsg_is_address_set>
 8009a9c:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d107      	bne.n	8009ab4 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	3348      	adds	r3, #72	@ 0x48
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	2180      	movs	r1, #128	@ 0x80
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7ff fecf 	bl	8009850 <rpmsg_set_address>
 8009ab2:	e00c      	b.n	8009ace <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dd40      	ble.n	8009b3c <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8009aba:	2300      	movs	r3, #0
 8009abc:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8009abe:	e040      	b.n	8009b42 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	3348      	adds	r3, #72	@ 0x48
 8009ac4:	2180      	movs	r1, #128	@ 0x80
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7ff fe79 	bl	80097be <rpmsg_get_address>
 8009acc:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8009ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad0:	9301      	str	r3, [sp, #4]
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f7ff fe51 	bl	8009784 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8009ae2:	68f9      	ldr	r1, [r7, #12]
 8009ae4:	68b8      	ldr	r0, [r7, #8]
 8009ae6:	f7ff ffa7 	bl	8009a38 <rpmsg_register_endpoint>
 8009aea:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	da06      	bge.n	8009b00 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	3348      	adds	r3, #72	@ 0x48
 8009af6:	693a      	ldr	r2, [r7, #16]
 8009af8:	2180      	movs	r1, #128	@ 0x80
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7ff fe7e 	bl	80097fc <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d11c      	bne.n	8009b40 <rpmsg_create_ept+0xe0>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b0e:	d117      	bne.n	8009b40 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	3358      	adds	r3, #88	@ 0x58
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff fd67 	bl	80095e8 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f7ff fee1 	bl	80098e4 <rpmsg_send_ns_message>
 8009b22:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	3358      	adds	r3, #88	@ 0x58
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7ff fd52 	bl	80095d2 <metal_mutex_acquire>
		if (status)
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d005      	beq.n	8009b40 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f7ff ff5d 	bl	80099f4 <rpmsg_unregister_endpoint>
 8009b3a:	e002      	b.n	8009b42 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8009b3c:	bf00      	nop
 8009b3e:	e000      	b.n	8009b42 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8009b40:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	3358      	adds	r3, #88	@ 0x58
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fd4e 	bl	80095e8 <metal_mutex_release>
	return status;
 8009b4c:	697b      	ldr	r3, [r7, #20]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	fffff82d 	.word	0xfffff82d

08009b5c <__metal_cache_invalidate>:
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8009b66:	6839      	ldr	r1, [r7, #0]
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fcc4 	bl	800a4f6 <metal_machine_cache_invalidate>
}
 8009b6e:	bf00      	nop
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <metal_cache_invalidate>:
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b082      	sub	sp, #8
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff ffea 	bl	8009b5c <__metal_cache_invalidate>
}
 8009b88:	bf00      	nop
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b082      	sub	sp, #8
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7ff ffee 	bl	8009b90 <__metal_sleep_usec>
 8009bb4:	4603      	mov	r3, r0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <metal_list_init>:
{
 8009bbe:	b480      	push	{r7}
 8009bc0:	b083      	sub	sp, #12
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	605a      	str	r2, [r3, #4]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	601a      	str	r2, [r3, #0]
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <metal_io_virt_to_offset>:
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d201      	bcs.n	8009c02 <metal_io_virt_to_offset+0x22>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	e001      	b.n	8009c06 <metal_io_virt_to_offset+0x26>
 8009c02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <__metal_mutex_init>:
{
 8009c12:	b480      	push	{r7}
 8009c14:	b085      	sub	sp, #20
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	60fb      	str	r3, [r7, #12]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60bb      	str	r3, [r7, #8]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	461a      	mov	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f3bf 8f5b 	dmb	ish
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	f3bf 8f5b 	dmb	ish
}
 8009c32:	bf00      	nop
 8009c34:	3714      	adds	r7, #20
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <__metal_mutex_acquire>:
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8009c46:	bf00      	nop
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	f3bf 8f5b 	dmb	ish
 8009c52:	e8d3 2f4f 	ldrexb	r2, [r3]
 8009c56:	e8c3 1f40 	strexb	r0, r1, [r3]
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d1f9      	bne.n	8009c52 <__metal_mutex_acquire+0x14>
 8009c5e:	f3bf 8f5b 	dmb	ish
 8009c62:	b2d3      	uxtb	r3, r2
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1ef      	bne.n	8009c48 <__metal_mutex_acquire+0xa>
}
 8009c68:	bf00      	nop
 8009c6a:	bf00      	nop
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <__metal_mutex_release>:
{
 8009c76:	b480      	push	{r7}
 8009c78:	b083      	sub	sp, #12
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f3bf 8f5b 	dmb	ish
 8009c84:	2200      	movs	r2, #0
 8009c86:	701a      	strb	r2, [r3, #0]
 8009c88:	f3bf 8f5b 	dmb	ish
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <metal_mutex_init>:
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7ff ffb6 	bl	8009c12 <__metal_mutex_init>
}
 8009ca6:	bf00      	nop
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <metal_mutex_acquire>:
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b082      	sub	sp, #8
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7ff ffc1 	bl	8009c3e <__metal_mutex_acquire>
}
 8009cbc:	bf00      	nop
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <metal_mutex_release>:
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff ffd2 	bl	8009c76 <__metal_mutex_release>
}
 8009cd2:	bf00      	nop
 8009cd4:	3708      	adds	r7, #8
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <rpmsg_init_ept>:
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	607a      	str	r2, [r7, #4]
 8009ce6:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2220      	movs	r2, #32
 8009cec:	68b9      	ldr	r1, [r7, #8]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f001 fdfc 	bl	800b8ec <strncpy>
	ept->addr = src;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	683a      	ldr	r2, [r7, #0]
 8009cfe:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	69ba      	ldr	r2, [r7, #24]
 8009d04:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	69fa      	ldr	r2, [r7, #28]
 8009d0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009d0c:	bf00      	nop
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d20:	699b      	ldr	r3, [r3, #24]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	460b      	mov	r3, r1
 8009d38:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d3e:	6a1b      	ldr	r3, [r3, #32]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009d46:	78f9      	ldrb	r1, [r7, #3]
 8009d48:	4610      	mov	r0, r2
 8009d4a:	4798      	blx	r3
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009d68:	4610      	mov	r0, r2
 8009d6a:	4798      	blx	r3
 8009d6c:	4603      	mov	r3, r0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b082      	sub	sp, #8
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d82:	6a1b      	ldr	r3, [r3, #32]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009d8a:	4610      	mov	r0, r2
 8009d8c:	4798      	blx	r3
 8009d8e:	4603      	mov	r3, r0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af02      	add	r7, sp, #8
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	f000 fbf4 	bl	800a5a0 <virtio_create_virtqueues>
 8009db8:	4603      	mov	r3, r0
					callbacks);
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b082      	sub	sp, #8
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8009dcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7ff fdad 	bl	8009934 <rpmsg_get_endpoint>
 8009dda:	4603      	mov	r3, r0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d901      	bls.n	8009dfc <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	e00f      	b.n	8009e1c <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6899      	ldr	r1, [r3, #8]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	1acb      	subs	r3, r1, r3
 8009e0a:	4413      	add	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	1ad2      	subs	r2, r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	605a      	str	r2, [r3, #4]

	return buffer;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d01d      	beq.n	8009e76 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d004      	beq.n	8009e54 <rpmsg_virtio_init_shm_pool+0x2c>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f023 0303 	bic.w	r3, r3, #3
 8009e50:	3304      	adds	r3, #4
 8009e52:	e000      	b.n	8009e56 <rpmsg_virtio_init_shm_pool+0x2e>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f003 0303 	and.w	r3, r3, #3
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d004      	beq.n	8009e6e <rpmsg_virtio_init_shm_pool+0x46>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f023 0303 	bic.w	r3, r3, #3
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	e000      	b.n	8009e70 <rpmsg_virtio_init_shm_pool+0x48>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	6053      	str	r3, [r2, #4]
 8009e74:	e000      	b.n	8009e78 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8009e76:	bf00      	nop
}
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b08a      	sub	sp, #40	@ 0x28
 8009e86:	af02      	add	r7, sp, #8
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	60b9      	str	r1, [r7, #8]
 8009e8c:	607a      	str	r2, [r7, #4]
 8009e8e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f7ff ff3f 	bl	8009d14 <rpmsg_virtio_get_role>
 8009e96:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10d      	bne.n	8009eba <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8009eaa:	f107 0114 	add.w	r1, r7, #20
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f000 fcc2 	bl	800a83e <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8009eba:	bf00      	nop
 8009ebc:	3720      	adds	r7, #32
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b08a      	sub	sp, #40	@ 0x28
 8009ec6:	af02      	add	r7, sp, #8
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	60b9      	str	r1, [r7, #8]
 8009ecc:	607a      	str	r2, [r7, #4]
 8009ece:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f7ff ff1f 	bl	8009d14 <rpmsg_virtio_get_role>
 8009ed6:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10f      	bne.n	8009efe <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009eea:	f107 0114 	add.w	r1, r7, #20
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f000 fca2 	bl	800a83e <virtqueue_add_buffer>
 8009efa:	4603      	mov	r3, r0
 8009efc:	e000      	b.n	8009f00 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3720      	adds	r7, #32
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f7ff fefd 	bl	8009d14 <rpmsg_virtio_get_role>
 8009f1a:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d116      	bne.n	8009f54 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	68b9      	ldr	r1, [r7, #8]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 fcc9 	bl	800a8c6 <virtqueue_get_buffer>
 8009f34:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10b      	bne.n	8009f54 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7ff ff4d 	bl	8009de4 <rpmsg_virtio_shm_pool_get_buffer>
 8009f4a:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f52:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8009f54:	697b      	ldr	r3, [r7, #20]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3718      	adds	r7, #24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b086      	sub	sp, #24
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	60f8      	str	r0, [r7, #12]
 8009f66:	60b9      	str	r1, [r7, #8]
 8009f68:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f7ff fed2 	bl	8009d14 <rpmsg_virtio_get_role>
 8009f70:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8009f72:	2300      	movs	r3, #0
 8009f74:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d107      	bne.n	8009f8c <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	68b9      	ldr	r1, [r7, #8]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 fc9e 	bl	800a8c6 <virtqueue_get_buffer>
 8009f8a:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d005      	beq.n	8009f9e <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4619      	mov	r1, r3
 8009f98:	6978      	ldr	r0, [r7, #20]
 8009f9a:	f7ff fdec 	bl	8009b76 <metal_cache_invalidate>
	}

	return data;
 8009f9e:	697b      	ldr	r3, [r7, #20]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff feaf 	bl	8009d14 <rpmsg_virtio_get_role>
 8009fb6:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d102      	bne.n	8009fc8 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8009fc2:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8009fc6:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b090      	sub	sp, #64	@ 0x40
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
 8009fe0:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8009fee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009ff0:	f7ff feb0 	bl	8009d54 <rpmsg_virtio_get_status>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffa:	f003 0304 	and.w	r3, r3, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 800a002:	4b46      	ldr	r3, [pc, #280]	@ (800a11c <rpmsg_virtio_send_offchannel_raw+0x148>)
 800a004:	e086      	b.n	800a114 <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 800a006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d003      	beq.n	800a014 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 800a00c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a010:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a012:	e001      	b.n	800a018 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3358      	adds	r3, #88	@ 0x58
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7ff fe46 	bl	8009cae <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 800a022:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a024:	f7ff ffc0 	bl	8009fa8 <_rpmsg_virtio_get_buffer_size>
 800a028:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 800a02a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a02e:	429a      	cmp	r2, r3
 800a030:	dc08      	bgt.n	800a044 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 800a032:	f107 0216 	add.w	r2, r7, #22
 800a036:	f107 0310 	add.w	r3, r7, #16
 800a03a:	4619      	mov	r1, r3
 800a03c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a03e:	f7ff ff63 	bl	8009f08 <rpmsg_virtio_get_tx_buffer>
 800a042:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	3358      	adds	r3, #88	@ 0x58
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff fe3b 	bl	8009cc4 <metal_mutex_release>
		if (buffer || !tick_count)
 800a04e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10e      	bne.n	800a072 <rpmsg_virtio_send_offchannel_raw+0x9e>
 800a054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00b      	beq.n	800a072 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 800a05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d001      	beq.n	800a064 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 800a060:	4b2f      	ldr	r3, [pc, #188]	@ (800a120 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 800a062:	e057      	b.n	800a114 <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 800a064:	200a      	movs	r0, #10
 800a066:	f7ff fd9e 	bl	8009ba6 <metal_sleep_usec>
		tick_count--;
 800a06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06c:	3b01      	subs	r3, #1
 800a06e:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 800a070:	e7d2      	b.n	800a018 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 800a072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a074:	2b00      	cmp	r3, #0
 800a076:	d101      	bne.n	800a07c <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 800a078:	4b2a      	ldr	r3, [pc, #168]	@ (800a124 <rpmsg_virtio_send_offchannel_raw+0x150>)
 800a07a:	e04b      	b.n	800a114 <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 800a084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a086:	b29b      	uxth	r3, r3
 800a088:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 800a08a:	2300      	movs	r3, #0
 800a08c:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 800a08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a092:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 800a094:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a096:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a098:	f7ff fda2 	bl	8009be0 <metal_io_virt_to_offset>
 800a09c:	4601      	mov	r1, r0
 800a09e:	f107 0218 	add.w	r2, r7, #24
 800a0a2:	2310      	movs	r3, #16
 800a0a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0a6:	f7fe fdce 	bl	8008c46 <metal_io_block_write>
 800a0aa:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ae:	2b10      	cmp	r3, #16
 800a0b0:	d001      	beq.n	800a0b6 <rpmsg_virtio_send_offchannel_raw+0xe2>
 800a0b2:	bf00      	nop
 800a0b4:	e7fd      	b.n	800a0b2 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 800a0b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0b8:	3310      	adds	r3, #16
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0be:	f7ff fd8f 	bl	8009be0 <metal_io_virt_to_offset>
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0ca:	f7fe fdbc 	bl	8008c46 <metal_io_block_write>
 800a0ce:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 800a0d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d001      	beq.n	800a0dc <rpmsg_virtio_send_offchannel_raw+0x108>
 800a0d8:	bf00      	nop
 800a0da:	e7fd      	b.n	800a0d8 <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	3358      	adds	r3, #88	@ 0x58
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7ff fde4 	bl	8009cae <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	8afb      	ldrh	r3, [r7, #22]
 800a0ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0ec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a0ee:	f7ff fee8 	bl	8009ec2 <rpmsg_virtio_enqueue_buffer>
 800a0f2:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 800a0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <rpmsg_virtio_send_offchannel_raw+0x12a>
 800a0fa:	bf00      	nop
 800a0fc:	e7fd      	b.n	800a0fa <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 800a0fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a102:	4618      	mov	r0, r3
 800a104:	f000 fc59 	bl	800a9ba <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	3358      	adds	r3, #88	@ 0x58
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7ff fdd9 	bl	8009cc4 <metal_mutex_release>

	return size;
 800a112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a114:	4618      	mov	r0, r3
 800a116:	3740      	adds	r7, #64	@ 0x40
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	fffff82c 	.word	0xfffff82c
 800a120:	fffff82b 	.word	0xfffff82b
 800a124:	fffff82e 	.word	0xfffff82e

0800a128 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 800a13c:	b590      	push	{r4, r7, lr}
 800a13e:	b08d      	sub	sp, #52	@ 0x34
 800a140:	af02      	add	r7, sp, #8
 800a142:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 800a14a:	6a3b      	ldr	r3, [r7, #32]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a14e:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	3358      	adds	r3, #88	@ 0x58
 800a158:	4618      	mov	r0, r3
 800a15a:	f7ff fda8 	bl	8009cae <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 800a15e:	f107 020a 	add.w	r2, r7, #10
 800a162:	f107 030c 	add.w	r3, r7, #12
 800a166:	4619      	mov	r1, r3
 800a168:	69f8      	ldr	r0, [r7, #28]
 800a16a:	f7ff fef8 	bl	8009f5e <rpmsg_virtio_get_rx_buffer>
 800a16e:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	3358      	adds	r3, #88	@ 0x58
 800a174:	4618      	mov	r0, r3
 800a176:	f7ff fda5 	bl	8009cc4 <metal_mutex_release>

	while (rp_hdr) {
 800a17a:	e04d      	b.n	800a218 <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	3358      	adds	r3, #88	@ 0x58
 800a180:	4618      	mov	r0, r3
 800a182:	f7ff fd94 	bl	8009cae <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 800a186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	4619      	mov	r1, r3
 800a18c:	69b8      	ldr	r0, [r7, #24]
 800a18e:	f7ff fe18 	bl	8009dc2 <rpmsg_get_ept_from_addr>
 800a192:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	3358      	adds	r3, #88	@ 0x58
 800a198:	4618      	mov	r0, r3
 800a19a:	f7ff fd93 	bl	8009cc4 <metal_mutex_release>

		if (!ept)
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d03d      	beq.n	800a220 <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1ac:	d103      	bne.n	800a1b6 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1bc:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c2:	899b      	ldrh	r3, [r3, #12]
 800a1c4:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	6978      	ldr	r0, [r7, #20]
 800a1d8:	47a0      	blx	r4
 800a1da:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <rpmsg_virtio_rx_callback+0xaa>
 800a1e2:	bf00      	nop
 800a1e4:	e7fd      	b.n	800a1e2 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	3358      	adds	r3, #88	@ 0x58
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7ff fd5f 	bl	8009cae <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	897b      	ldrh	r3, [r7, #10]
 800a1f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1f6:	69f8      	ldr	r0, [r7, #28]
 800a1f8:	f7ff fe43 	bl	8009e82 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 800a1fc:	f107 020a 	add.w	r2, r7, #10
 800a200:	f107 030c 	add.w	r3, r7, #12
 800a204:	4619      	mov	r1, r3
 800a206:	69f8      	ldr	r0, [r7, #28]
 800a208:	f7ff fea9 	bl	8009f5e <rpmsg_virtio_get_rx_buffer>
 800a20c:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	3358      	adds	r3, #88	@ 0x58
 800a212:	4618      	mov	r0, r3
 800a214:	f7ff fd56 	bl	8009cc4 <metal_mutex_release>
	while (rp_hdr) {
 800a218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1ae      	bne.n	800a17c <rpmsg_virtio_rx_callback+0x40>
 800a21e:	e000      	b.n	800a222 <rpmsg_virtio_rx_callback+0xe6>
			return;
 800a220:	bf00      	nop
	}
}
 800a222:	372c      	adds	r7, #44	@ 0x2c
 800a224:	46bd      	mov	sp, r7
 800a226:	bd90      	pop	{r4, r7, pc}

0800a228 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b092      	sub	sp, #72	@ 0x48
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
 800a234:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 800a23c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a23e:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 800a240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a244:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b28      	cmp	r3, #40	@ 0x28
 800a24e:	d001      	beq.n	800a254 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 800a250:	2300      	movs	r3, #0
 800a252:	e057      	b.n	800a304 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 800a254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 800a256:	4619      	mov	r1, r3
 800a258:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a25a:	f7ff fcc1 	bl	8009be0 <metal_io_virt_to_offset>
 800a25e:	4601      	mov	r1, r0
 800a260:	f107 0210 	add.w	r2, r7, #16
 800a264:	2320      	movs	r3, #32
 800a266:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a268:	f7fe fc76 	bl	8008b58 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 800a26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 800a272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a274:	3358      	adds	r3, #88	@ 0x58
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff fd19 	bl	8009cae <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 800a27c:	f107 0110 	add.w	r1, r7, #16
 800a280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a282:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a286:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a288:	f7ff fb54 	bl	8009934 <rpmsg_get_endpoint>
 800a28c:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 800a28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	2b00      	cmp	r3, #0
 800a298:	d017      	beq.n	800a2ca <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 800a29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d003      	beq.n	800a2a8 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2a6:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 800a2a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2aa:	3358      	adds	r3, #88	@ 0x58
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7ff fd09 	bl	8009cc4 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d024      	beq.n	800a302 <rpmsg_virtio_ns_callback+0xda>
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d020      	beq.n	800a302 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	4798      	blx	r3
 800a2c8:	e01b      	b.n	800a302 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d110      	bne.n	800a2f2 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 800a2d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2d2:	3358      	adds	r3, #88	@ 0x58
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7ff fcf5 	bl	8009cc4 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 800a2da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00f      	beq.n	800a302 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 800a2e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2e6:	f107 0110 	add.w	r1, r7, #16
 800a2ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2ec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a2ee:	4798      	blx	r3
 800a2f0:	e007      	b.n	800a302 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2f6:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 800a2f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2fa:	3358      	adds	r3, #88	@ 0x58
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7ff fce1 	bl	8009cc4 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3748      	adds	r7, #72	@ 0x48
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b094      	sub	sp, #80	@ 0x50
 800a310:	af02      	add	r7, sp, #8
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	63bb      	str	r3, [r7, #56]	@ 0x38
	memset(rdev, 0, sizeof(*rdev));
 800a31e:	2264      	movs	r2, #100	@ 0x64
 800a320:	2100      	movs	r1, #0
 800a322:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a324:	f001 faf5 	bl	800b912 <memset>
	metal_mutex_init(&rdev->lock);
 800a328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32a:	3358      	adds	r3, #88	@ 0x58
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7ff fcb3 	bl	8009c98 <metal_mutex_init>
	rvdev->vdev = vdev;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 800a338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 800a344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a346:	4a5d      	ldr	r2, [pc, #372]	@ (800a4bc <rpmsg_init_vdev+0x1b0>)
 800a348:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f7ff fce2 	bl	8009d14 <rpmsg_virtio_get_role>
 800a350:	6378      	str	r0, [r7, #52]	@ 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a354:	2b00      	cmp	r3, #0
 800a356:	d120      	bne.n	800a39a <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 800a358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 800a35e:	4b58      	ldr	r3, [pc, #352]	@ (800a4c0 <rpmsg_init_vdev+0x1b4>)
 800a360:	e0a7      	b.n	800a4b2 <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 800a362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 800a36a:	4b56      	ldr	r3, [pc, #344]	@ (800a4c4 <rpmsg_init_vdev+0x1b8>)
 800a36c:	e0a1      	b.n	800a4b2 <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a372:	675a      	str	r2, [r3, #116]	@ 0x74

		vq_names[0] = "rx_vq";
 800a374:	4b54      	ldr	r3, [pc, #336]	@ (800a4c8 <rpmsg_init_vdev+0x1bc>)
 800a376:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 800a378:	4b54      	ldr	r3, [pc, #336]	@ (800a4cc <rpmsg_init_vdev+0x1c0>)
 800a37a:	627b      	str	r3, [r7, #36]	@ 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 800a37c:	4b54      	ldr	r3, [pc, #336]	@ (800a4d0 <rpmsg_init_vdev+0x1c4>)
 800a37e:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 800a380:	4b54      	ldr	r3, [pc, #336]	@ (800a4d4 <rpmsg_init_vdev+0x1c8>)
 800a382:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a392:	3318      	adds	r3, #24
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	66da      	str	r2, [r3, #108]	@ 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	671a      	str	r2, [r3, #112]	@ 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 800a3a0:	f107 0220 	add.w	r2, r7, #32
 800a3a4:	f107 0318 	add.w	r3, r7, #24
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f7ff fcf1 	bl	8009d98 <rpmsg_virtio_create_virtqueues>
 800a3b6:	6478      	str	r0, [r7, #68]	@ 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 800a3b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <rpmsg_init_vdev+0xb6>
		return status;
 800a3be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3c0:	e077      	b.n	800a4b2 <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3c6:	e00f      	b.n	800a3e8 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a3cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	4413      	add	r3, r2
 800a3d4:	00db      	lsls	r3, r3, #3
 800a3d6:	440b      	add	r3, r1
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	62bb      	str	r3, [r7, #40]	@ 0x28
		vq->shm_io = shm_io;
 800a3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800a3e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d9ec      	bls.n	800a3c8 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d137      	bne.n	800a464 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 800a3f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3f8:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3fe:	e02a      	b.n	800a456 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800a400:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a404:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a406:	f7ff fced 	bl	8009de4 <rpmsg_virtio_shm_pool_get_buffer>
 800a40a:	6338      	str	r0, [r7, #48]	@ 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 800a40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800a412:	4b2c      	ldr	r3, [pc, #176]	@ (800a4c4 <rpmsg_init_vdev+0x1b8>)
 800a414:	e04d      	b.n	800a4b2 <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 800a416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a418:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 800a41a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a41c:	6838      	ldr	r0, [r7, #0]
 800a41e:	f7ff fbdf 	bl	8009be0 <metal_io_virt_to_offset>
 800a422:	4601      	mov	r1, r0
 800a424:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a428:	2200      	movs	r2, #0
 800a42a:	6838      	ldr	r0, [r7, #0]
 800a42c:	f7fe fc81 	bl	8008d32 <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800a434:	f107 0110 	add.w	r1, r7, #16
 800a438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	2301      	movs	r3, #1
 800a43e:	2200      	movs	r2, #0
 800a440:	f000 f9fd 	bl	800a83e <virtqueue_add_buffer>
 800a444:	6478      	str	r0, [r7, #68]	@ 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 800a446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <rpmsg_init_vdev+0x144>
				return status;
 800a44c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a44e:	e030      	b.n	800a4b2 <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800a450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a452:	3301      	adds	r3, #1
 800a454:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a45a:	895b      	ldrh	r3, [r3, #10]
 800a45c:	461a      	mov	r2, r3
 800a45e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a460:	4293      	cmp	r3, r2
 800a462:	d3cd      	bcc.n	800a400 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 800a464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a466:	4618      	mov	r0, r3
 800a468:	f7ff fba9 	bl	8009bbe <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f7ff fc82 	bl	8009d76 <rpmsg_virtio_get_features>
 800a472:	62f8      	str	r0, [r7, #44]	@ 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 800a474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d011      	beq.n	800a4a2 <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 800a47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a480:	f103 0008 	add.w	r0, r3, #8
 800a484:	2300      	movs	r3, #0
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	4b13      	ldr	r3, [pc, #76]	@ (800a4d8 <rpmsg_init_vdev+0x1cc>)
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	2335      	movs	r3, #53	@ 0x35
 800a48e:	2235      	movs	r2, #53	@ 0x35
 800a490:	4912      	ldr	r1, [pc, #72]	@ (800a4dc <rpmsg_init_vdev+0x1d0>)
 800a492:	f7ff fc22 	bl	8009cda <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 800a496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a498:	3308      	adds	r3, #8
 800a49a:	4619      	mov	r1, r3
 800a49c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a49e:	f7ff facb 	bl	8009a38 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 800a4a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d103      	bne.n	800a4b0 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 800a4a8:	2104      	movs	r1, #4
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f7ff fc3f 	bl	8009d2e <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 800a4b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3748      	adds	r7, #72	@ 0x48
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	08009fd5 	.word	0x08009fd5
 800a4c0:	fffff82d 	.word	0xfffff82d
 800a4c4:	fffff82e 	.word	0xfffff82e
 800a4c8:	0800c73c 	.word	0x0800c73c
 800a4cc:	0800c744 	.word	0x0800c744
 800a4d0:	0800a13d 	.word	0x0800a13d
 800a4d4:	0800a129 	.word	0x0800a129
 800a4d8:	0800a229 	.word	0x0800a229
 800a4dc:	0800c74c 	.word	0x0800c74c

0800a4e0 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800a4ea:	bf00      	nop
 800a4ec:	370c      	adds	r7, #12
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b083      	sub	sp, #12
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 800a51a:	68fb      	ldr	r3, [r7, #12]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	011b      	lsls	r3, r3, #4
 800a536:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3303      	adds	r3, #3
 800a53c:	005a      	lsls	r2, r3, #1
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	4413      	add	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	4413      	add	r3, r2
 800a54a:	1e5a      	subs	r2, r3, #1
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	425b      	negs	r3, r3
 800a550:	4013      	ands	r3, r2
 800a552:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4413      	add	r3, r2
 800a55c:	3306      	adds	r3, #6
 800a55e:	60fb      	str	r3, [r7, #12]

	return size;
 800a560:	68fb      	ldr	r3, [r7, #12]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3714      	adds	r7, #20
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <metal_io_virt_to_offset>:
{
 800a56e:	b480      	push	{r7}
 800a570:	b085      	sub	sp, #20
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d201      	bcs.n	800a590 <metal_io_virt_to_offset+0x22>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	e001      	b.n	800a594 <metal_io_virt_to_offset+0x26>
 800a590:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 800a5a0:	b590      	push	{r4, r7, lr}
 800a5a2:	b091      	sub	sp, #68	@ 0x44
 800a5a4:	af04      	add	r7, sp, #16
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (nvqs > num_vrings)
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d902      	bls.n	800a5c2 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 800a5bc:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 800a5c0:	e053      	b.n	800a66a <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5c6:	e04b      	b.n	800a660 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a5cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	005b      	lsls	r3, r3, #1
 800a5d2:	4413      	add	r3, r2
 800a5d4:	00db      	lsls	r3, r3, #3
 800a5d6:	440b      	add	r3, r1
 800a5d8:	627b      	str	r3, [r7, #36]	@ 0x24

		vring_alloc = &vring_info->info;
 800a5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5dc:	3304      	adds	r3, #4
 800a5de:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d118      	bne.n	800a61a <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 800a5ee:	6a3b      	ldr	r3, [r7, #32]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	69f8      	ldr	r0, [r7, #28]
 800a5f6:	f7ff ffba 	bl	800a56e <metal_io_virt_to_offset>
 800a5fa:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 800a600:	461a      	mov	r2, r3
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	4619      	mov	r1, r3
 800a608:	4610      	mov	r0, r2
 800a60a:	f7ff ff8d 	bl	800a528 <vring_size>
 800a60e:	4603      	mov	r3, r0
 800a610:	2200      	movs	r2, #0
 800a612:	69b9      	ldr	r1, [r7, #24]
 800a614:	69f8      	ldr	r0, [r7, #28]
 800a616:	f7fe fb8c 	bl	8008d32 <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800a61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a61c:	b298      	uxth	r0, r3
 800a61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	4413      	add	r3, r2
 800a626:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800a628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a62e:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800a630:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	6a12      	ldr	r2, [r2, #32]
 800a636:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800a638:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a63a:	6809      	ldr	r1, [r1, #0]
 800a63c:	9102      	str	r1, [sp, #8]
 800a63e:	9201      	str	r2, [sp, #4]
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	4622      	mov	r2, r4
 800a646:	4601      	mov	r1, r0
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 f8c4 	bl	800a7d6 <virtqueue_create>
 800a64e:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <virtio_create_virtqueues+0xba>
			return ret;
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	e007      	b.n	800a66a <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 800a65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a65c:	3301      	adds	r3, #1
 800a65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	429a      	cmp	r2, r3
 800a666:	d3af      	bcc.n	800a5c8 <virtio_create_virtqueues+0x28>
	}
	return 0;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3734      	adds	r7, #52	@ 0x34
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd90      	pop	{r4, r7, pc}

0800a672 <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 800a672:	b480      	push	{r7}
 800a674:	b085      	sub	sp, #20
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	60b9      	str	r1, [r7, #8]
 800a67c:	607a      	str	r2, [r7, #4]
 800a67e:	603b      	str	r3, [r7, #0]
	vr->num = num;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	68ba      	ldr	r2, [r7, #8]
 800a684:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	011b      	lsls	r3, r3, #4
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	441a      	add	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	689a      	ldr	r2, [r3, #8]
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	4413      	add	r3, r2
 800a6a2:	3304      	adds	r3, #4
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 800a6aa:	1c5a      	adds	r2, r3, #1
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	425b      	negs	r3, r3
 800a6b0:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	60da      	str	r2, [r3, #12]
}
 800a6b8:	bf00      	nop
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	80fb      	strh	r3, [r7, #6]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	80bb      	strh	r3, [r7, #4]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 800a6d6:	88ba      	ldrh	r2, [r7, #4]
 800a6d8:	88fb      	ldrh	r3, [r7, #6]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 800a6e2:	88b9      	ldrh	r1, [r7, #4]
 800a6e4:	887b      	ldrh	r3, [r7, #2]
 800a6e6:	1acb      	subs	r3, r1, r3
 800a6e8:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	bf34      	ite	cc
 800a6ee:	2301      	movcc	r3, #1
 800a6f0:	2300      	movcs	r3, #0
 800a6f2:	b2db      	uxtb	r3, r3
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <metal_io_virt_to_offset>:
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d201      	bcs.n	800a722 <metal_io_virt_to_offset+0x22>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	e001      	b.n	800a726 <metal_io_virt_to_offset+0x26>
 800a722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800a726:	4618      	mov	r0, r3
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <metal_io_phys>:
{
 800a732:	b480      	push	{r7}
 800a734:	b085      	sub	sp, #20
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 800a740:	2b1f      	cmp	r3, #31
 800a742:	d805      	bhi.n	800a750 <metal_io_phys+0x1e>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	fa22 f303 	lsr.w	r3, r2, r3
 800a74e:	e000      	b.n	800a752 <metal_io_phys+0x20>
 800a750:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 800a752:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d010      	beq.n	800a77e <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	429a      	cmp	r2, r3
 800a764:	d80b      	bhi.n	800a77e <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6919      	ldr	r1, [r3, #16]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 800a77a:	4413      	add	r3, r2
 800a77c:	e001      	b.n	800a782 <metal_io_phys+0x50>
 800a77e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800a782:	4618      	mov	r0, r3
 800a784:	3714      	adds	r7, #20
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr

0800a78e <metal_io_virt_to_phys>:
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b082      	sub	sp, #8
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 800a798:	6839      	ldr	r1, [r7, #0]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff ffb0 	bl	800a700 <metal_io_virt_to_offset>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7ff ffc4 	bl	800a732 <metal_io_phys>
 800a7aa:	4603      	mov	r3, r0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c2:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f7ff ffe1 	bl	800a78e <metal_io_virt_to_phys>
 800a7cc:	4603      	mov	r3, r0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b086      	sub	sp, #24
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	60f8      	str	r0, [r7, #12]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d121      	bne.n	800a834 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 800a7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 800a7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 800a7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fe:	897a      	ldrh	r2, [r7, #10]
 800a800:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	891a      	ldrh	r2, [r3, #8]
 800a806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a808:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 800a80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80c:	895a      	ldrh	r2, [r3, #10]
 800a80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a810:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 800a812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a814:	6a3a      	ldr	r2, [r7, #32]
 800a816:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 800a818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a81c:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	6819      	ldr	r1, [r3, #0]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	461a      	mov	r2, r3
 800a828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a82a:	f000 f97a 	bl	800ab22 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 800a82e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a830:	f000 f899 	bl	800a966 <virtqueue_disable_cb>
	}

	return (status);
 800a834:	697b      	ldr	r3, [r7, #20]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b08a      	sub	sp, #40	@ 0x28
 800a842:	af02      	add	r7, sp, #8
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	607a      	str	r2, [r7, #4]
 800a84a:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 800a84c:	2300      	movs	r3, #0
 800a84e:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 800a850:	2300      	movs	r3, #0
 800a852:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	4413      	add	r3, r2
 800a85a:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d12c      	bne.n	800a8bc <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800a866:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 800a868:	8a7b      	ldrh	r3, [r7, #18]
 800a86a:	3307      	adds	r3, #7
 800a86c:	00db      	lsls	r3, r3, #3
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	4413      	add	r3, r2
 800a872:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a878:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	69d9      	ldr	r1, [r3, #28]
 800a886:	8a7a      	ldrh	r2, [r7, #18]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	9301      	str	r3, [sp, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f000 f8a7 	bl	800a9e6 <vq_ring_add_buffer>
 800a898:	4603      	mov	r3, r0
 800a89a:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	8a3a      	ldrh	r2, [r7, #16]
 800a8a0:	861a      	strh	r2, [r3, #48]	@ 0x30
		vq->vq_free_cnt -= needed;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	851a      	strh	r2, [r3, #40]	@ 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 800a8b2:	8a7b      	ldrh	r3, [r7, #18]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f000 f966 	bl	800ab88 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 800a8bc:	69bb      	ldr	r3, [r7, #24]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3720      	adds	r7, #32
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b088      	sub	sp, #32
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d006      	beq.n	800a8e6 <virtqueue_get_buffer+0x20>
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e0:	885b      	ldrh	r3, [r3, #2]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d101      	bne.n	800a8ea <virtqueue_get_buffer+0x24>
		return (NULL);
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	e039      	b.n	800a95e <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	b291      	uxth	r1, r2
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	8651      	strh	r1, [r2, #50]	@ 0x32
 800a8f6:	b21a      	sxth	r2, r3
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	895b      	ldrh	r3, [r3, #10]
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	b21b      	sxth	r3, r3
 800a902:	4013      	ands	r3, r2
 800a904:	b21b      	sxth	r3, r3
 800a906:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a90c:	8bfb      	ldrh	r3, [r7, #30]
 800a90e:	00db      	lsls	r3, r3, #3
 800a910:	4413      	add	r3, r2
 800a912:	3304      	adds	r3, #4
 800a914:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 800a916:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	82fb      	strh	r3, [r7, #22]
	if (len)
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d003      	beq.n	800a92e <virtqueue_get_buffer+0x68>
		*len = uep->len;
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	685a      	ldr	r2, [r3, #4]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 800a92e:	8afb      	ldrh	r3, [r7, #22]
 800a930:	4619      	mov	r1, r3
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f000 f8ae 	bl	800aa94 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 800a938:	8afa      	ldrh	r2, [r7, #22]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	3207      	adds	r2, #7
 800a93e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800a942:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 800a944:	8afa      	ldrh	r2, [r7, #22]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	3207      	adds	r2, #7
 800a94a:	2100      	movs	r1, #0
 800a94c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	8bfa      	ldrh	r2, [r7, #30]
 800a95a:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 800a95c:	693b      	ldr	r3, [r7, #16]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3720      	adds	r7, #32
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 800a966:	b480      	push	{r7}
 800a968:	b083      	sub	sp, #12
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	f003 0302 	and.w	r3, r3, #2
 800a976:	2b00      	cmp	r3, #0
 800a978:	d010      	beq.n	800a99c <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	895b      	ldrh	r3, [r3, #10]
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a1a      	ldr	r2, [r3, #32]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800a98e:	3901      	subs	r1, #1
 800a990:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	4413      	add	r3, r2
 800a996:	460a      	mov	r2, r1
 800a998:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 800a99a:	e008      	b.n	800a9ae <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a1b      	ldr	r3, [r3, #32]
 800a9a0:	881a      	ldrh	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	f042 0201 	orr.w	r2, r2, #1
 800a9aa:	b292      	uxth	r2, r2
 800a9ac:	801a      	strh	r2, [r3, #0]
}
 800a9ae:	bf00      	nop
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b082      	sub	sp, #8
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 800a9c2:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f91d 	bl	800ac06 <vq_ring_must_notify_host>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d002      	beq.n	800a9d8 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f94d 	bl	800ac72 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 800a9de:	bf00      	nop
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 800a9e6:	b5b0      	push	{r4, r5, r7, lr}
 800a9e8:	b088      	sub	sp, #32
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	60f8      	str	r0, [r7, #12]
 800a9ee:	60b9      	str	r1, [r7, #8]
 800a9f0:	603b      	str	r3, [r7, #0]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 800a9f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9fa:	4413      	add	r3, r2
 800a9fc:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800a9fe:	2300      	movs	r3, #0
 800aa00:	61fb      	str	r3, [r7, #28]
 800aa02:	88fb      	ldrh	r3, [r7, #6]
 800aa04:	837b      	strh	r3, [r7, #26]
 800aa06:	e03c      	b.n	800aa82 <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 800aa08:	8b7b      	ldrh	r3, [r7, #26]
 800aa0a:	011b      	lsls	r3, r3, #4
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	4413      	add	r3, r2
 800aa10:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	00db      	lsls	r3, r3, #3
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	4413      	add	r3, r2
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f7ff fec8 	bl	800a7b4 <virtqueue_virt_to_phys>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2200      	movs	r2, #0
 800aa28:	461c      	mov	r4, r3
 800aa2a:	4615      	mov	r5, r2
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	e9c3 4500 	strd	r4, r5, [r3]
		dp->len = buf_list[i].len;
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	00db      	lsls	r3, r3, #3
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	4413      	add	r3, r2
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	2200      	movs	r2, #0
 800aa46:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	69fa      	ldr	r2, [r7, #28]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	da06      	bge.n	800aa60 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	899b      	ldrh	r3, [r3, #12]
 800aa56:	f043 0301 	orr.w	r3, r3, #1
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 800aa60:	69fa      	ldr	r2, [r7, #28]
 800aa62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa64:	429a      	cmp	r2, r3
 800aa66:	db06      	blt.n	800aa76 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	899b      	ldrh	r3, [r3, #12]
 800aa6c:	f043 0302 	orr.w	r3, r3, #2
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	61fb      	str	r3, [r7, #28]
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	89db      	ldrh	r3, [r3, #14]
 800aa80:	837b      	strh	r3, [r7, #26]
 800aa82:	69fa      	ldr	r2, [r7, #28]
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	dbbe      	blt.n	800aa08 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 800aa8a:	8b7b      	ldrh	r3, [r7, #26]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3720      	adds	r7, #32
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bdb0      	pop	{r4, r5, r7, pc}

0800aa94 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	69da      	ldr	r2, [r3, #28]
 800aaa4:	887b      	ldrh	r3, [r7, #2]
 800aaa6:	011b      	lsls	r3, r3, #4
 800aaa8:	4413      	add	r3, r2
 800aaaa:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 800aaac:	887b      	ldrh	r3, [r7, #2]
 800aaae:	3307      	adds	r3, #7
 800aab0:	00db      	lsls	r3, r3, #3
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	4413      	add	r3, r2
 800aab6:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	889b      	ldrh	r3, [r3, #4]
 800aac0:	4413      	add	r3, r2
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	851a      	strh	r2, [r3, #40]	@ 0x28
	dxp->ndescs--;
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	889b      	ldrh	r3, [r3, #4]
 800aacc:	3b01      	subs	r3, #1
 800aace:	b29a      	uxth	r2, r3
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	899b      	ldrh	r3, [r3, #12]
 800aad8:	f003 0304 	and.w	r3, r3, #4
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d113      	bne.n	800ab08 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 800aae0:	e00c      	b.n	800aafc <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	69da      	ldr	r2, [r3, #28]
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	89db      	ldrh	r3, [r3, #14]
 800aaea:	011b      	lsls	r3, r3, #4
 800aaec:	4413      	add	r3, r2
 800aaee:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	889b      	ldrh	r3, [r3, #4]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	899b      	ldrh	r3, [r3, #12]
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1ec      	bne.n	800aae2 <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	887a      	ldrh	r2, [r7, #2]
 800ab14:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 800ab16:	bf00      	nop
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b088      	sub	sp, #32
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	60f8      	str	r0, [r7, #12]
 800ab2a:	60b9      	str	r1, [r7, #8]
 800ab2c:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	895b      	ldrh	r3, [r3, #10]
 800ab32:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	3318      	adds	r3, #24
 800ab38:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 800ab3a:	69b9      	ldr	r1, [r7, #24]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	6978      	ldr	r0, [r7, #20]
 800ab42:	f7ff fd96 	bl	800a672 <vring_init>

	for (i = 0; i < size - 1; i++)
 800ab46:	2300      	movs	r3, #0
 800ab48:	61fb      	str	r3, [r7, #28]
 800ab4a:	e00c      	b.n	800ab66 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	6859      	ldr	r1, [r3, #4]
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	011b      	lsls	r3, r3, #4
 800ab58:	440b      	add	r3, r1
 800ab5a:	3201      	adds	r2, #1
 800ab5c:	b292      	uxth	r2, r2
 800ab5e:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	3301      	adds	r3, #1
 800ab64:	61fb      	str	r3, [r7, #28]
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	69fa      	ldr	r2, [r7, #28]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	dbed      	blt.n	800ab4c <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	685a      	ldr	r2, [r3, #4]
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	011b      	lsls	r3, r3, #4
 800ab78:	4413      	add	r3, r2
 800ab7a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800ab7e:	81da      	strh	r2, [r3, #14]
}
 800ab80:	bf00      	nop
 800ab82:	3720      	adds	r7, #32
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	460b      	mov	r3, r1
 800ab92:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	885b      	ldrh	r3, [r3, #2]
 800ab9a:	b21a      	sxth	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	895b      	ldrh	r3, [r3, #10]
 800aba0:	3b01      	subs	r3, #1
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	b21b      	sxth	r3, r3
 800aba6:	4013      	ands	r3, r2
 800aba8:	b21b      	sxth	r3, r3
 800abaa:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6a1a      	ldr	r2, [r3, #32]
 800abb0:	89fb      	ldrh	r3, [r7, #14]
 800abb2:	005b      	lsls	r3, r3, #1
 800abb4:	4413      	add	r3, r2
 800abb6:	887a      	ldrh	r2, [r7, #2]
 800abb8:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 800abba:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	885a      	ldrh	r2, [r3, #2]
 800abc4:	3201      	adds	r2, #1
 800abc6:	b292      	uxth	r2, r2
 800abc8:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abce:	3301      	adds	r3, #1
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800abd6:	bf00      	nop
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b082      	sub	sp, #8
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 800abea:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <virtqueue_notification+0x1c>
		vq->callback(vq);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	4798      	blx	r3
}
 800abfe:	bf00      	nop
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b084      	sub	sp, #16
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	f003 0302 	and.w	r3, r3, #2
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d01d      	beq.n	800ac56 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a1b      	ldr	r3, [r3, #32]
 800ac1e:	885b      	ldrh	r3, [r3, #2]
 800ac20:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac26:	89fa      	ldrh	r2, [r7, #14]
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	00db      	lsls	r3, r3, #3
 800ac36:	4413      	add	r3, r2
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 800ac3c:	89ba      	ldrh	r2, [r7, #12]
 800ac3e:	89f9      	ldrh	r1, [r7, #14]
 800ac40:	897b      	ldrh	r3, [r7, #10]
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7ff fd3e 	bl	800a6c4 <vring_need_event>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	bf14      	ite	ne
 800ac4e:	2301      	movne	r3, #1
 800ac50:	2300      	moveq	r3, #0
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	e009      	b.n	800ac6a <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	f003 0301 	and.w	r3, r3, #1
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	bf0c      	ite	eq
 800ac64:	2301      	moveq	r3, #1
 800ac66:	2300      	movne	r3, #0
 800ac68:	b2db      	uxtb	r3, r3
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d003      	beq.n	800ac8a <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	4798      	blx	r3
}
 800ac8a:	bf00      	nop
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
	...

0800ac94 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 800ac9c:	4b04      	ldr	r3, [pc, #16]	@ (800acb0 <HAL_HSEM_FreeCallback+0x1c>)
 800ac9e:	2201      	movs	r2, #1
 800aca0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800aca2:	2002      	movs	r0, #2
 800aca4:	f7f9 fa8e 	bl	80041c4 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 800aca8:	bf00      	nop
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	000007fc 	.word	0x000007fc

0800acb4 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800acba:	4b0b      	ldr	r3, [pc, #44]	@ (800ace8 <MAILBOX_Init+0x34>)
 800acbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800acc0:	4a09      	ldr	r2, [pc, #36]	@ (800ace8 <MAILBOX_Init+0x34>)
 800acc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800acc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800acca:	4b07      	ldr	r3, [pc, #28]	@ (800ace8 <MAILBOX_Init+0x34>)
 800accc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800acd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acd4:	607b      	str	r3, [r7, #4]
 800acd6:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800acd8:	2002      	movs	r0, #2
 800acda:	f7f9 fa73 	bl	80041c4 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	58024400 	.word	0x58024400

0800acec <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 800acf4:	4b09      	ldr	r3, [pc, #36]	@ (800ad1c <MAILBOX_Poll+0x30>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d108      	bne.n	800ad0e <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 800acfc:	2100      	movs	r1, #0
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7fe fbe5 	bl	80094ce <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 800ad04:	4b05      	ldr	r3, [pc, #20]	@ (800ad1c <MAILBOX_Poll+0x30>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	601a      	str	r2, [r3, #0]
    return 0;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	e001      	b.n	800ad12 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 800ad0e:	f06f 030a 	mvn.w	r3, #10
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	000007fc 	.word	0x000007fc

0800ad20 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	f7f9 fa1c 	bl	8004168 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800ad30:	2100      	movs	r1, #0
 800ad32:	2000      	movs	r0, #0
 800ad34:	f7f9 fa32 	bl	800419c <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 800ad42:	b480      	push	{r7}
 800ad44:	b083      	sub	sp, #12
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad52:	d006      	beq.n	800ad62 <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800ad58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad5c:	d001      	beq.n	800ad62 <is_rpmsg_ept_ready+0x20>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e000      	b.n	800ad64 <is_rpmsg_ept_ready+0x22>
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d209      	bcs.n	800ad98 <metal_device_io_region+0x28>
 800ad84:	683a      	ldr	r2, [r7, #0]
 800ad86:	4613      	mov	r3, r2
 800ad88:	005b      	lsls	r3, r3, #1
 800ad8a:	4413      	add	r3, r2
 800ad8c:	011b      	lsls	r3, r3, #4
 800ad8e:	3308      	adds	r3, #8
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	4413      	add	r3, r2
 800ad94:	3304      	adds	r3, #4
 800ad96:	e000      	b.n	800ad9a <metal_device_io_region+0x2a>
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
	...

0800ada8 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 800ada8:	b590      	push	{r4, r7, lr}
 800adaa:	b08d      	sub	sp, #52	@ 0x34
 800adac:	af04      	add	r7, sp, #16
 800adae:	6078      	str	r0, [r7, #4]
  int status = 0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800adb4:	2300      	movs	r3, #0
 800adb6:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 800adb8:	4a41      	ldr	r2, [pc, #260]	@ (800aec0 <OPENAMP_shmem_init+0x118>)
 800adba:	f107 0310 	add.w	r3, r7, #16
 800adbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adc2:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800adc6:	2300      	movs	r3, #0
 800adc8:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 800adca:	2300      	movs	r3, #0
 800adcc:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 800adce:	f107 0310 	add.w	r3, r7, #16
 800add2:	4618      	mov	r0, r3
 800add4:	f7fd fe24 	bl	8008a20 <metal_init>

  status = metal_register_generic_device(&shm_device);
 800add8:	483a      	ldr	r0, [pc, #232]	@ (800aec4 <OPENAMP_shmem_init+0x11c>)
 800adda:	f7fd fcc9 	bl	8008770 <metal_register_generic_device>
 800adde:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <OPENAMP_shmem_init+0x42>
    return status;
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	e066      	b.n	800aeb8 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 800adea:	f107 0318 	add.w	r3, r7, #24
 800adee:	461a      	mov	r2, r3
 800adf0:	4935      	ldr	r1, [pc, #212]	@ (800aec8 <OPENAMP_shmem_init+0x120>)
 800adf2:	4836      	ldr	r0, [pc, #216]	@ (800aecc <OPENAMP_shmem_init+0x124>)
 800adf4:	f7fd fc7e 	bl	80086f4 <metal_device_open>
 800adf8:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <OPENAMP_shmem_init+0x5c>
    return status;
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	e059      	b.n	800aeb8 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 800ae04:	4a32      	ldr	r2, [pc, #200]	@ (800aed0 <OPENAMP_shmem_init+0x128>)
 800ae06:	4b33      	ldr	r3, [pc, #204]	@ (800aed4 <OPENAMP_shmem_init+0x12c>)
 800ae08:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 800ae10:	4a31      	ldr	r2, [pc, #196]	@ (800aed8 <OPENAMP_shmem_init+0x130>)
 800ae12:	4b2f      	ldr	r3, [pc, #188]	@ (800aed0 <OPENAMP_shmem_init+0x128>)
 800ae14:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800ae16:	461a      	mov	r2, r3
 800ae18:	2300      	movs	r3, #0
 800ae1a:	9302      	str	r3, [sp, #8]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	9301      	str	r3, [sp, #4]
 800ae20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	4613      	mov	r3, r2
 800ae28:	4a2a      	ldr	r2, [pc, #168]	@ (800aed4 <OPENAMP_shmem_init+0x12c>)
 800ae2a:	4929      	ldr	r1, [pc, #164]	@ (800aed0 <OPENAMP_shmem_init+0x128>)
 800ae2c:	f7fd fe45 	bl	8008aba <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	2100      	movs	r1, #0
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7ff ff9b 	bl	800ad70 <metal_device_io_region>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	4a27      	ldr	r2, [pc, #156]	@ (800aedc <OPENAMP_shmem_init+0x134>)
 800ae3e:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 800ae40:	4b26      	ldr	r3, [pc, #152]	@ (800aedc <OPENAMP_shmem_init+0x134>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d102      	bne.n	800ae4e <OPENAMP_shmem_init+0xa6>
    return -1;
 800ae48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae4c:	e034      	b.n	800aeb8 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 800ae4e:	f107 0208 	add.w	r2, r7, #8
 800ae52:	f107 030c 	add.w	r3, r7, #12
 800ae56:	4619      	mov	r1, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f91d 	bl	800b098 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	4a1f      	ldr	r2, [pc, #124]	@ (800aee0 <OPENAMP_shmem_init+0x138>)
 800ae62:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 800ae64:	4b1e      	ldr	r3, [pc, #120]	@ (800aee0 <OPENAMP_shmem_init+0x138>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d102      	bne.n	800ae72 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 800ae6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae70:	e022      	b.n	800aeb8 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800ae78:	4b19      	ldr	r3, [pc, #100]	@ (800aee0 <OPENAMP_shmem_init+0x138>)
 800ae7a:	6819      	ldr	r1, [r3, #0]
 800ae7c:	4b18      	ldr	r3, [pc, #96]	@ (800aee0 <OPENAMP_shmem_init+0x138>)
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	461c      	mov	r4, r3
 800ae84:	2300      	movs	r3, #0
 800ae86:	9302      	str	r3, [sp, #8]
 800ae88:	2300      	movs	r3, #0
 800ae8a:	9301      	str	r3, [sp, #4]
 800ae8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	4623      	mov	r3, r4
 800ae94:	f7fd fe11 	bl	8008aba <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	2101      	movs	r1, #1
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7ff ff67 	bl	800ad70 <metal_device_io_region>
 800aea2:	4603      	mov	r3, r0
 800aea4:	4a0f      	ldr	r2, [pc, #60]	@ (800aee4 <OPENAMP_shmem_init+0x13c>)
 800aea6:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 800aea8:	4b0e      	ldr	r3, [pc, #56]	@ (800aee4 <OPENAMP_shmem_init+0x13c>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d102      	bne.n	800aeb6 <OPENAMP_shmem_init+0x10e>
    return -1;
 800aeb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aeb4:	e000      	b.n	800aeb8 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3724      	adds	r7, #36	@ 0x24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd90      	pop	{r4, r7, pc}
 800aec0:	0800c764 	.word	0x0800c764
 800aec4:	00000044 	.word	0x00000044
 800aec8:	0800c750 	.word	0x0800c750
 800aecc:	0800c75c 	.word	0x0800c75c
 800aed0:	38000400 	.word	0x38000400
 800aed4:	00000890 	.word	0x00000890
 800aed8:	38010000 	.word	0x38010000
 800aedc:	00000800 	.word	0x00000800
 800aee0:	00000808 	.word	0x00000808
 800aee4:	00000804 	.word	0x00000804

0800aee8 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 800aee8:	b590      	push	{r4, r7, lr}
 800aeea:	b08b      	sub	sp, #44	@ 0x2c
 800aeec:	af04      	add	r7, sp, #16
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 800aef2:	2300      	movs	r3, #0
 800aef4:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 800aef6:	2300      	movs	r3, #0
 800aef8:	613b      	str	r3, [r7, #16]
  int status = 0;
 800aefa:	2300      	movs	r3, #0
 800aefc:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 800aefe:	f7ff fed9 	bl	800acb4 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7ff ff50 	bl	800ada8 <OPENAMP_shmem_init>
 800af08:	60f8      	str	r0, [r7, #12]
  if(status)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	e06a      	b.n	800afea <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	4b37      	ldr	r3, [pc, #220]	@ (800aff4 <MX_OPENAMP_Init+0x10c>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f103 0218 	add.w	r2, r3, #24
 800af1e:	4b36      	ldr	r3, [pc, #216]	@ (800aff8 <MX_OPENAMP_Init+0x110>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2100      	movs	r1, #0
 800af24:	9102      	str	r1, [sp, #8]
 800af26:	4935      	ldr	r1, [pc, #212]	@ (800affc <MX_OPENAMP_Init+0x114>)
 800af28:	9101      	str	r1, [sp, #4]
 800af2a:	2100      	movs	r1, #0
 800af2c:	9100      	str	r1, [sp, #0]
 800af2e:	21ff      	movs	r1, #255	@ 0xff
 800af30:	f7fe f9ee 	bl	8009310 <rproc_virtio_create_vdev>
 800af34:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d102      	bne.n	800af42 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 800af3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af40:	e053      	b.n	800afea <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 800af42:	6938      	ldr	r0, [r7, #16]
 800af44:	f7fe faff 	bl	8009546 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 800af48:	4b2a      	ldr	r3, [pc, #168]	@ (800aff4 <MX_OPENAMP_Init+0x10c>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3334      	adds	r3, #52	@ 0x34
 800af4e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800af58:	461c      	mov	r4, r3
 800af5a:	4b29      	ldr	r3, [pc, #164]	@ (800b000 <MX_OPENAMP_Init+0x118>)
 800af5c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	6892      	ldr	r2, [r2, #8]
 800af62:	6979      	ldr	r1, [r7, #20]
 800af64:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800af66:	9102      	str	r1, [sp, #8]
 800af68:	9201      	str	r2, [sp, #4]
 800af6a:	9300      	str	r3, [sp, #0]
 800af6c:	4623      	mov	r3, r4
 800af6e:	4602      	mov	r2, r0
 800af70:	2100      	movs	r1, #0
 800af72:	6938      	ldr	r0, [r7, #16]
 800af74:	f7fe fa7a 	bl	800946c <rproc_virtio_init_vring>
 800af78:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	e032      	b.n	800afea <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 800af84:	4b1b      	ldr	r3, [pc, #108]	@ (800aff4 <MX_OPENAMP_Init+0x10c>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3348      	adds	r3, #72	@ 0x48
 800af8a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800af94:	461c      	mov	r4, r3
 800af96:	4b1a      	ldr	r3, [pc, #104]	@ (800b000 <MX_OPENAMP_Init+0x118>)
 800af98:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	6892      	ldr	r2, [r2, #8]
 800af9e:	6979      	ldr	r1, [r7, #20]
 800afa0:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800afa2:	9102      	str	r1, [sp, #8]
 800afa4:	9201      	str	r2, [sp, #4]
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	4623      	mov	r3, r4
 800afaa:	4602      	mov	r2, r0
 800afac:	2101      	movs	r1, #1
 800afae:	6938      	ldr	r0, [r7, #16]
 800afb0:	f7fe fa5c 	bl	800946c <rproc_virtio_init_vring>
 800afb4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	e014      	b.n	800afea <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800afc0:	4b10      	ldr	r3, [pc, #64]	@ (800b004 <MX_OPENAMP_Init+0x11c>)
 800afc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afc6:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 800afc8:	4a0f      	ldr	r2, [pc, #60]	@ (800b008 <MX_OPENAMP_Init+0x120>)
 800afca:	4b0e      	ldr	r3, [pc, #56]	@ (800b004 <MX_OPENAMP_Init+0x11c>)
 800afcc:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800afce:	461a      	mov	r2, r3
 800afd0:	480e      	ldr	r0, [pc, #56]	@ (800b00c <MX_OPENAMP_Init+0x124>)
 800afd2:	f7fe ff29 	bl	8009e28 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800afd6:	4b0a      	ldr	r3, [pc, #40]	@ (800b000 <MX_OPENAMP_Init+0x118>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a0c      	ldr	r2, [pc, #48]	@ (800b00c <MX_OPENAMP_Init+0x124>)
 800afdc:	9200      	str	r2, [sp, #0]
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	6939      	ldr	r1, [r7, #16]
 800afe2:	480b      	ldr	r0, [pc, #44]	@ (800b010 <MX_OPENAMP_Init+0x128>)
 800afe4:	f7ff f992 	bl	800a30c <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	371c      	adds	r7, #28
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd90      	pop	{r4, r7, pc}
 800aff2:	bf00      	nop
 800aff4:	00000808 	.word	0x00000808
 800aff8:	00000804 	.word	0x00000804
 800affc:	0800ad21 	.word	0x0800ad21
 800b000:	00000800 	.word	0x00000800
 800b004:	38000400 	.word	0x38000400
 800b008:	38010000 	.word	0x38010000
 800b00c:	0000080c 	.word	0x0000080c
 800b010:	00000818 	.word	0x00000818

0800b014 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b08a      	sub	sp, #40	@ 0x28
 800b018:	af04      	add	r7, sp, #16
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	607a      	str	r2, [r7, #4]
 800b020:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800b022:	2300      	movs	r3, #0
 800b024:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	9302      	str	r3, [sp, #8]
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	9301      	str	r3, [sp, #4]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	9300      	str	r3, [sp, #0]
 800b032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	4904      	ldr	r1, [pc, #16]	@ (800b04c <OPENAMP_create_endpoint+0x38>)
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f7fe fd10 	bl	8009a60 <rpmsg_create_ept>
 800b040:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 800b042:	697b      	ldr	r3, [r7, #20]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3718      	adds	r7, #24
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	00000818 	.word	0x00000818

0800b050 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 800b054:	4b03      	ldr	r3, [pc, #12]	@ (800b064 <OPENAMP_check_for_message+0x14>)
 800b056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff fe47 	bl	800acec <MAILBOX_Poll>
}
 800b05e:	bf00      	nop
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	00000818 	.word	0x00000818

0800b068 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 800b070:	e004      	b.n	800b07c <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 800b072:	4b08      	ldr	r3, [pc, #32]	@ (800b094 <OPENAMP_Wait_EndPointready+0x2c>)
 800b074:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b076:	4618      	mov	r0, r3
 800b078:	f7ff fe38 	bl	800acec <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7ff fe60 	bl	800ad42 <is_rpmsg_ept_ready>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d0f4      	beq.n	800b072 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 800b088:	bf00      	nop
 800b08a:	bf00      	nop
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	00000818 	.word	0x00000818

0800b098 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 800b0a4:	228c      	movs	r2, #140	@ 0x8c
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	481e      	ldr	r0, [pc, #120]	@ (800b124 <resource_table_init+0x8c>)
 800b0aa:	f000 fc32 	bl	800b912 <memset>
	resource_table.num = 1;
 800b0ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b124 <resource_table_init+0x8c>)
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 800b0b4:	4b1b      	ldr	r3, [pc, #108]	@ (800b124 <resource_table_init+0x8c>)
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 800b0ba:	4b1a      	ldr	r3, [pc, #104]	@ (800b124 <resource_table_init+0x8c>)
 800b0bc:	2218      	movs	r2, #24
 800b0be:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 800b0c0:	4b19      	ldr	r3, [pc, #100]	@ (800b128 <resource_table_init+0x90>)
 800b0c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b0c6:	4a17      	ldr	r2, [pc, #92]	@ (800b124 <resource_table_init+0x8c>)
 800b0c8:	6353      	str	r3, [r2, #52]	@ 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 800b0ca:	4b16      	ldr	r3, [pc, #88]	@ (800b124 <resource_table_init+0x8c>)
 800b0cc:	2204      	movs	r2, #4
 800b0ce:	639a      	str	r2, [r3, #56]	@ 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 800b0d0:	4b14      	ldr	r3, [pc, #80]	@ (800b124 <resource_table_init+0x8c>)
 800b0d2:	2204      	movs	r2, #4
 800b0d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 800b0d6:	4b13      	ldr	r3, [pc, #76]	@ (800b124 <resource_table_init+0x8c>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	641a      	str	r2, [r3, #64]	@ 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 800b0dc:	4a12      	ldr	r2, [pc, #72]	@ (800b128 <resource_table_init+0x90>)
 800b0de:	4b11      	ldr	r3, [pc, #68]	@ (800b124 <resource_table_init+0x8c>)
 800b0e0:	649a      	str	r2, [r3, #72]	@ 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 800b0e2:	4b10      	ldr	r3, [pc, #64]	@ (800b124 <resource_table_init+0x8c>)
 800b0e4:	2204      	movs	r2, #4
 800b0e6:	64da      	str	r2, [r3, #76]	@ 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 800b0e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b124 <resource_table_init+0x8c>)
 800b0ea:	2204      	movs	r2, #4
 800b0ec:	651a      	str	r2, [r3, #80]	@ 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 800b0ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b124 <resource_table_init+0x8c>)
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	655a      	str	r2, [r3, #84]	@ 0x54

	resource_table.vdev.type = RSC_VDEV;
 800b0f4:	4b0b      	ldr	r3, [pc, #44]	@ (800b124 <resource_table_init+0x8c>)
 800b0f6:	2203      	movs	r2, #3
 800b0f8:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 800b0fa:	4b0a      	ldr	r3, [pc, #40]	@ (800b124 <resource_table_init+0x8c>)
 800b0fc:	2207      	movs	r2, #7
 800b0fe:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 800b100:	4b08      	ldr	r3, [pc, #32]	@ (800b124 <resource_table_init+0x8c>)
 800b102:	2202      	movs	r2, #2
 800b104:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 800b108:	4b06      	ldr	r3, [pc, #24]	@ (800b124 <resource_table_init+0x8c>)
 800b10a:	2201      	movs	r2, #1
 800b10c:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	228c      	movs	r2, #140	@ 0x8c
 800b112:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	4a03      	ldr	r2, [pc, #12]	@ (800b124 <resource_table_init+0x8c>)
 800b118:	601a      	str	r2, [r3, #0]
}
 800b11a:	bf00      	nop
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	38000000 	.word	0x38000000
 800b128:	38000400 	.word	0x38000400

0800b12c <ResMgr_Init>:
  * @param  SendFunct : function pointer used to send message to the other core
  * @param  Callback  : function pointer used to publish the status to user side
  * @retval Return Status
  */
ResMgr_Status_t  ResMgr_Init(ResMgrSendMsg_t SendFunct, ResMgrCallback_t Callback)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	73fb      	strb	r3, [r7, #15]
  uint32_t count = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	60bb      	str	r3, [r7, #8]
  /* lock table modification */
  RESMGR_TBL_LOCK(RESMGR_ID_RESMGR_TABLE);
 800b13e:	201f      	movs	r0, #31
 800b140:	f7f9 f812 	bl	8004168 <HAL_HSEM_FastTake>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1f9      	bne.n	800b13e <ResMgr_Init+0x12>

  /* Check whether the resource is free */
  if(ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State != RESMGR_STATE_TBL_INIT)
 800b14a:	4b43      	ldr	r3, [pc, #268]	@ (800b258 <ResMgr_Init+0x12c>)
 800b14c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 800b150:	2b5a      	cmp	r3, #90	@ 0x5a
 800b152:	d062      	beq.n	800b21a <ResMgr_Init+0xee>
  {

#if defined(RESMGR_USE_DEFAULT_TBL)
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 800b154:	e05a      	b.n	800b20c <ResMgr_Init+0xe0>
    {
      if(Default_ResTbl[count] != RES_DEFAULT_ASSIGN_NONE)
 800b156:	4a41      	ldr	r2, [pc, #260]	@ (800b25c <ResMgr_Init+0x130>)
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	4413      	add	r3, r2
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d02a      	beq.n	800b1b8 <ResMgr_Init+0x8c>
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_ASSIGNED;
 800b162:	493d      	ldr	r1, [pc, #244]	@ (800b258 <ResMgr_Init+0x12c>)
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	4613      	mov	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4413      	add	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	440b      	add	r3, r1
 800b170:	3308      	adds	r3, #8
 800b172:	2201      	movs	r2, #1
 800b174:	601a      	str	r2, [r3, #0]
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU1)
 800b176:	4a39      	ldr	r2, [pc, #228]	@ (800b25c <ResMgr_Init+0x130>)
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	4413      	add	r3, r2
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d109      	bne.n	800b196 <ResMgr_Init+0x6a>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU1;
 800b182:	4935      	ldr	r1, [pc, #212]	@ (800b258 <ResMgr_Init+0x12c>)
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	4613      	mov	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4413      	add	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	440b      	add	r3, r1
 800b190:	3304      	adds	r3, #4
 800b192:	2208      	movs	r2, #8
 800b194:	601a      	str	r2, [r3, #0]
        }
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU2)
 800b196:	4a31      	ldr	r2, [pc, #196]	@ (800b25c <ResMgr_Init+0x130>)
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	4413      	add	r3, r2
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d11e      	bne.n	800b1e0 <ResMgr_Init+0xb4>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU2;
 800b1a2:	492d      	ldr	r1, [pc, #180]	@ (800b258 <ResMgr_Init+0x12c>)
 800b1a4:	68ba      	ldr	r2, [r7, #8]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	440b      	add	r3, r1
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	2210      	movs	r2, #16
 800b1b4:	601a      	str	r2, [r3, #0]
 800b1b6:	e013      	b.n	800b1e0 <ResMgr_Init+0xb4>
        }
      }
      else
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
 800b1b8:	4927      	ldr	r1, [pc, #156]	@ (800b258 <ResMgr_Init+0x12c>)
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	440b      	add	r3, r1
 800b1c6:	3308      	adds	r3, #8
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	601a      	str	r2, [r3, #0]
        ResMgr_Tbl[count].Ctx.Flags = 0;
 800b1cc:	4922      	ldr	r1, [pc, #136]	@ (800b258 <ResMgr_Init+0x12c>)
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	440b      	add	r3, r1
 800b1da:	3304      	adds	r3, #4
 800b1dc:	2200      	movs	r2, #0
 800b1de:	601a      	str	r2, [r3, #0]
      }
      ResMgr_Tbl[count].Spinlock = 0;
 800b1e0:	491d      	ldr	r1, [pc, #116]	@ (800b258 <ResMgr_Init+0x12c>)
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4413      	add	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	440b      	add	r3, r1
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	601a      	str	r2, [r3, #0]
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
 800b1f2:	4919      	ldr	r1, [pc, #100]	@ (800b258 <ResMgr_Init+0x12c>)
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	440b      	add	r3, r1
 800b200:	3310      	adds	r3, #16
 800b202:	2200      	movs	r2, #0
 800b204:	601a      	str	r2, [r3, #0]
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	3301      	adds	r3, #1
 800b20a:	60bb      	str	r3, [r7, #8]
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2b14      	cmp	r3, #20
 800b210:	d9a1      	bls.n	800b156 <ResMgr_Init+0x2a>
      ResMgr_Tbl[count].Ctx.Flags = 0;
      ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
    }
#endif /* RESMGR_USE_DEFAULT_TBL */
    ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State = RESMGR_STATE_TBL_INIT;
 800b212:	4b11      	ldr	r3, [pc, #68]	@ (800b258 <ResMgr_Init+0x12c>)
 800b214:	225a      	movs	r2, #90	@ 0x5a
 800b216:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
  }

  RESMGR_TBL_UNLOCK(RESMGR_ID_RESMGR_TABLE);
 800b21a:	2100      	movs	r1, #0
 800b21c:	201f      	movs	r0, #31
 800b21e:	f7f8 ffbd 	bl	800419c <HAL_HSEM_Release>

  if((SendFunct != NULL) || (Callback != NULL))
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d102      	bne.n	800b22e <ResMgr_Init+0x102>
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00c      	beq.n	800b248 <ResMgr_Init+0x11c>
  {
    ResMgrSendMsgFunct = SendFunct;
 800b22e:	4a0c      	ldr	r2, [pc, #48]	@ (800b260 <ResMgr_Init+0x134>)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct = Callback;
 800b234:	4a0b      	ldr	r2, [pc, #44]	@ (800b264 <ResMgr_Init+0x138>)
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct(RESMGR_ID_ALL, RESMGR_MSG_INIT);
 800b23a:	4b0a      	ldr	r3, [pc, #40]	@ (800b264 <ResMgr_Init+0x138>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2100      	movs	r1, #0
 800b240:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800b244:	4798      	blx	r3
 800b246:	e001      	b.n	800b24c <ResMgr_Init+0x120>
  }
  else
  {
    ret = RESMGR_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	0000011c 	.word	0x0000011c
 800b25c:	0800c83c 	.word	0x0800c83c
 800b260:	00000894 	.word	0x00000894
 800b264:	00000898 	.word	0x00000898

0800b268 <ResMgr_Request>:
  * @param  prio: Request priority
  * @param  phandle: resource driver handle
  * @retval Status
  */
ResMgr_Status_t  ResMgr_Request ( uint32_t id, uint32_t flags, uint32_t prio, void *phandle)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b086      	sub	sp, #24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
 800b274:	603b      	str	r3, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 800b276:	2300      	movs	r3, #0
 800b278:	75fb      	strb	r3, [r7, #23]

  if(id < RESMGR_ENTRY_NBR)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2b14      	cmp	r3, #20
 800b27e:	f200 80f5 	bhi.w	800b46c <ResMgr_Request+0x204>
  {
    /* lock table modification*/

    RESMGR_TBL_LOCK(id);
 800b282:	201f      	movs	r0, #31
 800b284:	f7f8 ff70 	bl	8004168 <HAL_HSEM_FastTake>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1f9      	bne.n	800b282 <ResMgr_Request+0x1a>

    /* Check whether the resource is free */
    /* Or the resource is assigned by default to the current Core*/
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 800b28e:	497b      	ldr	r1, [pc, #492]	@ (800b47c <ResMgr_Request+0x214>)
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	4613      	mov	r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	4413      	add	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	440b      	add	r3, r1
 800b29c:	3308      	adds	r3, #8
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d019      	beq.n	800b2d8 <ResMgr_Request+0x70>
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 800b2a4:	4975      	ldr	r1, [pc, #468]	@ (800b47c <ResMgr_Request+0x214>)
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	440b      	add	r3, r1
 800b2b2:	3308      	adds	r3, #8
 800b2b4:	681b      	ldr	r3, [r3, #0]
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d165      	bne.n	800b386 <ResMgr_Request+0x11e>
        (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) == (flags & RESMGR_FLAGS_OWNER_MSK)))
 800b2ba:	4970      	ldr	r1, [pc, #448]	@ (800b47c <ResMgr_Request+0x214>)
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	4413      	add	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	440b      	add	r3, r1
 800b2c8:	3304      	adds	r3, #4
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	4053      	eors	r3, r2
 800b2d0:	f003 0318 	and.w	r3, r3, #24
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d156      	bne.n	800b386 <ResMgr_Request+0x11e>
    {

      if(phandle != NULL)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d02c      	beq.n	800b338 <ResMgr_Request+0xd0>
      {
        if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	f003 0301 	and.w	r3, r3, #1
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d01d      	beq.n	800b324 <ResMgr_Request+0xbc>
        {
          if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 800b2e8:	4964      	ldr	r1, [pc, #400]	@ (800b47c <ResMgr_Request+0x214>)
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4413      	add	r3, r2
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	440b      	add	r3, r1
 800b2f6:	3310      	adds	r3, #16
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00c      	beq.n	800b318 <ResMgr_Request+0xb0>
          {
            *((uint32_t *)phandle) = (uint32_t ) (uint32_t *)ResMgr_Tbl[id].Ctx.pHandle;
 800b2fe:	495f      	ldr	r1, [pc, #380]	@ (800b47c <ResMgr_Request+0x214>)
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	4613      	mov	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4413      	add	r3, r2
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	440b      	add	r3, r1
 800b30c:	3310      	adds	r3, #16
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	461a      	mov	r2, r3
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	601a      	str	r2, [r3, #0]
 800b316:	e00f      	b.n	800b338 <ResMgr_Request+0xd0>
          }
          else
          {
            RESMGR_TBL_UNLOCK(id);
 800b318:	2100      	movs	r1, #0
 800b31a:	201f      	movs	r0, #31
 800b31c:	f7f8 ff3e 	bl	800419c <HAL_HSEM_Release>
            return  RESMGR_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	e0a6      	b.n	800b472 <ResMgr_Request+0x20a>
          }
        }
        else
        {
          ResMgr_Tbl[id].Ctx.pHandle = phandle;
 800b324:	4955      	ldr	r1, [pc, #340]	@ (800b47c <ResMgr_Request+0x214>)
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	440b      	add	r3, r1
 800b332:	3310      	adds	r3, #16
 800b334:	683a      	ldr	r2, [r7, #0]
 800b336:	601a      	str	r2, [r3, #0]
        }
      }
      /* Resource free, update the table and send a message */
      ResMgr_Tbl[id].Ctx.Flags = (flags & ~RESMGR_FLAGS_ACCESS_MSK) | \
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	f023 0306 	bic.w	r3, r3, #6
 800b33e:	f043 0102 	orr.w	r1, r3, #2
 800b342:	484e      	ldr	r0, [pc, #312]	@ (800b47c <ResMgr_Request+0x214>)
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	4613      	mov	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4413      	add	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4403      	add	r3, r0
 800b350:	3304      	adds	r3, #4
 800b352:	6019      	str	r1, [r3, #0]
        RESMGR_FLAGS_ACCESS_NORMAL;

      ResMgr_Tbl[id].Ctx.State = RESMGR_STATE_ASSIGNED;
 800b354:	4949      	ldr	r1, [pc, #292]	@ (800b47c <ResMgr_Request+0x214>)
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	4613      	mov	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4413      	add	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	440b      	add	r3, r1
 800b362:	3308      	adds	r3, #8
 800b364:	2201      	movs	r2, #1
 800b366:	601a      	str	r2, [r3, #0]
      RESMGR_TBL_UNLOCK(id);
 800b368:	2100      	movs	r1, #0
 800b36a:	201f      	movs	r0, #31
 800b36c:	f7f8 ff16 	bl	800419c <HAL_HSEM_Release>
      ResMgrSendMsgFunct(id, RESMGR_MSG_ASSIGN);
 800b370:	4b43      	ldr	r3, [pc, #268]	@ (800b480 <ResMgr_Request+0x218>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2101      	movs	r1, #1
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	4798      	blx	r3
      ResMgrCallbackFunct(id, RESMGR_MSG_ASSIGNED);
 800b37a:	4b42      	ldr	r3, [pc, #264]	@ (800b484 <ResMgr_Request+0x21c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2111      	movs	r1, #17
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	4798      	blx	r3
 800b384:	e074      	b.n	800b470 <ResMgr_Request+0x208>
    }
    else  /* Resource already used, update the table and send a message */
    {
      ret = RESMGR_BUSY;
 800b386:	2302      	movs	r3, #2
 800b388:	75fb      	strb	r3, [r7, #23]

      /* is the request for normal access, reject*/
      if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_NORMAL)
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	f003 0306 	and.w	r3, r3, #6
 800b390:	2b02      	cmp	r3, #2
 800b392:	d10e      	bne.n	800b3b2 <ResMgr_Request+0x14a>
      {
        RESMGR_TBL_UNLOCK(id);
 800b394:	2100      	movs	r1, #0
 800b396:	201f      	movs	r0, #31
 800b398:	f7f8 ff00 	bl	800419c <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_REJECT);
 800b39c:	4b38      	ldr	r3, [pc, #224]	@ (800b480 <ResMgr_Request+0x218>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2105      	movs	r1, #5
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_REJECTED);
 800b3a6:	4b37      	ldr	r3, [pc, #220]	@ (800b484 <ResMgr_Request+0x21c>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2115      	movs	r1, #21
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	4798      	blx	r3
 800b3b0:	e05e      	b.n	800b470 <ResMgr_Request+0x208>
      }

      /* it is a pend request? */
      else if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_PEND)
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	f003 0306 	and.w	r3, r3, #6
 800b3b8:	2b04      	cmp	r3, #4
 800b3ba:	d154      	bne.n	800b466 <ResMgr_Request+0x1fe>
      {
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 800b3bc:	492f      	ldr	r1, [pc, #188]	@ (800b47c <ResMgr_Request+0x214>)
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	440b      	add	r3, r1
 800b3ca:	3304      	adds	r3, #4
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f003 0218 	and.w	r2, r3, #24
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	f023 0306 	bic.w	r3, r3, #6
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 800b3d8:	4313      	orrs	r3, r2
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 800b3da:	f043 0104 	orr.w	r1, r3, #4
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 800b3de:	4827      	ldr	r0, [pc, #156]	@ (800b47c <ResMgr_Request+0x214>)
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	4413      	add	r3, r2
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	4403      	add	r3, r0
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	6019      	str	r1, [r3, #0]

        if(phandle != NULL)
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d028      	beq.n	800b448 <ResMgr_Request+0x1e0>
        {
          if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d019      	beq.n	800b434 <ResMgr_Request+0x1cc>
          {
            if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 800b400:	491e      	ldr	r1, [pc, #120]	@ (800b47c <ResMgr_Request+0x214>)
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	4613      	mov	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	440b      	add	r3, r1
 800b40e:	3310      	adds	r3, #16
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00c      	beq.n	800b430 <ResMgr_Request+0x1c8>
            {
              *((uint32_t *)phandle) = (uint32_t )(uint32_t *) ResMgr_Tbl[id].Ctx.pHandle;
 800b416:	4919      	ldr	r1, [pc, #100]	@ (800b47c <ResMgr_Request+0x214>)
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	4613      	mov	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4413      	add	r3, r2
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	440b      	add	r3, r1
 800b424:	3310      	adds	r3, #16
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	461a      	mov	r2, r3
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	601a      	str	r2, [r3, #0]
 800b42e:	e00b      	b.n	800b448 <ResMgr_Request+0x1e0>
            }
            else
            {
              return  RESMGR_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	e01e      	b.n	800b472 <ResMgr_Request+0x20a>
            }
          }
          else
          {
            ResMgr_Tbl[id].Ctx.pHandle = phandle;
 800b434:	4911      	ldr	r1, [pc, #68]	@ (800b47c <ResMgr_Request+0x214>)
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4613      	mov	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	440b      	add	r3, r1
 800b442:	3310      	adds	r3, #16
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	601a      	str	r2, [r3, #0]
          }
        }
        RESMGR_TBL_UNLOCK(id);
 800b448:	2100      	movs	r1, #0
 800b44a:	201f      	movs	r0, #31
 800b44c:	f7f8 fea6 	bl	800419c <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_PEND);
 800b450:	4b0b      	ldr	r3, [pc, #44]	@ (800b480 <ResMgr_Request+0x218>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2104      	movs	r1, #4
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_PENDED);
 800b45a:	4b0a      	ldr	r3, [pc, #40]	@ (800b484 <ResMgr_Request+0x21c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2114      	movs	r1, #20
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	4798      	blx	r3
 800b464:	e004      	b.n	800b470 <ResMgr_Request+0x208>
      }
      else
      {
        ret = RESMGR_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	75fb      	strb	r3, [r7, #23]
 800b46a:	e001      	b.n	800b470 <ResMgr_Request+0x208>
    }

  }
  else
  {
    ret = RESMGR_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800b470:	7dfb      	ldrb	r3, [r7, #23]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3718      	adds	r7, #24
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	0000011c 	.word	0x0000011c
 800b480:	00000894 	.word	0x00000894
 800b484:	00000898 	.word	0x00000898

0800b488 <__assert_func>:
 800b488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b48a:	4614      	mov	r4, r2
 800b48c:	461a      	mov	r2, r3
 800b48e:	4b09      	ldr	r3, [pc, #36]	@ (800b4b4 <__assert_func+0x2c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4605      	mov	r5, r0
 800b494:	68d8      	ldr	r0, [r3, #12]
 800b496:	b954      	cbnz	r4, 800b4ae <__assert_func+0x26>
 800b498:	4b07      	ldr	r3, [pc, #28]	@ (800b4b8 <__assert_func+0x30>)
 800b49a:	461c      	mov	r4, r3
 800b49c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4a0:	9100      	str	r1, [sp, #0]
 800b4a2:	462b      	mov	r3, r5
 800b4a4:	4905      	ldr	r1, [pc, #20]	@ (800b4bc <__assert_func+0x34>)
 800b4a6:	f000 f96f 	bl	800b788 <fiprintf>
 800b4aa:	f000 fa86 	bl	800b9ba <abort>
 800b4ae:	4b04      	ldr	r3, [pc, #16]	@ (800b4c0 <__assert_func+0x38>)
 800b4b0:	e7f4      	b.n	800b49c <__assert_func+0x14>
 800b4b2:	bf00      	nop
 800b4b4:	000000cc 	.word	0x000000cc
 800b4b8:	0800c88c 	.word	0x0800c88c
 800b4bc:	0800c85e 	.word	0x0800c85e
 800b4c0:	0800c851 	.word	0x0800c851

0800b4c4 <malloc>:
 800b4c4:	4b02      	ldr	r3, [pc, #8]	@ (800b4d0 <malloc+0xc>)
 800b4c6:	4601      	mov	r1, r0
 800b4c8:	6818      	ldr	r0, [r3, #0]
 800b4ca:	f000 b82d 	b.w	800b528 <_malloc_r>
 800b4ce:	bf00      	nop
 800b4d0:	000000cc 	.word	0x000000cc

0800b4d4 <free>:
 800b4d4:	4b02      	ldr	r3, [pc, #8]	@ (800b4e0 <free+0xc>)
 800b4d6:	4601      	mov	r1, r0
 800b4d8:	6818      	ldr	r0, [r3, #0]
 800b4da:	f000 ba75 	b.w	800b9c8 <_free_r>
 800b4de:	bf00      	nop
 800b4e0:	000000cc 	.word	0x000000cc

0800b4e4 <sbrk_aligned>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	4e0f      	ldr	r6, [pc, #60]	@ (800b524 <sbrk_aligned+0x40>)
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	6831      	ldr	r1, [r6, #0]
 800b4ec:	4605      	mov	r5, r0
 800b4ee:	b911      	cbnz	r1, 800b4f6 <sbrk_aligned+0x12>
 800b4f0:	f000 fa18 	bl	800b924 <_sbrk_r>
 800b4f4:	6030      	str	r0, [r6, #0]
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	f000 fa13 	bl	800b924 <_sbrk_r>
 800b4fe:	1c43      	adds	r3, r0, #1
 800b500:	d103      	bne.n	800b50a <sbrk_aligned+0x26>
 800b502:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b506:	4620      	mov	r0, r4
 800b508:	bd70      	pop	{r4, r5, r6, pc}
 800b50a:	1cc4      	adds	r4, r0, #3
 800b50c:	f024 0403 	bic.w	r4, r4, #3
 800b510:	42a0      	cmp	r0, r4
 800b512:	d0f8      	beq.n	800b506 <sbrk_aligned+0x22>
 800b514:	1a21      	subs	r1, r4, r0
 800b516:	4628      	mov	r0, r5
 800b518:	f000 fa04 	bl	800b924 <_sbrk_r>
 800b51c:	3001      	adds	r0, #1
 800b51e:	d1f2      	bne.n	800b506 <sbrk_aligned+0x22>
 800b520:	e7ef      	b.n	800b502 <sbrk_aligned+0x1e>
 800b522:	bf00      	nop
 800b524:	0000089c 	.word	0x0000089c

0800b528 <_malloc_r>:
 800b528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b52c:	1ccd      	adds	r5, r1, #3
 800b52e:	f025 0503 	bic.w	r5, r5, #3
 800b532:	3508      	adds	r5, #8
 800b534:	2d0c      	cmp	r5, #12
 800b536:	bf38      	it	cc
 800b538:	250c      	movcc	r5, #12
 800b53a:	2d00      	cmp	r5, #0
 800b53c:	4606      	mov	r6, r0
 800b53e:	db01      	blt.n	800b544 <_malloc_r+0x1c>
 800b540:	42a9      	cmp	r1, r5
 800b542:	d904      	bls.n	800b54e <_malloc_r+0x26>
 800b544:	230c      	movs	r3, #12
 800b546:	6033      	str	r3, [r6, #0]
 800b548:	2000      	movs	r0, #0
 800b54a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b54e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b624 <_malloc_r+0xfc>
 800b552:	f000 f869 	bl	800b628 <__malloc_lock>
 800b556:	f8d8 3000 	ldr.w	r3, [r8]
 800b55a:	461c      	mov	r4, r3
 800b55c:	bb44      	cbnz	r4, 800b5b0 <_malloc_r+0x88>
 800b55e:	4629      	mov	r1, r5
 800b560:	4630      	mov	r0, r6
 800b562:	f7ff ffbf 	bl	800b4e4 <sbrk_aligned>
 800b566:	1c43      	adds	r3, r0, #1
 800b568:	4604      	mov	r4, r0
 800b56a:	d158      	bne.n	800b61e <_malloc_r+0xf6>
 800b56c:	f8d8 4000 	ldr.w	r4, [r8]
 800b570:	4627      	mov	r7, r4
 800b572:	2f00      	cmp	r7, #0
 800b574:	d143      	bne.n	800b5fe <_malloc_r+0xd6>
 800b576:	2c00      	cmp	r4, #0
 800b578:	d04b      	beq.n	800b612 <_malloc_r+0xea>
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	4639      	mov	r1, r7
 800b57e:	4630      	mov	r0, r6
 800b580:	eb04 0903 	add.w	r9, r4, r3
 800b584:	f000 f9ce 	bl	800b924 <_sbrk_r>
 800b588:	4581      	cmp	r9, r0
 800b58a:	d142      	bne.n	800b612 <_malloc_r+0xea>
 800b58c:	6821      	ldr	r1, [r4, #0]
 800b58e:	1a6d      	subs	r5, r5, r1
 800b590:	4629      	mov	r1, r5
 800b592:	4630      	mov	r0, r6
 800b594:	f7ff ffa6 	bl	800b4e4 <sbrk_aligned>
 800b598:	3001      	adds	r0, #1
 800b59a:	d03a      	beq.n	800b612 <_malloc_r+0xea>
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	442b      	add	r3, r5
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	bb62      	cbnz	r2, 800b604 <_malloc_r+0xdc>
 800b5aa:	f8c8 7000 	str.w	r7, [r8]
 800b5ae:	e00f      	b.n	800b5d0 <_malloc_r+0xa8>
 800b5b0:	6822      	ldr	r2, [r4, #0]
 800b5b2:	1b52      	subs	r2, r2, r5
 800b5b4:	d420      	bmi.n	800b5f8 <_malloc_r+0xd0>
 800b5b6:	2a0b      	cmp	r2, #11
 800b5b8:	d917      	bls.n	800b5ea <_malloc_r+0xc2>
 800b5ba:	1961      	adds	r1, r4, r5
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	6025      	str	r5, [r4, #0]
 800b5c0:	bf18      	it	ne
 800b5c2:	6059      	strne	r1, [r3, #4]
 800b5c4:	6863      	ldr	r3, [r4, #4]
 800b5c6:	bf08      	it	eq
 800b5c8:	f8c8 1000 	streq.w	r1, [r8]
 800b5cc:	5162      	str	r2, [r4, r5]
 800b5ce:	604b      	str	r3, [r1, #4]
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f000 f82f 	bl	800b634 <__malloc_unlock>
 800b5d6:	f104 000b 	add.w	r0, r4, #11
 800b5da:	1d23      	adds	r3, r4, #4
 800b5dc:	f020 0007 	bic.w	r0, r0, #7
 800b5e0:	1ac2      	subs	r2, r0, r3
 800b5e2:	bf1c      	itt	ne
 800b5e4:	1a1b      	subne	r3, r3, r0
 800b5e6:	50a3      	strne	r3, [r4, r2]
 800b5e8:	e7af      	b.n	800b54a <_malloc_r+0x22>
 800b5ea:	6862      	ldr	r2, [r4, #4]
 800b5ec:	42a3      	cmp	r3, r4
 800b5ee:	bf0c      	ite	eq
 800b5f0:	f8c8 2000 	streq.w	r2, [r8]
 800b5f4:	605a      	strne	r2, [r3, #4]
 800b5f6:	e7eb      	b.n	800b5d0 <_malloc_r+0xa8>
 800b5f8:	4623      	mov	r3, r4
 800b5fa:	6864      	ldr	r4, [r4, #4]
 800b5fc:	e7ae      	b.n	800b55c <_malloc_r+0x34>
 800b5fe:	463c      	mov	r4, r7
 800b600:	687f      	ldr	r7, [r7, #4]
 800b602:	e7b6      	b.n	800b572 <_malloc_r+0x4a>
 800b604:	461a      	mov	r2, r3
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	42a3      	cmp	r3, r4
 800b60a:	d1fb      	bne.n	800b604 <_malloc_r+0xdc>
 800b60c:	2300      	movs	r3, #0
 800b60e:	6053      	str	r3, [r2, #4]
 800b610:	e7de      	b.n	800b5d0 <_malloc_r+0xa8>
 800b612:	230c      	movs	r3, #12
 800b614:	6033      	str	r3, [r6, #0]
 800b616:	4630      	mov	r0, r6
 800b618:	f000 f80c 	bl	800b634 <__malloc_unlock>
 800b61c:	e794      	b.n	800b548 <_malloc_r+0x20>
 800b61e:	6005      	str	r5, [r0, #0]
 800b620:	e7d6      	b.n	800b5d0 <_malloc_r+0xa8>
 800b622:	bf00      	nop
 800b624:	000008a0 	.word	0x000008a0

0800b628 <__malloc_lock>:
 800b628:	4801      	ldr	r0, [pc, #4]	@ (800b630 <__malloc_lock+0x8>)
 800b62a:	f000 b9b6 	b.w	800b99a <__retarget_lock_acquire_recursive>
 800b62e:	bf00      	nop
 800b630:	000009e0 	.word	0x000009e0

0800b634 <__malloc_unlock>:
 800b634:	4801      	ldr	r0, [pc, #4]	@ (800b63c <__malloc_unlock+0x8>)
 800b636:	f000 b9b1 	b.w	800b99c <__retarget_lock_release_recursive>
 800b63a:	bf00      	nop
 800b63c:	000009e0 	.word	0x000009e0

0800b640 <std>:
 800b640:	2300      	movs	r3, #0
 800b642:	b510      	push	{r4, lr}
 800b644:	4604      	mov	r4, r0
 800b646:	e9c0 3300 	strd	r3, r3, [r0]
 800b64a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b64e:	6083      	str	r3, [r0, #8]
 800b650:	8181      	strh	r1, [r0, #12]
 800b652:	6643      	str	r3, [r0, #100]	@ 0x64
 800b654:	81c2      	strh	r2, [r0, #14]
 800b656:	6183      	str	r3, [r0, #24]
 800b658:	4619      	mov	r1, r3
 800b65a:	2208      	movs	r2, #8
 800b65c:	305c      	adds	r0, #92	@ 0x5c
 800b65e:	f000 f958 	bl	800b912 <memset>
 800b662:	4b0d      	ldr	r3, [pc, #52]	@ (800b698 <std+0x58>)
 800b664:	6263      	str	r3, [r4, #36]	@ 0x24
 800b666:	4b0d      	ldr	r3, [pc, #52]	@ (800b69c <std+0x5c>)
 800b668:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b66a:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a0 <std+0x60>)
 800b66c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b66e:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a4 <std+0x64>)
 800b670:	6323      	str	r3, [r4, #48]	@ 0x30
 800b672:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a8 <std+0x68>)
 800b674:	6224      	str	r4, [r4, #32]
 800b676:	429c      	cmp	r4, r3
 800b678:	d006      	beq.n	800b688 <std+0x48>
 800b67a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b67e:	4294      	cmp	r4, r2
 800b680:	d002      	beq.n	800b688 <std+0x48>
 800b682:	33d0      	adds	r3, #208	@ 0xd0
 800b684:	429c      	cmp	r4, r3
 800b686:	d105      	bne.n	800b694 <std+0x54>
 800b688:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b690:	f000 b982 	b.w	800b998 <__retarget_lock_init_recursive>
 800b694:	bd10      	pop	{r4, pc}
 800b696:	bf00      	nop
 800b698:	0800c155 	.word	0x0800c155
 800b69c:	0800c177 	.word	0x0800c177
 800b6a0:	0800c1af 	.word	0x0800c1af
 800b6a4:	0800c1d3 	.word	0x0800c1d3
 800b6a8:	000008a4 	.word	0x000008a4

0800b6ac <stdio_exit_handler>:
 800b6ac:	4a02      	ldr	r2, [pc, #8]	@ (800b6b8 <stdio_exit_handler+0xc>)
 800b6ae:	4903      	ldr	r1, [pc, #12]	@ (800b6bc <stdio_exit_handler+0x10>)
 800b6b0:	4803      	ldr	r0, [pc, #12]	@ (800b6c0 <stdio_exit_handler+0x14>)
 800b6b2:	f000 b87b 	b.w	800b7ac <_fwalk_sglue>
 800b6b6:	bf00      	nop
 800b6b8:	000000c0 	.word	0x000000c0
 800b6bc:	0800c105 	.word	0x0800c105
 800b6c0:	000000d0 	.word	0x000000d0

0800b6c4 <cleanup_stdio>:
 800b6c4:	6841      	ldr	r1, [r0, #4]
 800b6c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b6f8 <cleanup_stdio+0x34>)
 800b6c8:	4299      	cmp	r1, r3
 800b6ca:	b510      	push	{r4, lr}
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	d001      	beq.n	800b6d4 <cleanup_stdio+0x10>
 800b6d0:	f000 fd18 	bl	800c104 <_fflush_r>
 800b6d4:	68a1      	ldr	r1, [r4, #8]
 800b6d6:	4b09      	ldr	r3, [pc, #36]	@ (800b6fc <cleanup_stdio+0x38>)
 800b6d8:	4299      	cmp	r1, r3
 800b6da:	d002      	beq.n	800b6e2 <cleanup_stdio+0x1e>
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f000 fd11 	bl	800c104 <_fflush_r>
 800b6e2:	68e1      	ldr	r1, [r4, #12]
 800b6e4:	4b06      	ldr	r3, [pc, #24]	@ (800b700 <cleanup_stdio+0x3c>)
 800b6e6:	4299      	cmp	r1, r3
 800b6e8:	d004      	beq.n	800b6f4 <cleanup_stdio+0x30>
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6f0:	f000 bd08 	b.w	800c104 <_fflush_r>
 800b6f4:	bd10      	pop	{r4, pc}
 800b6f6:	bf00      	nop
 800b6f8:	000008a4 	.word	0x000008a4
 800b6fc:	0000090c 	.word	0x0000090c
 800b700:	00000974 	.word	0x00000974

0800b704 <global_stdio_init.part.0>:
 800b704:	b510      	push	{r4, lr}
 800b706:	4b0b      	ldr	r3, [pc, #44]	@ (800b734 <global_stdio_init.part.0+0x30>)
 800b708:	4c0b      	ldr	r4, [pc, #44]	@ (800b738 <global_stdio_init.part.0+0x34>)
 800b70a:	4a0c      	ldr	r2, [pc, #48]	@ (800b73c <global_stdio_init.part.0+0x38>)
 800b70c:	601a      	str	r2, [r3, #0]
 800b70e:	4620      	mov	r0, r4
 800b710:	2200      	movs	r2, #0
 800b712:	2104      	movs	r1, #4
 800b714:	f7ff ff94 	bl	800b640 <std>
 800b718:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b71c:	2201      	movs	r2, #1
 800b71e:	2109      	movs	r1, #9
 800b720:	f7ff ff8e 	bl	800b640 <std>
 800b724:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b728:	2202      	movs	r2, #2
 800b72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b72e:	2112      	movs	r1, #18
 800b730:	f7ff bf86 	b.w	800b640 <std>
 800b734:	000009dc 	.word	0x000009dc
 800b738:	000008a4 	.word	0x000008a4
 800b73c:	0800b6ad 	.word	0x0800b6ad

0800b740 <__sfp_lock_acquire>:
 800b740:	4801      	ldr	r0, [pc, #4]	@ (800b748 <__sfp_lock_acquire+0x8>)
 800b742:	f000 b92a 	b.w	800b99a <__retarget_lock_acquire_recursive>
 800b746:	bf00      	nop
 800b748:	000009e1 	.word	0x000009e1

0800b74c <__sfp_lock_release>:
 800b74c:	4801      	ldr	r0, [pc, #4]	@ (800b754 <__sfp_lock_release+0x8>)
 800b74e:	f000 b925 	b.w	800b99c <__retarget_lock_release_recursive>
 800b752:	bf00      	nop
 800b754:	000009e1 	.word	0x000009e1

0800b758 <__sinit>:
 800b758:	b510      	push	{r4, lr}
 800b75a:	4604      	mov	r4, r0
 800b75c:	f7ff fff0 	bl	800b740 <__sfp_lock_acquire>
 800b760:	6a23      	ldr	r3, [r4, #32]
 800b762:	b11b      	cbz	r3, 800b76c <__sinit+0x14>
 800b764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b768:	f7ff bff0 	b.w	800b74c <__sfp_lock_release>
 800b76c:	4b04      	ldr	r3, [pc, #16]	@ (800b780 <__sinit+0x28>)
 800b76e:	6223      	str	r3, [r4, #32]
 800b770:	4b04      	ldr	r3, [pc, #16]	@ (800b784 <__sinit+0x2c>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1f5      	bne.n	800b764 <__sinit+0xc>
 800b778:	f7ff ffc4 	bl	800b704 <global_stdio_init.part.0>
 800b77c:	e7f2      	b.n	800b764 <__sinit+0xc>
 800b77e:	bf00      	nop
 800b780:	0800b6c5 	.word	0x0800b6c5
 800b784:	000009dc 	.word	0x000009dc

0800b788 <fiprintf>:
 800b788:	b40e      	push	{r1, r2, r3}
 800b78a:	b503      	push	{r0, r1, lr}
 800b78c:	4601      	mov	r1, r0
 800b78e:	ab03      	add	r3, sp, #12
 800b790:	4805      	ldr	r0, [pc, #20]	@ (800b7a8 <fiprintf+0x20>)
 800b792:	f853 2b04 	ldr.w	r2, [r3], #4
 800b796:	6800      	ldr	r0, [r0, #0]
 800b798:	9301      	str	r3, [sp, #4]
 800b79a:	f000 f989 	bl	800bab0 <_vfiprintf_r>
 800b79e:	b002      	add	sp, #8
 800b7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7a4:	b003      	add	sp, #12
 800b7a6:	4770      	bx	lr
 800b7a8:	000000cc 	.word	0x000000cc

0800b7ac <_fwalk_sglue>:
 800b7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b0:	4607      	mov	r7, r0
 800b7b2:	4688      	mov	r8, r1
 800b7b4:	4614      	mov	r4, r2
 800b7b6:	2600      	movs	r6, #0
 800b7b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7bc:	f1b9 0901 	subs.w	r9, r9, #1
 800b7c0:	d505      	bpl.n	800b7ce <_fwalk_sglue+0x22>
 800b7c2:	6824      	ldr	r4, [r4, #0]
 800b7c4:	2c00      	cmp	r4, #0
 800b7c6:	d1f7      	bne.n	800b7b8 <_fwalk_sglue+0xc>
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ce:	89ab      	ldrh	r3, [r5, #12]
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d907      	bls.n	800b7e4 <_fwalk_sglue+0x38>
 800b7d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	d003      	beq.n	800b7e4 <_fwalk_sglue+0x38>
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4638      	mov	r0, r7
 800b7e0:	47c0      	blx	r8
 800b7e2:	4306      	orrs	r6, r0
 800b7e4:	3568      	adds	r5, #104	@ 0x68
 800b7e6:	e7e9      	b.n	800b7bc <_fwalk_sglue+0x10>

0800b7e8 <iprintf>:
 800b7e8:	b40f      	push	{r0, r1, r2, r3}
 800b7ea:	b507      	push	{r0, r1, r2, lr}
 800b7ec:	4906      	ldr	r1, [pc, #24]	@ (800b808 <iprintf+0x20>)
 800b7ee:	ab04      	add	r3, sp, #16
 800b7f0:	6808      	ldr	r0, [r1, #0]
 800b7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7f6:	6881      	ldr	r1, [r0, #8]
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	f000 f959 	bl	800bab0 <_vfiprintf_r>
 800b7fe:	b003      	add	sp, #12
 800b800:	f85d eb04 	ldr.w	lr, [sp], #4
 800b804:	b004      	add	sp, #16
 800b806:	4770      	bx	lr
 800b808:	000000cc 	.word	0x000000cc

0800b80c <_puts_r>:
 800b80c:	6a03      	ldr	r3, [r0, #32]
 800b80e:	b570      	push	{r4, r5, r6, lr}
 800b810:	6884      	ldr	r4, [r0, #8]
 800b812:	4605      	mov	r5, r0
 800b814:	460e      	mov	r6, r1
 800b816:	b90b      	cbnz	r3, 800b81c <_puts_r+0x10>
 800b818:	f7ff ff9e 	bl	800b758 <__sinit>
 800b81c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b81e:	07db      	lsls	r3, r3, #31
 800b820:	d405      	bmi.n	800b82e <_puts_r+0x22>
 800b822:	89a3      	ldrh	r3, [r4, #12]
 800b824:	0598      	lsls	r0, r3, #22
 800b826:	d402      	bmi.n	800b82e <_puts_r+0x22>
 800b828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b82a:	f000 f8b6 	bl	800b99a <__retarget_lock_acquire_recursive>
 800b82e:	89a3      	ldrh	r3, [r4, #12]
 800b830:	0719      	lsls	r1, r3, #28
 800b832:	d502      	bpl.n	800b83a <_puts_r+0x2e>
 800b834:	6923      	ldr	r3, [r4, #16]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d135      	bne.n	800b8a6 <_puts_r+0x9a>
 800b83a:	4621      	mov	r1, r4
 800b83c:	4628      	mov	r0, r5
 800b83e:	f000 fd0b 	bl	800c258 <__swsetup_r>
 800b842:	b380      	cbz	r0, 800b8a6 <_puts_r+0x9a>
 800b844:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b84a:	07da      	lsls	r2, r3, #31
 800b84c:	d405      	bmi.n	800b85a <_puts_r+0x4e>
 800b84e:	89a3      	ldrh	r3, [r4, #12]
 800b850:	059b      	lsls	r3, r3, #22
 800b852:	d402      	bmi.n	800b85a <_puts_r+0x4e>
 800b854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b856:	f000 f8a1 	bl	800b99c <__retarget_lock_release_recursive>
 800b85a:	4628      	mov	r0, r5
 800b85c:	bd70      	pop	{r4, r5, r6, pc}
 800b85e:	2b00      	cmp	r3, #0
 800b860:	da04      	bge.n	800b86c <_puts_r+0x60>
 800b862:	69a2      	ldr	r2, [r4, #24]
 800b864:	429a      	cmp	r2, r3
 800b866:	dc17      	bgt.n	800b898 <_puts_r+0x8c>
 800b868:	290a      	cmp	r1, #10
 800b86a:	d015      	beq.n	800b898 <_puts_r+0x8c>
 800b86c:	6823      	ldr	r3, [r4, #0]
 800b86e:	1c5a      	adds	r2, r3, #1
 800b870:	6022      	str	r2, [r4, #0]
 800b872:	7019      	strb	r1, [r3, #0]
 800b874:	68a3      	ldr	r3, [r4, #8]
 800b876:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b87a:	3b01      	subs	r3, #1
 800b87c:	60a3      	str	r3, [r4, #8]
 800b87e:	2900      	cmp	r1, #0
 800b880:	d1ed      	bne.n	800b85e <_puts_r+0x52>
 800b882:	2b00      	cmp	r3, #0
 800b884:	da11      	bge.n	800b8aa <_puts_r+0x9e>
 800b886:	4622      	mov	r2, r4
 800b888:	210a      	movs	r1, #10
 800b88a:	4628      	mov	r0, r5
 800b88c:	f000 fca5 	bl	800c1da <__swbuf_r>
 800b890:	3001      	adds	r0, #1
 800b892:	d0d7      	beq.n	800b844 <_puts_r+0x38>
 800b894:	250a      	movs	r5, #10
 800b896:	e7d7      	b.n	800b848 <_puts_r+0x3c>
 800b898:	4622      	mov	r2, r4
 800b89a:	4628      	mov	r0, r5
 800b89c:	f000 fc9d 	bl	800c1da <__swbuf_r>
 800b8a0:	3001      	adds	r0, #1
 800b8a2:	d1e7      	bne.n	800b874 <_puts_r+0x68>
 800b8a4:	e7ce      	b.n	800b844 <_puts_r+0x38>
 800b8a6:	3e01      	subs	r6, #1
 800b8a8:	e7e4      	b.n	800b874 <_puts_r+0x68>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	1c5a      	adds	r2, r3, #1
 800b8ae:	6022      	str	r2, [r4, #0]
 800b8b0:	220a      	movs	r2, #10
 800b8b2:	701a      	strb	r2, [r3, #0]
 800b8b4:	e7ee      	b.n	800b894 <_puts_r+0x88>
	...

0800b8b8 <puts>:
 800b8b8:	4b02      	ldr	r3, [pc, #8]	@ (800b8c4 <puts+0xc>)
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	6818      	ldr	r0, [r3, #0]
 800b8be:	f7ff bfa5 	b.w	800b80c <_puts_r>
 800b8c2:	bf00      	nop
 800b8c4:	000000cc 	.word	0x000000cc

0800b8c8 <strncmp>:
 800b8c8:	b510      	push	{r4, lr}
 800b8ca:	b16a      	cbz	r2, 800b8e8 <strncmp+0x20>
 800b8cc:	3901      	subs	r1, #1
 800b8ce:	1884      	adds	r4, r0, r2
 800b8d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d103      	bne.n	800b8e4 <strncmp+0x1c>
 800b8dc:	42a0      	cmp	r0, r4
 800b8de:	d001      	beq.n	800b8e4 <strncmp+0x1c>
 800b8e0:	2a00      	cmp	r2, #0
 800b8e2:	d1f5      	bne.n	800b8d0 <strncmp+0x8>
 800b8e4:	1ad0      	subs	r0, r2, r3
 800b8e6:	bd10      	pop	{r4, pc}
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	e7fc      	b.n	800b8e6 <strncmp+0x1e>

0800b8ec <strncpy>:
 800b8ec:	b510      	push	{r4, lr}
 800b8ee:	3901      	subs	r1, #1
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	b132      	cbz	r2, 800b902 <strncpy+0x16>
 800b8f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b8f8:	f803 4b01 	strb.w	r4, [r3], #1
 800b8fc:	3a01      	subs	r2, #1
 800b8fe:	2c00      	cmp	r4, #0
 800b900:	d1f7      	bne.n	800b8f2 <strncpy+0x6>
 800b902:	441a      	add	r2, r3
 800b904:	2100      	movs	r1, #0
 800b906:	4293      	cmp	r3, r2
 800b908:	d100      	bne.n	800b90c <strncpy+0x20>
 800b90a:	bd10      	pop	{r4, pc}
 800b90c:	f803 1b01 	strb.w	r1, [r3], #1
 800b910:	e7f9      	b.n	800b906 <strncpy+0x1a>

0800b912 <memset>:
 800b912:	4402      	add	r2, r0
 800b914:	4603      	mov	r3, r0
 800b916:	4293      	cmp	r3, r2
 800b918:	d100      	bne.n	800b91c <memset+0xa>
 800b91a:	4770      	bx	lr
 800b91c:	f803 1b01 	strb.w	r1, [r3], #1
 800b920:	e7f9      	b.n	800b916 <memset+0x4>
	...

0800b924 <_sbrk_r>:
 800b924:	b538      	push	{r3, r4, r5, lr}
 800b926:	4d06      	ldr	r5, [pc, #24]	@ (800b940 <_sbrk_r+0x1c>)
 800b928:	2300      	movs	r3, #0
 800b92a:	4604      	mov	r4, r0
 800b92c:	4608      	mov	r0, r1
 800b92e:	602b      	str	r3, [r5, #0]
 800b930:	f7f5 fcee 	bl	8001310 <_sbrk>
 800b934:	1c43      	adds	r3, r0, #1
 800b936:	d102      	bne.n	800b93e <_sbrk_r+0x1a>
 800b938:	682b      	ldr	r3, [r5, #0]
 800b93a:	b103      	cbz	r3, 800b93e <_sbrk_r+0x1a>
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	000009e4 	.word	0x000009e4

0800b944 <__errno>:
 800b944:	4b01      	ldr	r3, [pc, #4]	@ (800b94c <__errno+0x8>)
 800b946:	6818      	ldr	r0, [r3, #0]
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	000000cc 	.word	0x000000cc

0800b950 <__libc_init_array>:
 800b950:	b570      	push	{r4, r5, r6, lr}
 800b952:	4d0d      	ldr	r5, [pc, #52]	@ (800b988 <__libc_init_array+0x38>)
 800b954:	4c0d      	ldr	r4, [pc, #52]	@ (800b98c <__libc_init_array+0x3c>)
 800b956:	1b64      	subs	r4, r4, r5
 800b958:	10a4      	asrs	r4, r4, #2
 800b95a:	2600      	movs	r6, #0
 800b95c:	42a6      	cmp	r6, r4
 800b95e:	d109      	bne.n	800b974 <__libc_init_array+0x24>
 800b960:	4d0b      	ldr	r5, [pc, #44]	@ (800b990 <__libc_init_array+0x40>)
 800b962:	4c0c      	ldr	r4, [pc, #48]	@ (800b994 <__libc_init_array+0x44>)
 800b964:	f000 fddc 	bl	800c520 <_init>
 800b968:	1b64      	subs	r4, r4, r5
 800b96a:	10a4      	asrs	r4, r4, #2
 800b96c:	2600      	movs	r6, #0
 800b96e:	42a6      	cmp	r6, r4
 800b970:	d105      	bne.n	800b97e <__libc_init_array+0x2e>
 800b972:	bd70      	pop	{r4, r5, r6, pc}
 800b974:	f855 3b04 	ldr.w	r3, [r5], #4
 800b978:	4798      	blx	r3
 800b97a:	3601      	adds	r6, #1
 800b97c:	e7ee      	b.n	800b95c <__libc_init_array+0xc>
 800b97e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b982:	4798      	blx	r3
 800b984:	3601      	adds	r6, #1
 800b986:	e7f2      	b.n	800b96e <__libc_init_array+0x1e>
 800b988:	0800c8c8 	.word	0x0800c8c8
 800b98c:	0800c8c8 	.word	0x0800c8c8
 800b990:	0800c8c8 	.word	0x0800c8c8
 800b994:	0800c8cc 	.word	0x0800c8cc

0800b998 <__retarget_lock_init_recursive>:
 800b998:	4770      	bx	lr

0800b99a <__retarget_lock_acquire_recursive>:
 800b99a:	4770      	bx	lr

0800b99c <__retarget_lock_release_recursive>:
 800b99c:	4770      	bx	lr

0800b99e <memcpy>:
 800b99e:	440a      	add	r2, r1
 800b9a0:	4291      	cmp	r1, r2
 800b9a2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b9a6:	d100      	bne.n	800b9aa <memcpy+0xc>
 800b9a8:	4770      	bx	lr
 800b9aa:	b510      	push	{r4, lr}
 800b9ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9b4:	4291      	cmp	r1, r2
 800b9b6:	d1f9      	bne.n	800b9ac <memcpy+0xe>
 800b9b8:	bd10      	pop	{r4, pc}

0800b9ba <abort>:
 800b9ba:	b508      	push	{r3, lr}
 800b9bc:	2006      	movs	r0, #6
 800b9be:	f000 fd6f 	bl	800c4a0 <raise>
 800b9c2:	2001      	movs	r0, #1
 800b9c4:	f7f5 fc2c 	bl	8001220 <_exit>

0800b9c8 <_free_r>:
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4605      	mov	r5, r0
 800b9cc:	2900      	cmp	r1, #0
 800b9ce:	d041      	beq.n	800ba54 <_free_r+0x8c>
 800b9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9d4:	1f0c      	subs	r4, r1, #4
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	bfb8      	it	lt
 800b9da:	18e4      	addlt	r4, r4, r3
 800b9dc:	f7ff fe24 	bl	800b628 <__malloc_lock>
 800b9e0:	4a1d      	ldr	r2, [pc, #116]	@ (800ba58 <_free_r+0x90>)
 800b9e2:	6813      	ldr	r3, [r2, #0]
 800b9e4:	b933      	cbnz	r3, 800b9f4 <_free_r+0x2c>
 800b9e6:	6063      	str	r3, [r4, #4]
 800b9e8:	6014      	str	r4, [r2, #0]
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9f0:	f7ff be20 	b.w	800b634 <__malloc_unlock>
 800b9f4:	42a3      	cmp	r3, r4
 800b9f6:	d908      	bls.n	800ba0a <_free_r+0x42>
 800b9f8:	6820      	ldr	r0, [r4, #0]
 800b9fa:	1821      	adds	r1, r4, r0
 800b9fc:	428b      	cmp	r3, r1
 800b9fe:	bf01      	itttt	eq
 800ba00:	6819      	ldreq	r1, [r3, #0]
 800ba02:	685b      	ldreq	r3, [r3, #4]
 800ba04:	1809      	addeq	r1, r1, r0
 800ba06:	6021      	streq	r1, [r4, #0]
 800ba08:	e7ed      	b.n	800b9e6 <_free_r+0x1e>
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	b10b      	cbz	r3, 800ba14 <_free_r+0x4c>
 800ba10:	42a3      	cmp	r3, r4
 800ba12:	d9fa      	bls.n	800ba0a <_free_r+0x42>
 800ba14:	6811      	ldr	r1, [r2, #0]
 800ba16:	1850      	adds	r0, r2, r1
 800ba18:	42a0      	cmp	r0, r4
 800ba1a:	d10b      	bne.n	800ba34 <_free_r+0x6c>
 800ba1c:	6820      	ldr	r0, [r4, #0]
 800ba1e:	4401      	add	r1, r0
 800ba20:	1850      	adds	r0, r2, r1
 800ba22:	4283      	cmp	r3, r0
 800ba24:	6011      	str	r1, [r2, #0]
 800ba26:	d1e0      	bne.n	800b9ea <_free_r+0x22>
 800ba28:	6818      	ldr	r0, [r3, #0]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	6053      	str	r3, [r2, #4]
 800ba2e:	4408      	add	r0, r1
 800ba30:	6010      	str	r0, [r2, #0]
 800ba32:	e7da      	b.n	800b9ea <_free_r+0x22>
 800ba34:	d902      	bls.n	800ba3c <_free_r+0x74>
 800ba36:	230c      	movs	r3, #12
 800ba38:	602b      	str	r3, [r5, #0]
 800ba3a:	e7d6      	b.n	800b9ea <_free_r+0x22>
 800ba3c:	6820      	ldr	r0, [r4, #0]
 800ba3e:	1821      	adds	r1, r4, r0
 800ba40:	428b      	cmp	r3, r1
 800ba42:	bf04      	itt	eq
 800ba44:	6819      	ldreq	r1, [r3, #0]
 800ba46:	685b      	ldreq	r3, [r3, #4]
 800ba48:	6063      	str	r3, [r4, #4]
 800ba4a:	bf04      	itt	eq
 800ba4c:	1809      	addeq	r1, r1, r0
 800ba4e:	6021      	streq	r1, [r4, #0]
 800ba50:	6054      	str	r4, [r2, #4]
 800ba52:	e7ca      	b.n	800b9ea <_free_r+0x22>
 800ba54:	bd38      	pop	{r3, r4, r5, pc}
 800ba56:	bf00      	nop
 800ba58:	000008a0 	.word	0x000008a0

0800ba5c <__sfputc_r>:
 800ba5c:	6893      	ldr	r3, [r2, #8]
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	b410      	push	{r4}
 800ba64:	6093      	str	r3, [r2, #8]
 800ba66:	da08      	bge.n	800ba7a <__sfputc_r+0x1e>
 800ba68:	6994      	ldr	r4, [r2, #24]
 800ba6a:	42a3      	cmp	r3, r4
 800ba6c:	db01      	blt.n	800ba72 <__sfputc_r+0x16>
 800ba6e:	290a      	cmp	r1, #10
 800ba70:	d103      	bne.n	800ba7a <__sfputc_r+0x1e>
 800ba72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba76:	f000 bbb0 	b.w	800c1da <__swbuf_r>
 800ba7a:	6813      	ldr	r3, [r2, #0]
 800ba7c:	1c58      	adds	r0, r3, #1
 800ba7e:	6010      	str	r0, [r2, #0]
 800ba80:	7019      	strb	r1, [r3, #0]
 800ba82:	4608      	mov	r0, r1
 800ba84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <__sfputs_r>:
 800ba8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	460f      	mov	r7, r1
 800ba90:	4614      	mov	r4, r2
 800ba92:	18d5      	adds	r5, r2, r3
 800ba94:	42ac      	cmp	r4, r5
 800ba96:	d101      	bne.n	800ba9c <__sfputs_r+0x12>
 800ba98:	2000      	movs	r0, #0
 800ba9a:	e007      	b.n	800baac <__sfputs_r+0x22>
 800ba9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa0:	463a      	mov	r2, r7
 800baa2:	4630      	mov	r0, r6
 800baa4:	f7ff ffda 	bl	800ba5c <__sfputc_r>
 800baa8:	1c43      	adds	r3, r0, #1
 800baaa:	d1f3      	bne.n	800ba94 <__sfputs_r+0xa>
 800baac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bab0 <_vfiprintf_r>:
 800bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	460d      	mov	r5, r1
 800bab6:	b09d      	sub	sp, #116	@ 0x74
 800bab8:	4614      	mov	r4, r2
 800baba:	4698      	mov	r8, r3
 800babc:	4606      	mov	r6, r0
 800babe:	b118      	cbz	r0, 800bac8 <_vfiprintf_r+0x18>
 800bac0:	6a03      	ldr	r3, [r0, #32]
 800bac2:	b90b      	cbnz	r3, 800bac8 <_vfiprintf_r+0x18>
 800bac4:	f7ff fe48 	bl	800b758 <__sinit>
 800bac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baca:	07d9      	lsls	r1, r3, #31
 800bacc:	d405      	bmi.n	800bada <_vfiprintf_r+0x2a>
 800bace:	89ab      	ldrh	r3, [r5, #12]
 800bad0:	059a      	lsls	r2, r3, #22
 800bad2:	d402      	bmi.n	800bada <_vfiprintf_r+0x2a>
 800bad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bad6:	f7ff ff60 	bl	800b99a <__retarget_lock_acquire_recursive>
 800bada:	89ab      	ldrh	r3, [r5, #12]
 800badc:	071b      	lsls	r3, r3, #28
 800bade:	d501      	bpl.n	800bae4 <_vfiprintf_r+0x34>
 800bae0:	692b      	ldr	r3, [r5, #16]
 800bae2:	b99b      	cbnz	r3, 800bb0c <_vfiprintf_r+0x5c>
 800bae4:	4629      	mov	r1, r5
 800bae6:	4630      	mov	r0, r6
 800bae8:	f000 fbb6 	bl	800c258 <__swsetup_r>
 800baec:	b170      	cbz	r0, 800bb0c <_vfiprintf_r+0x5c>
 800baee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800baf0:	07dc      	lsls	r4, r3, #31
 800baf2:	d504      	bpl.n	800bafe <_vfiprintf_r+0x4e>
 800baf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800baf8:	b01d      	add	sp, #116	@ 0x74
 800bafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bafe:	89ab      	ldrh	r3, [r5, #12]
 800bb00:	0598      	lsls	r0, r3, #22
 800bb02:	d4f7      	bmi.n	800baf4 <_vfiprintf_r+0x44>
 800bb04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb06:	f7ff ff49 	bl	800b99c <__retarget_lock_release_recursive>
 800bb0a:	e7f3      	b.n	800baf4 <_vfiprintf_r+0x44>
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb10:	2320      	movs	r3, #32
 800bb12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb16:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb1a:	2330      	movs	r3, #48	@ 0x30
 800bb1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bccc <_vfiprintf_r+0x21c>
 800bb20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb24:	f04f 0901 	mov.w	r9, #1
 800bb28:	4623      	mov	r3, r4
 800bb2a:	469a      	mov	sl, r3
 800bb2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb30:	b10a      	cbz	r2, 800bb36 <_vfiprintf_r+0x86>
 800bb32:	2a25      	cmp	r2, #37	@ 0x25
 800bb34:	d1f9      	bne.n	800bb2a <_vfiprintf_r+0x7a>
 800bb36:	ebba 0b04 	subs.w	fp, sl, r4
 800bb3a:	d00b      	beq.n	800bb54 <_vfiprintf_r+0xa4>
 800bb3c:	465b      	mov	r3, fp
 800bb3e:	4622      	mov	r2, r4
 800bb40:	4629      	mov	r1, r5
 800bb42:	4630      	mov	r0, r6
 800bb44:	f7ff ffa1 	bl	800ba8a <__sfputs_r>
 800bb48:	3001      	adds	r0, #1
 800bb4a:	f000 80a7 	beq.w	800bc9c <_vfiprintf_r+0x1ec>
 800bb4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb50:	445a      	add	r2, fp
 800bb52:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb54:	f89a 3000 	ldrb.w	r3, [sl]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f000 809f 	beq.w	800bc9c <_vfiprintf_r+0x1ec>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb68:	f10a 0a01 	add.w	sl, sl, #1
 800bb6c:	9304      	str	r3, [sp, #16]
 800bb6e:	9307      	str	r3, [sp, #28]
 800bb70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb74:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb76:	4654      	mov	r4, sl
 800bb78:	2205      	movs	r2, #5
 800bb7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb7e:	4853      	ldr	r0, [pc, #332]	@ (800bccc <_vfiprintf_r+0x21c>)
 800bb80:	f7f4 fbbe 	bl	8000300 <memchr>
 800bb84:	9a04      	ldr	r2, [sp, #16]
 800bb86:	b9d8      	cbnz	r0, 800bbc0 <_vfiprintf_r+0x110>
 800bb88:	06d1      	lsls	r1, r2, #27
 800bb8a:	bf44      	itt	mi
 800bb8c:	2320      	movmi	r3, #32
 800bb8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb92:	0713      	lsls	r3, r2, #28
 800bb94:	bf44      	itt	mi
 800bb96:	232b      	movmi	r3, #43	@ 0x2b
 800bb98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb9c:	f89a 3000 	ldrb.w	r3, [sl]
 800bba0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bba2:	d015      	beq.n	800bbd0 <_vfiprintf_r+0x120>
 800bba4:	9a07      	ldr	r2, [sp, #28]
 800bba6:	4654      	mov	r4, sl
 800bba8:	2000      	movs	r0, #0
 800bbaa:	f04f 0c0a 	mov.w	ip, #10
 800bbae:	4621      	mov	r1, r4
 800bbb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbb4:	3b30      	subs	r3, #48	@ 0x30
 800bbb6:	2b09      	cmp	r3, #9
 800bbb8:	d94b      	bls.n	800bc52 <_vfiprintf_r+0x1a2>
 800bbba:	b1b0      	cbz	r0, 800bbea <_vfiprintf_r+0x13a>
 800bbbc:	9207      	str	r2, [sp, #28]
 800bbbe:	e014      	b.n	800bbea <_vfiprintf_r+0x13a>
 800bbc0:	eba0 0308 	sub.w	r3, r0, r8
 800bbc4:	fa09 f303 	lsl.w	r3, r9, r3
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	9304      	str	r3, [sp, #16]
 800bbcc:	46a2      	mov	sl, r4
 800bbce:	e7d2      	b.n	800bb76 <_vfiprintf_r+0xc6>
 800bbd0:	9b03      	ldr	r3, [sp, #12]
 800bbd2:	1d19      	adds	r1, r3, #4
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	9103      	str	r1, [sp, #12]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	bfbb      	ittet	lt
 800bbdc:	425b      	neglt	r3, r3
 800bbde:	f042 0202 	orrlt.w	r2, r2, #2
 800bbe2:	9307      	strge	r3, [sp, #28]
 800bbe4:	9307      	strlt	r3, [sp, #28]
 800bbe6:	bfb8      	it	lt
 800bbe8:	9204      	strlt	r2, [sp, #16]
 800bbea:	7823      	ldrb	r3, [r4, #0]
 800bbec:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbee:	d10a      	bne.n	800bc06 <_vfiprintf_r+0x156>
 800bbf0:	7863      	ldrb	r3, [r4, #1]
 800bbf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbf4:	d132      	bne.n	800bc5c <_vfiprintf_r+0x1ac>
 800bbf6:	9b03      	ldr	r3, [sp, #12]
 800bbf8:	1d1a      	adds	r2, r3, #4
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	9203      	str	r2, [sp, #12]
 800bbfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc02:	3402      	adds	r4, #2
 800bc04:	9305      	str	r3, [sp, #20]
 800bc06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bcdc <_vfiprintf_r+0x22c>
 800bc0a:	7821      	ldrb	r1, [r4, #0]
 800bc0c:	2203      	movs	r2, #3
 800bc0e:	4650      	mov	r0, sl
 800bc10:	f7f4 fb76 	bl	8000300 <memchr>
 800bc14:	b138      	cbz	r0, 800bc26 <_vfiprintf_r+0x176>
 800bc16:	9b04      	ldr	r3, [sp, #16]
 800bc18:	eba0 000a 	sub.w	r0, r0, sl
 800bc1c:	2240      	movs	r2, #64	@ 0x40
 800bc1e:	4082      	lsls	r2, r0
 800bc20:	4313      	orrs	r3, r2
 800bc22:	3401      	adds	r4, #1
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc2a:	4829      	ldr	r0, [pc, #164]	@ (800bcd0 <_vfiprintf_r+0x220>)
 800bc2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc30:	2206      	movs	r2, #6
 800bc32:	f7f4 fb65 	bl	8000300 <memchr>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d03f      	beq.n	800bcba <_vfiprintf_r+0x20a>
 800bc3a:	4b26      	ldr	r3, [pc, #152]	@ (800bcd4 <_vfiprintf_r+0x224>)
 800bc3c:	bb1b      	cbnz	r3, 800bc86 <_vfiprintf_r+0x1d6>
 800bc3e:	9b03      	ldr	r3, [sp, #12]
 800bc40:	3307      	adds	r3, #7
 800bc42:	f023 0307 	bic.w	r3, r3, #7
 800bc46:	3308      	adds	r3, #8
 800bc48:	9303      	str	r3, [sp, #12]
 800bc4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc4c:	443b      	add	r3, r7
 800bc4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc50:	e76a      	b.n	800bb28 <_vfiprintf_r+0x78>
 800bc52:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc56:	460c      	mov	r4, r1
 800bc58:	2001      	movs	r0, #1
 800bc5a:	e7a8      	b.n	800bbae <_vfiprintf_r+0xfe>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	3401      	adds	r4, #1
 800bc60:	9305      	str	r3, [sp, #20]
 800bc62:	4619      	mov	r1, r3
 800bc64:	f04f 0c0a 	mov.w	ip, #10
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc6e:	3a30      	subs	r2, #48	@ 0x30
 800bc70:	2a09      	cmp	r2, #9
 800bc72:	d903      	bls.n	800bc7c <_vfiprintf_r+0x1cc>
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d0c6      	beq.n	800bc06 <_vfiprintf_r+0x156>
 800bc78:	9105      	str	r1, [sp, #20]
 800bc7a:	e7c4      	b.n	800bc06 <_vfiprintf_r+0x156>
 800bc7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc80:	4604      	mov	r4, r0
 800bc82:	2301      	movs	r3, #1
 800bc84:	e7f0      	b.n	800bc68 <_vfiprintf_r+0x1b8>
 800bc86:	ab03      	add	r3, sp, #12
 800bc88:	9300      	str	r3, [sp, #0]
 800bc8a:	462a      	mov	r2, r5
 800bc8c:	4b12      	ldr	r3, [pc, #72]	@ (800bcd8 <_vfiprintf_r+0x228>)
 800bc8e:	a904      	add	r1, sp, #16
 800bc90:	4630      	mov	r0, r6
 800bc92:	f3af 8000 	nop.w
 800bc96:	4607      	mov	r7, r0
 800bc98:	1c78      	adds	r0, r7, #1
 800bc9a:	d1d6      	bne.n	800bc4a <_vfiprintf_r+0x19a>
 800bc9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc9e:	07d9      	lsls	r1, r3, #31
 800bca0:	d405      	bmi.n	800bcae <_vfiprintf_r+0x1fe>
 800bca2:	89ab      	ldrh	r3, [r5, #12]
 800bca4:	059a      	lsls	r2, r3, #22
 800bca6:	d402      	bmi.n	800bcae <_vfiprintf_r+0x1fe>
 800bca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcaa:	f7ff fe77 	bl	800b99c <__retarget_lock_release_recursive>
 800bcae:	89ab      	ldrh	r3, [r5, #12]
 800bcb0:	065b      	lsls	r3, r3, #25
 800bcb2:	f53f af1f 	bmi.w	800baf4 <_vfiprintf_r+0x44>
 800bcb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcb8:	e71e      	b.n	800baf8 <_vfiprintf_r+0x48>
 800bcba:	ab03      	add	r3, sp, #12
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	462a      	mov	r2, r5
 800bcc0:	4b05      	ldr	r3, [pc, #20]	@ (800bcd8 <_vfiprintf_r+0x228>)
 800bcc2:	a904      	add	r1, sp, #16
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	f000 f879 	bl	800bdbc <_printf_i>
 800bcca:	e7e4      	b.n	800bc96 <_vfiprintf_r+0x1e6>
 800bccc:	0800c88d 	.word	0x0800c88d
 800bcd0:	0800c897 	.word	0x0800c897
 800bcd4:	00000000 	.word	0x00000000
 800bcd8:	0800ba8b 	.word	0x0800ba8b
 800bcdc:	0800c893 	.word	0x0800c893

0800bce0 <_printf_common>:
 800bce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bce4:	4616      	mov	r6, r2
 800bce6:	4698      	mov	r8, r3
 800bce8:	688a      	ldr	r2, [r1, #8]
 800bcea:	690b      	ldr	r3, [r1, #16]
 800bcec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	bfb8      	it	lt
 800bcf4:	4613      	movlt	r3, r2
 800bcf6:	6033      	str	r3, [r6, #0]
 800bcf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bcfc:	4607      	mov	r7, r0
 800bcfe:	460c      	mov	r4, r1
 800bd00:	b10a      	cbz	r2, 800bd06 <_printf_common+0x26>
 800bd02:	3301      	adds	r3, #1
 800bd04:	6033      	str	r3, [r6, #0]
 800bd06:	6823      	ldr	r3, [r4, #0]
 800bd08:	0699      	lsls	r1, r3, #26
 800bd0a:	bf42      	ittt	mi
 800bd0c:	6833      	ldrmi	r3, [r6, #0]
 800bd0e:	3302      	addmi	r3, #2
 800bd10:	6033      	strmi	r3, [r6, #0]
 800bd12:	6825      	ldr	r5, [r4, #0]
 800bd14:	f015 0506 	ands.w	r5, r5, #6
 800bd18:	d106      	bne.n	800bd28 <_printf_common+0x48>
 800bd1a:	f104 0a19 	add.w	sl, r4, #25
 800bd1e:	68e3      	ldr	r3, [r4, #12]
 800bd20:	6832      	ldr	r2, [r6, #0]
 800bd22:	1a9b      	subs	r3, r3, r2
 800bd24:	42ab      	cmp	r3, r5
 800bd26:	dc26      	bgt.n	800bd76 <_printf_common+0x96>
 800bd28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd2c:	6822      	ldr	r2, [r4, #0]
 800bd2e:	3b00      	subs	r3, #0
 800bd30:	bf18      	it	ne
 800bd32:	2301      	movne	r3, #1
 800bd34:	0692      	lsls	r2, r2, #26
 800bd36:	d42b      	bmi.n	800bd90 <_printf_common+0xb0>
 800bd38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd3c:	4641      	mov	r1, r8
 800bd3e:	4638      	mov	r0, r7
 800bd40:	47c8      	blx	r9
 800bd42:	3001      	adds	r0, #1
 800bd44:	d01e      	beq.n	800bd84 <_printf_common+0xa4>
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	6922      	ldr	r2, [r4, #16]
 800bd4a:	f003 0306 	and.w	r3, r3, #6
 800bd4e:	2b04      	cmp	r3, #4
 800bd50:	bf02      	ittt	eq
 800bd52:	68e5      	ldreq	r5, [r4, #12]
 800bd54:	6833      	ldreq	r3, [r6, #0]
 800bd56:	1aed      	subeq	r5, r5, r3
 800bd58:	68a3      	ldr	r3, [r4, #8]
 800bd5a:	bf0c      	ite	eq
 800bd5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd60:	2500      	movne	r5, #0
 800bd62:	4293      	cmp	r3, r2
 800bd64:	bfc4      	itt	gt
 800bd66:	1a9b      	subgt	r3, r3, r2
 800bd68:	18ed      	addgt	r5, r5, r3
 800bd6a:	2600      	movs	r6, #0
 800bd6c:	341a      	adds	r4, #26
 800bd6e:	42b5      	cmp	r5, r6
 800bd70:	d11a      	bne.n	800bda8 <_printf_common+0xc8>
 800bd72:	2000      	movs	r0, #0
 800bd74:	e008      	b.n	800bd88 <_printf_common+0xa8>
 800bd76:	2301      	movs	r3, #1
 800bd78:	4652      	mov	r2, sl
 800bd7a:	4641      	mov	r1, r8
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	47c8      	blx	r9
 800bd80:	3001      	adds	r0, #1
 800bd82:	d103      	bne.n	800bd8c <_printf_common+0xac>
 800bd84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd8c:	3501      	adds	r5, #1
 800bd8e:	e7c6      	b.n	800bd1e <_printf_common+0x3e>
 800bd90:	18e1      	adds	r1, r4, r3
 800bd92:	1c5a      	adds	r2, r3, #1
 800bd94:	2030      	movs	r0, #48	@ 0x30
 800bd96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd9a:	4422      	add	r2, r4
 800bd9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bda0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bda4:	3302      	adds	r3, #2
 800bda6:	e7c7      	b.n	800bd38 <_printf_common+0x58>
 800bda8:	2301      	movs	r3, #1
 800bdaa:	4622      	mov	r2, r4
 800bdac:	4641      	mov	r1, r8
 800bdae:	4638      	mov	r0, r7
 800bdb0:	47c8      	blx	r9
 800bdb2:	3001      	adds	r0, #1
 800bdb4:	d0e6      	beq.n	800bd84 <_printf_common+0xa4>
 800bdb6:	3601      	adds	r6, #1
 800bdb8:	e7d9      	b.n	800bd6e <_printf_common+0x8e>
	...

0800bdbc <_printf_i>:
 800bdbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc0:	7e0f      	ldrb	r7, [r1, #24]
 800bdc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bdc4:	2f78      	cmp	r7, #120	@ 0x78
 800bdc6:	4691      	mov	r9, r2
 800bdc8:	4680      	mov	r8, r0
 800bdca:	460c      	mov	r4, r1
 800bdcc:	469a      	mov	sl, r3
 800bdce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bdd2:	d807      	bhi.n	800bde4 <_printf_i+0x28>
 800bdd4:	2f62      	cmp	r7, #98	@ 0x62
 800bdd6:	d80a      	bhi.n	800bdee <_printf_i+0x32>
 800bdd8:	2f00      	cmp	r7, #0
 800bdda:	f000 80d2 	beq.w	800bf82 <_printf_i+0x1c6>
 800bdde:	2f58      	cmp	r7, #88	@ 0x58
 800bde0:	f000 80b9 	beq.w	800bf56 <_printf_i+0x19a>
 800bde4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bde8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bdec:	e03a      	b.n	800be64 <_printf_i+0xa8>
 800bdee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bdf2:	2b15      	cmp	r3, #21
 800bdf4:	d8f6      	bhi.n	800bde4 <_printf_i+0x28>
 800bdf6:	a101      	add	r1, pc, #4	@ (adr r1, 800bdfc <_printf_i+0x40>)
 800bdf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdfc:	0800be55 	.word	0x0800be55
 800be00:	0800be69 	.word	0x0800be69
 800be04:	0800bde5 	.word	0x0800bde5
 800be08:	0800bde5 	.word	0x0800bde5
 800be0c:	0800bde5 	.word	0x0800bde5
 800be10:	0800bde5 	.word	0x0800bde5
 800be14:	0800be69 	.word	0x0800be69
 800be18:	0800bde5 	.word	0x0800bde5
 800be1c:	0800bde5 	.word	0x0800bde5
 800be20:	0800bde5 	.word	0x0800bde5
 800be24:	0800bde5 	.word	0x0800bde5
 800be28:	0800bf69 	.word	0x0800bf69
 800be2c:	0800be93 	.word	0x0800be93
 800be30:	0800bf23 	.word	0x0800bf23
 800be34:	0800bde5 	.word	0x0800bde5
 800be38:	0800bde5 	.word	0x0800bde5
 800be3c:	0800bf8b 	.word	0x0800bf8b
 800be40:	0800bde5 	.word	0x0800bde5
 800be44:	0800be93 	.word	0x0800be93
 800be48:	0800bde5 	.word	0x0800bde5
 800be4c:	0800bde5 	.word	0x0800bde5
 800be50:	0800bf2b 	.word	0x0800bf2b
 800be54:	6833      	ldr	r3, [r6, #0]
 800be56:	1d1a      	adds	r2, r3, #4
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6032      	str	r2, [r6, #0]
 800be5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be64:	2301      	movs	r3, #1
 800be66:	e09d      	b.n	800bfa4 <_printf_i+0x1e8>
 800be68:	6833      	ldr	r3, [r6, #0]
 800be6a:	6820      	ldr	r0, [r4, #0]
 800be6c:	1d19      	adds	r1, r3, #4
 800be6e:	6031      	str	r1, [r6, #0]
 800be70:	0606      	lsls	r6, r0, #24
 800be72:	d501      	bpl.n	800be78 <_printf_i+0xbc>
 800be74:	681d      	ldr	r5, [r3, #0]
 800be76:	e003      	b.n	800be80 <_printf_i+0xc4>
 800be78:	0645      	lsls	r5, r0, #25
 800be7a:	d5fb      	bpl.n	800be74 <_printf_i+0xb8>
 800be7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be80:	2d00      	cmp	r5, #0
 800be82:	da03      	bge.n	800be8c <_printf_i+0xd0>
 800be84:	232d      	movs	r3, #45	@ 0x2d
 800be86:	426d      	negs	r5, r5
 800be88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be8c:	4859      	ldr	r0, [pc, #356]	@ (800bff4 <_printf_i+0x238>)
 800be8e:	230a      	movs	r3, #10
 800be90:	e011      	b.n	800beb6 <_printf_i+0xfa>
 800be92:	6821      	ldr	r1, [r4, #0]
 800be94:	6833      	ldr	r3, [r6, #0]
 800be96:	0608      	lsls	r0, r1, #24
 800be98:	f853 5b04 	ldr.w	r5, [r3], #4
 800be9c:	d402      	bmi.n	800bea4 <_printf_i+0xe8>
 800be9e:	0649      	lsls	r1, r1, #25
 800bea0:	bf48      	it	mi
 800bea2:	b2ad      	uxthmi	r5, r5
 800bea4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bea6:	4853      	ldr	r0, [pc, #332]	@ (800bff4 <_printf_i+0x238>)
 800bea8:	6033      	str	r3, [r6, #0]
 800beaa:	bf14      	ite	ne
 800beac:	230a      	movne	r3, #10
 800beae:	2308      	moveq	r3, #8
 800beb0:	2100      	movs	r1, #0
 800beb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800beb6:	6866      	ldr	r6, [r4, #4]
 800beb8:	60a6      	str	r6, [r4, #8]
 800beba:	2e00      	cmp	r6, #0
 800bebc:	bfa2      	ittt	ge
 800bebe:	6821      	ldrge	r1, [r4, #0]
 800bec0:	f021 0104 	bicge.w	r1, r1, #4
 800bec4:	6021      	strge	r1, [r4, #0]
 800bec6:	b90d      	cbnz	r5, 800becc <_printf_i+0x110>
 800bec8:	2e00      	cmp	r6, #0
 800beca:	d04b      	beq.n	800bf64 <_printf_i+0x1a8>
 800becc:	4616      	mov	r6, r2
 800bece:	fbb5 f1f3 	udiv	r1, r5, r3
 800bed2:	fb03 5711 	mls	r7, r3, r1, r5
 800bed6:	5dc7      	ldrb	r7, [r0, r7]
 800bed8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bedc:	462f      	mov	r7, r5
 800bede:	42bb      	cmp	r3, r7
 800bee0:	460d      	mov	r5, r1
 800bee2:	d9f4      	bls.n	800bece <_printf_i+0x112>
 800bee4:	2b08      	cmp	r3, #8
 800bee6:	d10b      	bne.n	800bf00 <_printf_i+0x144>
 800bee8:	6823      	ldr	r3, [r4, #0]
 800beea:	07df      	lsls	r7, r3, #31
 800beec:	d508      	bpl.n	800bf00 <_printf_i+0x144>
 800beee:	6923      	ldr	r3, [r4, #16]
 800bef0:	6861      	ldr	r1, [r4, #4]
 800bef2:	4299      	cmp	r1, r3
 800bef4:	bfde      	ittt	le
 800bef6:	2330      	movle	r3, #48	@ 0x30
 800bef8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800befc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bf00:	1b92      	subs	r2, r2, r6
 800bf02:	6122      	str	r2, [r4, #16]
 800bf04:	f8cd a000 	str.w	sl, [sp]
 800bf08:	464b      	mov	r3, r9
 800bf0a:	aa03      	add	r2, sp, #12
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	4640      	mov	r0, r8
 800bf10:	f7ff fee6 	bl	800bce0 <_printf_common>
 800bf14:	3001      	adds	r0, #1
 800bf16:	d14a      	bne.n	800bfae <_printf_i+0x1f2>
 800bf18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf1c:	b004      	add	sp, #16
 800bf1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf22:	6823      	ldr	r3, [r4, #0]
 800bf24:	f043 0320 	orr.w	r3, r3, #32
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	4833      	ldr	r0, [pc, #204]	@ (800bff8 <_printf_i+0x23c>)
 800bf2c:	2778      	movs	r7, #120	@ 0x78
 800bf2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf32:	6823      	ldr	r3, [r4, #0]
 800bf34:	6831      	ldr	r1, [r6, #0]
 800bf36:	061f      	lsls	r7, r3, #24
 800bf38:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf3c:	d402      	bmi.n	800bf44 <_printf_i+0x188>
 800bf3e:	065f      	lsls	r7, r3, #25
 800bf40:	bf48      	it	mi
 800bf42:	b2ad      	uxthmi	r5, r5
 800bf44:	6031      	str	r1, [r6, #0]
 800bf46:	07d9      	lsls	r1, r3, #31
 800bf48:	bf44      	itt	mi
 800bf4a:	f043 0320 	orrmi.w	r3, r3, #32
 800bf4e:	6023      	strmi	r3, [r4, #0]
 800bf50:	b11d      	cbz	r5, 800bf5a <_printf_i+0x19e>
 800bf52:	2310      	movs	r3, #16
 800bf54:	e7ac      	b.n	800beb0 <_printf_i+0xf4>
 800bf56:	4827      	ldr	r0, [pc, #156]	@ (800bff4 <_printf_i+0x238>)
 800bf58:	e7e9      	b.n	800bf2e <_printf_i+0x172>
 800bf5a:	6823      	ldr	r3, [r4, #0]
 800bf5c:	f023 0320 	bic.w	r3, r3, #32
 800bf60:	6023      	str	r3, [r4, #0]
 800bf62:	e7f6      	b.n	800bf52 <_printf_i+0x196>
 800bf64:	4616      	mov	r6, r2
 800bf66:	e7bd      	b.n	800bee4 <_printf_i+0x128>
 800bf68:	6833      	ldr	r3, [r6, #0]
 800bf6a:	6825      	ldr	r5, [r4, #0]
 800bf6c:	6961      	ldr	r1, [r4, #20]
 800bf6e:	1d18      	adds	r0, r3, #4
 800bf70:	6030      	str	r0, [r6, #0]
 800bf72:	062e      	lsls	r6, r5, #24
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	d501      	bpl.n	800bf7c <_printf_i+0x1c0>
 800bf78:	6019      	str	r1, [r3, #0]
 800bf7a:	e002      	b.n	800bf82 <_printf_i+0x1c6>
 800bf7c:	0668      	lsls	r0, r5, #25
 800bf7e:	d5fb      	bpl.n	800bf78 <_printf_i+0x1bc>
 800bf80:	8019      	strh	r1, [r3, #0]
 800bf82:	2300      	movs	r3, #0
 800bf84:	6123      	str	r3, [r4, #16]
 800bf86:	4616      	mov	r6, r2
 800bf88:	e7bc      	b.n	800bf04 <_printf_i+0x148>
 800bf8a:	6833      	ldr	r3, [r6, #0]
 800bf8c:	1d1a      	adds	r2, r3, #4
 800bf8e:	6032      	str	r2, [r6, #0]
 800bf90:	681e      	ldr	r6, [r3, #0]
 800bf92:	6862      	ldr	r2, [r4, #4]
 800bf94:	2100      	movs	r1, #0
 800bf96:	4630      	mov	r0, r6
 800bf98:	f7f4 f9b2 	bl	8000300 <memchr>
 800bf9c:	b108      	cbz	r0, 800bfa2 <_printf_i+0x1e6>
 800bf9e:	1b80      	subs	r0, r0, r6
 800bfa0:	6060      	str	r0, [r4, #4]
 800bfa2:	6863      	ldr	r3, [r4, #4]
 800bfa4:	6123      	str	r3, [r4, #16]
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfac:	e7aa      	b.n	800bf04 <_printf_i+0x148>
 800bfae:	6923      	ldr	r3, [r4, #16]
 800bfb0:	4632      	mov	r2, r6
 800bfb2:	4649      	mov	r1, r9
 800bfb4:	4640      	mov	r0, r8
 800bfb6:	47d0      	blx	sl
 800bfb8:	3001      	adds	r0, #1
 800bfba:	d0ad      	beq.n	800bf18 <_printf_i+0x15c>
 800bfbc:	6823      	ldr	r3, [r4, #0]
 800bfbe:	079b      	lsls	r3, r3, #30
 800bfc0:	d413      	bmi.n	800bfea <_printf_i+0x22e>
 800bfc2:	68e0      	ldr	r0, [r4, #12]
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	4298      	cmp	r0, r3
 800bfc8:	bfb8      	it	lt
 800bfca:	4618      	movlt	r0, r3
 800bfcc:	e7a6      	b.n	800bf1c <_printf_i+0x160>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	4632      	mov	r2, r6
 800bfd2:	4649      	mov	r1, r9
 800bfd4:	4640      	mov	r0, r8
 800bfd6:	47d0      	blx	sl
 800bfd8:	3001      	adds	r0, #1
 800bfda:	d09d      	beq.n	800bf18 <_printf_i+0x15c>
 800bfdc:	3501      	adds	r5, #1
 800bfde:	68e3      	ldr	r3, [r4, #12]
 800bfe0:	9903      	ldr	r1, [sp, #12]
 800bfe2:	1a5b      	subs	r3, r3, r1
 800bfe4:	42ab      	cmp	r3, r5
 800bfe6:	dcf2      	bgt.n	800bfce <_printf_i+0x212>
 800bfe8:	e7eb      	b.n	800bfc2 <_printf_i+0x206>
 800bfea:	2500      	movs	r5, #0
 800bfec:	f104 0619 	add.w	r6, r4, #25
 800bff0:	e7f5      	b.n	800bfde <_printf_i+0x222>
 800bff2:	bf00      	nop
 800bff4:	0800c89e 	.word	0x0800c89e
 800bff8:	0800c8af 	.word	0x0800c8af

0800bffc <__sflush_r>:
 800bffc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c004:	0716      	lsls	r6, r2, #28
 800c006:	4605      	mov	r5, r0
 800c008:	460c      	mov	r4, r1
 800c00a:	d454      	bmi.n	800c0b6 <__sflush_r+0xba>
 800c00c:	684b      	ldr	r3, [r1, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	dc02      	bgt.n	800c018 <__sflush_r+0x1c>
 800c012:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c014:	2b00      	cmp	r3, #0
 800c016:	dd48      	ble.n	800c0aa <__sflush_r+0xae>
 800c018:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c01a:	2e00      	cmp	r6, #0
 800c01c:	d045      	beq.n	800c0aa <__sflush_r+0xae>
 800c01e:	2300      	movs	r3, #0
 800c020:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c024:	682f      	ldr	r7, [r5, #0]
 800c026:	6a21      	ldr	r1, [r4, #32]
 800c028:	602b      	str	r3, [r5, #0]
 800c02a:	d030      	beq.n	800c08e <__sflush_r+0x92>
 800c02c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c02e:	89a3      	ldrh	r3, [r4, #12]
 800c030:	0759      	lsls	r1, r3, #29
 800c032:	d505      	bpl.n	800c040 <__sflush_r+0x44>
 800c034:	6863      	ldr	r3, [r4, #4]
 800c036:	1ad2      	subs	r2, r2, r3
 800c038:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c03a:	b10b      	cbz	r3, 800c040 <__sflush_r+0x44>
 800c03c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c03e:	1ad2      	subs	r2, r2, r3
 800c040:	2300      	movs	r3, #0
 800c042:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c044:	6a21      	ldr	r1, [r4, #32]
 800c046:	4628      	mov	r0, r5
 800c048:	47b0      	blx	r6
 800c04a:	1c43      	adds	r3, r0, #1
 800c04c:	89a3      	ldrh	r3, [r4, #12]
 800c04e:	d106      	bne.n	800c05e <__sflush_r+0x62>
 800c050:	6829      	ldr	r1, [r5, #0]
 800c052:	291d      	cmp	r1, #29
 800c054:	d82b      	bhi.n	800c0ae <__sflush_r+0xb2>
 800c056:	4a2a      	ldr	r2, [pc, #168]	@ (800c100 <__sflush_r+0x104>)
 800c058:	410a      	asrs	r2, r1
 800c05a:	07d6      	lsls	r6, r2, #31
 800c05c:	d427      	bmi.n	800c0ae <__sflush_r+0xb2>
 800c05e:	2200      	movs	r2, #0
 800c060:	6062      	str	r2, [r4, #4]
 800c062:	04d9      	lsls	r1, r3, #19
 800c064:	6922      	ldr	r2, [r4, #16]
 800c066:	6022      	str	r2, [r4, #0]
 800c068:	d504      	bpl.n	800c074 <__sflush_r+0x78>
 800c06a:	1c42      	adds	r2, r0, #1
 800c06c:	d101      	bne.n	800c072 <__sflush_r+0x76>
 800c06e:	682b      	ldr	r3, [r5, #0]
 800c070:	b903      	cbnz	r3, 800c074 <__sflush_r+0x78>
 800c072:	6560      	str	r0, [r4, #84]	@ 0x54
 800c074:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c076:	602f      	str	r7, [r5, #0]
 800c078:	b1b9      	cbz	r1, 800c0aa <__sflush_r+0xae>
 800c07a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c07e:	4299      	cmp	r1, r3
 800c080:	d002      	beq.n	800c088 <__sflush_r+0x8c>
 800c082:	4628      	mov	r0, r5
 800c084:	f7ff fca0 	bl	800b9c8 <_free_r>
 800c088:	2300      	movs	r3, #0
 800c08a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c08c:	e00d      	b.n	800c0aa <__sflush_r+0xae>
 800c08e:	2301      	movs	r3, #1
 800c090:	4628      	mov	r0, r5
 800c092:	47b0      	blx	r6
 800c094:	4602      	mov	r2, r0
 800c096:	1c50      	adds	r0, r2, #1
 800c098:	d1c9      	bne.n	800c02e <__sflush_r+0x32>
 800c09a:	682b      	ldr	r3, [r5, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d0c6      	beq.n	800c02e <__sflush_r+0x32>
 800c0a0:	2b1d      	cmp	r3, #29
 800c0a2:	d001      	beq.n	800c0a8 <__sflush_r+0xac>
 800c0a4:	2b16      	cmp	r3, #22
 800c0a6:	d11e      	bne.n	800c0e6 <__sflush_r+0xea>
 800c0a8:	602f      	str	r7, [r5, #0]
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	e022      	b.n	800c0f4 <__sflush_r+0xf8>
 800c0ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0b2:	b21b      	sxth	r3, r3
 800c0b4:	e01b      	b.n	800c0ee <__sflush_r+0xf2>
 800c0b6:	690f      	ldr	r7, [r1, #16]
 800c0b8:	2f00      	cmp	r7, #0
 800c0ba:	d0f6      	beq.n	800c0aa <__sflush_r+0xae>
 800c0bc:	0793      	lsls	r3, r2, #30
 800c0be:	680e      	ldr	r6, [r1, #0]
 800c0c0:	bf08      	it	eq
 800c0c2:	694b      	ldreq	r3, [r1, #20]
 800c0c4:	600f      	str	r7, [r1, #0]
 800c0c6:	bf18      	it	ne
 800c0c8:	2300      	movne	r3, #0
 800c0ca:	eba6 0807 	sub.w	r8, r6, r7
 800c0ce:	608b      	str	r3, [r1, #8]
 800c0d0:	f1b8 0f00 	cmp.w	r8, #0
 800c0d4:	dde9      	ble.n	800c0aa <__sflush_r+0xae>
 800c0d6:	6a21      	ldr	r1, [r4, #32]
 800c0d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c0da:	4643      	mov	r3, r8
 800c0dc:	463a      	mov	r2, r7
 800c0de:	4628      	mov	r0, r5
 800c0e0:	47b0      	blx	r6
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	dc08      	bgt.n	800c0f8 <__sflush_r+0xfc>
 800c0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0ee:	81a3      	strh	r3, [r4, #12]
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f8:	4407      	add	r7, r0
 800c0fa:	eba8 0800 	sub.w	r8, r8, r0
 800c0fe:	e7e7      	b.n	800c0d0 <__sflush_r+0xd4>
 800c100:	dfbffffe 	.word	0xdfbffffe

0800c104 <_fflush_r>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	690b      	ldr	r3, [r1, #16]
 800c108:	4605      	mov	r5, r0
 800c10a:	460c      	mov	r4, r1
 800c10c:	b913      	cbnz	r3, 800c114 <_fflush_r+0x10>
 800c10e:	2500      	movs	r5, #0
 800c110:	4628      	mov	r0, r5
 800c112:	bd38      	pop	{r3, r4, r5, pc}
 800c114:	b118      	cbz	r0, 800c11e <_fflush_r+0x1a>
 800c116:	6a03      	ldr	r3, [r0, #32]
 800c118:	b90b      	cbnz	r3, 800c11e <_fflush_r+0x1a>
 800c11a:	f7ff fb1d 	bl	800b758 <__sinit>
 800c11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d0f3      	beq.n	800c10e <_fflush_r+0xa>
 800c126:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c128:	07d0      	lsls	r0, r2, #31
 800c12a:	d404      	bmi.n	800c136 <_fflush_r+0x32>
 800c12c:	0599      	lsls	r1, r3, #22
 800c12e:	d402      	bmi.n	800c136 <_fflush_r+0x32>
 800c130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c132:	f7ff fc32 	bl	800b99a <__retarget_lock_acquire_recursive>
 800c136:	4628      	mov	r0, r5
 800c138:	4621      	mov	r1, r4
 800c13a:	f7ff ff5f 	bl	800bffc <__sflush_r>
 800c13e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c140:	07da      	lsls	r2, r3, #31
 800c142:	4605      	mov	r5, r0
 800c144:	d4e4      	bmi.n	800c110 <_fflush_r+0xc>
 800c146:	89a3      	ldrh	r3, [r4, #12]
 800c148:	059b      	lsls	r3, r3, #22
 800c14a:	d4e1      	bmi.n	800c110 <_fflush_r+0xc>
 800c14c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c14e:	f7ff fc25 	bl	800b99c <__retarget_lock_release_recursive>
 800c152:	e7dd      	b.n	800c110 <_fflush_r+0xc>

0800c154 <__sread>:
 800c154:	b510      	push	{r4, lr}
 800c156:	460c      	mov	r4, r1
 800c158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c15c:	f000 f9a8 	bl	800c4b0 <_read_r>
 800c160:	2800      	cmp	r0, #0
 800c162:	bfab      	itete	ge
 800c164:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c166:	89a3      	ldrhlt	r3, [r4, #12]
 800c168:	181b      	addge	r3, r3, r0
 800c16a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c16e:	bfac      	ite	ge
 800c170:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c172:	81a3      	strhlt	r3, [r4, #12]
 800c174:	bd10      	pop	{r4, pc}

0800c176 <__swrite>:
 800c176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c17a:	461f      	mov	r7, r3
 800c17c:	898b      	ldrh	r3, [r1, #12]
 800c17e:	05db      	lsls	r3, r3, #23
 800c180:	4605      	mov	r5, r0
 800c182:	460c      	mov	r4, r1
 800c184:	4616      	mov	r6, r2
 800c186:	d505      	bpl.n	800c194 <__swrite+0x1e>
 800c188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c18c:	2302      	movs	r3, #2
 800c18e:	2200      	movs	r2, #0
 800c190:	f000 f94c 	bl	800c42c <_lseek_r>
 800c194:	89a3      	ldrh	r3, [r4, #12]
 800c196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c19a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c19e:	81a3      	strh	r3, [r4, #12]
 800c1a0:	4632      	mov	r2, r6
 800c1a2:	463b      	mov	r3, r7
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1aa:	f000 b9a7 	b.w	800c4fc <_write_r>

0800c1ae <__sseek>:
 800c1ae:	b510      	push	{r4, lr}
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b6:	f000 f939 	bl	800c42c <_lseek_r>
 800c1ba:	1c43      	adds	r3, r0, #1
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	bf15      	itete	ne
 800c1c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c1c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c1c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c1ca:	81a3      	strheq	r3, [r4, #12]
 800c1cc:	bf18      	it	ne
 800c1ce:	81a3      	strhne	r3, [r4, #12]
 800c1d0:	bd10      	pop	{r4, pc}

0800c1d2 <__sclose>:
 800c1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1d6:	f000 b8f7 	b.w	800c3c8 <_close_r>

0800c1da <__swbuf_r>:
 800c1da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1dc:	460e      	mov	r6, r1
 800c1de:	4614      	mov	r4, r2
 800c1e0:	4605      	mov	r5, r0
 800c1e2:	b118      	cbz	r0, 800c1ec <__swbuf_r+0x12>
 800c1e4:	6a03      	ldr	r3, [r0, #32]
 800c1e6:	b90b      	cbnz	r3, 800c1ec <__swbuf_r+0x12>
 800c1e8:	f7ff fab6 	bl	800b758 <__sinit>
 800c1ec:	69a3      	ldr	r3, [r4, #24]
 800c1ee:	60a3      	str	r3, [r4, #8]
 800c1f0:	89a3      	ldrh	r3, [r4, #12]
 800c1f2:	071a      	lsls	r2, r3, #28
 800c1f4:	d501      	bpl.n	800c1fa <__swbuf_r+0x20>
 800c1f6:	6923      	ldr	r3, [r4, #16]
 800c1f8:	b943      	cbnz	r3, 800c20c <__swbuf_r+0x32>
 800c1fa:	4621      	mov	r1, r4
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	f000 f82b 	bl	800c258 <__swsetup_r>
 800c202:	b118      	cbz	r0, 800c20c <__swbuf_r+0x32>
 800c204:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c208:	4638      	mov	r0, r7
 800c20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c20c:	6823      	ldr	r3, [r4, #0]
 800c20e:	6922      	ldr	r2, [r4, #16]
 800c210:	1a98      	subs	r0, r3, r2
 800c212:	6963      	ldr	r3, [r4, #20]
 800c214:	b2f6      	uxtb	r6, r6
 800c216:	4283      	cmp	r3, r0
 800c218:	4637      	mov	r7, r6
 800c21a:	dc05      	bgt.n	800c228 <__swbuf_r+0x4e>
 800c21c:	4621      	mov	r1, r4
 800c21e:	4628      	mov	r0, r5
 800c220:	f7ff ff70 	bl	800c104 <_fflush_r>
 800c224:	2800      	cmp	r0, #0
 800c226:	d1ed      	bne.n	800c204 <__swbuf_r+0x2a>
 800c228:	68a3      	ldr	r3, [r4, #8]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	60a3      	str	r3, [r4, #8]
 800c22e:	6823      	ldr	r3, [r4, #0]
 800c230:	1c5a      	adds	r2, r3, #1
 800c232:	6022      	str	r2, [r4, #0]
 800c234:	701e      	strb	r6, [r3, #0]
 800c236:	6962      	ldr	r2, [r4, #20]
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d004      	beq.n	800c248 <__swbuf_r+0x6e>
 800c23e:	89a3      	ldrh	r3, [r4, #12]
 800c240:	07db      	lsls	r3, r3, #31
 800c242:	d5e1      	bpl.n	800c208 <__swbuf_r+0x2e>
 800c244:	2e0a      	cmp	r6, #10
 800c246:	d1df      	bne.n	800c208 <__swbuf_r+0x2e>
 800c248:	4621      	mov	r1, r4
 800c24a:	4628      	mov	r0, r5
 800c24c:	f7ff ff5a 	bl	800c104 <_fflush_r>
 800c250:	2800      	cmp	r0, #0
 800c252:	d0d9      	beq.n	800c208 <__swbuf_r+0x2e>
 800c254:	e7d6      	b.n	800c204 <__swbuf_r+0x2a>
	...

0800c258 <__swsetup_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4b29      	ldr	r3, [pc, #164]	@ (800c300 <__swsetup_r+0xa8>)
 800c25c:	4605      	mov	r5, r0
 800c25e:	6818      	ldr	r0, [r3, #0]
 800c260:	460c      	mov	r4, r1
 800c262:	b118      	cbz	r0, 800c26c <__swsetup_r+0x14>
 800c264:	6a03      	ldr	r3, [r0, #32]
 800c266:	b90b      	cbnz	r3, 800c26c <__swsetup_r+0x14>
 800c268:	f7ff fa76 	bl	800b758 <__sinit>
 800c26c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c270:	0719      	lsls	r1, r3, #28
 800c272:	d422      	bmi.n	800c2ba <__swsetup_r+0x62>
 800c274:	06da      	lsls	r2, r3, #27
 800c276:	d407      	bmi.n	800c288 <__swsetup_r+0x30>
 800c278:	2209      	movs	r2, #9
 800c27a:	602a      	str	r2, [r5, #0]
 800c27c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c280:	81a3      	strh	r3, [r4, #12]
 800c282:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c286:	e033      	b.n	800c2f0 <__swsetup_r+0x98>
 800c288:	0758      	lsls	r0, r3, #29
 800c28a:	d512      	bpl.n	800c2b2 <__swsetup_r+0x5a>
 800c28c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c28e:	b141      	cbz	r1, 800c2a2 <__swsetup_r+0x4a>
 800c290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c294:	4299      	cmp	r1, r3
 800c296:	d002      	beq.n	800c29e <__swsetup_r+0x46>
 800c298:	4628      	mov	r0, r5
 800c29a:	f7ff fb95 	bl	800b9c8 <_free_r>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2a2:	89a3      	ldrh	r3, [r4, #12]
 800c2a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c2a8:	81a3      	strh	r3, [r4, #12]
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	6063      	str	r3, [r4, #4]
 800c2ae:	6923      	ldr	r3, [r4, #16]
 800c2b0:	6023      	str	r3, [r4, #0]
 800c2b2:	89a3      	ldrh	r3, [r4, #12]
 800c2b4:	f043 0308 	orr.w	r3, r3, #8
 800c2b8:	81a3      	strh	r3, [r4, #12]
 800c2ba:	6923      	ldr	r3, [r4, #16]
 800c2bc:	b94b      	cbnz	r3, 800c2d2 <__swsetup_r+0x7a>
 800c2be:	89a3      	ldrh	r3, [r4, #12]
 800c2c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c2c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2c8:	d003      	beq.n	800c2d2 <__swsetup_r+0x7a>
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	f000 f83f 	bl	800c350 <__smakebuf_r>
 800c2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d6:	f013 0201 	ands.w	r2, r3, #1
 800c2da:	d00a      	beq.n	800c2f2 <__swsetup_r+0x9a>
 800c2dc:	2200      	movs	r2, #0
 800c2de:	60a2      	str	r2, [r4, #8]
 800c2e0:	6962      	ldr	r2, [r4, #20]
 800c2e2:	4252      	negs	r2, r2
 800c2e4:	61a2      	str	r2, [r4, #24]
 800c2e6:	6922      	ldr	r2, [r4, #16]
 800c2e8:	b942      	cbnz	r2, 800c2fc <__swsetup_r+0xa4>
 800c2ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2ee:	d1c5      	bne.n	800c27c <__swsetup_r+0x24>
 800c2f0:	bd38      	pop	{r3, r4, r5, pc}
 800c2f2:	0799      	lsls	r1, r3, #30
 800c2f4:	bf58      	it	pl
 800c2f6:	6962      	ldrpl	r2, [r4, #20]
 800c2f8:	60a2      	str	r2, [r4, #8]
 800c2fa:	e7f4      	b.n	800c2e6 <__swsetup_r+0x8e>
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	e7f7      	b.n	800c2f0 <__swsetup_r+0x98>
 800c300:	000000cc 	.word	0x000000cc

0800c304 <__swhatbuf_r>:
 800c304:	b570      	push	{r4, r5, r6, lr}
 800c306:	460c      	mov	r4, r1
 800c308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c30c:	2900      	cmp	r1, #0
 800c30e:	b096      	sub	sp, #88	@ 0x58
 800c310:	4615      	mov	r5, r2
 800c312:	461e      	mov	r6, r3
 800c314:	da0d      	bge.n	800c332 <__swhatbuf_r+0x2e>
 800c316:	89a3      	ldrh	r3, [r4, #12]
 800c318:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c31c:	f04f 0100 	mov.w	r1, #0
 800c320:	bf14      	ite	ne
 800c322:	2340      	movne	r3, #64	@ 0x40
 800c324:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c328:	2000      	movs	r0, #0
 800c32a:	6031      	str	r1, [r6, #0]
 800c32c:	602b      	str	r3, [r5, #0]
 800c32e:	b016      	add	sp, #88	@ 0x58
 800c330:	bd70      	pop	{r4, r5, r6, pc}
 800c332:	466a      	mov	r2, sp
 800c334:	f000 f858 	bl	800c3e8 <_fstat_r>
 800c338:	2800      	cmp	r0, #0
 800c33a:	dbec      	blt.n	800c316 <__swhatbuf_r+0x12>
 800c33c:	9901      	ldr	r1, [sp, #4]
 800c33e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c342:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c346:	4259      	negs	r1, r3
 800c348:	4159      	adcs	r1, r3
 800c34a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c34e:	e7eb      	b.n	800c328 <__swhatbuf_r+0x24>

0800c350 <__smakebuf_r>:
 800c350:	898b      	ldrh	r3, [r1, #12]
 800c352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c354:	079d      	lsls	r5, r3, #30
 800c356:	4606      	mov	r6, r0
 800c358:	460c      	mov	r4, r1
 800c35a:	d507      	bpl.n	800c36c <__smakebuf_r+0x1c>
 800c35c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	6123      	str	r3, [r4, #16]
 800c364:	2301      	movs	r3, #1
 800c366:	6163      	str	r3, [r4, #20]
 800c368:	b003      	add	sp, #12
 800c36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c36c:	ab01      	add	r3, sp, #4
 800c36e:	466a      	mov	r2, sp
 800c370:	f7ff ffc8 	bl	800c304 <__swhatbuf_r>
 800c374:	9f00      	ldr	r7, [sp, #0]
 800c376:	4605      	mov	r5, r0
 800c378:	4639      	mov	r1, r7
 800c37a:	4630      	mov	r0, r6
 800c37c:	f7ff f8d4 	bl	800b528 <_malloc_r>
 800c380:	b948      	cbnz	r0, 800c396 <__smakebuf_r+0x46>
 800c382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c386:	059a      	lsls	r2, r3, #22
 800c388:	d4ee      	bmi.n	800c368 <__smakebuf_r+0x18>
 800c38a:	f023 0303 	bic.w	r3, r3, #3
 800c38e:	f043 0302 	orr.w	r3, r3, #2
 800c392:	81a3      	strh	r3, [r4, #12]
 800c394:	e7e2      	b.n	800c35c <__smakebuf_r+0xc>
 800c396:	89a3      	ldrh	r3, [r4, #12]
 800c398:	6020      	str	r0, [r4, #0]
 800c39a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c39e:	81a3      	strh	r3, [r4, #12]
 800c3a0:	9b01      	ldr	r3, [sp, #4]
 800c3a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c3a6:	b15b      	cbz	r3, 800c3c0 <__smakebuf_r+0x70>
 800c3a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	f000 f82d 	bl	800c40c <_isatty_r>
 800c3b2:	b128      	cbz	r0, 800c3c0 <__smakebuf_r+0x70>
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	f023 0303 	bic.w	r3, r3, #3
 800c3ba:	f043 0301 	orr.w	r3, r3, #1
 800c3be:	81a3      	strh	r3, [r4, #12]
 800c3c0:	89a3      	ldrh	r3, [r4, #12]
 800c3c2:	431d      	orrs	r5, r3
 800c3c4:	81a5      	strh	r5, [r4, #12]
 800c3c6:	e7cf      	b.n	800c368 <__smakebuf_r+0x18>

0800c3c8 <_close_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4d06      	ldr	r5, [pc, #24]	@ (800c3e4 <_close_r+0x1c>)
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	4608      	mov	r0, r1
 800c3d2:	602b      	str	r3, [r5, #0]
 800c3d4:	f7f4 ff68 	bl	80012a8 <_close>
 800c3d8:	1c43      	adds	r3, r0, #1
 800c3da:	d102      	bne.n	800c3e2 <_close_r+0x1a>
 800c3dc:	682b      	ldr	r3, [r5, #0]
 800c3de:	b103      	cbz	r3, 800c3e2 <_close_r+0x1a>
 800c3e0:	6023      	str	r3, [r4, #0]
 800c3e2:	bd38      	pop	{r3, r4, r5, pc}
 800c3e4:	000009e4 	.word	0x000009e4

0800c3e8 <_fstat_r>:
 800c3e8:	b538      	push	{r3, r4, r5, lr}
 800c3ea:	4d07      	ldr	r5, [pc, #28]	@ (800c408 <_fstat_r+0x20>)
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	602b      	str	r3, [r5, #0]
 800c3f6:	f7f4 ff63 	bl	80012c0 <_fstat>
 800c3fa:	1c43      	adds	r3, r0, #1
 800c3fc:	d102      	bne.n	800c404 <_fstat_r+0x1c>
 800c3fe:	682b      	ldr	r3, [r5, #0]
 800c400:	b103      	cbz	r3, 800c404 <_fstat_r+0x1c>
 800c402:	6023      	str	r3, [r4, #0]
 800c404:	bd38      	pop	{r3, r4, r5, pc}
 800c406:	bf00      	nop
 800c408:	000009e4 	.word	0x000009e4

0800c40c <_isatty_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4d06      	ldr	r5, [pc, #24]	@ (800c428 <_isatty_r+0x1c>)
 800c410:	2300      	movs	r3, #0
 800c412:	4604      	mov	r4, r0
 800c414:	4608      	mov	r0, r1
 800c416:	602b      	str	r3, [r5, #0]
 800c418:	f7f4 ff62 	bl	80012e0 <_isatty>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d102      	bne.n	800c426 <_isatty_r+0x1a>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	b103      	cbz	r3, 800c426 <_isatty_r+0x1a>
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	000009e4 	.word	0x000009e4

0800c42c <_lseek_r>:
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	4d07      	ldr	r5, [pc, #28]	@ (800c44c <_lseek_r+0x20>)
 800c430:	4604      	mov	r4, r0
 800c432:	4608      	mov	r0, r1
 800c434:	4611      	mov	r1, r2
 800c436:	2200      	movs	r2, #0
 800c438:	602a      	str	r2, [r5, #0]
 800c43a:	461a      	mov	r2, r3
 800c43c:	f7f4 ff5b 	bl	80012f6 <_lseek>
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	d102      	bne.n	800c44a <_lseek_r+0x1e>
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	b103      	cbz	r3, 800c44a <_lseek_r+0x1e>
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	bd38      	pop	{r3, r4, r5, pc}
 800c44c:	000009e4 	.word	0x000009e4

0800c450 <_raise_r>:
 800c450:	291f      	cmp	r1, #31
 800c452:	b538      	push	{r3, r4, r5, lr}
 800c454:	4605      	mov	r5, r0
 800c456:	460c      	mov	r4, r1
 800c458:	d904      	bls.n	800c464 <_raise_r+0x14>
 800c45a:	2316      	movs	r3, #22
 800c45c:	6003      	str	r3, [r0, #0]
 800c45e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c462:	bd38      	pop	{r3, r4, r5, pc}
 800c464:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c466:	b112      	cbz	r2, 800c46e <_raise_r+0x1e>
 800c468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c46c:	b94b      	cbnz	r3, 800c482 <_raise_r+0x32>
 800c46e:	4628      	mov	r0, r5
 800c470:	f000 f842 	bl	800c4f8 <_getpid_r>
 800c474:	4622      	mov	r2, r4
 800c476:	4601      	mov	r1, r0
 800c478:	4628      	mov	r0, r5
 800c47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c47e:	f000 b829 	b.w	800c4d4 <_kill_r>
 800c482:	2b01      	cmp	r3, #1
 800c484:	d00a      	beq.n	800c49c <_raise_r+0x4c>
 800c486:	1c59      	adds	r1, r3, #1
 800c488:	d103      	bne.n	800c492 <_raise_r+0x42>
 800c48a:	2316      	movs	r3, #22
 800c48c:	6003      	str	r3, [r0, #0]
 800c48e:	2001      	movs	r0, #1
 800c490:	e7e7      	b.n	800c462 <_raise_r+0x12>
 800c492:	2100      	movs	r1, #0
 800c494:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c498:	4620      	mov	r0, r4
 800c49a:	4798      	blx	r3
 800c49c:	2000      	movs	r0, #0
 800c49e:	e7e0      	b.n	800c462 <_raise_r+0x12>

0800c4a0 <raise>:
 800c4a0:	4b02      	ldr	r3, [pc, #8]	@ (800c4ac <raise+0xc>)
 800c4a2:	4601      	mov	r1, r0
 800c4a4:	6818      	ldr	r0, [r3, #0]
 800c4a6:	f7ff bfd3 	b.w	800c450 <_raise_r>
 800c4aa:	bf00      	nop
 800c4ac:	000000cc 	.word	0x000000cc

0800c4b0 <_read_r>:
 800c4b0:	b538      	push	{r3, r4, r5, lr}
 800c4b2:	4d07      	ldr	r5, [pc, #28]	@ (800c4d0 <_read_r+0x20>)
 800c4b4:	4604      	mov	r4, r0
 800c4b6:	4608      	mov	r0, r1
 800c4b8:	4611      	mov	r1, r2
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	602a      	str	r2, [r5, #0]
 800c4be:	461a      	mov	r2, r3
 800c4c0:	f7f4 feb9 	bl	8001236 <_read>
 800c4c4:	1c43      	adds	r3, r0, #1
 800c4c6:	d102      	bne.n	800c4ce <_read_r+0x1e>
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	b103      	cbz	r3, 800c4ce <_read_r+0x1e>
 800c4cc:	6023      	str	r3, [r4, #0]
 800c4ce:	bd38      	pop	{r3, r4, r5, pc}
 800c4d0:	000009e4 	.word	0x000009e4

0800c4d4 <_kill_r>:
 800c4d4:	b538      	push	{r3, r4, r5, lr}
 800c4d6:	4d07      	ldr	r5, [pc, #28]	@ (800c4f4 <_kill_r+0x20>)
 800c4d8:	2300      	movs	r3, #0
 800c4da:	4604      	mov	r4, r0
 800c4dc:	4608      	mov	r0, r1
 800c4de:	4611      	mov	r1, r2
 800c4e0:	602b      	str	r3, [r5, #0]
 800c4e2:	f7f4 fe8d 	bl	8001200 <_kill>
 800c4e6:	1c43      	adds	r3, r0, #1
 800c4e8:	d102      	bne.n	800c4f0 <_kill_r+0x1c>
 800c4ea:	682b      	ldr	r3, [r5, #0]
 800c4ec:	b103      	cbz	r3, 800c4f0 <_kill_r+0x1c>
 800c4ee:	6023      	str	r3, [r4, #0]
 800c4f0:	bd38      	pop	{r3, r4, r5, pc}
 800c4f2:	bf00      	nop
 800c4f4:	000009e4 	.word	0x000009e4

0800c4f8 <_getpid_r>:
 800c4f8:	f7f4 be7a 	b.w	80011f0 <_getpid>

0800c4fc <_write_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4d07      	ldr	r5, [pc, #28]	@ (800c51c <_write_r+0x20>)
 800c500:	4604      	mov	r4, r0
 800c502:	4608      	mov	r0, r1
 800c504:	4611      	mov	r1, r2
 800c506:	2200      	movs	r2, #0
 800c508:	602a      	str	r2, [r5, #0]
 800c50a:	461a      	mov	r2, r3
 800c50c:	f7f4 feb0 	bl	8001270 <_write>
 800c510:	1c43      	adds	r3, r0, #1
 800c512:	d102      	bne.n	800c51a <_write_r+0x1e>
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	b103      	cbz	r3, 800c51a <_write_r+0x1e>
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	bd38      	pop	{r3, r4, r5, pc}
 800c51c:	000009e4 	.word	0x000009e4

0800c520 <_init>:
 800c520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c522:	bf00      	nop
 800c524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c526:	bc08      	pop	{r3}
 800c528:	469e      	mov	lr, r3
 800c52a:	4770      	bx	lr

0800c52c <_fini>:
 800c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52e:	bf00      	nop
 800c530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c532:	bc08      	pop	{r3}
 800c534:	469e      	mov	lr, r3
 800c536:	4770      	bx	lr
