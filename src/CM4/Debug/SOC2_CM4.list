
SOC2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b41c  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  0810b6bc  0810b6bc  0000c6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810b9e0  0810b9e0  0000c9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810b9e8  0810b9e8  0000c9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810b9ec  0810b9ec  0000c9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000118  10000000  0810b9f0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RAM_D3       000001a4  10000118  0810bb08  0000d118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000488  100002bc  0810bcac  0000d2bc  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  10000744  0810bcac  0000d744  2**0
                  ALLOC
 10 .openamp_section 0000008c  38000000  0810bcac  0000e000  2**2
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d2bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002039a  00000000  00000000  0000d2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ca1  00000000  00000000  0002d686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  00032328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001198  00000000  00000000  00033a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000464eb  00000000  00000000  00034c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021230  00000000  00000000  0007b10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b3317  00000000  00000000  0009c33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0024f652  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000693c  00000000  00000000  0024f698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00255fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100002bc 	.word	0x100002bc
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810b6a4 	.word	0x0810b6a4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100002c0 	.word	0x100002c0
 81002dc:	0810b6a4 	.word	0x0810b6a4

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr
	...

08100300 <memchr>:
 8100300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8100304:	2a10      	cmp	r2, #16
 8100306:	db2b      	blt.n	8100360 <memchr+0x60>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	d008      	beq.n	8100320 <memchr+0x20>
 810030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100312:	3a01      	subs	r2, #1
 8100314:	428b      	cmp	r3, r1
 8100316:	d02d      	beq.n	8100374 <memchr+0x74>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	b342      	cbz	r2, 8100370 <memchr+0x70>
 810031e:	d1f6      	bne.n	810030e <memchr+0xe>
 8100320:	b4f0      	push	{r4, r5, r6, r7}
 8100322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810032a:	f022 0407 	bic.w	r4, r2, #7
 810032e:	f07f 0700 	mvns.w	r7, #0
 8100332:	2300      	movs	r3, #0
 8100334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100338:	3c08      	subs	r4, #8
 810033a:	ea85 0501 	eor.w	r5, r5, r1
 810033e:	ea86 0601 	eor.w	r6, r6, r1
 8100342:	fa85 f547 	uadd8	r5, r5, r7
 8100346:	faa3 f587 	sel	r5, r3, r7
 810034a:	fa86 f647 	uadd8	r6, r6, r7
 810034e:	faa5 f687 	sel	r6, r5, r7
 8100352:	b98e      	cbnz	r6, 8100378 <memchr+0x78>
 8100354:	d1ee      	bne.n	8100334 <memchr+0x34>
 8100356:	bcf0      	pop	{r4, r5, r6, r7}
 8100358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810035c:	f002 0207 	and.w	r2, r2, #7
 8100360:	b132      	cbz	r2, 8100370 <memchr+0x70>
 8100362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100366:	3a01      	subs	r2, #1
 8100368:	ea83 0301 	eor.w	r3, r3, r1
 810036c:	b113      	cbz	r3, 8100374 <memchr+0x74>
 810036e:	d1f8      	bne.n	8100362 <memchr+0x62>
 8100370:	2000      	movs	r0, #0
 8100372:	4770      	bx	lr
 8100374:	3801      	subs	r0, #1
 8100376:	4770      	bx	lr
 8100378:	2d00      	cmp	r5, #0
 810037a:	bf06      	itte	eq
 810037c:	4635      	moveq	r5, r6
 810037e:	3803      	subeq	r0, #3
 8100380:	3807      	subne	r0, #7
 8100382:	f015 0f01 	tst.w	r5, #1
 8100386:	d107      	bne.n	8100398 <memchr+0x98>
 8100388:	3001      	adds	r0, #1
 810038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810038e:	bf02      	ittt	eq
 8100390:	3001      	addeq	r0, #1
 8100392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100396:	3001      	addeq	r0, #1
 8100398:	bcf0      	pop	{r4, r5, r6, r7}
 810039a:	3801      	subs	r0, #1
 810039c:	4770      	bx	lr
 810039e:	bf00      	nop

081003a0 <__aeabi_uldivmod>:
 81003a0:	b953      	cbnz	r3, 81003b8 <__aeabi_uldivmod+0x18>
 81003a2:	b94a      	cbnz	r2, 81003b8 <__aeabi_uldivmod+0x18>
 81003a4:	2900      	cmp	r1, #0
 81003a6:	bf08      	it	eq
 81003a8:	2800      	cmpeq	r0, #0
 81003aa:	bf1c      	itt	ne
 81003ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 81003b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 81003b4:	f000 b96a 	b.w	810068c <__aeabi_idiv0>
 81003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003c0:	f000 f806 	bl	81003d0 <__udivmoddi4>
 81003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003cc:	b004      	add	sp, #16
 81003ce:	4770      	bx	lr

081003d0 <__udivmoddi4>:
 81003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003d4:	9d08      	ldr	r5, [sp, #32]
 81003d6:	460c      	mov	r4, r1
 81003d8:	2b00      	cmp	r3, #0
 81003da:	d14e      	bne.n	810047a <__udivmoddi4+0xaa>
 81003dc:	4694      	mov	ip, r2
 81003de:	458c      	cmp	ip, r1
 81003e0:	4686      	mov	lr, r0
 81003e2:	fab2 f282 	clz	r2, r2
 81003e6:	d962      	bls.n	81004ae <__udivmoddi4+0xde>
 81003e8:	b14a      	cbz	r2, 81003fe <__udivmoddi4+0x2e>
 81003ea:	f1c2 0320 	rsb	r3, r2, #32
 81003ee:	4091      	lsls	r1, r2
 81003f0:	fa20 f303 	lsr.w	r3, r0, r3
 81003f4:	fa0c fc02 	lsl.w	ip, ip, r2
 81003f8:	4319      	orrs	r1, r3
 81003fa:	fa00 fe02 	lsl.w	lr, r0, r2
 81003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100402:	fa1f f68c 	uxth.w	r6, ip
 8100406:	fbb1 f4f7 	udiv	r4, r1, r7
 810040a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 810040e:	fb07 1114 	mls	r1, r7, r4, r1
 8100412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100416:	fb04 f106 	mul.w	r1, r4, r6
 810041a:	4299      	cmp	r1, r3
 810041c:	d90a      	bls.n	8100434 <__udivmoddi4+0x64>
 810041e:	eb1c 0303 	adds.w	r3, ip, r3
 8100422:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8100426:	f080 8112 	bcs.w	810064e <__udivmoddi4+0x27e>
 810042a:	4299      	cmp	r1, r3
 810042c:	f240 810f 	bls.w	810064e <__udivmoddi4+0x27e>
 8100430:	3c02      	subs	r4, #2
 8100432:	4463      	add	r3, ip
 8100434:	1a59      	subs	r1, r3, r1
 8100436:	fa1f f38e 	uxth.w	r3, lr
 810043a:	fbb1 f0f7 	udiv	r0, r1, r7
 810043e:	fb07 1110 	mls	r1, r7, r0, r1
 8100442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100446:	fb00 f606 	mul.w	r6, r0, r6
 810044a:	429e      	cmp	r6, r3
 810044c:	d90a      	bls.n	8100464 <__udivmoddi4+0x94>
 810044e:	eb1c 0303 	adds.w	r3, ip, r3
 8100452:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8100456:	f080 80fc 	bcs.w	8100652 <__udivmoddi4+0x282>
 810045a:	429e      	cmp	r6, r3
 810045c:	f240 80f9 	bls.w	8100652 <__udivmoddi4+0x282>
 8100460:	4463      	add	r3, ip
 8100462:	3802      	subs	r0, #2
 8100464:	1b9b      	subs	r3, r3, r6
 8100466:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 810046a:	2100      	movs	r1, #0
 810046c:	b11d      	cbz	r5, 8100476 <__udivmoddi4+0xa6>
 810046e:	40d3      	lsrs	r3, r2
 8100470:	2200      	movs	r2, #0
 8100472:	e9c5 3200 	strd	r3, r2, [r5]
 8100476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810047a:	428b      	cmp	r3, r1
 810047c:	d905      	bls.n	810048a <__udivmoddi4+0xba>
 810047e:	b10d      	cbz	r5, 8100484 <__udivmoddi4+0xb4>
 8100480:	e9c5 0100 	strd	r0, r1, [r5]
 8100484:	2100      	movs	r1, #0
 8100486:	4608      	mov	r0, r1
 8100488:	e7f5      	b.n	8100476 <__udivmoddi4+0xa6>
 810048a:	fab3 f183 	clz	r1, r3
 810048e:	2900      	cmp	r1, #0
 8100490:	d146      	bne.n	8100520 <__udivmoddi4+0x150>
 8100492:	42a3      	cmp	r3, r4
 8100494:	d302      	bcc.n	810049c <__udivmoddi4+0xcc>
 8100496:	4290      	cmp	r0, r2
 8100498:	f0c0 80f0 	bcc.w	810067c <__udivmoddi4+0x2ac>
 810049c:	1a86      	subs	r6, r0, r2
 810049e:	eb64 0303 	sbc.w	r3, r4, r3
 81004a2:	2001      	movs	r0, #1
 81004a4:	2d00      	cmp	r5, #0
 81004a6:	d0e6      	beq.n	8100476 <__udivmoddi4+0xa6>
 81004a8:	e9c5 6300 	strd	r6, r3, [r5]
 81004ac:	e7e3      	b.n	8100476 <__udivmoddi4+0xa6>
 81004ae:	2a00      	cmp	r2, #0
 81004b0:	f040 8090 	bne.w	81005d4 <__udivmoddi4+0x204>
 81004b4:	eba1 040c 	sub.w	r4, r1, ip
 81004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81004bc:	fa1f f78c 	uxth.w	r7, ip
 81004c0:	2101      	movs	r1, #1
 81004c2:	fbb4 f6f8 	udiv	r6, r4, r8
 81004c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 81004ca:	fb08 4416 	mls	r4, r8, r6, r4
 81004ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 81004d2:	fb07 f006 	mul.w	r0, r7, r6
 81004d6:	4298      	cmp	r0, r3
 81004d8:	d908      	bls.n	81004ec <__udivmoddi4+0x11c>
 81004da:	eb1c 0303 	adds.w	r3, ip, r3
 81004de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 81004e2:	d202      	bcs.n	81004ea <__udivmoddi4+0x11a>
 81004e4:	4298      	cmp	r0, r3
 81004e6:	f200 80cd 	bhi.w	8100684 <__udivmoddi4+0x2b4>
 81004ea:	4626      	mov	r6, r4
 81004ec:	1a1c      	subs	r4, r3, r0
 81004ee:	fa1f f38e 	uxth.w	r3, lr
 81004f2:	fbb4 f0f8 	udiv	r0, r4, r8
 81004f6:	fb08 4410 	mls	r4, r8, r0, r4
 81004fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 81004fe:	fb00 f707 	mul.w	r7, r0, r7
 8100502:	429f      	cmp	r7, r3
 8100504:	d908      	bls.n	8100518 <__udivmoddi4+0x148>
 8100506:	eb1c 0303 	adds.w	r3, ip, r3
 810050a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 810050e:	d202      	bcs.n	8100516 <__udivmoddi4+0x146>
 8100510:	429f      	cmp	r7, r3
 8100512:	f200 80b0 	bhi.w	8100676 <__udivmoddi4+0x2a6>
 8100516:	4620      	mov	r0, r4
 8100518:	1bdb      	subs	r3, r3, r7
 810051a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 810051e:	e7a5      	b.n	810046c <__udivmoddi4+0x9c>
 8100520:	f1c1 0620 	rsb	r6, r1, #32
 8100524:	408b      	lsls	r3, r1
 8100526:	fa22 f706 	lsr.w	r7, r2, r6
 810052a:	431f      	orrs	r7, r3
 810052c:	fa20 fc06 	lsr.w	ip, r0, r6
 8100530:	fa04 f301 	lsl.w	r3, r4, r1
 8100534:	ea43 030c 	orr.w	r3, r3, ip
 8100538:	40f4      	lsrs	r4, r6
 810053a:	fa00 f801 	lsl.w	r8, r0, r1
 810053e:	0c38      	lsrs	r0, r7, #16
 8100540:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100544:	fbb4 fef0 	udiv	lr, r4, r0
 8100548:	fa1f fc87 	uxth.w	ip, r7
 810054c:	fb00 441e 	mls	r4, r0, lr, r4
 8100550:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100554:	fb0e f90c 	mul.w	r9, lr, ip
 8100558:	45a1      	cmp	r9, r4
 810055a:	fa02 f201 	lsl.w	r2, r2, r1
 810055e:	d90a      	bls.n	8100576 <__udivmoddi4+0x1a6>
 8100560:	193c      	adds	r4, r7, r4
 8100562:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8100566:	f080 8084 	bcs.w	8100672 <__udivmoddi4+0x2a2>
 810056a:	45a1      	cmp	r9, r4
 810056c:	f240 8081 	bls.w	8100672 <__udivmoddi4+0x2a2>
 8100570:	f1ae 0e02 	sub.w	lr, lr, #2
 8100574:	443c      	add	r4, r7
 8100576:	eba4 0409 	sub.w	r4, r4, r9
 810057a:	fa1f f983 	uxth.w	r9, r3
 810057e:	fbb4 f3f0 	udiv	r3, r4, r0
 8100582:	fb00 4413 	mls	r4, r0, r3, r4
 8100586:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810058a:	fb03 fc0c 	mul.w	ip, r3, ip
 810058e:	45a4      	cmp	ip, r4
 8100590:	d907      	bls.n	81005a2 <__udivmoddi4+0x1d2>
 8100592:	193c      	adds	r4, r7, r4
 8100594:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8100598:	d267      	bcs.n	810066a <__udivmoddi4+0x29a>
 810059a:	45a4      	cmp	ip, r4
 810059c:	d965      	bls.n	810066a <__udivmoddi4+0x29a>
 810059e:	3b02      	subs	r3, #2
 81005a0:	443c      	add	r4, r7
 81005a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 81005a6:	fba0 9302 	umull	r9, r3, r0, r2
 81005aa:	eba4 040c 	sub.w	r4, r4, ip
 81005ae:	429c      	cmp	r4, r3
 81005b0:	46ce      	mov	lr, r9
 81005b2:	469c      	mov	ip, r3
 81005b4:	d351      	bcc.n	810065a <__udivmoddi4+0x28a>
 81005b6:	d04e      	beq.n	8100656 <__udivmoddi4+0x286>
 81005b8:	b155      	cbz	r5, 81005d0 <__udivmoddi4+0x200>
 81005ba:	ebb8 030e 	subs.w	r3, r8, lr
 81005be:	eb64 040c 	sbc.w	r4, r4, ip
 81005c2:	fa04 f606 	lsl.w	r6, r4, r6
 81005c6:	40cb      	lsrs	r3, r1
 81005c8:	431e      	orrs	r6, r3
 81005ca:	40cc      	lsrs	r4, r1
 81005cc:	e9c5 6400 	strd	r6, r4, [r5]
 81005d0:	2100      	movs	r1, #0
 81005d2:	e750      	b.n	8100476 <__udivmoddi4+0xa6>
 81005d4:	f1c2 0320 	rsb	r3, r2, #32
 81005d8:	fa20 f103 	lsr.w	r1, r0, r3
 81005dc:	fa0c fc02 	lsl.w	ip, ip, r2
 81005e0:	fa24 f303 	lsr.w	r3, r4, r3
 81005e4:	4094      	lsls	r4, r2
 81005e6:	430c      	orrs	r4, r1
 81005e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81005ec:	fa00 fe02 	lsl.w	lr, r0, r2
 81005f0:	fa1f f78c 	uxth.w	r7, ip
 81005f4:	fbb3 f0f8 	udiv	r0, r3, r8
 81005f8:	fb08 3110 	mls	r1, r8, r0, r3
 81005fc:	0c23      	lsrs	r3, r4, #16
 81005fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100602:	fb00 f107 	mul.w	r1, r0, r7
 8100606:	4299      	cmp	r1, r3
 8100608:	d908      	bls.n	810061c <__udivmoddi4+0x24c>
 810060a:	eb1c 0303 	adds.w	r3, ip, r3
 810060e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8100612:	d22c      	bcs.n	810066e <__udivmoddi4+0x29e>
 8100614:	4299      	cmp	r1, r3
 8100616:	d92a      	bls.n	810066e <__udivmoddi4+0x29e>
 8100618:	3802      	subs	r0, #2
 810061a:	4463      	add	r3, ip
 810061c:	1a5b      	subs	r3, r3, r1
 810061e:	b2a4      	uxth	r4, r4
 8100620:	fbb3 f1f8 	udiv	r1, r3, r8
 8100624:	fb08 3311 	mls	r3, r8, r1, r3
 8100628:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 810062c:	fb01 f307 	mul.w	r3, r1, r7
 8100630:	42a3      	cmp	r3, r4
 8100632:	d908      	bls.n	8100646 <__udivmoddi4+0x276>
 8100634:	eb1c 0404 	adds.w	r4, ip, r4
 8100638:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 810063c:	d213      	bcs.n	8100666 <__udivmoddi4+0x296>
 810063e:	42a3      	cmp	r3, r4
 8100640:	d911      	bls.n	8100666 <__udivmoddi4+0x296>
 8100642:	3902      	subs	r1, #2
 8100644:	4464      	add	r4, ip
 8100646:	1ae4      	subs	r4, r4, r3
 8100648:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810064c:	e739      	b.n	81004c2 <__udivmoddi4+0xf2>
 810064e:	4604      	mov	r4, r0
 8100650:	e6f0      	b.n	8100434 <__udivmoddi4+0x64>
 8100652:	4608      	mov	r0, r1
 8100654:	e706      	b.n	8100464 <__udivmoddi4+0x94>
 8100656:	45c8      	cmp	r8, r9
 8100658:	d2ae      	bcs.n	81005b8 <__udivmoddi4+0x1e8>
 810065a:	ebb9 0e02 	subs.w	lr, r9, r2
 810065e:	eb63 0c07 	sbc.w	ip, r3, r7
 8100662:	3801      	subs	r0, #1
 8100664:	e7a8      	b.n	81005b8 <__udivmoddi4+0x1e8>
 8100666:	4631      	mov	r1, r6
 8100668:	e7ed      	b.n	8100646 <__udivmoddi4+0x276>
 810066a:	4603      	mov	r3, r0
 810066c:	e799      	b.n	81005a2 <__udivmoddi4+0x1d2>
 810066e:	4630      	mov	r0, r6
 8100670:	e7d4      	b.n	810061c <__udivmoddi4+0x24c>
 8100672:	46d6      	mov	lr, sl
 8100674:	e77f      	b.n	8100576 <__udivmoddi4+0x1a6>
 8100676:	4463      	add	r3, ip
 8100678:	3802      	subs	r0, #2
 810067a:	e74d      	b.n	8100518 <__udivmoddi4+0x148>
 810067c:	4606      	mov	r6, r0
 810067e:	4623      	mov	r3, r4
 8100680:	4608      	mov	r0, r1
 8100682:	e70f      	b.n	81004a4 <__udivmoddi4+0xd4>
 8100684:	3e02      	subs	r6, #2
 8100686:	4463      	add	r3, ip
 8100688:	e730      	b.n	81004ec <__udivmoddi4+0x11c>
 810068a:	bf00      	nop

0810068c <__aeabi_idiv0>:
 810068c:	4770      	bx	lr
 810068e:	bf00      	nop

08100690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100690:	b480      	push	{r7}
 8100692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100694:	4b09      	ldr	r3, [pc, #36]	@ (81006bc <SystemInit+0x2c>)
 8100696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810069a:	4a08      	ldr	r2, [pc, #32]	@ (81006bc <SystemInit+0x2c>)
 810069c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81006a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006a4:	4b05      	ldr	r3, [pc, #20]	@ (81006bc <SystemInit+0x2c>)
 81006a6:	691b      	ldr	r3, [r3, #16]
 81006a8:	4a04      	ldr	r2, [pc, #16]	@ (81006bc <SystemInit+0x2c>)
 81006aa:	f043 0310 	orr.w	r3, r3, #16
 81006ae:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81006b0:	bf00      	nop
 81006b2:	46bd      	mov	sp, r7
 81006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006b8:	4770      	bx	lr
 81006ba:	bf00      	nop
 81006bc:	e000ed00 	.word	0xe000ed00

081006c0 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 81006c0:	b580      	push	{r7, lr}
 81006c2:	b086      	sub	sp, #24
 81006c4:	af02      	add	r7, sp, #8
 81006c6:	60f8      	str	r0, [r7, #12]
 81006c8:	60b9      	str	r1, [r7, #8]
 81006ca:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 81006cc:	68fb      	ldr	r3, [r7, #12]
 81006ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81006d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81006d4:	d101      	bne.n	81006da <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 81006d6:	4b09      	ldr	r3, [pc, #36]	@ (81006fc <rpmsg_send+0x3c>)
 81006d8:	e00c      	b.n	81006f4 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 81006da:	68fb      	ldr	r3, [r7, #12]
 81006dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 81006de:	68fb      	ldr	r3, [r7, #12]
 81006e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 81006e2:	2301      	movs	r3, #1
 81006e4:	9301      	str	r3, [sp, #4]
 81006e6:	687b      	ldr	r3, [r7, #4]
 81006e8:	9300      	str	r3, [sp, #0]
 81006ea:	68bb      	ldr	r3, [r7, #8]
 81006ec:	68f8      	ldr	r0, [r7, #12]
 81006ee:	f008 fb2d 	bl	8108d4c <rpmsg_send_offchannel_raw>
 81006f2:	4603      	mov	r3, r0
					 len, true);
}
 81006f4:	4618      	mov	r0, r3
 81006f6:	3710      	adds	r7, #16
 81006f8:	46bd      	mov	sp, r7
 81006fa:	bd80      	pop	{r7, pc}
 81006fc:	fffff829 	.word	0xfffff829

08100700 <rpmsg_recv_callback>:
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data, size_t len, uint32_t src, void *priv)
{
 8100700:	b480      	push	{r7}
 8100702:	b085      	sub	sp, #20
 8100704:	af00      	add	r7, sp, #0
 8100706:	60f8      	str	r0, [r7, #12]
 8100708:	60b9      	str	r1, [r7, #8]
 810070a:	607a      	str	r2, [r7, #4]
 810070c:	603b      	str	r3, [r7, #0]
  received_data = (char *) data;
 810070e:	68bb      	ldr	r3, [r7, #8]
 8100710:	b2da      	uxtb	r2, r3
 8100712:	4b06      	ldr	r3, [pc, #24]	@ (810072c <rpmsg_recv_callback+0x2c>)
 8100714:	701a      	strb	r2, [r3, #0]
  message_received=1;
 8100716:	4b06      	ldr	r3, [pc, #24]	@ (8100730 <rpmsg_recv_callback+0x30>)
 8100718:	2201      	movs	r2, #1
 810071a:	601a      	str	r2, [r3, #0]

  return 0;
 810071c:	2300      	movs	r3, #0
}
 810071e:	4618      	mov	r0, r3
 8100720:	3714      	adds	r7, #20
 8100722:	46bd      	mov	sp, r7
 8100724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100728:	4770      	bx	lr
 810072a:	bf00      	nop
 810072c:	10000444 	.word	0x10000444
 8100730:	10000440 	.word	0x10000440

08100734 <receive_message>:

unsigned int receive_message(void)
{
 8100734:	b580      	push	{r7, lr}
 8100736:	af00      	add	r7, sp, #0
  while (message_received == 0)
 8100738:	e001      	b.n	810073e <receive_message+0xa>
  {
    OPENAMP_check_for_message();
 810073a:	f009 fd97 	bl	810a26c <OPENAMP_check_for_message>
  while (message_received == 0)
 810073e:	4b08      	ldr	r3, [pc, #32]	@ (8100760 <receive_message+0x2c>)
 8100740:	681b      	ldr	r3, [r3, #0]
 8100742:	2b00      	cmp	r3, #0
 8100744:	d0f9      	beq.n	810073a <receive_message+0x6>
  }
  message_received = 0;
 8100746:	4b06      	ldr	r3, [pc, #24]	@ (8100760 <receive_message+0x2c>)
 8100748:	2200      	movs	r2, #0
 810074a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, 1);
 810074c:	2201      	movs	r2, #1
 810074e:	2108      	movs	r1, #8
 8100750:	4804      	ldr	r0, [pc, #16]	@ (8100764 <receive_message+0x30>)
 8100752:	f003 fa07 	bl	8103b64 <HAL_GPIO_WritePin>
//  HAL_Delay(2000);

  return received_data;
 8100756:	4b04      	ldr	r3, [pc, #16]	@ (8100768 <receive_message+0x34>)
 8100758:	781b      	ldrb	r3, [r3, #0]
 810075a:	b2db      	uxtb	r3, r3
}
 810075c:	4618      	mov	r0, r3
 810075e:	bd80      	pop	{r7, pc}
 8100760:	10000440 	.word	0x10000440
 8100764:	58022800 	.word	0x58022800
 8100768:	10000444 	.word	0x10000444

0810076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810076c:	b580      	push	{r7, lr}
 810076e:	b088      	sub	sp, #32
 8100770:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	int status = 0;
 8100772:	2300      	movs	r3, #0
 8100774:	60fb      	str	r3, [r7, #12]
	int counter = 0;
 8100776:	2300      	movs	r3, #0
 8100778:	617b      	str	r3, [r7, #20]

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	  /*HW semaphore Clock enable*/
	  __HAL_RCC_HSEM_CLK_ENABLE();
 810077a:	4b69      	ldr	r3, [pc, #420]	@ (8100920 <main+0x1b4>)
 810077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100780:	4a67      	ldr	r2, [pc, #412]	@ (8100920 <main+0x1b4>)
 8100782:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100786:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810078a:	4b65      	ldr	r3, [pc, #404]	@ (8100920 <main+0x1b4>)
 810078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100794:	603b      	str	r3, [r7, #0]
 8100796:	683b      	ldr	r3, [r7, #0]
	  /* Activate HSEM notification for Cortex-M4*/
	  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100798:	2001      	movs	r0, #1
 810079a:	f003 fa2b 	bl	8103bf4 <HAL_HSEM_ActivateNotification>
	  /*
	  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
	  perform system initialization (system clock config, external memory configuration.. )
	  */
	  HAL_PWREx_ClearPendingEvent();
 810079e:	f003 facf 	bl	8103d40 <HAL_PWREx_ClearPendingEvent>
	  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81007a2:	2201      	movs	r2, #1
 81007a4:	2102      	movs	r1, #2
 81007a6:	2000      	movs	r0, #0
 81007a8:	f003 fa50 	bl	8103c4c <HAL_PWREx_EnterSTOPMode>
	  /* Clear HSEM flag */
	  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81007ac:	4b5d      	ldr	r3, [pc, #372]	@ (8100924 <main+0x1b8>)
 81007ae:	681b      	ldr	r3, [r3, #0]
 81007b0:	091b      	lsrs	r3, r3, #4
 81007b2:	f003 030f 	and.w	r3, r3, #15
 81007b6:	2b07      	cmp	r3, #7
 81007b8:	d108      	bne.n	81007cc <main+0x60>
 81007ba:	4b5b      	ldr	r3, [pc, #364]	@ (8100928 <main+0x1bc>)
 81007bc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81007c0:	4a59      	ldr	r2, [pc, #356]	@ (8100928 <main+0x1bc>)
 81007c2:	f043 0301 	orr.w	r3, r3, #1
 81007c6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81007ca:	e007      	b.n	81007dc <main+0x70>
 81007cc:	4b56      	ldr	r3, [pc, #344]	@ (8100928 <main+0x1bc>)
 81007ce:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81007d2:	4a55      	ldr	r2, [pc, #340]	@ (8100928 <main+0x1bc>)
 81007d4:	f043 0301 	orr.w	r3, r3, #1
 81007d8:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81007dc:	f000 fd64 	bl	81012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Resource Manager Utility initialisation ---------------------------------*/
  MX_RESMGR_UTILITY_Init();
 81007e0:	f000 f984 	bl	8100aec <MX_RESMGR_UTILITY_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81007e4:	f000 f938 	bl	8100a58 <MX_GPIO_Init>
  MX_ADC1_Init();
 81007e8:	f000 f8b8 	bl	810095c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	/* COM Pre-Initialization*/
	COM_Init.BaudRate = 115200;
 81007ec:	4b4f      	ldr	r3, [pc, #316]	@ (810092c <main+0x1c0>)
 81007ee:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81007f2:	601a      	str	r2, [r3, #0]
	COM_Init.WordLength = COM_WORDLENGTH_8B;
 81007f4:	4b4d      	ldr	r3, [pc, #308]	@ (810092c <main+0x1c0>)
 81007f6:	2200      	movs	r2, #0
 81007f8:	605a      	str	r2, [r3, #4]
	COM_Init.StopBits = COM_STOPBITS_1;
 81007fa:	4b4c      	ldr	r3, [pc, #304]	@ (810092c <main+0x1c0>)
 81007fc:	2200      	movs	r2, #0
 81007fe:	811a      	strh	r2, [r3, #8]
	COM_Init.Parity = COM_PARITY_NONE;
 8100800:	4b4a      	ldr	r3, [pc, #296]	@ (810092c <main+0x1c0>)
 8100802:	2200      	movs	r2, #0
 8100804:	815a      	strh	r2, [r3, #10]
	COM_Init.HwFlowCtl = COM_HWCONTROL_NONE;
 8100806:	4b49      	ldr	r3, [pc, #292]	@ (810092c <main+0x1c0>)
 8100808:	2200      	movs	r2, #0
 810080a:	819a      	strh	r2, [r3, #12]

    /* USER CODE BEGIN 3 */

  /* Inilitize the mailbox use notify the other core on new message */
      MAILBOX_Init();
 810080c:	f009 fb78 	bl	8109f00 <MAILBOX_Init>

  /* Inilitize OpenAmp and libmetal libraries */
  if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL)!= HAL_OK)
 8100810:	2100      	movs	r1, #0
 8100812:	2001      	movs	r0, #1
 8100814:	f009 fc76 	bl	810a104 <MX_OPENAMP_Init>
 8100818:	4603      	mov	r3, r0
 810081a:	2b00      	cmp	r3, #0
 810081c:	d001      	beq.n	8100822 <main+0xb6>
        Error_Handler();
 810081e:	f000 f95f 	bl	8100ae0 <Error_Handler>

  /* create a endpoint for rmpsg communication */
  status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY, rpmsg_recv_callback, NULL);
 8100822:	2300      	movs	r3, #0
 8100824:	9300      	str	r3, [sp, #0]
 8100826:	4b42      	ldr	r3, [pc, #264]	@ (8100930 <main+0x1c4>)
 8100828:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810082c:	4941      	ldr	r1, [pc, #260]	@ (8100934 <main+0x1c8>)
 810082e:	4842      	ldr	r0, [pc, #264]	@ (8100938 <main+0x1cc>)
 8100830:	f009 fcfe 	bl	810a230 <OPENAMP_create_endpoint>
 8100834:	60f8      	str	r0, [r7, #12]
  if (status < 0) {
 8100836:	68fb      	ldr	r3, [r7, #12]
 8100838:	2b00      	cmp	r3, #0
 810083a:	da23      	bge.n	8100884 <main+0x118>
	  Error_Handler();
 810083c:	f000 f950 	bl	8100ae0 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (index_buffer < ADCCONVERTEDVALUES_BUFFER_SIZE) {
 8100840:	e020      	b.n	8100884 <main+0x118>
	  		  HAL_ADC_Start(&hadc1);
 8100842:	483e      	ldr	r0, [pc, #248]	@ (810093c <main+0x1d0>)
 8100844:	f001 fa10 	bl	8101c68 <HAL_ADC_Start>
	  	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8100848:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 810084c:	483b      	ldr	r0, [pc, #236]	@ (810093c <main+0x1d0>)
 810084e:	f001 fb09 	bl	8101e64 <HAL_ADC_PollForConversion>
	  	  	  HAL_Delay(10);
 8100852:	200a      	movs	r0, #10
 8100854:	f000 fddc 	bl	8101410 <HAL_Delay>

	  	  	  // Read ADC data
	  	  	  uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 8100858:	4838      	ldr	r0, [pc, #224]	@ (810093c <main+0x1d0>)
 810085a:	f001 fbf7 	bl	810204c <HAL_ADC_GetValue>
 810085e:	4603      	mov	r3, r0
 8100860:	80fb      	strh	r3, [r7, #6]

	  	  	  // Save ADC value to buffer
	  	  	  ADCDualConvertedValues[index_buffer] = adc_value;
 8100862:	4b37      	ldr	r3, [pc, #220]	@ (8100940 <main+0x1d4>)
 8100864:	681b      	ldr	r3, [r3, #0]
 8100866:	4937      	ldr	r1, [pc, #220]	@ (8100944 <main+0x1d8>)
 8100868:	88fa      	ldrh	r2, [r7, #6]
 810086a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  	  	  HAL_Delay(10);
 810086e:	200a      	movs	r0, #10
 8100870:	f000 fdce 	bl	8101410 <HAL_Delay>
	  	  	  index_buffer++;
 8100874:	4b32      	ldr	r3, [pc, #200]	@ (8100940 <main+0x1d4>)
 8100876:	681b      	ldr	r3, [r3, #0]
 8100878:	3301      	adds	r3, #1
 810087a:	4a31      	ldr	r2, [pc, #196]	@ (8100940 <main+0x1d4>)
 810087c:	6013      	str	r3, [r2, #0]
	  	  	  HAL_ADC_Stop(&hadc1);
 810087e:	482f      	ldr	r0, [pc, #188]	@ (810093c <main+0x1d0>)
 8100880:	f001 fabc 	bl	8101dfc <HAL_ADC_Stop>
	  while (index_buffer < ADCCONVERTEDVALUES_BUFFER_SIZE) {
 8100884:	4b2e      	ldr	r3, [pc, #184]	@ (8100940 <main+0x1d4>)
 8100886:	681b      	ldr	r3, [r3, #0]
 8100888:	2b7f      	cmp	r3, #127	@ 0x7f
 810088a:	d9da      	bls.n	8100842 <main+0xd6>
	    }

	    index_buffer = 0;
 810088c:	4b2c      	ldr	r3, [pc, #176]	@ (8100940 <main+0x1d4>)
 810088e:	2200      	movs	r2, #0
 8100890:	601a      	str	r2, [r3, #0]
	    counter++;
 8100892:	697b      	ldr	r3, [r7, #20]
 8100894:	3301      	adds	r3, #1
 8100896:	617b      	str	r3, [r7, #20]
	    receive_message();
 8100898:	f7ff ff4c 	bl	8100734 <receive_message>
	    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_4, 0);
 810089c:	2200      	movs	r2, #0
 810089e:	2110      	movs	r1, #16
 81008a0:	4829      	ldr	r0, [pc, #164]	@ (8100948 <main+0x1dc>)
 81008a2:	f003 f95f 	bl	8103b64 <HAL_GPIO_WritePin>
	    HAL_Delay(1000);
 81008a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 81008aa:	f000 fdb1 	bl	8101410 <HAL_Delay>

	    BSP_COM_Init(COM1, &COM_Init);
 81008ae:	491f      	ldr	r1, [pc, #124]	@ (810092c <main+0x1c0>)
 81008b0:	2000      	movs	r0, #0
 81008b2:	f000 fbc1 	bl	8101038 <BSP_COM_Init>
	    int seconds = HAL_GetTick()/1000;
 81008b6:	f000 fd9f 	bl	81013f8 <HAL_GetTick>
 81008ba:	4603      	mov	r3, r0
 81008bc:	4a23      	ldr	r2, [pc, #140]	@ (810094c <main+0x1e0>)
 81008be:	fba2 2303 	umull	r2, r3, r2, r3
 81008c2:	099b      	lsrs	r3, r3, #6
 81008c4:	60bb      	str	r3, [r7, #8]

		printf("M4 writes to UART at time %d: The clear buffer %d is\n\r", seconds, counter);
 81008c6:	697a      	ldr	r2, [r7, #20]
 81008c8:	68b9      	ldr	r1, [r7, #8]
 81008ca:	4821      	ldr	r0, [pc, #132]	@ (8100950 <main+0x1e4>)
 81008cc:	f00a f854 	bl	810a978 <iprintf>
		for (int i=0; i< ADCCONVERTEDVALUES_BUFFER_SIZE; i++) {
 81008d0:	2300      	movs	r3, #0
 81008d2:	613b      	str	r3, [r7, #16]
 81008d4:	e00a      	b.n	81008ec <main+0x180>
					printf("%04x  ", ADCDualConvertedValues[i]);
 81008d6:	4a1b      	ldr	r2, [pc, #108]	@ (8100944 <main+0x1d8>)
 81008d8:	693b      	ldr	r3, [r7, #16]
 81008da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81008de:	4619      	mov	r1, r3
 81008e0:	481c      	ldr	r0, [pc, #112]	@ (8100954 <main+0x1e8>)
 81008e2:	f00a f849 	bl	810a978 <iprintf>
		for (int i=0; i< ADCCONVERTEDVALUES_BUFFER_SIZE; i++) {
 81008e6:	693b      	ldr	r3, [r7, #16]
 81008e8:	3301      	adds	r3, #1
 81008ea:	613b      	str	r3, [r7, #16]
 81008ec:	693b      	ldr	r3, [r7, #16]
 81008ee:	2b7f      	cmp	r3, #127	@ 0x7f
 81008f0:	d9f1      	bls.n	81008d6 <main+0x16a>
				}
		printf("\n\n");
 81008f2:	4819      	ldr	r0, [pc, #100]	@ (8100958 <main+0x1ec>)
 81008f4:	f00a f8a8 	bl	810aa48 <puts>
	    HAL_Delay(3000);
 81008f8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 81008fc:	f000 fd88 	bl	8101410 <HAL_Delay>
		BSP_COM_DeInit(COM1);
 8100900:	2000      	movs	r0, #0
 8100902:	f000 fbd9 	bl	81010b8 <BSP_COM_DeInit>


	    // send buffer data to M7
	    status = OPENAMP_send(&rp_endpoint, ADCDualConvertedValues, sizeof(ADCDualConvertedValues));
 8100906:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810090a:	490e      	ldr	r1, [pc, #56]	@ (8100944 <main+0x1d8>)
 810090c:	480a      	ldr	r0, [pc, #40]	@ (8100938 <main+0x1cc>)
 810090e:	f7ff fed7 	bl	81006c0 <rpmsg_send>
 8100912:	60f8      	str	r0, [r7, #12]
	    if (status < 0)
 8100914:	68fb      	ldr	r3, [r7, #12]
 8100916:	2b00      	cmp	r3, #0
 8100918:	da92      	bge.n	8100840 <main+0xd4>
	        {
	          Error_Handler();
 810091a:	f000 f8e1 	bl	8100ae0 <Error_Handler>
  {
 810091e:	e78f      	b.n	8100840 <main+0xd4>
 8100920:	58024400 	.word	0x58024400
 8100924:	e000ed00 	.word	0xe000ed00
 8100928:	58026400 	.word	0x58026400
 810092c:	10000488 	.word	0x10000488
 8100930:	08100701 	.word	0x08100701
 8100934:	0810b6bc 	.word	0x0810b6bc
 8100938:	10000448 	.word	0x10000448
 810093c:	100002d8 	.word	0x100002d8
 8100940:	1000033c 	.word	0x1000033c
 8100944:	10000340 	.word	0x10000340
 8100948:	58022800 	.word	0x58022800
 810094c:	10624dd3 	.word	0x10624dd3
 8100950:	0810b6cc 	.word	0x0810b6cc
 8100954:	0810b704 	.word	0x0810b704
 8100958:	0810b70c 	.word	0x0810b70c

0810095c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 810095c:	b580      	push	{r7, lr}
 810095e:	b08a      	sub	sp, #40	@ 0x28
 8100960:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_ADC1, RESMGR_FLAGS_ACCESS_NORMAL | \
 8100962:	2300      	movs	r3, #0
 8100964:	2200      	movs	r2, #0
 8100966:	2112      	movs	r1, #18
 8100968:	2000      	movs	r0, #0
 810096a:	f009 fd45 	bl	810a3f8 <ResMgr_Request>
  }
  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 810096e:	f107 031c 	add.w	r3, r7, #28
 8100972:	2200      	movs	r2, #0
 8100974:	601a      	str	r2, [r3, #0]
 8100976:	605a      	str	r2, [r3, #4]
 8100978:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 810097a:	463b      	mov	r3, r7
 810097c:	2200      	movs	r2, #0
 810097e:	601a      	str	r2, [r3, #0]
 8100980:	605a      	str	r2, [r3, #4]
 8100982:	609a      	str	r2, [r3, #8]
 8100984:	60da      	str	r2, [r3, #12]
 8100986:	611a      	str	r2, [r3, #16]
 8100988:	615a      	str	r2, [r3, #20]
 810098a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 810098c:	4b30      	ldr	r3, [pc, #192]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 810098e:	4a31      	ldr	r2, [pc, #196]	@ (8100a54 <MX_ADC1_Init+0xf8>)
 8100990:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8100992:	4b2f      	ldr	r3, [pc, #188]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 8100994:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8100998:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 810099a:	4b2d      	ldr	r3, [pc, #180]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 810099c:	2200      	movs	r2, #0
 810099e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81009a0:	4b2b      	ldr	r3, [pc, #172]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 81009a2:	2200      	movs	r2, #0
 81009a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81009a6:	4b2a      	ldr	r3, [pc, #168]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 81009a8:	2204      	movs	r2, #4
 81009aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81009ac:	4b28      	ldr	r3, [pc, #160]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 81009ae:	2200      	movs	r2, #0
 81009b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 81009b2:	4b27      	ldr	r3, [pc, #156]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 81009b4:	2201      	movs	r2, #1
 81009b6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 81009b8:	4b25      	ldr	r3, [pc, #148]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 81009ba:	2201      	movs	r2, #1
 81009bc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81009be:	4b24      	ldr	r3, [pc, #144]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 81009c0:	2200      	movs	r2, #0
 81009c2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81009c4:	4b22      	ldr	r3, [pc, #136]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 81009c6:	2200      	movs	r2, #0
 81009c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81009ca:	4b21      	ldr	r3, [pc, #132]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 81009cc:	2200      	movs	r2, #0
 81009ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81009d0:	4b1f      	ldr	r3, [pc, #124]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 81009d2:	2200      	movs	r2, #0
 81009d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81009d6:	4b1e      	ldr	r3, [pc, #120]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 81009d8:	2200      	movs	r2, #0
 81009da:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81009dc:	4b1c      	ldr	r3, [pc, #112]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 81009de:	2200      	movs	r2, #0
 81009e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81009e2:	4b1b      	ldr	r3, [pc, #108]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 81009e4:	2200      	movs	r2, #0
 81009e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81009ea:	4819      	ldr	r0, [pc, #100]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 81009ec:	f000 ff9a 	bl	8101924 <HAL_ADC_Init>
 81009f0:	4603      	mov	r3, r0
 81009f2:	2b00      	cmp	r3, #0
 81009f4:	d001      	beq.n	81009fa <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 81009f6:	f000 f873 	bl	8100ae0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81009fa:	2300      	movs	r3, #0
 81009fc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81009fe:	f107 031c 	add.w	r3, r7, #28
 8100a02:	4619      	mov	r1, r3
 8100a04:	4812      	ldr	r0, [pc, #72]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 8100a06:	f002 fbed 	bl	81031e4 <HAL_ADCEx_MultiModeConfigChannel>
 8100a0a:	4603      	mov	r3, r0
 8100a0c:	2b00      	cmp	r3, #0
 8100a0e:	d001      	beq.n	8100a14 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8100a10:	f000 f866 	bl	8100ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8100a14:	2301      	movs	r3, #1
 8100a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100a18:	2306      	movs	r3, #6
 8100a1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100a1c:	2300      	movs	r3, #0
 8100a1e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100a20:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8100a24:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100a26:	2304      	movs	r3, #4
 8100a28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8100a2a:	2300      	movs	r3, #0
 8100a2c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8100a2e:	2300      	movs	r3, #0
 8100a30:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8100a32:	463b      	mov	r3, r7
 8100a34:	4619      	mov	r1, r3
 8100a36:	4806      	ldr	r0, [pc, #24]	@ (8100a50 <MX_ADC1_Init+0xf4>)
 8100a38:	f001 fd6e 	bl	8102518 <HAL_ADC_ConfigChannel>
 8100a3c:	4603      	mov	r3, r0
 8100a3e:	2b00      	cmp	r3, #0
 8100a40:	d001      	beq.n	8100a46 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8100a42:	f000 f84d 	bl	8100ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8100a46:	bf00      	nop
 8100a48:	3728      	adds	r7, #40	@ 0x28
 8100a4a:	46bd      	mov	sp, r7
 8100a4c:	bd80      	pop	{r7, pc}
 8100a4e:	bf00      	nop
 8100a50:	100002d8 	.word	0x100002d8
 8100a54:	40022000 	.word	0x40022000

08100a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100a58:	b580      	push	{r7, lr}
 8100a5a:	b088      	sub	sp, #32
 8100a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100a5e:	f107 030c 	add.w	r3, r7, #12
 8100a62:	2200      	movs	r2, #0
 8100a64:	601a      	str	r2, [r3, #0]
 8100a66:	605a      	str	r2, [r3, #4]
 8100a68:	609a      	str	r2, [r3, #8]
 8100a6a:	60da      	str	r2, [r3, #12]
 8100a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8100a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8100ad8 <MX_GPIO_Init+0x80>)
 8100a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a74:	4a18      	ldr	r2, [pc, #96]	@ (8100ad8 <MX_GPIO_Init+0x80>)
 8100a76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8100a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100a7e:	4b16      	ldr	r3, [pc, #88]	@ (8100ad8 <MX_GPIO_Init+0x80>)
 8100a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8100a88:	60bb      	str	r3, [r7, #8]
 8100a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100a8c:	4b12      	ldr	r3, [pc, #72]	@ (8100ad8 <MX_GPIO_Init+0x80>)
 8100a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a92:	4a11      	ldr	r2, [pc, #68]	@ (8100ad8 <MX_GPIO_Init+0x80>)
 8100a94:	f043 0301 	orr.w	r3, r3, #1
 8100a98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8100ad8 <MX_GPIO_Init+0x80>)
 8100a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100aa2:	f003 0301 	and.w	r3, r3, #1
 8100aa6:	607b      	str	r3, [r7, #4]
 8100aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_4, GPIO_PIN_RESET);
 8100aaa:	2200      	movs	r2, #0
 8100aac:	2110      	movs	r1, #16
 8100aae:	480b      	ldr	r0, [pc, #44]	@ (8100adc <MX_GPIO_Init+0x84>)
 8100ab0:	f003 f858 	bl	8103b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PK4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8100ab4:	2310      	movs	r3, #16
 8100ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100ab8:	2301      	movs	r3, #1
 8100aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100abc:	2300      	movs	r3, #0
 8100abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100ac0:	2300      	movs	r3, #0
 8100ac2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8100ac4:	f107 030c 	add.w	r3, r7, #12
 8100ac8:	4619      	mov	r1, r3
 8100aca:	4804      	ldr	r0, [pc, #16]	@ (8100adc <MX_GPIO_Init+0x84>)
 8100acc:	f002 fd90 	bl	81035f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100ad0:	bf00      	nop
 8100ad2:	3720      	adds	r7, #32
 8100ad4:	46bd      	mov	sp, r7
 8100ad6:	bd80      	pop	{r7, pc}
 8100ad8:	58024400 	.word	0x58024400
 8100adc:	58022800 	.word	0x58022800

08100ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100ae0:	b480      	push	{r7}
 8100ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100ae4:	b672      	cpsid	i
}
 8100ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100ae8:	bf00      	nop
 8100aea:	e7fd      	b.n	8100ae8 <Error_Handler+0x8>

08100aec <MX_RESMGR_UTILITY_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* RESMGR_UTILITY init function */
void MX_RESMGR_UTILITY_Init(void)
{
 8100aec:	b580      	push	{r7, lr}
 8100aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  if (ResMgr_Init(MX_RESMGR_UTILITY_SendMsg, MX_RESMGR_UTILITY_Callback) != RESMGR_OK)
 8100af0:	4905      	ldr	r1, [pc, #20]	@ (8100b08 <MX_RESMGR_UTILITY_Init+0x1c>)
 8100af2:	4806      	ldr	r0, [pc, #24]	@ (8100b0c <MX_RESMGR_UTILITY_Init+0x20>)
 8100af4:	f009 fbe2 	bl	810a2bc <ResMgr_Init>
 8100af8:	4603      	mov	r3, r0
 8100afa:	2b00      	cmp	r3, #0
 8100afc:	d001      	beq.n	8100b02 <MX_RESMGR_UTILITY_Init+0x16>
  {
    Error_Handler();
 8100afe:	f7ff ffef 	bl	8100ae0 <Error_Handler>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8100b02:	bf00      	nop
 8100b04:	bd80      	pop	{r7, pc}
 8100b06:	bf00      	nop
 8100b08:	08100b5d 	.word	0x08100b5d
 8100b0c:	08100b11 	.word	0x08100b11

08100b10 <MX_RESMGR_UTILITY_SendMsg>:

/* Resource Manager send message function */
__weak void MX_RESMGR_UTILITY_SendMsg(uint32_t id, uint32_t msg)
{
 8100b10:	b480      	push	{r7}
 8100b12:	b083      	sub	sp, #12
 8100b14:	af00      	add	r7, sp, #0
 8100b16:	6078      	str	r0, [r7, #4]
 8100b18:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 4 */
    switch (msg)
 8100b1a:	683b      	ldr	r3, [r7, #0]
 8100b1c:	2b05      	cmp	r3, #5
 8100b1e:	d811      	bhi.n	8100b44 <MX_RESMGR_UTILITY_SendMsg+0x34>
 8100b20:	683b      	ldr	r3, [r7, #0]
 8100b22:	2b05      	cmp	r3, #5
 8100b24:	d811      	bhi.n	8100b4a <MX_RESMGR_UTILITY_SendMsg+0x3a>
 8100b26:	a201      	add	r2, pc, #4	@ (adr r2, 8100b2c <MX_RESMGR_UTILITY_SendMsg+0x1c>)
 8100b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100b2c:	08100b4b 	.word	0x08100b4b
 8100b30:	08100b4b 	.word	0x08100b4b
 8100b34:	08100b4b 	.word	0x08100b4b
 8100b38:	08100b4b 	.word	0x08100b4b
 8100b3c:	08100b4b 	.word	0x08100b4b
 8100b40:	08100b4b 	.word	0x08100b4b
 8100b44:	683b      	ldr	r3, [r7, #0]
 8100b46:	2bff      	cmp	r3, #255	@ 0xff
 8100b48:	d001      	beq.n	8100b4e <MX_RESMGR_UTILITY_SendMsg+0x3e>
        case RESMGR_MSG_REJECT:
            //User Code
            break;

        default:
            break;
 8100b4a:	bf00      	nop
 8100b4c:	e000      	b.n	8100b50 <MX_RESMGR_UTILITY_SendMsg+0x40>
            break;
 8100b4e:	bf00      	nop
    }
      /* USER CODE END 4 */

    return;
 8100b50:	bf00      	nop
}
 8100b52:	370c      	adds	r7, #12
 8100b54:	46bd      	mov	sp, r7
 8100b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b5a:	4770      	bx	lr

08100b5c <MX_RESMGR_UTILITY_Callback>:

/* Resource Manager callback function */
__weak void MX_RESMGR_UTILITY_Callback(uint32_t id, uint32_t msg)
{
 8100b5c:	b480      	push	{r7}
 8100b5e:	b083      	sub	sp, #12
 8100b60:	af00      	add	r7, sp, #0
 8100b62:	6078      	str	r0, [r7, #4]
 8100b64:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 5 */
    switch (msg)
 8100b66:	683b      	ldr	r3, [r7, #0]
 8100b68:	2b15      	cmp	r3, #21
 8100b6a:	d831      	bhi.n	8100bd0 <MX_RESMGR_UTILITY_Callback+0x74>
 8100b6c:	683b      	ldr	r3, [r7, #0]
 8100b6e:	2b15      	cmp	r3, #21
 8100b70:	d831      	bhi.n	8100bd6 <MX_RESMGR_UTILITY_Callback+0x7a>
 8100b72:	a201      	add	r2, pc, #4	@ (adr r2, 8100b78 <MX_RESMGR_UTILITY_Callback+0x1c>)
 8100b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100b78:	08100bd7 	.word	0x08100bd7
 8100b7c:	08100bd7 	.word	0x08100bd7
 8100b80:	08100bd7 	.word	0x08100bd7
 8100b84:	08100bd7 	.word	0x08100bd7
 8100b88:	08100bd7 	.word	0x08100bd7
 8100b8c:	08100bd7 	.word	0x08100bd7
 8100b90:	08100bd7 	.word	0x08100bd7
 8100b94:	08100bd7 	.word	0x08100bd7
 8100b98:	08100bd7 	.word	0x08100bd7
 8100b9c:	08100bd7 	.word	0x08100bd7
 8100ba0:	08100bd7 	.word	0x08100bd7
 8100ba4:	08100bd7 	.word	0x08100bd7
 8100ba8:	08100bd7 	.word	0x08100bd7
 8100bac:	08100bd7 	.word	0x08100bd7
 8100bb0:	08100bd7 	.word	0x08100bd7
 8100bb4:	08100bd7 	.word	0x08100bd7
 8100bb8:	08100bd7 	.word	0x08100bd7
 8100bbc:	08100bd7 	.word	0x08100bd7
 8100bc0:	08100bd7 	.word	0x08100bd7
 8100bc4:	08100bd7 	.word	0x08100bd7
 8100bc8:	08100bd7 	.word	0x08100bd7
 8100bcc:	08100bd7 	.word	0x08100bd7
 8100bd0:	683b      	ldr	r3, [r7, #0]
 8100bd2:	2bff      	cmp	r3, #255	@ 0xff
 8100bd4:	d001      	beq.n	8100bda <MX_RESMGR_UTILITY_Callback+0x7e>
        case RESMGR_MSG_REJECTED:
            //User Code
            break;

        default:
            break;
 8100bd6:	bf00      	nop
 8100bd8:	e000      	b.n	8100bdc <MX_RESMGR_UTILITY_Callback+0x80>
            break;
 8100bda:	bf00      	nop
    }
      /* USER CODE END 5 */

    return;
 8100bdc:	bf00      	nop
}
 8100bde:	370c      	adds	r7, #12
 8100be0:	46bd      	mov	sp, r7
 8100be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100be6:	4770      	bx	lr

08100be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100be8:	b580      	push	{r7, lr}
 8100bea:	b082      	sub	sp, #8
 8100bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100bee:	4b11      	ldr	r3, [pc, #68]	@ (8100c34 <HAL_MspInit+0x4c>)
 8100bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8100c34 <HAL_MspInit+0x4c>)
 8100bf6:	f043 0302 	orr.w	r3, r3, #2
 8100bfa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8100c34 <HAL_MspInit+0x4c>)
 8100c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100c04:	f003 0302 	and.w	r3, r3, #2
 8100c08:	607b      	str	r3, [r7, #4]
 8100c0a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 0, 0);
 8100c0c:	2200      	movs	r2, #0
 8100c0e:	2100      	movs	r1, #0
 8100c10:	2040      	movs	r0, #64	@ 0x40
 8100c12:	f002 fca4 	bl	810355e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8100c16:	2040      	movs	r0, #64	@ 0x40
 8100c18:	f002 fcbb 	bl	8103592 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8100c1c:	2200      	movs	r2, #0
 8100c1e:	2100      	movs	r1, #0
 8100c20:	207e      	movs	r0, #126	@ 0x7e
 8100c22:	f002 fc9c 	bl	810355e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100c26:	207e      	movs	r0, #126	@ 0x7e
 8100c28:	f002 fcb3 	bl	8103592 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100c2c:	bf00      	nop
 8100c2e:	3708      	adds	r7, #8
 8100c30:	46bd      	mov	sp, r7
 8100c32:	bd80      	pop	{r7, pc}
 8100c34:	58024400 	.word	0x58024400

08100c38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8100c38:	b580      	push	{r7, lr}
 8100c3a:	b0b6      	sub	sp, #216	@ 0xd8
 8100c3c:	af00      	add	r7, sp, #0
 8100c3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100c40:	f107 0310 	add.w	r3, r7, #16
 8100c44:	22c8      	movs	r2, #200	@ 0xc8
 8100c46:	2100      	movs	r1, #0
 8100c48:	4618      	mov	r0, r3
 8100c4a:	f009 ff2a 	bl	810aaa2 <memset>
  if(hadc->Instance==ADC1)
 8100c4e:	687b      	ldr	r3, [r7, #4]
 8100c50:	681b      	ldr	r3, [r3, #0]
 8100c52:	4a2e      	ldr	r2, [pc, #184]	@ (8100d0c <HAL_ADC_MspInit+0xd4>)
 8100c54:	4293      	cmp	r3, r2
 8100c56:	d155      	bne.n	8100d04 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8100c58:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8100c5c:	f04f 0300 	mov.w	r3, #0
 8100c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8100c64:	2304      	movs	r3, #4
 8100c66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8100c68:	2309      	movs	r3, #9
 8100c6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8100c6c:	2302      	movs	r3, #2
 8100c6e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8100c70:	2302      	movs	r3, #2
 8100c72:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8100c74:	2302      	movs	r3, #2
 8100c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8100c78:	23c0      	movs	r3, #192	@ 0xc0
 8100c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8100c7c:	2320      	movs	r3, #32
 8100c7e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8100c80:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8100c84:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8100c86:	2300      	movs	r3, #0
 8100c88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100c8c:	f107 0310 	add.w	r3, r7, #16
 8100c90:	4618      	mov	r0, r3
 8100c92:	f003 fa3b 	bl	810410c <HAL_RCCEx_PeriphCLKConfig>
 8100c96:	4603      	mov	r3, r0
 8100c98:	2b00      	cmp	r3, #0
 8100c9a:	d001      	beq.n	8100ca0 <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8100c9c:	f7ff ff20 	bl	8100ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8100ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8100d10 <HAL_ADC_MspInit+0xd8>)
 8100ca2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8100d10 <HAL_ADC_MspInit+0xd8>)
 8100ca8:	f043 0320 	orr.w	r3, r3, #32
 8100cac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100cb0:	4b17      	ldr	r3, [pc, #92]	@ (8100d10 <HAL_ADC_MspInit+0xd8>)
 8100cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100cb6:	f003 0320 	and.w	r3, r3, #32
 8100cba:	60fb      	str	r3, [r7, #12]
 8100cbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100cbe:	4b14      	ldr	r3, [pc, #80]	@ (8100d10 <HAL_ADC_MspInit+0xd8>)
 8100cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100cc4:	4a12      	ldr	r2, [pc, #72]	@ (8100d10 <HAL_ADC_MspInit+0xd8>)
 8100cc6:	f043 0301 	orr.w	r3, r3, #1
 8100cca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100cce:	4b10      	ldr	r3, [pc, #64]	@ (8100d10 <HAL_ADC_MspInit+0xd8>)
 8100cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100cd4:	f003 0301 	and.w	r3, r3, #1
 8100cd8:	60bb      	str	r3, [r7, #8]
 8100cda:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8100cdc:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8100ce0:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8100ce4:	f000 fbc4 	bl	8101470 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8100ce8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8100cec:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8100cf0:	f000 fbbe 	bl	8101470 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8100cf4:	2200      	movs	r2, #0
 8100cf6:	2100      	movs	r1, #0
 8100cf8:	2012      	movs	r0, #18
 8100cfa:	f002 fc30 	bl	810355e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8100cfe:	2012      	movs	r0, #18
 8100d00:	f002 fc47 	bl	8103592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8100d04:	bf00      	nop
 8100d06:	37d8      	adds	r7, #216	@ 0xd8
 8100d08:	46bd      	mov	sp, r7
 8100d0a:	bd80      	pop	{r7, pc}
 8100d0c:	40022000 	.word	0x40022000
 8100d10:	58024400 	.word	0x58024400

08100d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100d14:	b580      	push	{r7, lr}
 8100d16:	b0b6      	sub	sp, #216	@ 0xd8
 8100d18:	af00      	add	r7, sp, #0
 8100d1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100d1c:	f107 0310 	add.w	r3, r7, #16
 8100d20:	22c8      	movs	r2, #200	@ 0xc8
 8100d22:	2100      	movs	r1, #0
 8100d24:	4618      	mov	r0, r3
 8100d26:	f009 febc 	bl	810aaa2 <memset>
  if(huart->Instance==USART1)
 8100d2a:	687b      	ldr	r3, [r7, #4]
 8100d2c:	681b      	ldr	r3, [r3, #0]
 8100d2e:	4a14      	ldr	r2, [pc, #80]	@ (8100d80 <HAL_UART_MspInit+0x6c>)
 8100d30:	4293      	cmp	r3, r2
 8100d32:	d121      	bne.n	8100d78 <HAL_UART_MspInit+0x64>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8100d34:	f04f 0201 	mov.w	r2, #1
 8100d38:	f04f 0300 	mov.w	r3, #0
 8100d3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8100d40:	2300      	movs	r3, #0
 8100d42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100d46:	f107 0310 	add.w	r3, r7, #16
 8100d4a:	4618      	mov	r0, r3
 8100d4c:	f003 f9de 	bl	810410c <HAL_RCCEx_PeriphCLKConfig>
 8100d50:	4603      	mov	r3, r0
 8100d52:	2b00      	cmp	r3, #0
 8100d54:	d001      	beq.n	8100d5a <HAL_UART_MspInit+0x46>
    {
      Error_Handler();
 8100d56:	f7ff fec3 	bl	8100ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8100d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8100d84 <HAL_UART_MspInit+0x70>)
 8100d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100d60:	4a08      	ldr	r2, [pc, #32]	@ (8100d84 <HAL_UART_MspInit+0x70>)
 8100d62:	f043 0310 	orr.w	r3, r3, #16
 8100d66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8100d6a:	4b06      	ldr	r3, [pc, #24]	@ (8100d84 <HAL_UART_MspInit+0x70>)
 8100d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100d70:	f003 0310 	and.w	r3, r3, #16
 8100d74:	60fb      	str	r3, [r7, #12]
 8100d76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8100d78:	bf00      	nop
 8100d7a:	37d8      	adds	r7, #216	@ 0xd8
 8100d7c:	46bd      	mov	sp, r7
 8100d7e:	bd80      	pop	{r7, pc}
 8100d80:	40011000 	.word	0x40011000
 8100d84:	58024400 	.word	0x58024400

08100d88 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8100d88:	b480      	push	{r7}
 8100d8a:	b083      	sub	sp, #12
 8100d8c:	af00      	add	r7, sp, #0
 8100d8e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8100d90:	687b      	ldr	r3, [r7, #4]
 8100d92:	681b      	ldr	r3, [r3, #0]
 8100d94:	4a08      	ldr	r2, [pc, #32]	@ (8100db8 <HAL_UART_MspDeInit+0x30>)
 8100d96:	4293      	cmp	r3, r2
 8100d98:	d107      	bne.n	8100daa <HAL_UART_MspDeInit+0x22>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8100d9a:	4b08      	ldr	r3, [pc, #32]	@ (8100dbc <HAL_UART_MspDeInit+0x34>)
 8100d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100da0:	4a06      	ldr	r2, [pc, #24]	@ (8100dbc <HAL_UART_MspDeInit+0x34>)
 8100da2:	f023 0310 	bic.w	r3, r3, #16
 8100da6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8100daa:	bf00      	nop
 8100dac:	370c      	adds	r7, #12
 8100dae:	46bd      	mov	sp, r7
 8100db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100db4:	4770      	bx	lr
 8100db6:	bf00      	nop
 8100db8:	40011000 	.word	0x40011000
 8100dbc:	58024400 	.word	0x58024400

08100dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100dc0:	b480      	push	{r7}
 8100dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100dc4:	bf00      	nop
 8100dc6:	e7fd      	b.n	8100dc4 <NMI_Handler+0x4>

08100dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100dc8:	b480      	push	{r7}
 8100dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100dcc:	bf00      	nop
 8100dce:	e7fd      	b.n	8100dcc <HardFault_Handler+0x4>

08100dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100dd0:	b480      	push	{r7}
 8100dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100dd4:	bf00      	nop
 8100dd6:	e7fd      	b.n	8100dd4 <MemManage_Handler+0x4>

08100dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100dd8:	b480      	push	{r7}
 8100dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100ddc:	bf00      	nop
 8100dde:	e7fd      	b.n	8100ddc <BusFault_Handler+0x4>

08100de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100de0:	b480      	push	{r7}
 8100de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100de4:	bf00      	nop
 8100de6:	e7fd      	b.n	8100de4 <UsageFault_Handler+0x4>

08100de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100de8:	b480      	push	{r7}
 8100dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100dec:	bf00      	nop
 8100dee:	46bd      	mov	sp, r7
 8100df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100df4:	4770      	bx	lr

08100df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100df6:	b480      	push	{r7}
 8100df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100dfa:	bf00      	nop
 8100dfc:	46bd      	mov	sp, r7
 8100dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e02:	4770      	bx	lr

08100e04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100e04:	b480      	push	{r7}
 8100e06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100e08:	bf00      	nop
 8100e0a:	46bd      	mov	sp, r7
 8100e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e10:	4770      	bx	lr

08100e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100e12:	b580      	push	{r7, lr}
 8100e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100e16:	f000 fadb 	bl	81013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100e1a:	bf00      	nop
 8100e1c:	bd80      	pop	{r7, pc}
	...

08100e20 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8100e20:	b580      	push	{r7, lr}
 8100e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8100e24:	4802      	ldr	r0, [pc, #8]	@ (8100e30 <ADC_IRQHandler+0x10>)
 8100e26:	f001 f91f 	bl	8102068 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8100e2a:	bf00      	nop
 8100e2c:	bd80      	pop	{r7, pc}
 8100e2e:	bf00      	nop
 8100e30:	100002d8 	.word	0x100002d8

08100e34 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8100e34:	b480      	push	{r7}
 8100e36:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 8100e38:	bf00      	nop
 8100e3a:	46bd      	mov	sp, r7
 8100e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e40:	4770      	bx	lr

08100e42 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100e42:	b580      	push	{r7, lr}
 8100e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100e46:	f002 fee7 	bl	8103c18 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100e4a:	bf00      	nop
 8100e4c:	bd80      	pop	{r7, pc}

08100e4e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8100e4e:	b480      	push	{r7}
 8100e50:	af00      	add	r7, sp, #0
  return 1;
 8100e52:	2301      	movs	r3, #1
}
 8100e54:	4618      	mov	r0, r3
 8100e56:	46bd      	mov	sp, r7
 8100e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e5c:	4770      	bx	lr
	...

08100e60 <_kill>:

int _kill(int pid, int sig)
{
 8100e60:	b480      	push	{r7}
 8100e62:	b083      	sub	sp, #12
 8100e64:	af00      	add	r7, sp, #0
 8100e66:	6078      	str	r0, [r7, #4]
 8100e68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8100e6a:	4b05      	ldr	r3, [pc, #20]	@ (8100e80 <_kill+0x20>)
 8100e6c:	2216      	movs	r2, #22
 8100e6e:	601a      	str	r2, [r3, #0]
  return -1;
 8100e70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8100e74:	4618      	mov	r0, r3
 8100e76:	370c      	adds	r7, #12
 8100e78:	46bd      	mov	sp, r7
 8100e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e7e:	4770      	bx	lr
 8100e80:	1000073c 	.word	0x1000073c

08100e84 <_exit>:

void _exit (int status)
{
 8100e84:	b580      	push	{r7, lr}
 8100e86:	b082      	sub	sp, #8
 8100e88:	af00      	add	r7, sp, #0
 8100e8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8100e8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8100e90:	6878      	ldr	r0, [r7, #4]
 8100e92:	f7ff ffe5 	bl	8100e60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8100e96:	bf00      	nop
 8100e98:	e7fd      	b.n	8100e96 <_exit+0x12>

08100e9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100e9a:	b580      	push	{r7, lr}
 8100e9c:	b086      	sub	sp, #24
 8100e9e:	af00      	add	r7, sp, #0
 8100ea0:	60f8      	str	r0, [r7, #12]
 8100ea2:	60b9      	str	r1, [r7, #8]
 8100ea4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100ea6:	2300      	movs	r3, #0
 8100ea8:	617b      	str	r3, [r7, #20]
 8100eaa:	e00a      	b.n	8100ec2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8100eac:	f3af 8000 	nop.w
 8100eb0:	4601      	mov	r1, r0
 8100eb2:	68bb      	ldr	r3, [r7, #8]
 8100eb4:	1c5a      	adds	r2, r3, #1
 8100eb6:	60ba      	str	r2, [r7, #8]
 8100eb8:	b2ca      	uxtb	r2, r1
 8100eba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100ebc:	697b      	ldr	r3, [r7, #20]
 8100ebe:	3301      	adds	r3, #1
 8100ec0:	617b      	str	r3, [r7, #20]
 8100ec2:	697a      	ldr	r2, [r7, #20]
 8100ec4:	687b      	ldr	r3, [r7, #4]
 8100ec6:	429a      	cmp	r2, r3
 8100ec8:	dbf0      	blt.n	8100eac <_read+0x12>
  }

  return len;
 8100eca:	687b      	ldr	r3, [r7, #4]
}
 8100ecc:	4618      	mov	r0, r3
 8100ece:	3718      	adds	r7, #24
 8100ed0:	46bd      	mov	sp, r7
 8100ed2:	bd80      	pop	{r7, pc}

08100ed4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100ed4:	b580      	push	{r7, lr}
 8100ed6:	b086      	sub	sp, #24
 8100ed8:	af00      	add	r7, sp, #0
 8100eda:	60f8      	str	r0, [r7, #12]
 8100edc:	60b9      	str	r1, [r7, #8]
 8100ede:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100ee0:	2300      	movs	r3, #0
 8100ee2:	617b      	str	r3, [r7, #20]
 8100ee4:	e009      	b.n	8100efa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8100ee6:	68bb      	ldr	r3, [r7, #8]
 8100ee8:	1c5a      	adds	r2, r3, #1
 8100eea:	60ba      	str	r2, [r7, #8]
 8100eec:	781b      	ldrb	r3, [r3, #0]
 8100eee:	4618      	mov	r0, r3
 8100ef0:	f000 f942 	bl	8101178 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100ef4:	697b      	ldr	r3, [r7, #20]
 8100ef6:	3301      	adds	r3, #1
 8100ef8:	617b      	str	r3, [r7, #20]
 8100efa:	697a      	ldr	r2, [r7, #20]
 8100efc:	687b      	ldr	r3, [r7, #4]
 8100efe:	429a      	cmp	r2, r3
 8100f00:	dbf1      	blt.n	8100ee6 <_write+0x12>
  }
  return len;
 8100f02:	687b      	ldr	r3, [r7, #4]
}
 8100f04:	4618      	mov	r0, r3
 8100f06:	3718      	adds	r7, #24
 8100f08:	46bd      	mov	sp, r7
 8100f0a:	bd80      	pop	{r7, pc}

08100f0c <_close>:

int _close(int file)
{
 8100f0c:	b480      	push	{r7}
 8100f0e:	b083      	sub	sp, #12
 8100f10:	af00      	add	r7, sp, #0
 8100f12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8100f14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8100f18:	4618      	mov	r0, r3
 8100f1a:	370c      	adds	r7, #12
 8100f1c:	46bd      	mov	sp, r7
 8100f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f22:	4770      	bx	lr

08100f24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8100f24:	b480      	push	{r7}
 8100f26:	b083      	sub	sp, #12
 8100f28:	af00      	add	r7, sp, #0
 8100f2a:	6078      	str	r0, [r7, #4]
 8100f2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8100f2e:	683b      	ldr	r3, [r7, #0]
 8100f30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8100f34:	605a      	str	r2, [r3, #4]
  return 0;
 8100f36:	2300      	movs	r3, #0
}
 8100f38:	4618      	mov	r0, r3
 8100f3a:	370c      	adds	r7, #12
 8100f3c:	46bd      	mov	sp, r7
 8100f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f42:	4770      	bx	lr

08100f44 <_isatty>:

int _isatty(int file)
{
 8100f44:	b480      	push	{r7}
 8100f46:	b083      	sub	sp, #12
 8100f48:	af00      	add	r7, sp, #0
 8100f4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8100f4c:	2301      	movs	r3, #1
}
 8100f4e:	4618      	mov	r0, r3
 8100f50:	370c      	adds	r7, #12
 8100f52:	46bd      	mov	sp, r7
 8100f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f58:	4770      	bx	lr

08100f5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100f5a:	b480      	push	{r7}
 8100f5c:	b085      	sub	sp, #20
 8100f5e:	af00      	add	r7, sp, #0
 8100f60:	60f8      	str	r0, [r7, #12]
 8100f62:	60b9      	str	r1, [r7, #8]
 8100f64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8100f66:	2300      	movs	r3, #0
}
 8100f68:	4618      	mov	r0, r3
 8100f6a:	3714      	adds	r7, #20
 8100f6c:	46bd      	mov	sp, r7
 8100f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f72:	4770      	bx	lr

08100f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100f74:	b480      	push	{r7}
 8100f76:	b087      	sub	sp, #28
 8100f78:	af00      	add	r7, sp, #0
 8100f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100f7c:	4a14      	ldr	r2, [pc, #80]	@ (8100fd0 <_sbrk+0x5c>)
 8100f7e:	4b15      	ldr	r3, [pc, #84]	@ (8100fd4 <_sbrk+0x60>)
 8100f80:	1ad3      	subs	r3, r2, r3
 8100f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100f84:	697b      	ldr	r3, [r7, #20]
 8100f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100f88:	4b13      	ldr	r3, [pc, #76]	@ (8100fd8 <_sbrk+0x64>)
 8100f8a:	681b      	ldr	r3, [r3, #0]
 8100f8c:	2b00      	cmp	r3, #0
 8100f8e:	d102      	bne.n	8100f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100f90:	4b11      	ldr	r3, [pc, #68]	@ (8100fd8 <_sbrk+0x64>)
 8100f92:	4a12      	ldr	r2, [pc, #72]	@ (8100fdc <_sbrk+0x68>)
 8100f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100f96:	4b10      	ldr	r3, [pc, #64]	@ (8100fd8 <_sbrk+0x64>)
 8100f98:	681a      	ldr	r2, [r3, #0]
 8100f9a:	687b      	ldr	r3, [r7, #4]
 8100f9c:	4413      	add	r3, r2
 8100f9e:	693a      	ldr	r2, [r7, #16]
 8100fa0:	429a      	cmp	r2, r3
 8100fa2:	d205      	bcs.n	8100fb0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8100fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8100fe0 <_sbrk+0x6c>)
 8100fa6:	220c      	movs	r2, #12
 8100fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100faa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8100fae:	e009      	b.n	8100fc4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8100fb0:	4b09      	ldr	r3, [pc, #36]	@ (8100fd8 <_sbrk+0x64>)
 8100fb2:	681b      	ldr	r3, [r3, #0]
 8100fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100fb6:	4b08      	ldr	r3, [pc, #32]	@ (8100fd8 <_sbrk+0x64>)
 8100fb8:	681a      	ldr	r2, [r3, #0]
 8100fba:	687b      	ldr	r3, [r7, #4]
 8100fbc:	4413      	add	r3, r2
 8100fbe:	4a06      	ldr	r2, [pc, #24]	@ (8100fd8 <_sbrk+0x64>)
 8100fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100fc2:	68fb      	ldr	r3, [r7, #12]
}
 8100fc4:	4618      	mov	r0, r3
 8100fc6:	371c      	adds	r7, #28
 8100fc8:	46bd      	mov	sp, r7
 8100fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fce:	4770      	bx	lr
 8100fd0:	10048000 	.word	0x10048000
 8100fd4:	00000400 	.word	0x00000400
 8100fd8:	10000498 	.word	0x10000498
 8100fdc:	10000748 	.word	0x10000748
 8100fe0:	1000073c 	.word	0x1000073c

08100fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810101c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100fe8:	f7ff fb52 	bl	8100690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100fec:	480c      	ldr	r0, [pc, #48]	@ (8101020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100fee:	490d      	ldr	r1, [pc, #52]	@ (8101024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8101028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100ff4:	e002      	b.n	8100ffc <LoopCopyDataInit>

08100ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100ffa:	3304      	adds	r3, #4

08100ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101000:	d3f9      	bcc.n	8100ff6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101002:	4a0a      	ldr	r2, [pc, #40]	@ (810102c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101004:	4c0a      	ldr	r4, [pc, #40]	@ (8101030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101008:	e001      	b.n	810100e <LoopFillZerobss>

0810100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810100c:	3204      	adds	r2, #4

0810100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101010:	d3fb      	bcc.n	810100a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101012:	f009 fd5f 	bl	810aad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101016:	f7ff fba9 	bl	810076c <main>
  bx  lr
 810101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810101c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101020:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101024:	10000118 	.word	0x10000118
  ldr r2, =_sidata
 8101028:	0810b9f0 	.word	0x0810b9f0
  ldr r2, =_sbss
 810102c:	100002bc 	.word	0x100002bc
  ldr r4, =_ebss
 8101030:	10000744 	.word	0x10000744

08101034 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101034:	e7fe      	b.n	8101034 <ADC3_IRQHandler>
	...

08101038 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  * @retval BSP status
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8101038:	b580      	push	{r7, lr}
 810103a:	b084      	sub	sp, #16
 810103c:	af00      	add	r7, sp, #0
 810103e:	4603      	mov	r3, r0
 8101040:	6039      	str	r1, [r7, #0]
 8101042:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8101044:	2300      	movs	r3, #0
 8101046:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8101048:	79fb      	ldrb	r3, [r7, #7]
 810104a:	2b00      	cmp	r3, #0
 810104c:	d003      	beq.n	8101056 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 810104e:	f06f 0301 	mvn.w	r3, #1
 8101052:	60fb      	str	r3, [r7, #12]
 8101054:	e026      	b.n	81010a4 <BSP_COM_Init+0x6c>
  }
  else
  {
    /* Init the UART Msp */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    USART1_MspInit(&hcom_uart[COM]);
 8101056:	79fb      	ldrb	r3, [r7, #7]
 8101058:	2294      	movs	r2, #148	@ 0x94
 810105a:	fb02 f303 	mul.w	r3, r2, r3
 810105e:	4a14      	ldr	r2, [pc, #80]	@ (81010b0 <BSP_COM_Init+0x78>)
 8101060:	4413      	add	r3, r2
 8101062:	4618      	mov	r0, r3
 8101064:	f000 f8a4 	bl	81011b0 <USART1_MspInit>
      {
        ret = BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if(ret == BSP_ERROR_NONE)
 8101068:	68fb      	ldr	r3, [r7, #12]
 810106a:	2b00      	cmp	r3, #0
 810106c:	d11a      	bne.n	81010a4 <BSP_COM_Init+0x6c>
    {
      /* USART configuration   */
      hcom_uart[COM].Instance = COM_USART[COM];
 810106e:	79fa      	ldrb	r2, [r7, #7]
 8101070:	79fb      	ldrb	r3, [r7, #7]
 8101072:	4910      	ldr	r1, [pc, #64]	@ (81010b4 <BSP_COM_Init+0x7c>)
 8101074:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8101078:	490d      	ldr	r1, [pc, #52]	@ (81010b0 <BSP_COM_Init+0x78>)
 810107a:	2094      	movs	r0, #148	@ 0x94
 810107c:	fb00 f303 	mul.w	r3, r0, r3
 8101080:	440b      	add	r3, r1
 8101082:	601a      	str	r2, [r3, #0]
      if(MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8101084:	79fb      	ldrb	r3, [r7, #7]
 8101086:	2294      	movs	r2, #148	@ 0x94
 8101088:	fb02 f303 	mul.w	r3, r2, r3
 810108c:	4a08      	ldr	r2, [pc, #32]	@ (81010b0 <BSP_COM_Init+0x78>)
 810108e:	4413      	add	r3, r2
 8101090:	6839      	ldr	r1, [r7, #0]
 8101092:	4618      	mov	r0, r3
 8101094:	f000 f83e 	bl	8101114 <MX_USART1_Init>
 8101098:	4603      	mov	r3, r0
 810109a:	2b00      	cmp	r3, #0
 810109c:	d002      	beq.n	81010a4 <BSP_COM_Init+0x6c>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 810109e:	f06f 0303 	mvn.w	r3, #3
 81010a2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 81010a4:	68fb      	ldr	r3, [r7, #12]
}
 81010a6:	4618      	mov	r0, r3
 81010a8:	3710      	adds	r7, #16
 81010aa:	46bd      	mov	sp, r7
 81010ac:	bd80      	pop	{r7, pc}
 81010ae:	bf00      	nop
 81010b0:	1000049c 	.word	0x1000049c
 81010b4:	10000008 	.word	0x10000008

081010b8 <BSP_COM_DeInit>:
  * @param  COM COM port to be configured.
  *          This parameter can be (COM1)
  * @retval BSP status
  */
int32_t BSP_COM_DeInit(COM_TypeDef COM)
{
 81010b8:	b580      	push	{r7, lr}
 81010ba:	b084      	sub	sp, #16
 81010bc:	af00      	add	r7, sp, #0
 81010be:	4603      	mov	r3, r0
 81010c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 81010c2:	2300      	movs	r3, #0
 81010c4:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 81010c6:	79fb      	ldrb	r3, [r7, #7]
 81010c8:	2b00      	cmp	r3, #0
 81010ca:	d003      	beq.n	81010d4 <BSP_COM_DeInit+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 81010cc:	f06f 0301 	mvn.w	r3, #1
 81010d0:	60fb      	str	r3, [r7, #12]
 81010d2:	e017      	b.n	8101104 <BSP_COM_DeInit+0x4c>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    USART1_MspDeInit(&hcom_uart[COM]);
 81010d4:	79fb      	ldrb	r3, [r7, #7]
 81010d6:	2294      	movs	r2, #148	@ 0x94
 81010d8:	fb02 f303 	mul.w	r3, r2, r3
 81010dc:	4a0c      	ldr	r2, [pc, #48]	@ (8101110 <BSP_COM_DeInit+0x58>)
 81010de:	4413      	add	r3, r2
 81010e0:	4618      	mov	r0, r3
 81010e2:	f000 f8bd 	bl	8101260 <USART1_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if(HAL_UART_DeInit(&hcom_uart[COM]) != HAL_OK)
 81010e6:	79fb      	ldrb	r3, [r7, #7]
 81010e8:	2294      	movs	r2, #148	@ 0x94
 81010ea:	fb02 f303 	mul.w	r3, r2, r3
 81010ee:	4a08      	ldr	r2, [pc, #32]	@ (8101110 <BSP_COM_DeInit+0x58>)
 81010f0:	4413      	add	r3, r2
 81010f2:	4618      	mov	r0, r3
 81010f4:	f005 fd98 	bl	8106c28 <HAL_UART_DeInit>
 81010f8:	4603      	mov	r3, r0
 81010fa:	2b00      	cmp	r3, #0
 81010fc:	d002      	beq.n	8101104 <BSP_COM_DeInit+0x4c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 81010fe:	f06f 0303 	mvn.w	r3, #3
 8101102:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8101104:	68fb      	ldr	r3, [r7, #12]
}
 8101106:	4618      	mov	r0, r3
 8101108:	3710      	adds	r7, #16
 810110a:	46bd      	mov	sp, r7
 810110c:	bd80      	pop	{r7, pc}
 810110e:	bf00      	nop
 8101110:	1000049c 	.word	0x1000049c

08101114 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8101114:	b580      	push	{r7, lr}
 8101116:	b082      	sub	sp, #8
 8101118:	af00      	add	r7, sp, #0
 810111a:	6078      	str	r0, [r7, #4]
 810111c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance          = COM_USART[COM1];
 810111e:	4b15      	ldr	r3, [pc, #84]	@ (8101174 <MX_USART1_Init+0x60>)
 8101120:	681a      	ldr	r2, [r3, #0]
 8101122:	687b      	ldr	r3, [r7, #4]
 8101124:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate     = COM_Init->BaudRate;
 8101126:	683b      	ldr	r3, [r7, #0]
 8101128:	681a      	ldr	r2, [r3, #0]
 810112a:	687b      	ldr	r3, [r7, #4]
 810112c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode         = UART_MODE_TX_RX;
 810112e:	687b      	ldr	r3, [r7, #4]
 8101130:	220c      	movs	r2, #12
 8101132:	615a      	str	r2, [r3, #20]
  huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8101134:	683b      	ldr	r3, [r7, #0]
 8101136:	895b      	ldrh	r3, [r3, #10]
 8101138:	461a      	mov	r2, r3
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength   = COM_Init->WordLength;
 810113e:	683b      	ldr	r3, [r7, #0]
 8101140:	685a      	ldr	r2, [r3, #4]
 8101142:	687b      	ldr	r3, [r7, #4]
 8101144:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8101146:	683b      	ldr	r3, [r7, #0]
 8101148:	891b      	ldrh	r3, [r3, #8]
 810114a:	461a      	mov	r2, r3
 810114c:	687b      	ldr	r3, [r7, #4]
 810114e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8101150:	683b      	ldr	r3, [r7, #0]
 8101152:	899b      	ldrh	r3, [r3, #12]
 8101154:	461a      	mov	r2, r3
 8101156:	687b      	ldr	r3, [r7, #4]
 8101158:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_8;
 810115a:	687b      	ldr	r3, [r7, #4]
 810115c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8101160:	61da      	str	r2, [r3, #28]

  return HAL_UART_Init(huart);
 8101162:	6878      	ldr	r0, [r7, #4]
 8101164:	f005 fd10 	bl	8106b88 <HAL_UART_Init>
 8101168:	4603      	mov	r3, r0
}
 810116a:	4618      	mov	r0, r3
 810116c:	3708      	adds	r7, #8
 810116e:	46bd      	mov	sp, r7
 8101170:	bd80      	pop	{r7, pc}
 8101172:	bf00      	nop
 8101174:	10000008 	.word	0x10000008

08101178 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar (int ch)
#else
int fputc (int ch, FILE *f)
#endif /* __GNUC__   */
{
 8101178:	b580      	push	{r7, lr}
 810117a:	b082      	sub	sp, #8
 810117c:	af00      	add	r7, sp, #0
 810117e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8101180:	4b09      	ldr	r3, [pc, #36]	@ (81011a8 <__io_putchar+0x30>)
 8101182:	781b      	ldrb	r3, [r3, #0]
 8101184:	461a      	mov	r2, r3
 8101186:	2394      	movs	r3, #148	@ 0x94
 8101188:	fb02 f303 	mul.w	r3, r2, r3
 810118c:	4a07      	ldr	r2, [pc, #28]	@ (81011ac <__io_putchar+0x34>)
 810118e:	1898      	adds	r0, r3, r2
 8101190:	1d39      	adds	r1, r7, #4
 8101192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101196:	2201      	movs	r2, #1
 8101198:	f005 fd85 	bl	8106ca6 <HAL_UART_Transmit>
  return ch;
 810119c:	687b      	ldr	r3, [r7, #4]
}
 810119e:	4618      	mov	r0, r3
 81011a0:	3708      	adds	r7, #8
 81011a2:	46bd      	mov	sp, r7
 81011a4:	bd80      	pop	{r7, pc}
 81011a6:	bf00      	nop
 81011a8:	10000530 	.word	0x10000530
 81011ac:	1000049c 	.word	0x1000049c

081011b0 <USART1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval None
  */
static void USART1_MspInit(UART_HandleTypeDef *huart)
{
 81011b0:	b580      	push	{r7, lr}
 81011b2:	b08a      	sub	sp, #40	@ 0x28
 81011b4:	af00      	add	r7, sp, #0
 81011b6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 81011b8:	4b27      	ldr	r3, [pc, #156]	@ (8101258 <USART1_MspInit+0xa8>)
 81011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011be:	4a26      	ldr	r2, [pc, #152]	@ (8101258 <USART1_MspInit+0xa8>)
 81011c0:	f043 0302 	orr.w	r3, r3, #2
 81011c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011c8:	4b23      	ldr	r3, [pc, #140]	@ (8101258 <USART1_MspInit+0xa8>)
 81011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011ce:	f003 0302 	and.w	r3, r3, #2
 81011d2:	613b      	str	r3, [r7, #16]
 81011d4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 81011d6:	4b20      	ldr	r3, [pc, #128]	@ (8101258 <USART1_MspInit+0xa8>)
 81011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011dc:	4a1e      	ldr	r2, [pc, #120]	@ (8101258 <USART1_MspInit+0xa8>)
 81011de:	f043 0302 	orr.w	r3, r3, #2
 81011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011e6:	4b1c      	ldr	r3, [pc, #112]	@ (8101258 <USART1_MspInit+0xa8>)
 81011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011ec:	f003 0302 	and.w	r3, r3, #2
 81011f0:	60fb      	str	r3, [r7, #12]
 81011f2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 81011f4:	4b18      	ldr	r3, [pc, #96]	@ (8101258 <USART1_MspInit+0xa8>)
 81011f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81011fa:	4a17      	ldr	r2, [pc, #92]	@ (8101258 <USART1_MspInit+0xa8>)
 81011fc:	f043 0310 	orr.w	r3, r3, #16
 8101200:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101204:	4b14      	ldr	r3, [pc, #80]	@ (8101258 <USART1_MspInit+0xa8>)
 8101206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810120a:	f003 0310 	and.w	r3, r3, #16
 810120e:	60bb      	str	r3, [r7, #8]
 8101210:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8101212:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8101216:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8101218:	2302      	movs	r3, #2
 810121a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 810121c:	2302      	movs	r3, #2
 810121e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8101220:	2301      	movs	r3, #1
 8101222:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8101224:	2304      	movs	r3, #4
 8101226:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8101228:	f107 0314 	add.w	r3, r7, #20
 810122c:	4619      	mov	r1, r3
 810122e:	480b      	ldr	r0, [pc, #44]	@ (810125c <USART1_MspInit+0xac>)
 8101230:	f002 f9de 	bl	81035f0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8101234:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8101238:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 810123a:	2302      	movs	r3, #2
 810123c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 810123e:	2304      	movs	r3, #4
 8101240:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8101242:	f107 0314 	add.w	r3, r7, #20
 8101246:	4619      	mov	r1, r3
 8101248:	4804      	ldr	r0, [pc, #16]	@ (810125c <USART1_MspInit+0xac>)
 810124a:	f002 f9d1 	bl	81035f0 <HAL_GPIO_Init>
}
 810124e:	bf00      	nop
 8101250:	3728      	adds	r7, #40	@ 0x28
 8101252:	46bd      	mov	sp, r7
 8101254:	bd80      	pop	{r7, pc}
 8101256:	bf00      	nop
 8101258:	58024400 	.word	0x58024400
 810125c:	58020400 	.word	0x58020400

08101260 <USART1_MspDeInit>:
  * @brief  Initialize USART1 Msp part
  * @param  huart UART handle
  * @retval None
  */
static void USART1_MspDeInit(UART_HandleTypeDef *huart)
{
 8101260:	b580      	push	{r7, lr}
 8101262:	b088      	sub	sp, #32
 8101264:	af00      	add	r7, sp, #0
 8101266:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* COM GPIO pin configuration */
  gpio_init_structure.Pin  = COM1_TX_PIN;
 8101268:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810126c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(COM1_TX_GPIO_PORT, gpio_init_structure.Pin);
 810126e:	68fb      	ldr	r3, [r7, #12]
 8101270:	4619      	mov	r1, r3
 8101272:	480b      	ldr	r0, [pc, #44]	@ (81012a0 <USART1_MspDeInit+0x40>)
 8101274:	f002 fb6c 	bl	8103950 <HAL_GPIO_DeInit>

  gpio_init_structure.Pin  = COM1_RX_PIN;
 8101278:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810127c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(COM1_RX_GPIO_PORT, gpio_init_structure.Pin);
 810127e:	68fb      	ldr	r3, [r7, #12]
 8101280:	4619      	mov	r1, r3
 8101282:	4807      	ldr	r0, [pc, #28]	@ (81012a0 <USART1_MspDeInit+0x40>)
 8101284:	f002 fb64 	bl	8103950 <HAL_GPIO_DeInit>

  /* Disable USART clock */
  COM1_CLK_DISABLE();
 8101288:	4b06      	ldr	r3, [pc, #24]	@ (81012a4 <USART1_MspDeInit+0x44>)
 810128a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810128e:	4a05      	ldr	r2, [pc, #20]	@ (81012a4 <USART1_MspDeInit+0x44>)
 8101290:	f023 0310 	bic.w	r3, r3, #16
 8101294:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 8101298:	bf00      	nop
 810129a:	3720      	adds	r7, #32
 810129c:	46bd      	mov	sp, r7
 810129e:	bd80      	pop	{r7, pc}
 81012a0:	58020400 	.word	0x58020400
 81012a4:	58024400 	.word	0x58024400

081012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81012a8:	b580      	push	{r7, lr}
 81012aa:	b082      	sub	sp, #8
 81012ac:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81012ae:	4b28      	ldr	r3, [pc, #160]	@ (8101350 <HAL_Init+0xa8>)
 81012b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81012b4:	4a26      	ldr	r2, [pc, #152]	@ (8101350 <HAL_Init+0xa8>)
 81012b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81012ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81012be:	4b24      	ldr	r3, [pc, #144]	@ (8101350 <HAL_Init+0xa8>)
 81012c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81012c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81012c8:	603b      	str	r3, [r7, #0]
 81012ca:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81012cc:	4b21      	ldr	r3, [pc, #132]	@ (8101354 <HAL_Init+0xac>)
 81012ce:	681b      	ldr	r3, [r3, #0]
 81012d0:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81012d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81012d8:	4a1e      	ldr	r2, [pc, #120]	@ (8101354 <HAL_Init+0xac>)
 81012da:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81012de:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81012e0:	4b1c      	ldr	r3, [pc, #112]	@ (8101354 <HAL_Init+0xac>)
 81012e2:	681b      	ldr	r3, [r3, #0]
 81012e4:	4a1b      	ldr	r2, [pc, #108]	@ (8101354 <HAL_Init+0xac>)
 81012e6:	f043 0301 	orr.w	r3, r3, #1
 81012ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81012ec:	2003      	movs	r0, #3
 81012ee:	f002 f92b 	bl	8103548 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81012f2:	f002 fd33 	bl	8103d5c <HAL_RCC_GetSysClockFreq>
 81012f6:	4602      	mov	r2, r0
 81012f8:	4b15      	ldr	r3, [pc, #84]	@ (8101350 <HAL_Init+0xa8>)
 81012fa:	699b      	ldr	r3, [r3, #24]
 81012fc:	0a1b      	lsrs	r3, r3, #8
 81012fe:	f003 030f 	and.w	r3, r3, #15
 8101302:	4915      	ldr	r1, [pc, #84]	@ (8101358 <HAL_Init+0xb0>)
 8101304:	5ccb      	ldrb	r3, [r1, r3]
 8101306:	f003 031f 	and.w	r3, r3, #31
 810130a:	fa22 f303 	lsr.w	r3, r2, r3
 810130e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101310:	4b0f      	ldr	r3, [pc, #60]	@ (8101350 <HAL_Init+0xa8>)
 8101312:	699b      	ldr	r3, [r3, #24]
 8101314:	f003 030f 	and.w	r3, r3, #15
 8101318:	4a0f      	ldr	r2, [pc, #60]	@ (8101358 <HAL_Init+0xb0>)
 810131a:	5cd3      	ldrb	r3, [r2, r3]
 810131c:	f003 031f 	and.w	r3, r3, #31
 8101320:	687a      	ldr	r2, [r7, #4]
 8101322:	fa22 f303 	lsr.w	r3, r2, r3
 8101326:	4a0d      	ldr	r2, [pc, #52]	@ (810135c <HAL_Init+0xb4>)
 8101328:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810132a:	4b0c      	ldr	r3, [pc, #48]	@ (810135c <HAL_Init+0xb4>)
 810132c:	681b      	ldr	r3, [r3, #0]
 810132e:	4a0c      	ldr	r2, [pc, #48]	@ (8101360 <HAL_Init+0xb8>)
 8101330:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101332:	200f      	movs	r0, #15
 8101334:	f000 f816 	bl	8101364 <HAL_InitTick>
 8101338:	4603      	mov	r3, r0
 810133a:	2b00      	cmp	r3, #0
 810133c:	d001      	beq.n	8101342 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810133e:	2301      	movs	r3, #1
 8101340:	e002      	b.n	8101348 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101342:	f7ff fc51 	bl	8100be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101346:	2300      	movs	r3, #0
}
 8101348:	4618      	mov	r0, r3
 810134a:	3708      	adds	r7, #8
 810134c:	46bd      	mov	sp, r7
 810134e:	bd80      	pop	{r7, pc}
 8101350:	58024400 	.word	0x58024400
 8101354:	40024400 	.word	0x40024400
 8101358:	0810b8e0 	.word	0x0810b8e0
 810135c:	10000004 	.word	0x10000004
 8101360:	10000000 	.word	0x10000000

08101364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101364:	b580      	push	{r7, lr}
 8101366:	b082      	sub	sp, #8
 8101368:	af00      	add	r7, sp, #0
 810136a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810136c:	4b15      	ldr	r3, [pc, #84]	@ (81013c4 <HAL_InitTick+0x60>)
 810136e:	781b      	ldrb	r3, [r3, #0]
 8101370:	2b00      	cmp	r3, #0
 8101372:	d101      	bne.n	8101378 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101374:	2301      	movs	r3, #1
 8101376:	e021      	b.n	81013bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101378:	4b13      	ldr	r3, [pc, #76]	@ (81013c8 <HAL_InitTick+0x64>)
 810137a:	681a      	ldr	r2, [r3, #0]
 810137c:	4b11      	ldr	r3, [pc, #68]	@ (81013c4 <HAL_InitTick+0x60>)
 810137e:	781b      	ldrb	r3, [r3, #0]
 8101380:	4619      	mov	r1, r3
 8101382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101386:	fbb3 f3f1 	udiv	r3, r3, r1
 810138a:	fbb2 f3f3 	udiv	r3, r2, r3
 810138e:	4618      	mov	r0, r3
 8101390:	f002 f90d 	bl	81035ae <HAL_SYSTICK_Config>
 8101394:	4603      	mov	r3, r0
 8101396:	2b00      	cmp	r3, #0
 8101398:	d001      	beq.n	810139e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810139a:	2301      	movs	r3, #1
 810139c:	e00e      	b.n	81013bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810139e:	687b      	ldr	r3, [r7, #4]
 81013a0:	2b0f      	cmp	r3, #15
 81013a2:	d80a      	bhi.n	81013ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81013a4:	2200      	movs	r2, #0
 81013a6:	6879      	ldr	r1, [r7, #4]
 81013a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81013ac:	f002 f8d7 	bl	810355e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81013b0:	4a06      	ldr	r2, [pc, #24]	@ (81013cc <HAL_InitTick+0x68>)
 81013b2:	687b      	ldr	r3, [r7, #4]
 81013b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81013b6:	2300      	movs	r3, #0
 81013b8:	e000      	b.n	81013bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 81013ba:	2301      	movs	r3, #1
}
 81013bc:	4618      	mov	r0, r3
 81013be:	3708      	adds	r7, #8
 81013c0:	46bd      	mov	sp, r7
 81013c2:	bd80      	pop	{r7, pc}
 81013c4:	10000010 	.word	0x10000010
 81013c8:	10000000 	.word	0x10000000
 81013cc:	1000000c 	.word	0x1000000c

081013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81013d0:	b480      	push	{r7}
 81013d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81013d4:	4b06      	ldr	r3, [pc, #24]	@ (81013f0 <HAL_IncTick+0x20>)
 81013d6:	781b      	ldrb	r3, [r3, #0]
 81013d8:	461a      	mov	r2, r3
 81013da:	4b06      	ldr	r3, [pc, #24]	@ (81013f4 <HAL_IncTick+0x24>)
 81013dc:	681b      	ldr	r3, [r3, #0]
 81013de:	4413      	add	r3, r2
 81013e0:	4a04      	ldr	r2, [pc, #16]	@ (81013f4 <HAL_IncTick+0x24>)
 81013e2:	6013      	str	r3, [r2, #0]
}
 81013e4:	bf00      	nop
 81013e6:	46bd      	mov	sp, r7
 81013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ec:	4770      	bx	lr
 81013ee:	bf00      	nop
 81013f0:	10000010 	.word	0x10000010
 81013f4:	10000534 	.word	0x10000534

081013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81013f8:	b480      	push	{r7}
 81013fa:	af00      	add	r7, sp, #0
  return uwTick;
 81013fc:	4b03      	ldr	r3, [pc, #12]	@ (810140c <HAL_GetTick+0x14>)
 81013fe:	681b      	ldr	r3, [r3, #0]
}
 8101400:	4618      	mov	r0, r3
 8101402:	46bd      	mov	sp, r7
 8101404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101408:	4770      	bx	lr
 810140a:	bf00      	nop
 810140c:	10000534 	.word	0x10000534

08101410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101410:	b580      	push	{r7, lr}
 8101412:	b084      	sub	sp, #16
 8101414:	af00      	add	r7, sp, #0
 8101416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101418:	f7ff ffee 	bl	81013f8 <HAL_GetTick>
 810141c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810141e:	687b      	ldr	r3, [r7, #4]
 8101420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101422:	68fb      	ldr	r3, [r7, #12]
 8101424:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8101428:	d005      	beq.n	8101436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810142a:	4b0a      	ldr	r3, [pc, #40]	@ (8101454 <HAL_Delay+0x44>)
 810142c:	781b      	ldrb	r3, [r3, #0]
 810142e:	461a      	mov	r2, r3
 8101430:	68fb      	ldr	r3, [r7, #12]
 8101432:	4413      	add	r3, r2
 8101434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101436:	bf00      	nop
 8101438:	f7ff ffde 	bl	81013f8 <HAL_GetTick>
 810143c:	4602      	mov	r2, r0
 810143e:	68bb      	ldr	r3, [r7, #8]
 8101440:	1ad3      	subs	r3, r2, r3
 8101442:	68fa      	ldr	r2, [r7, #12]
 8101444:	429a      	cmp	r2, r3
 8101446:	d8f7      	bhi.n	8101438 <HAL_Delay+0x28>
  {
  }
}
 8101448:	bf00      	nop
 810144a:	bf00      	nop
 810144c:	3710      	adds	r7, #16
 810144e:	46bd      	mov	sp, r7
 8101450:	bd80      	pop	{r7, pc}
 8101452:	bf00      	nop
 8101454:	10000010 	.word	0x10000010

08101458 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101458:	b480      	push	{r7}
 810145a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 810145c:	4b03      	ldr	r3, [pc, #12]	@ (810146c <HAL_GetREVID+0x14>)
 810145e:	681b      	ldr	r3, [r3, #0]
 8101460:	0c1b      	lsrs	r3, r3, #16
}
 8101462:	4618      	mov	r0, r3
 8101464:	46bd      	mov	sp, r7
 8101466:	f85d 7b04 	ldr.w	r7, [sp], #4
 810146a:	4770      	bx	lr
 810146c:	5c001000 	.word	0x5c001000

08101470 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8101470:	b480      	push	{r7}
 8101472:	b083      	sub	sp, #12
 8101474:	af00      	add	r7, sp, #0
 8101476:	6078      	str	r0, [r7, #4]
 8101478:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 810147a:	4b07      	ldr	r3, [pc, #28]	@ (8101498 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 810147c:	685a      	ldr	r2, [r3, #4]
 810147e:	687b      	ldr	r3, [r7, #4]
 8101480:	43db      	mvns	r3, r3
 8101482:	401a      	ands	r2, r3
 8101484:	4904      	ldr	r1, [pc, #16]	@ (8101498 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8101486:	683b      	ldr	r3, [r7, #0]
 8101488:	4313      	orrs	r3, r2
 810148a:	604b      	str	r3, [r1, #4]
}
 810148c:	bf00      	nop
 810148e:	370c      	adds	r7, #12
 8101490:	46bd      	mov	sp, r7
 8101492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101496:	4770      	bx	lr
 8101498:	58000400 	.word	0x58000400

0810149c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 810149c:	b480      	push	{r7}
 810149e:	b083      	sub	sp, #12
 81014a0:	af00      	add	r7, sp, #0
 81014a2:	6078      	str	r0, [r7, #4]
 81014a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81014a6:	687b      	ldr	r3, [r7, #4]
 81014a8:	689b      	ldr	r3, [r3, #8]
 81014aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 81014ae:	683b      	ldr	r3, [r7, #0]
 81014b0:	431a      	orrs	r2, r3
 81014b2:	687b      	ldr	r3, [r7, #4]
 81014b4:	609a      	str	r2, [r3, #8]
}
 81014b6:	bf00      	nop
 81014b8:	370c      	adds	r7, #12
 81014ba:	46bd      	mov	sp, r7
 81014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014c0:	4770      	bx	lr

081014c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81014c2:	b480      	push	{r7}
 81014c4:	b083      	sub	sp, #12
 81014c6:	af00      	add	r7, sp, #0
 81014c8:	6078      	str	r0, [r7, #4]
 81014ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81014cc:	687b      	ldr	r3, [r7, #4]
 81014ce:	689b      	ldr	r3, [r3, #8]
 81014d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 81014d4:	683b      	ldr	r3, [r7, #0]
 81014d6:	431a      	orrs	r2, r3
 81014d8:	687b      	ldr	r3, [r7, #4]
 81014da:	609a      	str	r2, [r3, #8]
}
 81014dc:	bf00      	nop
 81014de:	370c      	adds	r7, #12
 81014e0:	46bd      	mov	sp, r7
 81014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014e6:	4770      	bx	lr

081014e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81014e8:	b480      	push	{r7}
 81014ea:	b083      	sub	sp, #12
 81014ec:	af00      	add	r7, sp, #0
 81014ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 81014f0:	687b      	ldr	r3, [r7, #4]
 81014f2:	689b      	ldr	r3, [r3, #8]
 81014f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 81014f8:	4618      	mov	r0, r3
 81014fa:	370c      	adds	r7, #12
 81014fc:	46bd      	mov	sp, r7
 81014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101502:	4770      	bx	lr

08101504 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8101504:	b480      	push	{r7}
 8101506:	b087      	sub	sp, #28
 8101508:	af00      	add	r7, sp, #0
 810150a:	60f8      	str	r0, [r7, #12]
 810150c:	60b9      	str	r1, [r7, #8]
 810150e:	607a      	str	r2, [r7, #4]
 8101510:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101512:	68fb      	ldr	r3, [r7, #12]
 8101514:	3360      	adds	r3, #96	@ 0x60
 8101516:	461a      	mov	r2, r3
 8101518:	68bb      	ldr	r3, [r7, #8]
 810151a:	009b      	lsls	r3, r3, #2
 810151c:	4413      	add	r3, r2
 810151e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8101520:	697b      	ldr	r3, [r7, #20]
 8101522:	681b      	ldr	r3, [r3, #0]
 8101524:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8101528:	687b      	ldr	r3, [r7, #4]
 810152a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 810152e:	683b      	ldr	r3, [r7, #0]
 8101530:	430b      	orrs	r3, r1
 8101532:	431a      	orrs	r2, r3
 8101534:	697b      	ldr	r3, [r7, #20]
 8101536:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8101538:	bf00      	nop
 810153a:	371c      	adds	r7, #28
 810153c:	46bd      	mov	sp, r7
 810153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101542:	4770      	bx	lr

08101544 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8101544:	b480      	push	{r7}
 8101546:	b085      	sub	sp, #20
 8101548:	af00      	add	r7, sp, #0
 810154a:	60f8      	str	r0, [r7, #12]
 810154c:	60b9      	str	r1, [r7, #8]
 810154e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8101550:	68fb      	ldr	r3, [r7, #12]
 8101552:	691b      	ldr	r3, [r3, #16]
 8101554:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8101558:	68bb      	ldr	r3, [r7, #8]
 810155a:	f003 031f 	and.w	r3, r3, #31
 810155e:	6879      	ldr	r1, [r7, #4]
 8101560:	fa01 f303 	lsl.w	r3, r1, r3
 8101564:	431a      	orrs	r2, r3
 8101566:	68fb      	ldr	r3, [r7, #12]
 8101568:	611a      	str	r2, [r3, #16]
}
 810156a:	bf00      	nop
 810156c:	3714      	adds	r7, #20
 810156e:	46bd      	mov	sp, r7
 8101570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101574:	4770      	bx	lr

08101576 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8101576:	b480      	push	{r7}
 8101578:	b087      	sub	sp, #28
 810157a:	af00      	add	r7, sp, #0
 810157c:	60f8      	str	r0, [r7, #12]
 810157e:	60b9      	str	r1, [r7, #8]
 8101580:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101582:	68fb      	ldr	r3, [r7, #12]
 8101584:	3360      	adds	r3, #96	@ 0x60
 8101586:	461a      	mov	r2, r3
 8101588:	68bb      	ldr	r3, [r7, #8]
 810158a:	009b      	lsls	r3, r3, #2
 810158c:	4413      	add	r3, r2
 810158e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8101590:	697b      	ldr	r3, [r7, #20]
 8101592:	681b      	ldr	r3, [r3, #0]
 8101594:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8101598:	687b      	ldr	r3, [r7, #4]
 810159a:	431a      	orrs	r2, r3
 810159c:	697b      	ldr	r3, [r7, #20]
 810159e:	601a      	str	r2, [r3, #0]
  }
}
 81015a0:	bf00      	nop
 81015a2:	371c      	adds	r7, #28
 81015a4:	46bd      	mov	sp, r7
 81015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015aa:	4770      	bx	lr

081015ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81015ac:	b480      	push	{r7}
 81015ae:	b083      	sub	sp, #12
 81015b0:	af00      	add	r7, sp, #0
 81015b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 81015b4:	687b      	ldr	r3, [r7, #4]
 81015b6:	68db      	ldr	r3, [r3, #12]
 81015b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 81015bc:	2b00      	cmp	r3, #0
 81015be:	d101      	bne.n	81015c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 81015c0:	2301      	movs	r3, #1
 81015c2:	e000      	b.n	81015c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 81015c4:	2300      	movs	r3, #0
}
 81015c6:	4618      	mov	r0, r3
 81015c8:	370c      	adds	r7, #12
 81015ca:	46bd      	mov	sp, r7
 81015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015d0:	4770      	bx	lr

081015d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81015d2:	b480      	push	{r7}
 81015d4:	b087      	sub	sp, #28
 81015d6:	af00      	add	r7, sp, #0
 81015d8:	60f8      	str	r0, [r7, #12]
 81015da:	60b9      	str	r1, [r7, #8]
 81015dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81015de:	68fb      	ldr	r3, [r7, #12]
 81015e0:	3330      	adds	r3, #48	@ 0x30
 81015e2:	461a      	mov	r2, r3
 81015e4:	68bb      	ldr	r3, [r7, #8]
 81015e6:	0a1b      	lsrs	r3, r3, #8
 81015e8:	009b      	lsls	r3, r3, #2
 81015ea:	f003 030c 	and.w	r3, r3, #12
 81015ee:	4413      	add	r3, r2
 81015f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81015f2:	697b      	ldr	r3, [r7, #20]
 81015f4:	681a      	ldr	r2, [r3, #0]
 81015f6:	68bb      	ldr	r3, [r7, #8]
 81015f8:	f003 031f 	and.w	r3, r3, #31
 81015fc:	211f      	movs	r1, #31
 81015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8101602:	43db      	mvns	r3, r3
 8101604:	401a      	ands	r2, r3
 8101606:	687b      	ldr	r3, [r7, #4]
 8101608:	0e9b      	lsrs	r3, r3, #26
 810160a:	f003 011f 	and.w	r1, r3, #31
 810160e:	68bb      	ldr	r3, [r7, #8]
 8101610:	f003 031f 	and.w	r3, r3, #31
 8101614:	fa01 f303 	lsl.w	r3, r1, r3
 8101618:	431a      	orrs	r2, r3
 810161a:	697b      	ldr	r3, [r7, #20]
 810161c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 810161e:	bf00      	nop
 8101620:	371c      	adds	r7, #28
 8101622:	46bd      	mov	sp, r7
 8101624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101628:	4770      	bx	lr

0810162a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 810162a:	b480      	push	{r7}
 810162c:	b083      	sub	sp, #12
 810162e:	af00      	add	r7, sp, #0
 8101630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8101632:	687b      	ldr	r3, [r7, #4]
 8101634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101636:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 810163a:	2b00      	cmp	r3, #0
 810163c:	d101      	bne.n	8101642 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 810163e:	2301      	movs	r3, #1
 8101640:	e000      	b.n	8101644 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8101642:	2300      	movs	r3, #0
}
 8101644:	4618      	mov	r0, r3
 8101646:	370c      	adds	r7, #12
 8101648:	46bd      	mov	sp, r7
 810164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810164e:	4770      	bx	lr

08101650 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8101650:	b480      	push	{r7}
 8101652:	b087      	sub	sp, #28
 8101654:	af00      	add	r7, sp, #0
 8101656:	60f8      	str	r0, [r7, #12]
 8101658:	60b9      	str	r1, [r7, #8]
 810165a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 810165c:	68fb      	ldr	r3, [r7, #12]
 810165e:	3314      	adds	r3, #20
 8101660:	461a      	mov	r2, r3
 8101662:	68bb      	ldr	r3, [r7, #8]
 8101664:	0e5b      	lsrs	r3, r3, #25
 8101666:	009b      	lsls	r3, r3, #2
 8101668:	f003 0304 	and.w	r3, r3, #4
 810166c:	4413      	add	r3, r2
 810166e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101670:	697b      	ldr	r3, [r7, #20]
 8101672:	681a      	ldr	r2, [r3, #0]
 8101674:	68bb      	ldr	r3, [r7, #8]
 8101676:	0d1b      	lsrs	r3, r3, #20
 8101678:	f003 031f 	and.w	r3, r3, #31
 810167c:	2107      	movs	r1, #7
 810167e:	fa01 f303 	lsl.w	r3, r1, r3
 8101682:	43db      	mvns	r3, r3
 8101684:	401a      	ands	r2, r3
 8101686:	68bb      	ldr	r3, [r7, #8]
 8101688:	0d1b      	lsrs	r3, r3, #20
 810168a:	f003 031f 	and.w	r3, r3, #31
 810168e:	6879      	ldr	r1, [r7, #4]
 8101690:	fa01 f303 	lsl.w	r3, r1, r3
 8101694:	431a      	orrs	r2, r3
 8101696:	697b      	ldr	r3, [r7, #20]
 8101698:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810169a:	bf00      	nop
 810169c:	371c      	adds	r7, #28
 810169e:	46bd      	mov	sp, r7
 81016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016a4:	4770      	bx	lr
	...

081016a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81016a8:	b480      	push	{r7}
 81016aa:	b085      	sub	sp, #20
 81016ac:	af00      	add	r7, sp, #0
 81016ae:	60f8      	str	r0, [r7, #12]
 81016b0:	60b9      	str	r1, [r7, #8]
 81016b2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81016b4:	68fb      	ldr	r3, [r7, #12]
 81016b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 81016ba:	68bb      	ldr	r3, [r7, #8]
 81016bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81016c0:	43db      	mvns	r3, r3
 81016c2:	401a      	ands	r2, r3
 81016c4:	687b      	ldr	r3, [r7, #4]
 81016c6:	f003 0318 	and.w	r3, r3, #24
 81016ca:	4908      	ldr	r1, [pc, #32]	@ (81016ec <LL_ADC_SetChannelSingleDiff+0x44>)
 81016cc:	40d9      	lsrs	r1, r3
 81016ce:	68bb      	ldr	r3, [r7, #8]
 81016d0:	400b      	ands	r3, r1
 81016d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81016d6:	431a      	orrs	r2, r3
 81016d8:	68fb      	ldr	r3, [r7, #12]
 81016da:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 81016de:	bf00      	nop
 81016e0:	3714      	adds	r7, #20
 81016e2:	46bd      	mov	sp, r7
 81016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016e8:	4770      	bx	lr
 81016ea:	bf00      	nop
 81016ec:	000fffff 	.word	0x000fffff

081016f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81016f0:	b480      	push	{r7}
 81016f2:	b083      	sub	sp, #12
 81016f4:	af00      	add	r7, sp, #0
 81016f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 81016f8:	687b      	ldr	r3, [r7, #4]
 81016fa:	689b      	ldr	r3, [r3, #8]
 81016fc:	f003 031f 	and.w	r3, r3, #31
}
 8101700:	4618      	mov	r0, r3
 8101702:	370c      	adds	r7, #12
 8101704:	46bd      	mov	sp, r7
 8101706:	f85d 7b04 	ldr.w	r7, [sp], #4
 810170a:	4770      	bx	lr

0810170c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 810170c:	b480      	push	{r7}
 810170e:	b083      	sub	sp, #12
 8101710:	af00      	add	r7, sp, #0
 8101712:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8101714:	687b      	ldr	r3, [r7, #4]
 8101716:	689b      	ldr	r3, [r3, #8]
 8101718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 810171c:	4618      	mov	r0, r3
 810171e:	370c      	adds	r7, #12
 8101720:	46bd      	mov	sp, r7
 8101722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101726:	4770      	bx	lr

08101728 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8101728:	b480      	push	{r7}
 810172a:	b083      	sub	sp, #12
 810172c:	af00      	add	r7, sp, #0
 810172e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8101730:	687b      	ldr	r3, [r7, #4]
 8101732:	689b      	ldr	r3, [r3, #8]
 8101734:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8101738:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810173c:	687a      	ldr	r2, [r7, #4]
 810173e:	6093      	str	r3, [r2, #8]
}
 8101740:	bf00      	nop
 8101742:	370c      	adds	r7, #12
 8101744:	46bd      	mov	sp, r7
 8101746:	f85d 7b04 	ldr.w	r7, [sp], #4
 810174a:	4770      	bx	lr

0810174c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 810174c:	b480      	push	{r7}
 810174e:	b083      	sub	sp, #12
 8101750:	af00      	add	r7, sp, #0
 8101752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8101754:	687b      	ldr	r3, [r7, #4]
 8101756:	689b      	ldr	r3, [r3, #8]
 8101758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810175c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101760:	d101      	bne.n	8101766 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8101762:	2301      	movs	r3, #1
 8101764:	e000      	b.n	8101768 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8101766:	2300      	movs	r3, #0
}
 8101768:	4618      	mov	r0, r3
 810176a:	370c      	adds	r7, #12
 810176c:	46bd      	mov	sp, r7
 810176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101772:	4770      	bx	lr

08101774 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8101774:	b480      	push	{r7}
 8101776:	b083      	sub	sp, #12
 8101778:	af00      	add	r7, sp, #0
 810177a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810177c:	687b      	ldr	r3, [r7, #4]
 810177e:	689b      	ldr	r3, [r3, #8]
 8101780:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8101784:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8101788:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 810178c:	687b      	ldr	r3, [r7, #4]
 810178e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8101790:	bf00      	nop
 8101792:	370c      	adds	r7, #12
 8101794:	46bd      	mov	sp, r7
 8101796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810179a:	4770      	bx	lr

0810179c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 810179c:	b480      	push	{r7}
 810179e:	b083      	sub	sp, #12
 81017a0:	af00      	add	r7, sp, #0
 81017a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 81017a4:	687b      	ldr	r3, [r7, #4]
 81017a6:	689b      	ldr	r3, [r3, #8]
 81017a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81017ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81017b0:	d101      	bne.n	81017b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 81017b2:	2301      	movs	r3, #1
 81017b4:	e000      	b.n	81017b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 81017b6:	2300      	movs	r3, #0
}
 81017b8:	4618      	mov	r0, r3
 81017ba:	370c      	adds	r7, #12
 81017bc:	46bd      	mov	sp, r7
 81017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017c2:	4770      	bx	lr

081017c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 81017c4:	b480      	push	{r7}
 81017c6:	b083      	sub	sp, #12
 81017c8:	af00      	add	r7, sp, #0
 81017ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81017cc:	687b      	ldr	r3, [r7, #4]
 81017ce:	689b      	ldr	r3, [r3, #8]
 81017d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81017d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81017d8:	f043 0201 	orr.w	r2, r3, #1
 81017dc:	687b      	ldr	r3, [r7, #4]
 81017de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 81017e0:	bf00      	nop
 81017e2:	370c      	adds	r7, #12
 81017e4:	46bd      	mov	sp, r7
 81017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017ea:	4770      	bx	lr

081017ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 81017ec:	b480      	push	{r7}
 81017ee:	b083      	sub	sp, #12
 81017f0:	af00      	add	r7, sp, #0
 81017f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81017f4:	687b      	ldr	r3, [r7, #4]
 81017f6:	689b      	ldr	r3, [r3, #8]
 81017f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81017fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8101800:	f043 0202 	orr.w	r2, r3, #2
 8101804:	687b      	ldr	r3, [r7, #4]
 8101806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8101808:	bf00      	nop
 810180a:	370c      	adds	r7, #12
 810180c:	46bd      	mov	sp, r7
 810180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101812:	4770      	bx	lr

08101814 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8101814:	b480      	push	{r7}
 8101816:	b083      	sub	sp, #12
 8101818:	af00      	add	r7, sp, #0
 810181a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810181c:	687b      	ldr	r3, [r7, #4]
 810181e:	689b      	ldr	r3, [r3, #8]
 8101820:	f003 0301 	and.w	r3, r3, #1
 8101824:	2b01      	cmp	r3, #1
 8101826:	d101      	bne.n	810182c <LL_ADC_IsEnabled+0x18>
 8101828:	2301      	movs	r3, #1
 810182a:	e000      	b.n	810182e <LL_ADC_IsEnabled+0x1a>
 810182c:	2300      	movs	r3, #0
}
 810182e:	4618      	mov	r0, r3
 8101830:	370c      	adds	r7, #12
 8101832:	46bd      	mov	sp, r7
 8101834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101838:	4770      	bx	lr

0810183a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 810183a:	b480      	push	{r7}
 810183c:	b083      	sub	sp, #12
 810183e:	af00      	add	r7, sp, #0
 8101840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8101842:	687b      	ldr	r3, [r7, #4]
 8101844:	689b      	ldr	r3, [r3, #8]
 8101846:	f003 0302 	and.w	r3, r3, #2
 810184a:	2b02      	cmp	r3, #2
 810184c:	d101      	bne.n	8101852 <LL_ADC_IsDisableOngoing+0x18>
 810184e:	2301      	movs	r3, #1
 8101850:	e000      	b.n	8101854 <LL_ADC_IsDisableOngoing+0x1a>
 8101852:	2300      	movs	r3, #0
}
 8101854:	4618      	mov	r0, r3
 8101856:	370c      	adds	r7, #12
 8101858:	46bd      	mov	sp, r7
 810185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810185e:	4770      	bx	lr

08101860 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8101860:	b480      	push	{r7}
 8101862:	b083      	sub	sp, #12
 8101864:	af00      	add	r7, sp, #0
 8101866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101868:	687b      	ldr	r3, [r7, #4]
 810186a:	689b      	ldr	r3, [r3, #8]
 810186c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8101870:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8101874:	f043 0204 	orr.w	r2, r3, #4
 8101878:	687b      	ldr	r3, [r7, #4]
 810187a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 810187c:	bf00      	nop
 810187e:	370c      	adds	r7, #12
 8101880:	46bd      	mov	sp, r7
 8101882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101886:	4770      	bx	lr

08101888 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8101888:	b480      	push	{r7}
 810188a:	b083      	sub	sp, #12
 810188c:	af00      	add	r7, sp, #0
 810188e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101890:	687b      	ldr	r3, [r7, #4]
 8101892:	689b      	ldr	r3, [r3, #8]
 8101894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8101898:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810189c:	f043 0210 	orr.w	r2, r3, #16
 81018a0:	687b      	ldr	r3, [r7, #4]
 81018a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 81018a4:	bf00      	nop
 81018a6:	370c      	adds	r7, #12
 81018a8:	46bd      	mov	sp, r7
 81018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018ae:	4770      	bx	lr

081018b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81018b0:	b480      	push	{r7}
 81018b2:	b083      	sub	sp, #12
 81018b4:	af00      	add	r7, sp, #0
 81018b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81018b8:	687b      	ldr	r3, [r7, #4]
 81018ba:	689b      	ldr	r3, [r3, #8]
 81018bc:	f003 0304 	and.w	r3, r3, #4
 81018c0:	2b04      	cmp	r3, #4
 81018c2:	d101      	bne.n	81018c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 81018c4:	2301      	movs	r3, #1
 81018c6:	e000      	b.n	81018ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 81018c8:	2300      	movs	r3, #0
}
 81018ca:	4618      	mov	r0, r3
 81018cc:	370c      	adds	r7, #12
 81018ce:	46bd      	mov	sp, r7
 81018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018d4:	4770      	bx	lr

081018d6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 81018d6:	b480      	push	{r7}
 81018d8:	b083      	sub	sp, #12
 81018da:	af00      	add	r7, sp, #0
 81018dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81018de:	687b      	ldr	r3, [r7, #4]
 81018e0:	689b      	ldr	r3, [r3, #8]
 81018e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81018e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81018ea:	f043 0220 	orr.w	r2, r3, #32
 81018ee:	687b      	ldr	r3, [r7, #4]
 81018f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 81018f2:	bf00      	nop
 81018f4:	370c      	adds	r7, #12
 81018f6:	46bd      	mov	sp, r7
 81018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018fc:	4770      	bx	lr

081018fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81018fe:	b480      	push	{r7}
 8101900:	b083      	sub	sp, #12
 8101902:	af00      	add	r7, sp, #0
 8101904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8101906:	687b      	ldr	r3, [r7, #4]
 8101908:	689b      	ldr	r3, [r3, #8]
 810190a:	f003 0308 	and.w	r3, r3, #8
 810190e:	2b08      	cmp	r3, #8
 8101910:	d101      	bne.n	8101916 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8101912:	2301      	movs	r3, #1
 8101914:	e000      	b.n	8101918 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8101916:	2300      	movs	r3, #0
}
 8101918:	4618      	mov	r0, r3
 810191a:	370c      	adds	r7, #12
 810191c:	46bd      	mov	sp, r7
 810191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101922:	4770      	bx	lr

08101924 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8101924:	b590      	push	{r4, r7, lr}
 8101926:	b089      	sub	sp, #36	@ 0x24
 8101928:	af00      	add	r7, sp, #0
 810192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810192c:	2300      	movs	r3, #0
 810192e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8101930:	2300      	movs	r3, #0
 8101932:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8101934:	687b      	ldr	r3, [r7, #4]
 8101936:	2b00      	cmp	r3, #0
 8101938:	d101      	bne.n	810193e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 810193a:	2301      	movs	r3, #1
 810193c:	e18f      	b.n	8101c5e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 810193e:	687b      	ldr	r3, [r7, #4]
 8101940:	68db      	ldr	r3, [r3, #12]
 8101942:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8101944:	687b      	ldr	r3, [r7, #4]
 8101946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101948:	2b00      	cmp	r3, #0
 810194a:	d109      	bne.n	8101960 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 810194c:	6878      	ldr	r0, [r7, #4]
 810194e:	f7ff f973 	bl	8100c38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8101952:	687b      	ldr	r3, [r7, #4]
 8101954:	2200      	movs	r2, #0
 8101956:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8101958:	687b      	ldr	r3, [r7, #4]
 810195a:	2200      	movs	r2, #0
 810195c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	681b      	ldr	r3, [r3, #0]
 8101964:	4618      	mov	r0, r3
 8101966:	f7ff fef1 	bl	810174c <LL_ADC_IsDeepPowerDownEnabled>
 810196a:	4603      	mov	r3, r0
 810196c:	2b00      	cmp	r3, #0
 810196e:	d004      	beq.n	810197a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8101970:	687b      	ldr	r3, [r7, #4]
 8101972:	681b      	ldr	r3, [r3, #0]
 8101974:	4618      	mov	r0, r3
 8101976:	f7ff fed7 	bl	8101728 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810197a:	687b      	ldr	r3, [r7, #4]
 810197c:	681b      	ldr	r3, [r3, #0]
 810197e:	4618      	mov	r0, r3
 8101980:	f7ff ff0c 	bl	810179c <LL_ADC_IsInternalRegulatorEnabled>
 8101984:	4603      	mov	r3, r0
 8101986:	2b00      	cmp	r3, #0
 8101988:	d114      	bne.n	81019b4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810198a:	687b      	ldr	r3, [r7, #4]
 810198c:	681b      	ldr	r3, [r3, #0]
 810198e:	4618      	mov	r0, r3
 8101990:	f7ff fef0 	bl	8101774 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101994:	4b88      	ldr	r3, [pc, #544]	@ (8101bb8 <HAL_ADC_Init+0x294>)
 8101996:	681b      	ldr	r3, [r3, #0]
 8101998:	099b      	lsrs	r3, r3, #6
 810199a:	4a88      	ldr	r2, [pc, #544]	@ (8101bbc <HAL_ADC_Init+0x298>)
 810199c:	fba2 2303 	umull	r2, r3, r2, r3
 81019a0:	099b      	lsrs	r3, r3, #6
 81019a2:	3301      	adds	r3, #1
 81019a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81019a6:	e002      	b.n	81019ae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 81019a8:	68bb      	ldr	r3, [r7, #8]
 81019aa:	3b01      	subs	r3, #1
 81019ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81019ae:	68bb      	ldr	r3, [r7, #8]
 81019b0:	2b00      	cmp	r3, #0
 81019b2:	d1f9      	bne.n	81019a8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81019b4:	687b      	ldr	r3, [r7, #4]
 81019b6:	681b      	ldr	r3, [r3, #0]
 81019b8:	4618      	mov	r0, r3
 81019ba:	f7ff feef 	bl	810179c <LL_ADC_IsInternalRegulatorEnabled>
 81019be:	4603      	mov	r3, r0
 81019c0:	2b00      	cmp	r3, #0
 81019c2:	d10d      	bne.n	81019e0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81019c4:	687b      	ldr	r3, [r7, #4]
 81019c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81019c8:	f043 0210 	orr.w	r2, r3, #16
 81019cc:	687b      	ldr	r3, [r7, #4]
 81019ce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81019d0:	687b      	ldr	r3, [r7, #4]
 81019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81019d4:	f043 0201 	orr.w	r2, r3, #1
 81019d8:	687b      	ldr	r3, [r7, #4]
 81019da:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 81019dc:	2301      	movs	r3, #1
 81019de:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81019e0:	687b      	ldr	r3, [r7, #4]
 81019e2:	681b      	ldr	r3, [r3, #0]
 81019e4:	4618      	mov	r0, r3
 81019e6:	f7ff ff63 	bl	81018b0 <LL_ADC_REG_IsConversionOngoing>
 81019ea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81019f0:	f003 0310 	and.w	r3, r3, #16
 81019f4:	2b00      	cmp	r3, #0
 81019f6:	f040 8129 	bne.w	8101c4c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81019fa:	697b      	ldr	r3, [r7, #20]
 81019fc:	2b00      	cmp	r3, #0
 81019fe:	f040 8125 	bne.w	8101c4c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8101a02:	687b      	ldr	r3, [r7, #4]
 8101a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101a06:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8101a0a:	f043 0202 	orr.w	r2, r3, #2
 8101a0e:	687b      	ldr	r3, [r7, #4]
 8101a10:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101a12:	687b      	ldr	r3, [r7, #4]
 8101a14:	681b      	ldr	r3, [r3, #0]
 8101a16:	4618      	mov	r0, r3
 8101a18:	f7ff fefc 	bl	8101814 <LL_ADC_IsEnabled>
 8101a1c:	4603      	mov	r3, r0
 8101a1e:	2b00      	cmp	r3, #0
 8101a20:	d136      	bne.n	8101a90 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	681b      	ldr	r3, [r3, #0]
 8101a26:	4a66      	ldr	r2, [pc, #408]	@ (8101bc0 <HAL_ADC_Init+0x29c>)
 8101a28:	4293      	cmp	r3, r2
 8101a2a:	d004      	beq.n	8101a36 <HAL_ADC_Init+0x112>
 8101a2c:	687b      	ldr	r3, [r7, #4]
 8101a2e:	681b      	ldr	r3, [r3, #0]
 8101a30:	4a64      	ldr	r2, [pc, #400]	@ (8101bc4 <HAL_ADC_Init+0x2a0>)
 8101a32:	4293      	cmp	r3, r2
 8101a34:	d10e      	bne.n	8101a54 <HAL_ADC_Init+0x130>
 8101a36:	4862      	ldr	r0, [pc, #392]	@ (8101bc0 <HAL_ADC_Init+0x29c>)
 8101a38:	f7ff feec 	bl	8101814 <LL_ADC_IsEnabled>
 8101a3c:	4604      	mov	r4, r0
 8101a3e:	4861      	ldr	r0, [pc, #388]	@ (8101bc4 <HAL_ADC_Init+0x2a0>)
 8101a40:	f7ff fee8 	bl	8101814 <LL_ADC_IsEnabled>
 8101a44:	4603      	mov	r3, r0
 8101a46:	4323      	orrs	r3, r4
 8101a48:	2b00      	cmp	r3, #0
 8101a4a:	bf0c      	ite	eq
 8101a4c:	2301      	moveq	r3, #1
 8101a4e:	2300      	movne	r3, #0
 8101a50:	b2db      	uxtb	r3, r3
 8101a52:	e008      	b.n	8101a66 <HAL_ADC_Init+0x142>
 8101a54:	485c      	ldr	r0, [pc, #368]	@ (8101bc8 <HAL_ADC_Init+0x2a4>)
 8101a56:	f7ff fedd 	bl	8101814 <LL_ADC_IsEnabled>
 8101a5a:	4603      	mov	r3, r0
 8101a5c:	2b00      	cmp	r3, #0
 8101a5e:	bf0c      	ite	eq
 8101a60:	2301      	moveq	r3, #1
 8101a62:	2300      	movne	r3, #0
 8101a64:	b2db      	uxtb	r3, r3
 8101a66:	2b00      	cmp	r3, #0
 8101a68:	d012      	beq.n	8101a90 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8101a6a:	687b      	ldr	r3, [r7, #4]
 8101a6c:	681b      	ldr	r3, [r3, #0]
 8101a6e:	4a54      	ldr	r2, [pc, #336]	@ (8101bc0 <HAL_ADC_Init+0x29c>)
 8101a70:	4293      	cmp	r3, r2
 8101a72:	d004      	beq.n	8101a7e <HAL_ADC_Init+0x15a>
 8101a74:	687b      	ldr	r3, [r7, #4]
 8101a76:	681b      	ldr	r3, [r3, #0]
 8101a78:	4a52      	ldr	r2, [pc, #328]	@ (8101bc4 <HAL_ADC_Init+0x2a0>)
 8101a7a:	4293      	cmp	r3, r2
 8101a7c:	d101      	bne.n	8101a82 <HAL_ADC_Init+0x15e>
 8101a7e:	4a53      	ldr	r2, [pc, #332]	@ (8101bcc <HAL_ADC_Init+0x2a8>)
 8101a80:	e000      	b.n	8101a84 <HAL_ADC_Init+0x160>
 8101a82:	4a53      	ldr	r2, [pc, #332]	@ (8101bd0 <HAL_ADC_Init+0x2ac>)
 8101a84:	687b      	ldr	r3, [r7, #4]
 8101a86:	685b      	ldr	r3, [r3, #4]
 8101a88:	4619      	mov	r1, r3
 8101a8a:	4610      	mov	r0, r2
 8101a8c:	f7ff fd06 	bl	810149c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8101a90:	f7ff fce2 	bl	8101458 <HAL_GetREVID>
 8101a94:	4603      	mov	r3, r0
 8101a96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8101a9a:	4293      	cmp	r3, r2
 8101a9c:	d914      	bls.n	8101ac8 <HAL_ADC_Init+0x1a4>
 8101a9e:	687b      	ldr	r3, [r7, #4]
 8101aa0:	689b      	ldr	r3, [r3, #8]
 8101aa2:	2b10      	cmp	r3, #16
 8101aa4:	d110      	bne.n	8101ac8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101aa6:	687b      	ldr	r3, [r7, #4]
 8101aa8:	7d5b      	ldrb	r3, [r3, #21]
 8101aaa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101aac:	687b      	ldr	r3, [r7, #4]
 8101aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101ab0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101ab2:	687b      	ldr	r3, [r7, #4]
 8101ab4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101ab6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101ab8:	687b      	ldr	r3, [r7, #4]
 8101aba:	7f1b      	ldrb	r3, [r3, #28]
 8101abc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101abe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101ac0:	f043 030c 	orr.w	r3, r3, #12
 8101ac4:	61bb      	str	r3, [r7, #24]
 8101ac6:	e00d      	b.n	8101ae4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101ac8:	687b      	ldr	r3, [r7, #4]
 8101aca:	7d5b      	ldrb	r3, [r3, #21]
 8101acc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101ad2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8101ad4:	687b      	ldr	r3, [r7, #4]
 8101ad6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101ad8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101ada:	687b      	ldr	r3, [r7, #4]
 8101adc:	7f1b      	ldrb	r3, [r3, #28]
 8101ade:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101ae0:	4313      	orrs	r3, r2
 8101ae2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8101ae4:	687b      	ldr	r3, [r7, #4]
 8101ae6:	7f1b      	ldrb	r3, [r3, #28]
 8101ae8:	2b01      	cmp	r3, #1
 8101aea:	d106      	bne.n	8101afa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	6a1b      	ldr	r3, [r3, #32]
 8101af0:	3b01      	subs	r3, #1
 8101af2:	045b      	lsls	r3, r3, #17
 8101af4:	69ba      	ldr	r2, [r7, #24]
 8101af6:	4313      	orrs	r3, r2
 8101af8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8101afa:	687b      	ldr	r3, [r7, #4]
 8101afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101afe:	2b00      	cmp	r3, #0
 8101b00:	d009      	beq.n	8101b16 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101b02:	687b      	ldr	r3, [r7, #4]
 8101b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101b06:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8101b0a:	687b      	ldr	r3, [r7, #4]
 8101b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101b0e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101b10:	69ba      	ldr	r2, [r7, #24]
 8101b12:	4313      	orrs	r3, r2
 8101b14:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8101b16:	687b      	ldr	r3, [r7, #4]
 8101b18:	681b      	ldr	r3, [r3, #0]
 8101b1a:	68da      	ldr	r2, [r3, #12]
 8101b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8101bd4 <HAL_ADC_Init+0x2b0>)
 8101b1e:	4013      	ands	r3, r2
 8101b20:	687a      	ldr	r2, [r7, #4]
 8101b22:	6812      	ldr	r2, [r2, #0]
 8101b24:	69b9      	ldr	r1, [r7, #24]
 8101b26:	430b      	orrs	r3, r1
 8101b28:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101b2a:	687b      	ldr	r3, [r7, #4]
 8101b2c:	681b      	ldr	r3, [r3, #0]
 8101b2e:	4618      	mov	r0, r3
 8101b30:	f7ff febe 	bl	81018b0 <LL_ADC_REG_IsConversionOngoing>
 8101b34:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101b36:	687b      	ldr	r3, [r7, #4]
 8101b38:	681b      	ldr	r3, [r3, #0]
 8101b3a:	4618      	mov	r0, r3
 8101b3c:	f7ff fedf 	bl	81018fe <LL_ADC_INJ_IsConversionOngoing>
 8101b40:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101b42:	693b      	ldr	r3, [r7, #16]
 8101b44:	2b00      	cmp	r3, #0
 8101b46:	d15f      	bne.n	8101c08 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101b48:	68fb      	ldr	r3, [r7, #12]
 8101b4a:	2b00      	cmp	r3, #0
 8101b4c:	d15c      	bne.n	8101c08 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8101b4e:	687b      	ldr	r3, [r7, #4]
 8101b50:	7d1b      	ldrb	r3, [r3, #20]
 8101b52:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8101b58:	4313      	orrs	r3, r2
 8101b5a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8101b5c:	687b      	ldr	r3, [r7, #4]
 8101b5e:	681b      	ldr	r3, [r3, #0]
 8101b60:	68db      	ldr	r3, [r3, #12]
 8101b62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8101b66:	f023 0303 	bic.w	r3, r3, #3
 8101b6a:	687a      	ldr	r2, [r7, #4]
 8101b6c:	6812      	ldr	r2, [r2, #0]
 8101b6e:	69b9      	ldr	r1, [r7, #24]
 8101b70:	430b      	orrs	r3, r1
 8101b72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8101b74:	687b      	ldr	r3, [r7, #4]
 8101b76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8101b7a:	2b01      	cmp	r3, #1
 8101b7c:	d12e      	bne.n	8101bdc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8101b7e:	687b      	ldr	r3, [r7, #4]
 8101b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101b82:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8101b84:	687b      	ldr	r3, [r7, #4]
 8101b86:	681b      	ldr	r3, [r3, #0]
 8101b88:	691a      	ldr	r2, [r3, #16]
 8101b8a:	4b13      	ldr	r3, [pc, #76]	@ (8101bd8 <HAL_ADC_Init+0x2b4>)
 8101b8c:	4013      	ands	r3, r2
 8101b8e:	687a      	ldr	r2, [r7, #4]
 8101b90:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8101b92:	3a01      	subs	r2, #1
 8101b94:	0411      	lsls	r1, r2, #16
 8101b96:	687a      	ldr	r2, [r7, #4]
 8101b98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8101b9a:	4311      	orrs	r1, r2
 8101b9c:	687a      	ldr	r2, [r7, #4]
 8101b9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8101ba0:	4311      	orrs	r1, r2
 8101ba2:	687a      	ldr	r2, [r7, #4]
 8101ba4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8101ba6:	430a      	orrs	r2, r1
 8101ba8:	431a      	orrs	r2, r3
 8101baa:	687b      	ldr	r3, [r7, #4]
 8101bac:	681b      	ldr	r3, [r3, #0]
 8101bae:	f042 0201 	orr.w	r2, r2, #1
 8101bb2:	611a      	str	r2, [r3, #16]
 8101bb4:	e01a      	b.n	8101bec <HAL_ADC_Init+0x2c8>
 8101bb6:	bf00      	nop
 8101bb8:	10000000 	.word	0x10000000
 8101bbc:	053e2d63 	.word	0x053e2d63
 8101bc0:	40022000 	.word	0x40022000
 8101bc4:	40022100 	.word	0x40022100
 8101bc8:	58026000 	.word	0x58026000
 8101bcc:	40022300 	.word	0x40022300
 8101bd0:	58026300 	.word	0x58026300
 8101bd4:	fff0c003 	.word	0xfff0c003
 8101bd8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8101bdc:	687b      	ldr	r3, [r7, #4]
 8101bde:	681b      	ldr	r3, [r3, #0]
 8101be0:	691a      	ldr	r2, [r3, #16]
 8101be2:	687b      	ldr	r3, [r7, #4]
 8101be4:	681b      	ldr	r3, [r3, #0]
 8101be6:	f022 0201 	bic.w	r2, r2, #1
 8101bea:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	681b      	ldr	r3, [r3, #0]
 8101bf0:	691b      	ldr	r3, [r3, #16]
 8101bf2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8101bf6:	687b      	ldr	r3, [r7, #4]
 8101bf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8101bfa:	687b      	ldr	r3, [r7, #4]
 8101bfc:	681b      	ldr	r3, [r3, #0]
 8101bfe:	430a      	orrs	r2, r1
 8101c00:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8101c02:	6878      	ldr	r0, [r7, #4]
 8101c04:	f001 f98a 	bl	8102f1c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8101c08:	687b      	ldr	r3, [r7, #4]
 8101c0a:	68db      	ldr	r3, [r3, #12]
 8101c0c:	2b01      	cmp	r3, #1
 8101c0e:	d10c      	bne.n	8101c2a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8101c10:	687b      	ldr	r3, [r7, #4]
 8101c12:	681b      	ldr	r3, [r3, #0]
 8101c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101c16:	f023 010f 	bic.w	r1, r3, #15
 8101c1a:	687b      	ldr	r3, [r7, #4]
 8101c1c:	699b      	ldr	r3, [r3, #24]
 8101c1e:	1e5a      	subs	r2, r3, #1
 8101c20:	687b      	ldr	r3, [r7, #4]
 8101c22:	681b      	ldr	r3, [r3, #0]
 8101c24:	430a      	orrs	r2, r1
 8101c26:	631a      	str	r2, [r3, #48]	@ 0x30
 8101c28:	e007      	b.n	8101c3a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8101c2a:	687b      	ldr	r3, [r7, #4]
 8101c2c:	681b      	ldr	r3, [r3, #0]
 8101c2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8101c30:	687b      	ldr	r3, [r7, #4]
 8101c32:	681b      	ldr	r3, [r3, #0]
 8101c34:	f022 020f 	bic.w	r2, r2, #15
 8101c38:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8101c3a:	687b      	ldr	r3, [r7, #4]
 8101c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101c3e:	f023 0303 	bic.w	r3, r3, #3
 8101c42:	f043 0201 	orr.w	r2, r3, #1
 8101c46:	687b      	ldr	r3, [r7, #4]
 8101c48:	655a      	str	r2, [r3, #84]	@ 0x54
 8101c4a:	e007      	b.n	8101c5c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101c4c:	687b      	ldr	r3, [r7, #4]
 8101c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101c50:	f043 0210 	orr.w	r2, r3, #16
 8101c54:	687b      	ldr	r3, [r7, #4]
 8101c56:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8101c58:	2301      	movs	r3, #1
 8101c5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8101c5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8101c5e:	4618      	mov	r0, r3
 8101c60:	3724      	adds	r7, #36	@ 0x24
 8101c62:	46bd      	mov	sp, r7
 8101c64:	bd90      	pop	{r4, r7, pc}
 8101c66:	bf00      	nop

08101c68 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8101c68:	b580      	push	{r7, lr}
 8101c6a:	b086      	sub	sp, #24
 8101c6c:	af00      	add	r7, sp, #0
 8101c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101c70:	687b      	ldr	r3, [r7, #4]
 8101c72:	681b      	ldr	r3, [r3, #0]
 8101c74:	4a5d      	ldr	r2, [pc, #372]	@ (8101dec <HAL_ADC_Start+0x184>)
 8101c76:	4293      	cmp	r3, r2
 8101c78:	d004      	beq.n	8101c84 <HAL_ADC_Start+0x1c>
 8101c7a:	687b      	ldr	r3, [r7, #4]
 8101c7c:	681b      	ldr	r3, [r3, #0]
 8101c7e:	4a5c      	ldr	r2, [pc, #368]	@ (8101df0 <HAL_ADC_Start+0x188>)
 8101c80:	4293      	cmp	r3, r2
 8101c82:	d101      	bne.n	8101c88 <HAL_ADC_Start+0x20>
 8101c84:	4b5b      	ldr	r3, [pc, #364]	@ (8101df4 <HAL_ADC_Start+0x18c>)
 8101c86:	e000      	b.n	8101c8a <HAL_ADC_Start+0x22>
 8101c88:	4b5b      	ldr	r3, [pc, #364]	@ (8101df8 <HAL_ADC_Start+0x190>)
 8101c8a:	4618      	mov	r0, r3
 8101c8c:	f7ff fd30 	bl	81016f0 <LL_ADC_GetMultimode>
 8101c90:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	681b      	ldr	r3, [r3, #0]
 8101c96:	4618      	mov	r0, r3
 8101c98:	f7ff fe0a 	bl	81018b0 <LL_ADC_REG_IsConversionOngoing>
 8101c9c:	4603      	mov	r3, r0
 8101c9e:	2b00      	cmp	r3, #0
 8101ca0:	f040 809c 	bne.w	8101ddc <HAL_ADC_Start+0x174>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8101ca4:	687b      	ldr	r3, [r7, #4]
 8101ca6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8101caa:	2b01      	cmp	r3, #1
 8101cac:	d101      	bne.n	8101cb2 <HAL_ADC_Start+0x4a>
 8101cae:	2302      	movs	r3, #2
 8101cb0:	e097      	b.n	8101de2 <HAL_ADC_Start+0x17a>
 8101cb2:	687b      	ldr	r3, [r7, #4]
 8101cb4:	2201      	movs	r2, #1
 8101cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8101cba:	6878      	ldr	r0, [r7, #4]
 8101cbc:	f001 f844 	bl	8102d48 <ADC_Enable>
 8101cc0:	4603      	mov	r3, r0
 8101cc2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8101cc4:	7dfb      	ldrb	r3, [r7, #23]
 8101cc6:	2b00      	cmp	r3, #0
 8101cc8:	f040 8083 	bne.w	8101dd2 <HAL_ADC_Start+0x16a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8101ccc:	687b      	ldr	r3, [r7, #4]
 8101cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101cd0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101cd4:	f023 0301 	bic.w	r3, r3, #1
 8101cd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8101ce0:	687b      	ldr	r3, [r7, #4]
 8101ce2:	681b      	ldr	r3, [r3, #0]
 8101ce4:	4a42      	ldr	r2, [pc, #264]	@ (8101df0 <HAL_ADC_Start+0x188>)
 8101ce6:	4293      	cmp	r3, r2
 8101ce8:	d002      	beq.n	8101cf0 <HAL_ADC_Start+0x88>
 8101cea:	687b      	ldr	r3, [r7, #4]
 8101cec:	681b      	ldr	r3, [r3, #0]
 8101cee:	e000      	b.n	8101cf2 <HAL_ADC_Start+0x8a>
 8101cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8101dec <HAL_ADC_Start+0x184>)
 8101cf2:	687a      	ldr	r2, [r7, #4]
 8101cf4:	6812      	ldr	r2, [r2, #0]
 8101cf6:	4293      	cmp	r3, r2
 8101cf8:	d002      	beq.n	8101d00 <HAL_ADC_Start+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8101cfa:	693b      	ldr	r3, [r7, #16]
 8101cfc:	2b00      	cmp	r3, #0
 8101cfe:	d105      	bne.n	8101d0c <HAL_ADC_Start+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8101d00:	687b      	ldr	r3, [r7, #4]
 8101d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101d04:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8101d08:	687b      	ldr	r3, [r7, #4]
 8101d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8101d0c:	687b      	ldr	r3, [r7, #4]
 8101d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101d10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8101d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8101d18:	d106      	bne.n	8101d28 <HAL_ADC_Start+0xc0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8101d1a:	687b      	ldr	r3, [r7, #4]
 8101d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101d1e:	f023 0206 	bic.w	r2, r3, #6
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	659a      	str	r2, [r3, #88]	@ 0x58
 8101d26:	e002      	b.n	8101d2e <HAL_ADC_Start+0xc6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8101d28:	687b      	ldr	r3, [r7, #4]
 8101d2a:	2200      	movs	r2, #0
 8101d2c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8101d2e:	687b      	ldr	r3, [r7, #4]
 8101d30:	681b      	ldr	r3, [r3, #0]
 8101d32:	221c      	movs	r2, #28
 8101d34:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8101d36:	687b      	ldr	r3, [r7, #4]
 8101d38:	2200      	movs	r2, #0
 8101d3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8101d3e:	687b      	ldr	r3, [r7, #4]
 8101d40:	681b      	ldr	r3, [r3, #0]
 8101d42:	4a2b      	ldr	r2, [pc, #172]	@ (8101df0 <HAL_ADC_Start+0x188>)
 8101d44:	4293      	cmp	r3, r2
 8101d46:	d002      	beq.n	8101d4e <HAL_ADC_Start+0xe6>
 8101d48:	687b      	ldr	r3, [r7, #4]
 8101d4a:	681b      	ldr	r3, [r3, #0]
 8101d4c:	e000      	b.n	8101d50 <HAL_ADC_Start+0xe8>
 8101d4e:	4b27      	ldr	r3, [pc, #156]	@ (8101dec <HAL_ADC_Start+0x184>)
 8101d50:	687a      	ldr	r2, [r7, #4]
 8101d52:	6812      	ldr	r2, [r2, #0]
 8101d54:	4293      	cmp	r3, r2
 8101d56:	d008      	beq.n	8101d6a <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8101d58:	693b      	ldr	r3, [r7, #16]
 8101d5a:	2b00      	cmp	r3, #0
 8101d5c:	d005      	beq.n	8101d6a <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8101d5e:	693b      	ldr	r3, [r7, #16]
 8101d60:	2b05      	cmp	r3, #5
 8101d62:	d002      	beq.n	8101d6a <HAL_ADC_Start+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8101d64:	693b      	ldr	r3, [r7, #16]
 8101d66:	2b09      	cmp	r3, #9
 8101d68:	d114      	bne.n	8101d94 <HAL_ADC_Start+0x12c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8101d6a:	687b      	ldr	r3, [r7, #4]
 8101d6c:	681b      	ldr	r3, [r3, #0]
 8101d6e:	68db      	ldr	r3, [r3, #12]
 8101d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101d74:	2b00      	cmp	r3, #0
 8101d76:	d007      	beq.n	8101d88 <HAL_ADC_Start+0x120>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8101d78:	687b      	ldr	r3, [r7, #4]
 8101d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101d7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8101d80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8101d84:	687b      	ldr	r3, [r7, #4]
 8101d86:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8101d88:	687b      	ldr	r3, [r7, #4]
 8101d8a:	681b      	ldr	r3, [r3, #0]
 8101d8c:	4618      	mov	r0, r3
 8101d8e:	f7ff fd67 	bl	8101860 <LL_ADC_REG_StartConversion>
 8101d92:	e025      	b.n	8101de0 <HAL_ADC_Start+0x178>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101d98:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8101d9c:	687b      	ldr	r3, [r7, #4]
 8101d9e:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8101da0:	687b      	ldr	r3, [r7, #4]
 8101da2:	681b      	ldr	r3, [r3, #0]
 8101da4:	4a12      	ldr	r2, [pc, #72]	@ (8101df0 <HAL_ADC_Start+0x188>)
 8101da6:	4293      	cmp	r3, r2
 8101da8:	d002      	beq.n	8101db0 <HAL_ADC_Start+0x148>
 8101daa:	687b      	ldr	r3, [r7, #4]
 8101dac:	681b      	ldr	r3, [r3, #0]
 8101dae:	e000      	b.n	8101db2 <HAL_ADC_Start+0x14a>
 8101db0:	4b0e      	ldr	r3, [pc, #56]	@ (8101dec <HAL_ADC_Start+0x184>)
 8101db2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8101db4:	68fb      	ldr	r3, [r7, #12]
 8101db6:	68db      	ldr	r3, [r3, #12]
 8101db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101dbc:	2b00      	cmp	r3, #0
 8101dbe:	d00f      	beq.n	8101de0 <HAL_ADC_Start+0x178>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8101dc0:	687b      	ldr	r3, [r7, #4]
 8101dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101dc4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8101dc8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8101dcc:	687b      	ldr	r3, [r7, #4]
 8101dce:	655a      	str	r2, [r3, #84]	@ 0x54
 8101dd0:	e006      	b.n	8101de0 <HAL_ADC_Start+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	2200      	movs	r2, #0
 8101dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8101dda:	e001      	b.n	8101de0 <HAL_ADC_Start+0x178>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8101ddc:	2302      	movs	r3, #2
 8101dde:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8101de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8101de2:	4618      	mov	r0, r3
 8101de4:	3718      	adds	r7, #24
 8101de6:	46bd      	mov	sp, r7
 8101de8:	bd80      	pop	{r7, pc}
 8101dea:	bf00      	nop
 8101dec:	40022000 	.word	0x40022000
 8101df0:	40022100 	.word	0x40022100
 8101df4:	40022300 	.word	0x40022300
 8101df8:	58026300 	.word	0x58026300

08101dfc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8101dfc:	b580      	push	{r7, lr}
 8101dfe:	b084      	sub	sp, #16
 8101e00:	af00      	add	r7, sp, #0
 8101e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8101e04:	687b      	ldr	r3, [r7, #4]
 8101e06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8101e0a:	2b01      	cmp	r3, #1
 8101e0c:	d101      	bne.n	8101e12 <HAL_ADC_Stop+0x16>
 8101e0e:	2302      	movs	r3, #2
 8101e10:	e023      	b.n	8101e5a <HAL_ADC_Stop+0x5e>
 8101e12:	687b      	ldr	r3, [r7, #4]
 8101e14:	2201      	movs	r2, #1
 8101e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8101e1a:	2103      	movs	r1, #3
 8101e1c:	6878      	ldr	r0, [r7, #4]
 8101e1e:	f000 fed7 	bl	8102bd0 <ADC_ConversionStop>
 8101e22:	4603      	mov	r3, r0
 8101e24:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8101e26:	7bfb      	ldrb	r3, [r7, #15]
 8101e28:	2b00      	cmp	r3, #0
 8101e2a:	d111      	bne.n	8101e50 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8101e2c:	6878      	ldr	r0, [r7, #4]
 8101e2e:	f001 f815 	bl	8102e5c <ADC_Disable>
 8101e32:	4603      	mov	r3, r0
 8101e34:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8101e36:	7bfb      	ldrb	r3, [r7, #15]
 8101e38:	2b00      	cmp	r3, #0
 8101e3a:	d109      	bne.n	8101e50 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8101e3c:	687b      	ldr	r3, [r7, #4]
 8101e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101e40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8101e44:	f023 0301 	bic.w	r3, r3, #1
 8101e48:	f043 0201 	orr.w	r2, r3, #1
 8101e4c:	687b      	ldr	r3, [r7, #4]
 8101e4e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8101e50:	687b      	ldr	r3, [r7, #4]
 8101e52:	2200      	movs	r2, #0
 8101e54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8101e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8101e5a:	4618      	mov	r0, r3
 8101e5c:	3710      	adds	r7, #16
 8101e5e:	46bd      	mov	sp, r7
 8101e60:	bd80      	pop	{r7, pc}
	...

08101e64 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8101e64:	b580      	push	{r7, lr}
 8101e66:	b088      	sub	sp, #32
 8101e68:	af00      	add	r7, sp, #0
 8101e6a:	6078      	str	r0, [r7, #4]
 8101e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101e6e:	687b      	ldr	r3, [r7, #4]
 8101e70:	681b      	ldr	r3, [r3, #0]
 8101e72:	4a72      	ldr	r2, [pc, #456]	@ (810203c <HAL_ADC_PollForConversion+0x1d8>)
 8101e74:	4293      	cmp	r3, r2
 8101e76:	d004      	beq.n	8101e82 <HAL_ADC_PollForConversion+0x1e>
 8101e78:	687b      	ldr	r3, [r7, #4]
 8101e7a:	681b      	ldr	r3, [r3, #0]
 8101e7c:	4a70      	ldr	r2, [pc, #448]	@ (8102040 <HAL_ADC_PollForConversion+0x1dc>)
 8101e7e:	4293      	cmp	r3, r2
 8101e80:	d101      	bne.n	8101e86 <HAL_ADC_PollForConversion+0x22>
 8101e82:	4b70      	ldr	r3, [pc, #448]	@ (8102044 <HAL_ADC_PollForConversion+0x1e0>)
 8101e84:	e000      	b.n	8101e88 <HAL_ADC_PollForConversion+0x24>
 8101e86:	4b70      	ldr	r3, [pc, #448]	@ (8102048 <HAL_ADC_PollForConversion+0x1e4>)
 8101e88:	4618      	mov	r0, r3
 8101e8a:	f7ff fc31 	bl	81016f0 <LL_ADC_GetMultimode>
 8101e8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8101e90:	687b      	ldr	r3, [r7, #4]
 8101e92:	691b      	ldr	r3, [r3, #16]
 8101e94:	2b08      	cmp	r3, #8
 8101e96:	d102      	bne.n	8101e9e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8101e98:	2308      	movs	r3, #8
 8101e9a:	61fb      	str	r3, [r7, #28]
 8101e9c:	e037      	b.n	8101f0e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8101e9e:	697b      	ldr	r3, [r7, #20]
 8101ea0:	2b00      	cmp	r3, #0
 8101ea2:	d005      	beq.n	8101eb0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8101ea4:	697b      	ldr	r3, [r7, #20]
 8101ea6:	2b05      	cmp	r3, #5
 8101ea8:	d002      	beq.n	8101eb0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8101eaa:	697b      	ldr	r3, [r7, #20]
 8101eac:	2b09      	cmp	r3, #9
 8101eae:	d111      	bne.n	8101ed4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	681b      	ldr	r3, [r3, #0]
 8101eb4:	68db      	ldr	r3, [r3, #12]
 8101eb6:	f003 0301 	and.w	r3, r3, #1
 8101eba:	2b00      	cmp	r3, #0
 8101ebc:	d007      	beq.n	8101ece <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8101ebe:	687b      	ldr	r3, [r7, #4]
 8101ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101ec2:	f043 0220 	orr.w	r2, r3, #32
 8101ec6:	687b      	ldr	r3, [r7, #4]
 8101ec8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8101eca:	2301      	movs	r3, #1
 8101ecc:	e0b1      	b.n	8102032 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8101ece:	2304      	movs	r3, #4
 8101ed0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8101ed2:	e01c      	b.n	8101f0e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	681b      	ldr	r3, [r3, #0]
 8101ed8:	4a58      	ldr	r2, [pc, #352]	@ (810203c <HAL_ADC_PollForConversion+0x1d8>)
 8101eda:	4293      	cmp	r3, r2
 8101edc:	d004      	beq.n	8101ee8 <HAL_ADC_PollForConversion+0x84>
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	681b      	ldr	r3, [r3, #0]
 8101ee2:	4a57      	ldr	r2, [pc, #348]	@ (8102040 <HAL_ADC_PollForConversion+0x1dc>)
 8101ee4:	4293      	cmp	r3, r2
 8101ee6:	d101      	bne.n	8101eec <HAL_ADC_PollForConversion+0x88>
 8101ee8:	4b56      	ldr	r3, [pc, #344]	@ (8102044 <HAL_ADC_PollForConversion+0x1e0>)
 8101eea:	e000      	b.n	8101eee <HAL_ADC_PollForConversion+0x8a>
 8101eec:	4b56      	ldr	r3, [pc, #344]	@ (8102048 <HAL_ADC_PollForConversion+0x1e4>)
 8101eee:	4618      	mov	r0, r3
 8101ef0:	f7ff fc0c 	bl	810170c <LL_ADC_GetMultiDMATransfer>
 8101ef4:	4603      	mov	r3, r0
 8101ef6:	2b00      	cmp	r3, #0
 8101ef8:	d007      	beq.n	8101f0a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8101efa:	687b      	ldr	r3, [r7, #4]
 8101efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101efe:	f043 0220 	orr.w	r2, r3, #32
 8101f02:	687b      	ldr	r3, [r7, #4]
 8101f04:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8101f06:	2301      	movs	r3, #1
 8101f08:	e093      	b.n	8102032 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8101f0a:	2304      	movs	r3, #4
 8101f0c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8101f0e:	f7ff fa73 	bl	81013f8 <HAL_GetTick>
 8101f12:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8101f14:	e021      	b.n	8101f5a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8101f16:	683b      	ldr	r3, [r7, #0]
 8101f18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8101f1c:	d01d      	beq.n	8101f5a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8101f1e:	f7ff fa6b 	bl	81013f8 <HAL_GetTick>
 8101f22:	4602      	mov	r2, r0
 8101f24:	693b      	ldr	r3, [r7, #16]
 8101f26:	1ad3      	subs	r3, r2, r3
 8101f28:	683a      	ldr	r2, [r7, #0]
 8101f2a:	429a      	cmp	r2, r3
 8101f2c:	d302      	bcc.n	8101f34 <HAL_ADC_PollForConversion+0xd0>
 8101f2e:	683b      	ldr	r3, [r7, #0]
 8101f30:	2b00      	cmp	r3, #0
 8101f32:	d112      	bne.n	8101f5a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	681b      	ldr	r3, [r3, #0]
 8101f38:	681a      	ldr	r2, [r3, #0]
 8101f3a:	69fb      	ldr	r3, [r7, #28]
 8101f3c:	4013      	ands	r3, r2
 8101f3e:	2b00      	cmp	r3, #0
 8101f40:	d10b      	bne.n	8101f5a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8101f42:	687b      	ldr	r3, [r7, #4]
 8101f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101f46:	f043 0204 	orr.w	r2, r3, #4
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	2200      	movs	r2, #0
 8101f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8101f56:	2303      	movs	r3, #3
 8101f58:	e06b      	b.n	8102032 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8101f5a:	687b      	ldr	r3, [r7, #4]
 8101f5c:	681b      	ldr	r3, [r3, #0]
 8101f5e:	681a      	ldr	r2, [r3, #0]
 8101f60:	69fb      	ldr	r3, [r7, #28]
 8101f62:	4013      	ands	r3, r2
 8101f64:	2b00      	cmp	r3, #0
 8101f66:	d0d6      	beq.n	8101f16 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8101f68:	687b      	ldr	r3, [r7, #4]
 8101f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101f6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8101f70:	687b      	ldr	r3, [r7, #4]
 8101f72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8101f74:	687b      	ldr	r3, [r7, #4]
 8101f76:	681b      	ldr	r3, [r3, #0]
 8101f78:	4618      	mov	r0, r3
 8101f7a:	f7ff fb17 	bl	81015ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8101f7e:	4603      	mov	r3, r0
 8101f80:	2b00      	cmp	r3, #0
 8101f82:	d01c      	beq.n	8101fbe <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8101f84:	687b      	ldr	r3, [r7, #4]
 8101f86:	7d5b      	ldrb	r3, [r3, #21]
 8101f88:	2b00      	cmp	r3, #0
 8101f8a:	d118      	bne.n	8101fbe <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8101f8c:	687b      	ldr	r3, [r7, #4]
 8101f8e:	681b      	ldr	r3, [r3, #0]
 8101f90:	681b      	ldr	r3, [r3, #0]
 8101f92:	f003 0308 	and.w	r3, r3, #8
 8101f96:	2b08      	cmp	r3, #8
 8101f98:	d111      	bne.n	8101fbe <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101f9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101faa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8101fae:	2b00      	cmp	r3, #0
 8101fb0:	d105      	bne.n	8101fbe <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101fb6:	f043 0201 	orr.w	r2, r3, #1
 8101fba:	687b      	ldr	r3, [r7, #4]
 8101fbc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8101fbe:	687b      	ldr	r3, [r7, #4]
 8101fc0:	681b      	ldr	r3, [r3, #0]
 8101fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8102040 <HAL_ADC_PollForConversion+0x1dc>)
 8101fc4:	4293      	cmp	r3, r2
 8101fc6:	d002      	beq.n	8101fce <HAL_ADC_PollForConversion+0x16a>
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	681b      	ldr	r3, [r3, #0]
 8101fcc:	e000      	b.n	8101fd0 <HAL_ADC_PollForConversion+0x16c>
 8101fce:	4b1b      	ldr	r3, [pc, #108]	@ (810203c <HAL_ADC_PollForConversion+0x1d8>)
 8101fd0:	687a      	ldr	r2, [r7, #4]
 8101fd2:	6812      	ldr	r2, [r2, #0]
 8101fd4:	4293      	cmp	r3, r2
 8101fd6:	d008      	beq.n	8101fea <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8101fd8:	697b      	ldr	r3, [r7, #20]
 8101fda:	2b00      	cmp	r3, #0
 8101fdc:	d005      	beq.n	8101fea <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8101fde:	697b      	ldr	r3, [r7, #20]
 8101fe0:	2b05      	cmp	r3, #5
 8101fe2:	d002      	beq.n	8101fea <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8101fe4:	697b      	ldr	r3, [r7, #20]
 8101fe6:	2b09      	cmp	r3, #9
 8101fe8:	d104      	bne.n	8101ff4 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	681b      	ldr	r3, [r3, #0]
 8101fee:	68db      	ldr	r3, [r3, #12]
 8101ff0:	61bb      	str	r3, [r7, #24]
 8101ff2:	e00c      	b.n	810200e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	681b      	ldr	r3, [r3, #0]
 8101ff8:	4a11      	ldr	r2, [pc, #68]	@ (8102040 <HAL_ADC_PollForConversion+0x1dc>)
 8101ffa:	4293      	cmp	r3, r2
 8101ffc:	d002      	beq.n	8102004 <HAL_ADC_PollForConversion+0x1a0>
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	681b      	ldr	r3, [r3, #0]
 8102002:	e000      	b.n	8102006 <HAL_ADC_PollForConversion+0x1a2>
 8102004:	4b0d      	ldr	r3, [pc, #52]	@ (810203c <HAL_ADC_PollForConversion+0x1d8>)
 8102006:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8102008:	68fb      	ldr	r3, [r7, #12]
 810200a:	68db      	ldr	r3, [r3, #12]
 810200c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 810200e:	69fb      	ldr	r3, [r7, #28]
 8102010:	2b08      	cmp	r3, #8
 8102012:	d104      	bne.n	810201e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	681b      	ldr	r3, [r3, #0]
 8102018:	2208      	movs	r2, #8
 810201a:	601a      	str	r2, [r3, #0]
 810201c:	e008      	b.n	8102030 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 810201e:	69bb      	ldr	r3, [r7, #24]
 8102020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102024:	2b00      	cmp	r3, #0
 8102026:	d103      	bne.n	8102030 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8102028:	687b      	ldr	r3, [r7, #4]
 810202a:	681b      	ldr	r3, [r3, #0]
 810202c:	220c      	movs	r2, #12
 810202e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8102030:	2300      	movs	r3, #0
}
 8102032:	4618      	mov	r0, r3
 8102034:	3720      	adds	r7, #32
 8102036:	46bd      	mov	sp, r7
 8102038:	bd80      	pop	{r7, pc}
 810203a:	bf00      	nop
 810203c:	40022000 	.word	0x40022000
 8102040:	40022100 	.word	0x40022100
 8102044:	40022300 	.word	0x40022300
 8102048:	58026300 	.word	0x58026300

0810204c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 810204c:	b480      	push	{r7}
 810204e:	b083      	sub	sp, #12
 8102050:	af00      	add	r7, sp, #0
 8102052:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8102054:	687b      	ldr	r3, [r7, #4]
 8102056:	681b      	ldr	r3, [r3, #0]
 8102058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 810205a:	4618      	mov	r0, r3
 810205c:	370c      	adds	r7, #12
 810205e:	46bd      	mov	sp, r7
 8102060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102064:	4770      	bx	lr
	...

08102068 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8102068:	b580      	push	{r7, lr}
 810206a:	b08a      	sub	sp, #40	@ 0x28
 810206c:	af00      	add	r7, sp, #0
 810206e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8102070:	2300      	movs	r3, #0
 8102072:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8102074:	687b      	ldr	r3, [r7, #4]
 8102076:	681b      	ldr	r3, [r3, #0]
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 810207c:	687b      	ldr	r3, [r7, #4]
 810207e:	681b      	ldr	r3, [r3, #0]
 8102080:	685b      	ldr	r3, [r3, #4]
 8102082:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102084:	687b      	ldr	r3, [r7, #4]
 8102086:	681b      	ldr	r3, [r3, #0]
 8102088:	4a87      	ldr	r2, [pc, #540]	@ (81022a8 <HAL_ADC_IRQHandler+0x240>)
 810208a:	4293      	cmp	r3, r2
 810208c:	d004      	beq.n	8102098 <HAL_ADC_IRQHandler+0x30>
 810208e:	687b      	ldr	r3, [r7, #4]
 8102090:	681b      	ldr	r3, [r3, #0]
 8102092:	4a86      	ldr	r2, [pc, #536]	@ (81022ac <HAL_ADC_IRQHandler+0x244>)
 8102094:	4293      	cmp	r3, r2
 8102096:	d101      	bne.n	810209c <HAL_ADC_IRQHandler+0x34>
 8102098:	4b85      	ldr	r3, [pc, #532]	@ (81022b0 <HAL_ADC_IRQHandler+0x248>)
 810209a:	e000      	b.n	810209e <HAL_ADC_IRQHandler+0x36>
 810209c:	4b85      	ldr	r3, [pc, #532]	@ (81022b4 <HAL_ADC_IRQHandler+0x24c>)
 810209e:	4618      	mov	r0, r3
 81020a0:	f7ff fb26 	bl	81016f0 <LL_ADC_GetMultimode>
 81020a4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 81020a6:	69fb      	ldr	r3, [r7, #28]
 81020a8:	f003 0302 	and.w	r3, r3, #2
 81020ac:	2b00      	cmp	r3, #0
 81020ae:	d017      	beq.n	81020e0 <HAL_ADC_IRQHandler+0x78>
 81020b0:	69bb      	ldr	r3, [r7, #24]
 81020b2:	f003 0302 	and.w	r3, r3, #2
 81020b6:	2b00      	cmp	r3, #0
 81020b8:	d012      	beq.n	81020e0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81020ba:	687b      	ldr	r3, [r7, #4]
 81020bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81020be:	f003 0310 	and.w	r3, r3, #16
 81020c2:	2b00      	cmp	r3, #0
 81020c4:	d105      	bne.n	81020d2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 81020c6:	687b      	ldr	r3, [r7, #4]
 81020c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81020ca:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 81020ce:	687b      	ldr	r3, [r7, #4]
 81020d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 81020d2:	6878      	ldr	r0, [r7, #4]
 81020d4:	f001 f87c 	bl	81031d0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 81020d8:	687b      	ldr	r3, [r7, #4]
 81020da:	681b      	ldr	r3, [r3, #0]
 81020dc:	2202      	movs	r2, #2
 81020de:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 81020e0:	69fb      	ldr	r3, [r7, #28]
 81020e2:	f003 0304 	and.w	r3, r3, #4
 81020e6:	2b00      	cmp	r3, #0
 81020e8:	d004      	beq.n	81020f4 <HAL_ADC_IRQHandler+0x8c>
 81020ea:	69bb      	ldr	r3, [r7, #24]
 81020ec:	f003 0304 	and.w	r3, r3, #4
 81020f0:	2b00      	cmp	r3, #0
 81020f2:	d10a      	bne.n	810210a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 81020f4:	69fb      	ldr	r3, [r7, #28]
 81020f6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 81020fa:	2b00      	cmp	r3, #0
 81020fc:	f000 8083 	beq.w	8102206 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8102100:	69bb      	ldr	r3, [r7, #24]
 8102102:	f003 0308 	and.w	r3, r3, #8
 8102106:	2b00      	cmp	r3, #0
 8102108:	d07d      	beq.n	8102206 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810210e:	f003 0310 	and.w	r3, r3, #16
 8102112:	2b00      	cmp	r3, #0
 8102114:	d105      	bne.n	8102122 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810211a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8102122:	687b      	ldr	r3, [r7, #4]
 8102124:	681b      	ldr	r3, [r3, #0]
 8102126:	4618      	mov	r0, r3
 8102128:	f7ff fa40 	bl	81015ac <LL_ADC_REG_IsTriggerSourceSWStart>
 810212c:	4603      	mov	r3, r0
 810212e:	2b00      	cmp	r3, #0
 8102130:	d062      	beq.n	81021f8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102132:	687b      	ldr	r3, [r7, #4]
 8102134:	681b      	ldr	r3, [r3, #0]
 8102136:	4a5d      	ldr	r2, [pc, #372]	@ (81022ac <HAL_ADC_IRQHandler+0x244>)
 8102138:	4293      	cmp	r3, r2
 810213a:	d002      	beq.n	8102142 <HAL_ADC_IRQHandler+0xda>
 810213c:	687b      	ldr	r3, [r7, #4]
 810213e:	681b      	ldr	r3, [r3, #0]
 8102140:	e000      	b.n	8102144 <HAL_ADC_IRQHandler+0xdc>
 8102142:	4b59      	ldr	r3, [pc, #356]	@ (81022a8 <HAL_ADC_IRQHandler+0x240>)
 8102144:	687a      	ldr	r2, [r7, #4]
 8102146:	6812      	ldr	r2, [r2, #0]
 8102148:	4293      	cmp	r3, r2
 810214a:	d008      	beq.n	810215e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810214c:	697b      	ldr	r3, [r7, #20]
 810214e:	2b00      	cmp	r3, #0
 8102150:	d005      	beq.n	810215e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8102152:	697b      	ldr	r3, [r7, #20]
 8102154:	2b05      	cmp	r3, #5
 8102156:	d002      	beq.n	810215e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8102158:	697b      	ldr	r3, [r7, #20]
 810215a:	2b09      	cmp	r3, #9
 810215c:	d104      	bne.n	8102168 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 810215e:	687b      	ldr	r3, [r7, #4]
 8102160:	681b      	ldr	r3, [r3, #0]
 8102162:	68db      	ldr	r3, [r3, #12]
 8102164:	623b      	str	r3, [r7, #32]
 8102166:	e00c      	b.n	8102182 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8102168:	687b      	ldr	r3, [r7, #4]
 810216a:	681b      	ldr	r3, [r3, #0]
 810216c:	4a4f      	ldr	r2, [pc, #316]	@ (81022ac <HAL_ADC_IRQHandler+0x244>)
 810216e:	4293      	cmp	r3, r2
 8102170:	d002      	beq.n	8102178 <HAL_ADC_IRQHandler+0x110>
 8102172:	687b      	ldr	r3, [r7, #4]
 8102174:	681b      	ldr	r3, [r3, #0]
 8102176:	e000      	b.n	810217a <HAL_ADC_IRQHandler+0x112>
 8102178:	4b4b      	ldr	r3, [pc, #300]	@ (81022a8 <HAL_ADC_IRQHandler+0x240>)
 810217a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 810217c:	693b      	ldr	r3, [r7, #16]
 810217e:	68db      	ldr	r3, [r3, #12]
 8102180:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8102182:	6a3b      	ldr	r3, [r7, #32]
 8102184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8102188:	2b00      	cmp	r3, #0
 810218a:	d135      	bne.n	81021f8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 810218c:	687b      	ldr	r3, [r7, #4]
 810218e:	681b      	ldr	r3, [r3, #0]
 8102190:	681b      	ldr	r3, [r3, #0]
 8102192:	f003 0308 	and.w	r3, r3, #8
 8102196:	2b08      	cmp	r3, #8
 8102198:	d12e      	bne.n	81021f8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	681b      	ldr	r3, [r3, #0]
 810219e:	4618      	mov	r0, r3
 81021a0:	f7ff fb86 	bl	81018b0 <LL_ADC_REG_IsConversionOngoing>
 81021a4:	4603      	mov	r3, r0
 81021a6:	2b00      	cmp	r3, #0
 81021a8:	d11a      	bne.n	81021e0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 81021aa:	687b      	ldr	r3, [r7, #4]
 81021ac:	681b      	ldr	r3, [r3, #0]
 81021ae:	685a      	ldr	r2, [r3, #4]
 81021b0:	687b      	ldr	r3, [r7, #4]
 81021b2:	681b      	ldr	r3, [r3, #0]
 81021b4:	f022 020c 	bic.w	r2, r2, #12
 81021b8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 81021ba:	687b      	ldr	r3, [r7, #4]
 81021bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81021be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81021c6:	687b      	ldr	r3, [r7, #4]
 81021c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81021ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81021ce:	2b00      	cmp	r3, #0
 81021d0:	d112      	bne.n	81021f8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81021d2:	687b      	ldr	r3, [r7, #4]
 81021d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81021d6:	f043 0201 	orr.w	r2, r3, #1
 81021da:	687b      	ldr	r3, [r7, #4]
 81021dc:	655a      	str	r2, [r3, #84]	@ 0x54
 81021de:	e00b      	b.n	81021f8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81021e0:	687b      	ldr	r3, [r7, #4]
 81021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81021e4:	f043 0210 	orr.w	r2, r3, #16
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81021ec:	687b      	ldr	r3, [r7, #4]
 81021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81021f0:	f043 0201 	orr.w	r2, r3, #1
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 81021f8:	6878      	ldr	r0, [r7, #4]
 81021fa:	f000 f96f 	bl	81024dc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	681b      	ldr	r3, [r3, #0]
 8102202:	220c      	movs	r2, #12
 8102204:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8102206:	69fb      	ldr	r3, [r7, #28]
 8102208:	f003 0320 	and.w	r3, r3, #32
 810220c:	2b00      	cmp	r3, #0
 810220e:	d004      	beq.n	810221a <HAL_ADC_IRQHandler+0x1b2>
 8102210:	69bb      	ldr	r3, [r7, #24]
 8102212:	f003 0320 	and.w	r3, r3, #32
 8102216:	2b00      	cmp	r3, #0
 8102218:	d10b      	bne.n	8102232 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 810221a:	69fb      	ldr	r3, [r7, #28]
 810221c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8102220:	2b00      	cmp	r3, #0
 8102222:	f000 80a0 	beq.w	8102366 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8102226:	69bb      	ldr	r3, [r7, #24]
 8102228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810222c:	2b00      	cmp	r3, #0
 810222e:	f000 809a 	beq.w	8102366 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102236:	f003 0310 	and.w	r3, r3, #16
 810223a:	2b00      	cmp	r3, #0
 810223c:	d105      	bne.n	810224a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 810223e:	687b      	ldr	r3, [r7, #4]
 8102240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102242:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8102246:	687b      	ldr	r3, [r7, #4]
 8102248:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 810224a:	687b      	ldr	r3, [r7, #4]
 810224c:	681b      	ldr	r3, [r3, #0]
 810224e:	4618      	mov	r0, r3
 8102250:	f7ff f9eb 	bl	810162a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8102254:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	681b      	ldr	r3, [r3, #0]
 810225a:	4618      	mov	r0, r3
 810225c:	f7ff f9a6 	bl	81015ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8102260:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102262:	687b      	ldr	r3, [r7, #4]
 8102264:	681b      	ldr	r3, [r3, #0]
 8102266:	4a11      	ldr	r2, [pc, #68]	@ (81022ac <HAL_ADC_IRQHandler+0x244>)
 8102268:	4293      	cmp	r3, r2
 810226a:	d002      	beq.n	8102272 <HAL_ADC_IRQHandler+0x20a>
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	681b      	ldr	r3, [r3, #0]
 8102270:	e000      	b.n	8102274 <HAL_ADC_IRQHandler+0x20c>
 8102272:	4b0d      	ldr	r3, [pc, #52]	@ (81022a8 <HAL_ADC_IRQHandler+0x240>)
 8102274:	687a      	ldr	r2, [r7, #4]
 8102276:	6812      	ldr	r2, [r2, #0]
 8102278:	4293      	cmp	r3, r2
 810227a:	d008      	beq.n	810228e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810227c:	697b      	ldr	r3, [r7, #20]
 810227e:	2b00      	cmp	r3, #0
 8102280:	d005      	beq.n	810228e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8102282:	697b      	ldr	r3, [r7, #20]
 8102284:	2b06      	cmp	r3, #6
 8102286:	d002      	beq.n	810228e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8102288:	697b      	ldr	r3, [r7, #20]
 810228a:	2b07      	cmp	r3, #7
 810228c:	d104      	bne.n	8102298 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 810228e:	687b      	ldr	r3, [r7, #4]
 8102290:	681b      	ldr	r3, [r3, #0]
 8102292:	68db      	ldr	r3, [r3, #12]
 8102294:	623b      	str	r3, [r7, #32]
 8102296:	e014      	b.n	81022c2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8102298:	687b      	ldr	r3, [r7, #4]
 810229a:	681b      	ldr	r3, [r3, #0]
 810229c:	4a03      	ldr	r2, [pc, #12]	@ (81022ac <HAL_ADC_IRQHandler+0x244>)
 810229e:	4293      	cmp	r3, r2
 81022a0:	d00a      	beq.n	81022b8 <HAL_ADC_IRQHandler+0x250>
 81022a2:	687b      	ldr	r3, [r7, #4]
 81022a4:	681b      	ldr	r3, [r3, #0]
 81022a6:	e008      	b.n	81022ba <HAL_ADC_IRQHandler+0x252>
 81022a8:	40022000 	.word	0x40022000
 81022ac:	40022100 	.word	0x40022100
 81022b0:	40022300 	.word	0x40022300
 81022b4:	58026300 	.word	0x58026300
 81022b8:	4b84      	ldr	r3, [pc, #528]	@ (81024cc <HAL_ADC_IRQHandler+0x464>)
 81022ba:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 81022bc:	693b      	ldr	r3, [r7, #16]
 81022be:	68db      	ldr	r3, [r3, #12]
 81022c0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 81022c2:	68fb      	ldr	r3, [r7, #12]
 81022c4:	2b00      	cmp	r3, #0
 81022c6:	d047      	beq.n	8102358 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 81022c8:	6a3b      	ldr	r3, [r7, #32]
 81022ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81022ce:	2b00      	cmp	r3, #0
 81022d0:	d007      	beq.n	81022e2 <HAL_ADC_IRQHandler+0x27a>
 81022d2:	68bb      	ldr	r3, [r7, #8]
 81022d4:	2b00      	cmp	r3, #0
 81022d6:	d03f      	beq.n	8102358 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 81022d8:	6a3b      	ldr	r3, [r7, #32]
 81022da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 81022de:	2b00      	cmp	r3, #0
 81022e0:	d13a      	bne.n	8102358 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 81022e2:	687b      	ldr	r3, [r7, #4]
 81022e4:	681b      	ldr	r3, [r3, #0]
 81022e6:	681b      	ldr	r3, [r3, #0]
 81022e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81022ec:	2b40      	cmp	r3, #64	@ 0x40
 81022ee:	d133      	bne.n	8102358 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 81022f0:	6a3b      	ldr	r3, [r7, #32]
 81022f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81022f6:	2b00      	cmp	r3, #0
 81022f8:	d12e      	bne.n	8102358 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 81022fa:	687b      	ldr	r3, [r7, #4]
 81022fc:	681b      	ldr	r3, [r3, #0]
 81022fe:	4618      	mov	r0, r3
 8102300:	f7ff fafd 	bl	81018fe <LL_ADC_INJ_IsConversionOngoing>
 8102304:	4603      	mov	r3, r0
 8102306:	2b00      	cmp	r3, #0
 8102308:	d11a      	bne.n	8102340 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 810230a:	687b      	ldr	r3, [r7, #4]
 810230c:	681b      	ldr	r3, [r3, #0]
 810230e:	685a      	ldr	r2, [r3, #4]
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	681b      	ldr	r3, [r3, #0]
 8102314:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8102318:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 810231a:	687b      	ldr	r3, [r7, #4]
 810231c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810231e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8102322:	687b      	ldr	r3, [r7, #4]
 8102324:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8102326:	687b      	ldr	r3, [r7, #4]
 8102328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810232a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810232e:	2b00      	cmp	r3, #0
 8102330:	d112      	bne.n	8102358 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102336:	f043 0201 	orr.w	r2, r3, #1
 810233a:	687b      	ldr	r3, [r7, #4]
 810233c:	655a      	str	r2, [r3, #84]	@ 0x54
 810233e:	e00b      	b.n	8102358 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102340:	687b      	ldr	r3, [r7, #4]
 8102342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102344:	f043 0210 	orr.w	r2, r3, #16
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 810234c:	687b      	ldr	r3, [r7, #4]
 810234e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102350:	f043 0201 	orr.w	r2, r3, #1
 8102354:	687b      	ldr	r3, [r7, #4]
 8102356:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8102358:	6878      	ldr	r0, [r7, #4]
 810235a:	f000 ff11 	bl	8103180 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 810235e:	687b      	ldr	r3, [r7, #4]
 8102360:	681b      	ldr	r3, [r3, #0]
 8102362:	2260      	movs	r2, #96	@ 0x60
 8102364:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8102366:	69fb      	ldr	r3, [r7, #28]
 8102368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810236c:	2b00      	cmp	r3, #0
 810236e:	d011      	beq.n	8102394 <HAL_ADC_IRQHandler+0x32c>
 8102370:	69bb      	ldr	r3, [r7, #24]
 8102372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102376:	2b00      	cmp	r3, #0
 8102378:	d00c      	beq.n	8102394 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 810237a:	687b      	ldr	r3, [r7, #4]
 810237c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810237e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8102382:	687b      	ldr	r3, [r7, #4]
 8102384:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8102386:	6878      	ldr	r0, [r7, #4]
 8102388:	f000 f8b2 	bl	81024f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 810238c:	687b      	ldr	r3, [r7, #4]
 810238e:	681b      	ldr	r3, [r3, #0]
 8102390:	2280      	movs	r2, #128	@ 0x80
 8102392:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8102394:	69fb      	ldr	r3, [r7, #28]
 8102396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810239a:	2b00      	cmp	r3, #0
 810239c:	d012      	beq.n	81023c4 <HAL_ADC_IRQHandler+0x35c>
 810239e:	69bb      	ldr	r3, [r7, #24]
 81023a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81023a4:	2b00      	cmp	r3, #0
 81023a6:	d00d      	beq.n	81023c4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 81023a8:	687b      	ldr	r3, [r7, #4]
 81023aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81023ac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 81023b0:	687b      	ldr	r3, [r7, #4]
 81023b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 81023b4:	6878      	ldr	r0, [r7, #4]
 81023b6:	f000 fef7 	bl	81031a8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 81023ba:	687b      	ldr	r3, [r7, #4]
 81023bc:	681b      	ldr	r3, [r3, #0]
 81023be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81023c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 81023c4:	69fb      	ldr	r3, [r7, #28]
 81023c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81023ca:	2b00      	cmp	r3, #0
 81023cc:	d012      	beq.n	81023f4 <HAL_ADC_IRQHandler+0x38c>
 81023ce:	69bb      	ldr	r3, [r7, #24]
 81023d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81023d4:	2b00      	cmp	r3, #0
 81023d6:	d00d      	beq.n	81023f4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81023dc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 81023e4:	6878      	ldr	r0, [r7, #4]
 81023e6:	f000 fee9 	bl	81031bc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 81023ea:	687b      	ldr	r3, [r7, #4]
 81023ec:	681b      	ldr	r3, [r3, #0]
 81023ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81023f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 81023f4:	69fb      	ldr	r3, [r7, #28]
 81023f6:	f003 0310 	and.w	r3, r3, #16
 81023fa:	2b00      	cmp	r3, #0
 81023fc:	d043      	beq.n	8102486 <HAL_ADC_IRQHandler+0x41e>
 81023fe:	69bb      	ldr	r3, [r7, #24]
 8102400:	f003 0310 	and.w	r3, r3, #16
 8102404:	2b00      	cmp	r3, #0
 8102406:	d03e      	beq.n	8102486 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8102408:	687b      	ldr	r3, [r7, #4]
 810240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810240c:	2b00      	cmp	r3, #0
 810240e:	d102      	bne.n	8102416 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8102410:	2301      	movs	r3, #1
 8102412:	627b      	str	r3, [r7, #36]	@ 0x24
 8102414:	e021      	b.n	810245a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8102416:	697b      	ldr	r3, [r7, #20]
 8102418:	2b00      	cmp	r3, #0
 810241a:	d015      	beq.n	8102448 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	4a2a      	ldr	r2, [pc, #168]	@ (81024cc <HAL_ADC_IRQHandler+0x464>)
 8102422:	4293      	cmp	r3, r2
 8102424:	d004      	beq.n	8102430 <HAL_ADC_IRQHandler+0x3c8>
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	4a29      	ldr	r2, [pc, #164]	@ (81024d0 <HAL_ADC_IRQHandler+0x468>)
 810242c:	4293      	cmp	r3, r2
 810242e:	d101      	bne.n	8102434 <HAL_ADC_IRQHandler+0x3cc>
 8102430:	4b28      	ldr	r3, [pc, #160]	@ (81024d4 <HAL_ADC_IRQHandler+0x46c>)
 8102432:	e000      	b.n	8102436 <HAL_ADC_IRQHandler+0x3ce>
 8102434:	4b28      	ldr	r3, [pc, #160]	@ (81024d8 <HAL_ADC_IRQHandler+0x470>)
 8102436:	4618      	mov	r0, r3
 8102438:	f7ff f968 	bl	810170c <LL_ADC_GetMultiDMATransfer>
 810243c:	4603      	mov	r3, r0
 810243e:	2b00      	cmp	r3, #0
 8102440:	d00b      	beq.n	810245a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8102442:	2301      	movs	r3, #1
 8102444:	627b      	str	r3, [r7, #36]	@ 0x24
 8102446:	e008      	b.n	810245a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	681b      	ldr	r3, [r3, #0]
 810244c:	68db      	ldr	r3, [r3, #12]
 810244e:	f003 0303 	and.w	r3, r3, #3
 8102452:	2b00      	cmp	r3, #0
 8102454:	d001      	beq.n	810245a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8102456:	2301      	movs	r3, #1
 8102458:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 810245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810245c:	2b01      	cmp	r3, #1
 810245e:	d10e      	bne.n	810247e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8102460:	687b      	ldr	r3, [r7, #4]
 8102462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102464:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102470:	f043 0202 	orr.w	r2, r3, #2
 8102474:	687b      	ldr	r3, [r7, #4]
 8102476:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8102478:	6878      	ldr	r0, [r7, #4]
 810247a:	f000 f843 	bl	8102504 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	681b      	ldr	r3, [r3, #0]
 8102482:	2210      	movs	r2, #16
 8102484:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8102486:	69fb      	ldr	r3, [r7, #28]
 8102488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810248c:	2b00      	cmp	r3, #0
 810248e:	d018      	beq.n	81024c2 <HAL_ADC_IRQHandler+0x45a>
 8102490:	69bb      	ldr	r3, [r7, #24]
 8102492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8102496:	2b00      	cmp	r3, #0
 8102498:	d013      	beq.n	81024c2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810249e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81024aa:	f043 0208 	orr.w	r2, r3, #8
 81024ae:	687b      	ldr	r3, [r7, #4]
 81024b0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 81024b2:	687b      	ldr	r3, [r7, #4]
 81024b4:	681b      	ldr	r3, [r3, #0]
 81024b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81024ba:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 81024bc:	6878      	ldr	r0, [r7, #4]
 81024be:	f000 fe69 	bl	8103194 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 81024c2:	bf00      	nop
 81024c4:	3728      	adds	r7, #40	@ 0x28
 81024c6:	46bd      	mov	sp, r7
 81024c8:	bd80      	pop	{r7, pc}
 81024ca:	bf00      	nop
 81024cc:	40022000 	.word	0x40022000
 81024d0:	40022100 	.word	0x40022100
 81024d4:	40022300 	.word	0x40022300
 81024d8:	58026300 	.word	0x58026300

081024dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 81024dc:	b480      	push	{r7}
 81024de:	b083      	sub	sp, #12
 81024e0:	af00      	add	r7, sp, #0
 81024e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 81024e4:	bf00      	nop
 81024e6:	370c      	adds	r7, #12
 81024e8:	46bd      	mov	sp, r7
 81024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024ee:	4770      	bx	lr

081024f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 81024f0:	b480      	push	{r7}
 81024f2:	b083      	sub	sp, #12
 81024f4:	af00      	add	r7, sp, #0
 81024f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 81024f8:	bf00      	nop
 81024fa:	370c      	adds	r7, #12
 81024fc:	46bd      	mov	sp, r7
 81024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102502:	4770      	bx	lr

08102504 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8102504:	b480      	push	{r7}
 8102506:	b083      	sub	sp, #12
 8102508:	af00      	add	r7, sp, #0
 810250a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 810250c:	bf00      	nop
 810250e:	370c      	adds	r7, #12
 8102510:	46bd      	mov	sp, r7
 8102512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102516:	4770      	bx	lr

08102518 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102518:	b590      	push	{r4, r7, lr}
 810251a:	b0a1      	sub	sp, #132	@ 0x84
 810251c:	af00      	add	r7, sp, #0
 810251e:	6078      	str	r0, [r7, #4]
 8102520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102522:	2300      	movs	r3, #0
 8102524:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102528:	2300      	movs	r3, #0
 810252a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 810252c:	683b      	ldr	r3, [r7, #0]
 810252e:	68db      	ldr	r3, [r3, #12]
 8102530:	4a65      	ldr	r2, [pc, #404]	@ (81026c8 <HAL_ADC_ConfigChannel+0x1b0>)
 8102532:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102534:	687b      	ldr	r3, [r7, #4]
 8102536:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 810253a:	2b01      	cmp	r3, #1
 810253c:	d101      	bne.n	8102542 <HAL_ADC_ConfigChannel+0x2a>
 810253e:	2302      	movs	r3, #2
 8102540:	e32e      	b.n	8102ba0 <HAL_ADC_ConfigChannel+0x688>
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	2201      	movs	r2, #1
 8102546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	681b      	ldr	r3, [r3, #0]
 810254e:	4618      	mov	r0, r3
 8102550:	f7ff f9ae 	bl	81018b0 <LL_ADC_REG_IsConversionOngoing>
 8102554:	4603      	mov	r3, r0
 8102556:	2b00      	cmp	r3, #0
 8102558:	f040 8313 	bne.w	8102b82 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 810255c:	683b      	ldr	r3, [r7, #0]
 810255e:	681b      	ldr	r3, [r3, #0]
 8102560:	2b00      	cmp	r3, #0
 8102562:	db2c      	blt.n	81025be <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102564:	683b      	ldr	r3, [r7, #0]
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810256c:	2b00      	cmp	r3, #0
 810256e:	d108      	bne.n	8102582 <HAL_ADC_ConfigChannel+0x6a>
 8102570:	683b      	ldr	r3, [r7, #0]
 8102572:	681b      	ldr	r3, [r3, #0]
 8102574:	0e9b      	lsrs	r3, r3, #26
 8102576:	f003 031f 	and.w	r3, r3, #31
 810257a:	2201      	movs	r2, #1
 810257c:	fa02 f303 	lsl.w	r3, r2, r3
 8102580:	e016      	b.n	81025b0 <HAL_ADC_ConfigChannel+0x98>
 8102582:	683b      	ldr	r3, [r7, #0]
 8102584:	681b      	ldr	r3, [r3, #0]
 8102586:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102588:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810258a:	fa93 f3a3 	rbit	r3, r3
 810258e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102590:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8102592:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8102596:	2b00      	cmp	r3, #0
 8102598:	d101      	bne.n	810259e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 810259a:	2320      	movs	r3, #32
 810259c:	e003      	b.n	81025a6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 810259e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81025a0:	fab3 f383 	clz	r3, r3
 81025a4:	b2db      	uxtb	r3, r3
 81025a6:	f003 031f 	and.w	r3, r3, #31
 81025aa:	2201      	movs	r2, #1
 81025ac:	fa02 f303 	lsl.w	r3, r2, r3
 81025b0:	687a      	ldr	r2, [r7, #4]
 81025b2:	6812      	ldr	r2, [r2, #0]
 81025b4:	69d1      	ldr	r1, [r2, #28]
 81025b6:	687a      	ldr	r2, [r7, #4]
 81025b8:	6812      	ldr	r2, [r2, #0]
 81025ba:	430b      	orrs	r3, r1
 81025bc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	6818      	ldr	r0, [r3, #0]
 81025c2:	683b      	ldr	r3, [r7, #0]
 81025c4:	6859      	ldr	r1, [r3, #4]
 81025c6:	683b      	ldr	r3, [r7, #0]
 81025c8:	681b      	ldr	r3, [r3, #0]
 81025ca:	461a      	mov	r2, r3
 81025cc:	f7ff f801 	bl	81015d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81025d0:	687b      	ldr	r3, [r7, #4]
 81025d2:	681b      	ldr	r3, [r3, #0]
 81025d4:	4618      	mov	r0, r3
 81025d6:	f7ff f96b 	bl	81018b0 <LL_ADC_REG_IsConversionOngoing>
 81025da:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	681b      	ldr	r3, [r3, #0]
 81025e0:	4618      	mov	r0, r3
 81025e2:	f7ff f98c 	bl	81018fe <LL_ADC_INJ_IsConversionOngoing>
 81025e6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81025e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 81025ea:	2b00      	cmp	r3, #0
 81025ec:	f040 80b8 	bne.w	8102760 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81025f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 81025f2:	2b00      	cmp	r3, #0
 81025f4:	f040 80b4 	bne.w	8102760 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81025f8:	687b      	ldr	r3, [r7, #4]
 81025fa:	6818      	ldr	r0, [r3, #0]
 81025fc:	683b      	ldr	r3, [r7, #0]
 81025fe:	6819      	ldr	r1, [r3, #0]
 8102600:	683b      	ldr	r3, [r7, #0]
 8102602:	689b      	ldr	r3, [r3, #8]
 8102604:	461a      	mov	r2, r3
 8102606:	f7ff f823 	bl	8101650 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810260a:	4b30      	ldr	r3, [pc, #192]	@ (81026cc <HAL_ADC_ConfigChannel+0x1b4>)
 810260c:	681b      	ldr	r3, [r3, #0]
 810260e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8102612:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102616:	d10b      	bne.n	8102630 <HAL_ADC_ConfigChannel+0x118>
 8102618:	683b      	ldr	r3, [r7, #0]
 810261a:	695a      	ldr	r2, [r3, #20]
 810261c:	687b      	ldr	r3, [r7, #4]
 810261e:	681b      	ldr	r3, [r3, #0]
 8102620:	68db      	ldr	r3, [r3, #12]
 8102622:	089b      	lsrs	r3, r3, #2
 8102624:	f003 0307 	and.w	r3, r3, #7
 8102628:	005b      	lsls	r3, r3, #1
 810262a:	fa02 f303 	lsl.w	r3, r2, r3
 810262e:	e01d      	b.n	810266c <HAL_ADC_ConfigChannel+0x154>
 8102630:	687b      	ldr	r3, [r7, #4]
 8102632:	681b      	ldr	r3, [r3, #0]
 8102634:	68db      	ldr	r3, [r3, #12]
 8102636:	f003 0310 	and.w	r3, r3, #16
 810263a:	2b00      	cmp	r3, #0
 810263c:	d10b      	bne.n	8102656 <HAL_ADC_ConfigChannel+0x13e>
 810263e:	683b      	ldr	r3, [r7, #0]
 8102640:	695a      	ldr	r2, [r3, #20]
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	681b      	ldr	r3, [r3, #0]
 8102646:	68db      	ldr	r3, [r3, #12]
 8102648:	089b      	lsrs	r3, r3, #2
 810264a:	f003 0307 	and.w	r3, r3, #7
 810264e:	005b      	lsls	r3, r3, #1
 8102650:	fa02 f303 	lsl.w	r3, r2, r3
 8102654:	e00a      	b.n	810266c <HAL_ADC_ConfigChannel+0x154>
 8102656:	683b      	ldr	r3, [r7, #0]
 8102658:	695a      	ldr	r2, [r3, #20]
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	681b      	ldr	r3, [r3, #0]
 810265e:	68db      	ldr	r3, [r3, #12]
 8102660:	089b      	lsrs	r3, r3, #2
 8102662:	f003 0304 	and.w	r3, r3, #4
 8102666:	005b      	lsls	r3, r3, #1
 8102668:	fa02 f303 	lsl.w	r3, r2, r3
 810266c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 810266e:	683b      	ldr	r3, [r7, #0]
 8102670:	691b      	ldr	r3, [r3, #16]
 8102672:	2b04      	cmp	r3, #4
 8102674:	d02c      	beq.n	81026d0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102676:	687b      	ldr	r3, [r7, #4]
 8102678:	6818      	ldr	r0, [r3, #0]
 810267a:	683b      	ldr	r3, [r7, #0]
 810267c:	6919      	ldr	r1, [r3, #16]
 810267e:	683b      	ldr	r3, [r7, #0]
 8102680:	681a      	ldr	r2, [r3, #0]
 8102682:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8102684:	f7fe ff3e 	bl	8101504 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	6818      	ldr	r0, [r3, #0]
 810268c:	683b      	ldr	r3, [r7, #0]
 810268e:	6919      	ldr	r1, [r3, #16]
 8102690:	683b      	ldr	r3, [r7, #0]
 8102692:	7e5b      	ldrb	r3, [r3, #25]
 8102694:	2b01      	cmp	r3, #1
 8102696:	d102      	bne.n	810269e <HAL_ADC_ConfigChannel+0x186>
 8102698:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810269c:	e000      	b.n	81026a0 <HAL_ADC_ConfigChannel+0x188>
 810269e:	2300      	movs	r3, #0
 81026a0:	461a      	mov	r2, r3
 81026a2:	f7fe ff68 	bl	8101576 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81026a6:	687b      	ldr	r3, [r7, #4]
 81026a8:	6818      	ldr	r0, [r3, #0]
 81026aa:	683b      	ldr	r3, [r7, #0]
 81026ac:	6919      	ldr	r1, [r3, #16]
 81026ae:	683b      	ldr	r3, [r7, #0]
 81026b0:	7e1b      	ldrb	r3, [r3, #24]
 81026b2:	2b01      	cmp	r3, #1
 81026b4:	d102      	bne.n	81026bc <HAL_ADC_ConfigChannel+0x1a4>
 81026b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81026ba:	e000      	b.n	81026be <HAL_ADC_ConfigChannel+0x1a6>
 81026bc:	2300      	movs	r3, #0
 81026be:	461a      	mov	r2, r3
 81026c0:	f7fe ff40 	bl	8101544 <LL_ADC_SetDataRightShift>
 81026c4:	e04c      	b.n	8102760 <HAL_ADC_ConfigChannel+0x248>
 81026c6:	bf00      	nop
 81026c8:	47ff0000 	.word	0x47ff0000
 81026cc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	681b      	ldr	r3, [r3, #0]
 81026d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81026d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81026da:	683b      	ldr	r3, [r7, #0]
 81026dc:	681b      	ldr	r3, [r3, #0]
 81026de:	069b      	lsls	r3, r3, #26
 81026e0:	429a      	cmp	r2, r3
 81026e2:	d107      	bne.n	81026f4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81026e4:	687b      	ldr	r3, [r7, #4]
 81026e6:	681b      	ldr	r3, [r3, #0]
 81026e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	681b      	ldr	r3, [r3, #0]
 81026ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81026f2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81026f4:	687b      	ldr	r3, [r7, #4]
 81026f6:	681b      	ldr	r3, [r3, #0]
 81026f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81026fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81026fe:	683b      	ldr	r3, [r7, #0]
 8102700:	681b      	ldr	r3, [r3, #0]
 8102702:	069b      	lsls	r3, r3, #26
 8102704:	429a      	cmp	r2, r3
 8102706:	d107      	bne.n	8102718 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8102708:	687b      	ldr	r3, [r7, #4]
 810270a:	681b      	ldr	r3, [r3, #0]
 810270c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810270e:	687b      	ldr	r3, [r7, #4]
 8102710:	681b      	ldr	r3, [r3, #0]
 8102712:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8102716:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	681b      	ldr	r3, [r3, #0]
 810271c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810271e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102722:	683b      	ldr	r3, [r7, #0]
 8102724:	681b      	ldr	r3, [r3, #0]
 8102726:	069b      	lsls	r3, r3, #26
 8102728:	429a      	cmp	r2, r3
 810272a:	d107      	bne.n	810273c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 810272c:	687b      	ldr	r3, [r7, #4]
 810272e:	681b      	ldr	r3, [r3, #0]
 8102730:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8102732:	687b      	ldr	r3, [r7, #4]
 8102734:	681b      	ldr	r3, [r3, #0]
 8102736:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810273a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102742:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102746:	683b      	ldr	r3, [r7, #0]
 8102748:	681b      	ldr	r3, [r3, #0]
 810274a:	069b      	lsls	r3, r3, #26
 810274c:	429a      	cmp	r2, r3
 810274e:	d107      	bne.n	8102760 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	681b      	ldr	r3, [r3, #0]
 8102754:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8102756:	687b      	ldr	r3, [r7, #4]
 8102758:	681b      	ldr	r3, [r3, #0]
 810275a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810275e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102760:	687b      	ldr	r3, [r7, #4]
 8102762:	681b      	ldr	r3, [r3, #0]
 8102764:	4618      	mov	r0, r3
 8102766:	f7ff f855 	bl	8101814 <LL_ADC_IsEnabled>
 810276a:	4603      	mov	r3, r0
 810276c:	2b00      	cmp	r3, #0
 810276e:	f040 8211 	bne.w	8102b94 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102772:	687b      	ldr	r3, [r7, #4]
 8102774:	6818      	ldr	r0, [r3, #0]
 8102776:	683b      	ldr	r3, [r7, #0]
 8102778:	6819      	ldr	r1, [r3, #0]
 810277a:	683b      	ldr	r3, [r7, #0]
 810277c:	68db      	ldr	r3, [r3, #12]
 810277e:	461a      	mov	r2, r3
 8102780:	f7fe ff92 	bl	81016a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102784:	683b      	ldr	r3, [r7, #0]
 8102786:	68db      	ldr	r3, [r3, #12]
 8102788:	4aa1      	ldr	r2, [pc, #644]	@ (8102a10 <HAL_ADC_ConfigChannel+0x4f8>)
 810278a:	4293      	cmp	r3, r2
 810278c:	f040 812e 	bne.w	81029ec <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102794:	683b      	ldr	r3, [r7, #0]
 8102796:	681b      	ldr	r3, [r3, #0]
 8102798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810279c:	2b00      	cmp	r3, #0
 810279e:	d10b      	bne.n	81027b8 <HAL_ADC_ConfigChannel+0x2a0>
 81027a0:	683b      	ldr	r3, [r7, #0]
 81027a2:	681b      	ldr	r3, [r3, #0]
 81027a4:	0e9b      	lsrs	r3, r3, #26
 81027a6:	3301      	adds	r3, #1
 81027a8:	f003 031f 	and.w	r3, r3, #31
 81027ac:	2b09      	cmp	r3, #9
 81027ae:	bf94      	ite	ls
 81027b0:	2301      	movls	r3, #1
 81027b2:	2300      	movhi	r3, #0
 81027b4:	b2db      	uxtb	r3, r3
 81027b6:	e019      	b.n	81027ec <HAL_ADC_ConfigChannel+0x2d4>
 81027b8:	683b      	ldr	r3, [r7, #0]
 81027ba:	681b      	ldr	r3, [r3, #0]
 81027bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81027be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 81027c0:	fa93 f3a3 	rbit	r3, r3
 81027c4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 81027c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81027c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 81027ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81027cc:	2b00      	cmp	r3, #0
 81027ce:	d101      	bne.n	81027d4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 81027d0:	2320      	movs	r3, #32
 81027d2:	e003      	b.n	81027dc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 81027d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81027d6:	fab3 f383 	clz	r3, r3
 81027da:	b2db      	uxtb	r3, r3
 81027dc:	3301      	adds	r3, #1
 81027de:	f003 031f 	and.w	r3, r3, #31
 81027e2:	2b09      	cmp	r3, #9
 81027e4:	bf94      	ite	ls
 81027e6:	2301      	movls	r3, #1
 81027e8:	2300      	movhi	r3, #0
 81027ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81027ec:	2b00      	cmp	r3, #0
 81027ee:	d079      	beq.n	81028e4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81027f0:	683b      	ldr	r3, [r7, #0]
 81027f2:	681b      	ldr	r3, [r3, #0]
 81027f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81027f8:	2b00      	cmp	r3, #0
 81027fa:	d107      	bne.n	810280c <HAL_ADC_ConfigChannel+0x2f4>
 81027fc:	683b      	ldr	r3, [r7, #0]
 81027fe:	681b      	ldr	r3, [r3, #0]
 8102800:	0e9b      	lsrs	r3, r3, #26
 8102802:	3301      	adds	r3, #1
 8102804:	069b      	lsls	r3, r3, #26
 8102806:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810280a:	e015      	b.n	8102838 <HAL_ADC_ConfigChannel+0x320>
 810280c:	683b      	ldr	r3, [r7, #0]
 810280e:	681b      	ldr	r3, [r3, #0]
 8102810:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8102814:	fa93 f3a3 	rbit	r3, r3
 8102818:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 810281a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810281c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 810281e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8102820:	2b00      	cmp	r3, #0
 8102822:	d101      	bne.n	8102828 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8102824:	2320      	movs	r3, #32
 8102826:	e003      	b.n	8102830 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8102828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810282a:	fab3 f383 	clz	r3, r3
 810282e:	b2db      	uxtb	r3, r3
 8102830:	3301      	adds	r3, #1
 8102832:	069b      	lsls	r3, r3, #26
 8102834:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8102838:	683b      	ldr	r3, [r7, #0]
 810283a:	681b      	ldr	r3, [r3, #0]
 810283c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102840:	2b00      	cmp	r3, #0
 8102842:	d109      	bne.n	8102858 <HAL_ADC_ConfigChannel+0x340>
 8102844:	683b      	ldr	r3, [r7, #0]
 8102846:	681b      	ldr	r3, [r3, #0]
 8102848:	0e9b      	lsrs	r3, r3, #26
 810284a:	3301      	adds	r3, #1
 810284c:	f003 031f 	and.w	r3, r3, #31
 8102850:	2101      	movs	r1, #1
 8102852:	fa01 f303 	lsl.w	r3, r1, r3
 8102856:	e017      	b.n	8102888 <HAL_ADC_ConfigChannel+0x370>
 8102858:	683b      	ldr	r3, [r7, #0]
 810285a:	681b      	ldr	r3, [r3, #0]
 810285c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810285e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8102860:	fa93 f3a3 	rbit	r3, r3
 8102864:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8102866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102868:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 810286a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810286c:	2b00      	cmp	r3, #0
 810286e:	d101      	bne.n	8102874 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8102870:	2320      	movs	r3, #32
 8102872:	e003      	b.n	810287c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8102874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102876:	fab3 f383 	clz	r3, r3
 810287a:	b2db      	uxtb	r3, r3
 810287c:	3301      	adds	r3, #1
 810287e:	f003 031f 	and.w	r3, r3, #31
 8102882:	2101      	movs	r1, #1
 8102884:	fa01 f303 	lsl.w	r3, r1, r3
 8102888:	ea42 0103 	orr.w	r1, r2, r3
 810288c:	683b      	ldr	r3, [r7, #0]
 810288e:	681b      	ldr	r3, [r3, #0]
 8102890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102894:	2b00      	cmp	r3, #0
 8102896:	d10a      	bne.n	81028ae <HAL_ADC_ConfigChannel+0x396>
 8102898:	683b      	ldr	r3, [r7, #0]
 810289a:	681b      	ldr	r3, [r3, #0]
 810289c:	0e9b      	lsrs	r3, r3, #26
 810289e:	3301      	adds	r3, #1
 81028a0:	f003 021f 	and.w	r2, r3, #31
 81028a4:	4613      	mov	r3, r2
 81028a6:	005b      	lsls	r3, r3, #1
 81028a8:	4413      	add	r3, r2
 81028aa:	051b      	lsls	r3, r3, #20
 81028ac:	e018      	b.n	81028e0 <HAL_ADC_ConfigChannel+0x3c8>
 81028ae:	683b      	ldr	r3, [r7, #0]
 81028b0:	681b      	ldr	r3, [r3, #0]
 81028b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81028b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81028b6:	fa93 f3a3 	rbit	r3, r3
 81028ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 81028bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81028be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 81028c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81028c2:	2b00      	cmp	r3, #0
 81028c4:	d101      	bne.n	81028ca <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 81028c6:	2320      	movs	r3, #32
 81028c8:	e003      	b.n	81028d2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 81028ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81028cc:	fab3 f383 	clz	r3, r3
 81028d0:	b2db      	uxtb	r3, r3
 81028d2:	3301      	adds	r3, #1
 81028d4:	f003 021f 	and.w	r2, r3, #31
 81028d8:	4613      	mov	r3, r2
 81028da:	005b      	lsls	r3, r3, #1
 81028dc:	4413      	add	r3, r2
 81028de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81028e0:	430b      	orrs	r3, r1
 81028e2:	e07e      	b.n	81029e2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81028e4:	683b      	ldr	r3, [r7, #0]
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81028ec:	2b00      	cmp	r3, #0
 81028ee:	d107      	bne.n	8102900 <HAL_ADC_ConfigChannel+0x3e8>
 81028f0:	683b      	ldr	r3, [r7, #0]
 81028f2:	681b      	ldr	r3, [r3, #0]
 81028f4:	0e9b      	lsrs	r3, r3, #26
 81028f6:	3301      	adds	r3, #1
 81028f8:	069b      	lsls	r3, r3, #26
 81028fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81028fe:	e015      	b.n	810292c <HAL_ADC_ConfigChannel+0x414>
 8102900:	683b      	ldr	r3, [r7, #0]
 8102902:	681b      	ldr	r3, [r3, #0]
 8102904:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102908:	fa93 f3a3 	rbit	r3, r3
 810290c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 810290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8102912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102914:	2b00      	cmp	r3, #0
 8102916:	d101      	bne.n	810291c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8102918:	2320      	movs	r3, #32
 810291a:	e003      	b.n	8102924 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 810291c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810291e:	fab3 f383 	clz	r3, r3
 8102922:	b2db      	uxtb	r3, r3
 8102924:	3301      	adds	r3, #1
 8102926:	069b      	lsls	r3, r3, #26
 8102928:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810292c:	683b      	ldr	r3, [r7, #0]
 810292e:	681b      	ldr	r3, [r3, #0]
 8102930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102934:	2b00      	cmp	r3, #0
 8102936:	d109      	bne.n	810294c <HAL_ADC_ConfigChannel+0x434>
 8102938:	683b      	ldr	r3, [r7, #0]
 810293a:	681b      	ldr	r3, [r3, #0]
 810293c:	0e9b      	lsrs	r3, r3, #26
 810293e:	3301      	adds	r3, #1
 8102940:	f003 031f 	and.w	r3, r3, #31
 8102944:	2101      	movs	r1, #1
 8102946:	fa01 f303 	lsl.w	r3, r1, r3
 810294a:	e017      	b.n	810297c <HAL_ADC_ConfigChannel+0x464>
 810294c:	683b      	ldr	r3, [r7, #0]
 810294e:	681b      	ldr	r3, [r3, #0]
 8102950:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102952:	69fb      	ldr	r3, [r7, #28]
 8102954:	fa93 f3a3 	rbit	r3, r3
 8102958:	61bb      	str	r3, [r7, #24]
  return result;
 810295a:	69bb      	ldr	r3, [r7, #24]
 810295c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 810295e:	6a3b      	ldr	r3, [r7, #32]
 8102960:	2b00      	cmp	r3, #0
 8102962:	d101      	bne.n	8102968 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8102964:	2320      	movs	r3, #32
 8102966:	e003      	b.n	8102970 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8102968:	6a3b      	ldr	r3, [r7, #32]
 810296a:	fab3 f383 	clz	r3, r3
 810296e:	b2db      	uxtb	r3, r3
 8102970:	3301      	adds	r3, #1
 8102972:	f003 031f 	and.w	r3, r3, #31
 8102976:	2101      	movs	r1, #1
 8102978:	fa01 f303 	lsl.w	r3, r1, r3
 810297c:	ea42 0103 	orr.w	r1, r2, r3
 8102980:	683b      	ldr	r3, [r7, #0]
 8102982:	681b      	ldr	r3, [r3, #0]
 8102984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102988:	2b00      	cmp	r3, #0
 810298a:	d10d      	bne.n	81029a8 <HAL_ADC_ConfigChannel+0x490>
 810298c:	683b      	ldr	r3, [r7, #0]
 810298e:	681b      	ldr	r3, [r3, #0]
 8102990:	0e9b      	lsrs	r3, r3, #26
 8102992:	3301      	adds	r3, #1
 8102994:	f003 021f 	and.w	r2, r3, #31
 8102998:	4613      	mov	r3, r2
 810299a:	005b      	lsls	r3, r3, #1
 810299c:	4413      	add	r3, r2
 810299e:	3b1e      	subs	r3, #30
 81029a0:	051b      	lsls	r3, r3, #20
 81029a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81029a6:	e01b      	b.n	81029e0 <HAL_ADC_ConfigChannel+0x4c8>
 81029a8:	683b      	ldr	r3, [r7, #0]
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81029ae:	693b      	ldr	r3, [r7, #16]
 81029b0:	fa93 f3a3 	rbit	r3, r3
 81029b4:	60fb      	str	r3, [r7, #12]
  return result;
 81029b6:	68fb      	ldr	r3, [r7, #12]
 81029b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 81029ba:	697b      	ldr	r3, [r7, #20]
 81029bc:	2b00      	cmp	r3, #0
 81029be:	d101      	bne.n	81029c4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 81029c0:	2320      	movs	r3, #32
 81029c2:	e003      	b.n	81029cc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 81029c4:	697b      	ldr	r3, [r7, #20]
 81029c6:	fab3 f383 	clz	r3, r3
 81029ca:	b2db      	uxtb	r3, r3
 81029cc:	3301      	adds	r3, #1
 81029ce:	f003 021f 	and.w	r2, r3, #31
 81029d2:	4613      	mov	r3, r2
 81029d4:	005b      	lsls	r3, r3, #1
 81029d6:	4413      	add	r3, r2
 81029d8:	3b1e      	subs	r3, #30
 81029da:	051b      	lsls	r3, r3, #20
 81029dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81029e0:	430b      	orrs	r3, r1
 81029e2:	683a      	ldr	r2, [r7, #0]
 81029e4:	6892      	ldr	r2, [r2, #8]
 81029e6:	4619      	mov	r1, r3
 81029e8:	f7fe fe32 	bl	8101650 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 81029ec:	683b      	ldr	r3, [r7, #0]
 81029ee:	681b      	ldr	r3, [r3, #0]
 81029f0:	2b00      	cmp	r3, #0
 81029f2:	f280 80cf 	bge.w	8102b94 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81029f6:	687b      	ldr	r3, [r7, #4]
 81029f8:	681b      	ldr	r3, [r3, #0]
 81029fa:	4a06      	ldr	r2, [pc, #24]	@ (8102a14 <HAL_ADC_ConfigChannel+0x4fc>)
 81029fc:	4293      	cmp	r3, r2
 81029fe:	d004      	beq.n	8102a0a <HAL_ADC_ConfigChannel+0x4f2>
 8102a00:	687b      	ldr	r3, [r7, #4]
 8102a02:	681b      	ldr	r3, [r3, #0]
 8102a04:	4a04      	ldr	r2, [pc, #16]	@ (8102a18 <HAL_ADC_ConfigChannel+0x500>)
 8102a06:	4293      	cmp	r3, r2
 8102a08:	d10a      	bne.n	8102a20 <HAL_ADC_ConfigChannel+0x508>
 8102a0a:	4b04      	ldr	r3, [pc, #16]	@ (8102a1c <HAL_ADC_ConfigChannel+0x504>)
 8102a0c:	e009      	b.n	8102a22 <HAL_ADC_ConfigChannel+0x50a>
 8102a0e:	bf00      	nop
 8102a10:	47ff0000 	.word	0x47ff0000
 8102a14:	40022000 	.word	0x40022000
 8102a18:	40022100 	.word	0x40022100
 8102a1c:	40022300 	.word	0x40022300
 8102a20:	4b61      	ldr	r3, [pc, #388]	@ (8102ba8 <HAL_ADC_ConfigChannel+0x690>)
 8102a22:	4618      	mov	r0, r3
 8102a24:	f7fe fd60 	bl	81014e8 <LL_ADC_GetCommonPathInternalCh>
 8102a28:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	681b      	ldr	r3, [r3, #0]
 8102a2e:	4a5f      	ldr	r2, [pc, #380]	@ (8102bac <HAL_ADC_ConfigChannel+0x694>)
 8102a30:	4293      	cmp	r3, r2
 8102a32:	d004      	beq.n	8102a3e <HAL_ADC_ConfigChannel+0x526>
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	681b      	ldr	r3, [r3, #0]
 8102a38:	4a5d      	ldr	r2, [pc, #372]	@ (8102bb0 <HAL_ADC_ConfigChannel+0x698>)
 8102a3a:	4293      	cmp	r3, r2
 8102a3c:	d10e      	bne.n	8102a5c <HAL_ADC_ConfigChannel+0x544>
 8102a3e:	485b      	ldr	r0, [pc, #364]	@ (8102bac <HAL_ADC_ConfigChannel+0x694>)
 8102a40:	f7fe fee8 	bl	8101814 <LL_ADC_IsEnabled>
 8102a44:	4604      	mov	r4, r0
 8102a46:	485a      	ldr	r0, [pc, #360]	@ (8102bb0 <HAL_ADC_ConfigChannel+0x698>)
 8102a48:	f7fe fee4 	bl	8101814 <LL_ADC_IsEnabled>
 8102a4c:	4603      	mov	r3, r0
 8102a4e:	4323      	orrs	r3, r4
 8102a50:	2b00      	cmp	r3, #0
 8102a52:	bf0c      	ite	eq
 8102a54:	2301      	moveq	r3, #1
 8102a56:	2300      	movne	r3, #0
 8102a58:	b2db      	uxtb	r3, r3
 8102a5a:	e008      	b.n	8102a6e <HAL_ADC_ConfigChannel+0x556>
 8102a5c:	4855      	ldr	r0, [pc, #340]	@ (8102bb4 <HAL_ADC_ConfigChannel+0x69c>)
 8102a5e:	f7fe fed9 	bl	8101814 <LL_ADC_IsEnabled>
 8102a62:	4603      	mov	r3, r0
 8102a64:	2b00      	cmp	r3, #0
 8102a66:	bf0c      	ite	eq
 8102a68:	2301      	moveq	r3, #1
 8102a6a:	2300      	movne	r3, #0
 8102a6c:	b2db      	uxtb	r3, r3
 8102a6e:	2b00      	cmp	r3, #0
 8102a70:	d07d      	beq.n	8102b6e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8102a72:	683b      	ldr	r3, [r7, #0]
 8102a74:	681b      	ldr	r3, [r3, #0]
 8102a76:	4a50      	ldr	r2, [pc, #320]	@ (8102bb8 <HAL_ADC_ConfigChannel+0x6a0>)
 8102a78:	4293      	cmp	r3, r2
 8102a7a:	d130      	bne.n	8102ade <HAL_ADC_ConfigChannel+0x5c6>
 8102a7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8102a7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8102a82:	2b00      	cmp	r3, #0
 8102a84:	d12b      	bne.n	8102ade <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	681b      	ldr	r3, [r3, #0]
 8102a8a:	4a4a      	ldr	r2, [pc, #296]	@ (8102bb4 <HAL_ADC_ConfigChannel+0x69c>)
 8102a8c:	4293      	cmp	r3, r2
 8102a8e:	f040 8081 	bne.w	8102b94 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	681b      	ldr	r3, [r3, #0]
 8102a96:	4a45      	ldr	r2, [pc, #276]	@ (8102bac <HAL_ADC_ConfigChannel+0x694>)
 8102a98:	4293      	cmp	r3, r2
 8102a9a:	d004      	beq.n	8102aa6 <HAL_ADC_ConfigChannel+0x58e>
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	681b      	ldr	r3, [r3, #0]
 8102aa0:	4a43      	ldr	r2, [pc, #268]	@ (8102bb0 <HAL_ADC_ConfigChannel+0x698>)
 8102aa2:	4293      	cmp	r3, r2
 8102aa4:	d101      	bne.n	8102aaa <HAL_ADC_ConfigChannel+0x592>
 8102aa6:	4a45      	ldr	r2, [pc, #276]	@ (8102bbc <HAL_ADC_ConfigChannel+0x6a4>)
 8102aa8:	e000      	b.n	8102aac <HAL_ADC_ConfigChannel+0x594>
 8102aaa:	4a3f      	ldr	r2, [pc, #252]	@ (8102ba8 <HAL_ADC_ConfigChannel+0x690>)
 8102aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8102aae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8102ab2:	4619      	mov	r1, r3
 8102ab4:	4610      	mov	r0, r2
 8102ab6:	f7fe fd04 	bl	81014c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102aba:	4b41      	ldr	r3, [pc, #260]	@ (8102bc0 <HAL_ADC_ConfigChannel+0x6a8>)
 8102abc:	681b      	ldr	r3, [r3, #0]
 8102abe:	099b      	lsrs	r3, r3, #6
 8102ac0:	4a40      	ldr	r2, [pc, #256]	@ (8102bc4 <HAL_ADC_ConfigChannel+0x6ac>)
 8102ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8102ac6:	099b      	lsrs	r3, r3, #6
 8102ac8:	3301      	adds	r3, #1
 8102aca:	005b      	lsls	r3, r3, #1
 8102acc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102ace:	e002      	b.n	8102ad6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8102ad0:	68bb      	ldr	r3, [r7, #8]
 8102ad2:	3b01      	subs	r3, #1
 8102ad4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102ad6:	68bb      	ldr	r3, [r7, #8]
 8102ad8:	2b00      	cmp	r3, #0
 8102ada:	d1f9      	bne.n	8102ad0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102adc:	e05a      	b.n	8102b94 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102ade:	683b      	ldr	r3, [r7, #0]
 8102ae0:	681b      	ldr	r3, [r3, #0]
 8102ae2:	4a39      	ldr	r2, [pc, #228]	@ (8102bc8 <HAL_ADC_ConfigChannel+0x6b0>)
 8102ae4:	4293      	cmp	r3, r2
 8102ae6:	d11e      	bne.n	8102b26 <HAL_ADC_ConfigChannel+0x60e>
 8102ae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8102aea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8102aee:	2b00      	cmp	r3, #0
 8102af0:	d119      	bne.n	8102b26 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102af2:	687b      	ldr	r3, [r7, #4]
 8102af4:	681b      	ldr	r3, [r3, #0]
 8102af6:	4a2f      	ldr	r2, [pc, #188]	@ (8102bb4 <HAL_ADC_ConfigChannel+0x69c>)
 8102af8:	4293      	cmp	r3, r2
 8102afa:	d14b      	bne.n	8102b94 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	681b      	ldr	r3, [r3, #0]
 8102b00:	4a2a      	ldr	r2, [pc, #168]	@ (8102bac <HAL_ADC_ConfigChannel+0x694>)
 8102b02:	4293      	cmp	r3, r2
 8102b04:	d004      	beq.n	8102b10 <HAL_ADC_ConfigChannel+0x5f8>
 8102b06:	687b      	ldr	r3, [r7, #4]
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	4a29      	ldr	r2, [pc, #164]	@ (8102bb0 <HAL_ADC_ConfigChannel+0x698>)
 8102b0c:	4293      	cmp	r3, r2
 8102b0e:	d101      	bne.n	8102b14 <HAL_ADC_ConfigChannel+0x5fc>
 8102b10:	4a2a      	ldr	r2, [pc, #168]	@ (8102bbc <HAL_ADC_ConfigChannel+0x6a4>)
 8102b12:	e000      	b.n	8102b16 <HAL_ADC_ConfigChannel+0x5fe>
 8102b14:	4a24      	ldr	r2, [pc, #144]	@ (8102ba8 <HAL_ADC_ConfigChannel+0x690>)
 8102b16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8102b18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8102b1c:	4619      	mov	r1, r3
 8102b1e:	4610      	mov	r0, r2
 8102b20:	f7fe fccf 	bl	81014c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102b24:	e036      	b.n	8102b94 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8102b26:	683b      	ldr	r3, [r7, #0]
 8102b28:	681b      	ldr	r3, [r3, #0]
 8102b2a:	4a28      	ldr	r2, [pc, #160]	@ (8102bcc <HAL_ADC_ConfigChannel+0x6b4>)
 8102b2c:	4293      	cmp	r3, r2
 8102b2e:	d131      	bne.n	8102b94 <HAL_ADC_ConfigChannel+0x67c>
 8102b30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8102b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8102b36:	2b00      	cmp	r3, #0
 8102b38:	d12c      	bne.n	8102b94 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8102bb4 <HAL_ADC_ConfigChannel+0x69c>)
 8102b40:	4293      	cmp	r3, r2
 8102b42:	d127      	bne.n	8102b94 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8102b44:	687b      	ldr	r3, [r7, #4]
 8102b46:	681b      	ldr	r3, [r3, #0]
 8102b48:	4a18      	ldr	r2, [pc, #96]	@ (8102bac <HAL_ADC_ConfigChannel+0x694>)
 8102b4a:	4293      	cmp	r3, r2
 8102b4c:	d004      	beq.n	8102b58 <HAL_ADC_ConfigChannel+0x640>
 8102b4e:	687b      	ldr	r3, [r7, #4]
 8102b50:	681b      	ldr	r3, [r3, #0]
 8102b52:	4a17      	ldr	r2, [pc, #92]	@ (8102bb0 <HAL_ADC_ConfigChannel+0x698>)
 8102b54:	4293      	cmp	r3, r2
 8102b56:	d101      	bne.n	8102b5c <HAL_ADC_ConfigChannel+0x644>
 8102b58:	4a18      	ldr	r2, [pc, #96]	@ (8102bbc <HAL_ADC_ConfigChannel+0x6a4>)
 8102b5a:	e000      	b.n	8102b5e <HAL_ADC_ConfigChannel+0x646>
 8102b5c:	4a12      	ldr	r2, [pc, #72]	@ (8102ba8 <HAL_ADC_ConfigChannel+0x690>)
 8102b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8102b60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8102b64:	4619      	mov	r1, r3
 8102b66:	4610      	mov	r0, r2
 8102b68:	f7fe fcab 	bl	81014c2 <LL_ADC_SetCommonPathInternalCh>
 8102b6c:	e012      	b.n	8102b94 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102b72:	f043 0220 	orr.w	r2, r3, #32
 8102b76:	687b      	ldr	r3, [r7, #4]
 8102b78:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8102b7a:	2301      	movs	r3, #1
 8102b7c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8102b80:	e008      	b.n	8102b94 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102b86:	f043 0220 	orr.w	r2, r3, #32
 8102b8a:	687b      	ldr	r3, [r7, #4]
 8102b8c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8102b8e:	2301      	movs	r3, #1
 8102b90:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102b94:	687b      	ldr	r3, [r7, #4]
 8102b96:	2200      	movs	r2, #0
 8102b98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8102b9c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8102ba0:	4618      	mov	r0, r3
 8102ba2:	3784      	adds	r7, #132	@ 0x84
 8102ba4:	46bd      	mov	sp, r7
 8102ba6:	bd90      	pop	{r4, r7, pc}
 8102ba8:	58026300 	.word	0x58026300
 8102bac:	40022000 	.word	0x40022000
 8102bb0:	40022100 	.word	0x40022100
 8102bb4:	58026000 	.word	0x58026000
 8102bb8:	cb840000 	.word	0xcb840000
 8102bbc:	40022300 	.word	0x40022300
 8102bc0:	10000000 	.word	0x10000000
 8102bc4:	053e2d63 	.word	0x053e2d63
 8102bc8:	c7520000 	.word	0xc7520000
 8102bcc:	cfb80000 	.word	0xcfb80000

08102bd0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8102bd0:	b580      	push	{r7, lr}
 8102bd2:	b088      	sub	sp, #32
 8102bd4:	af00      	add	r7, sp, #0
 8102bd6:	6078      	str	r0, [r7, #4]
 8102bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8102bda:	2300      	movs	r3, #0
 8102bdc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8102bde:	683b      	ldr	r3, [r7, #0]
 8102be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102be2:	687b      	ldr	r3, [r7, #4]
 8102be4:	681b      	ldr	r3, [r3, #0]
 8102be6:	4618      	mov	r0, r3
 8102be8:	f7fe fe62 	bl	81018b0 <LL_ADC_REG_IsConversionOngoing>
 8102bec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	681b      	ldr	r3, [r3, #0]
 8102bf2:	4618      	mov	r0, r3
 8102bf4:	f7fe fe83 	bl	81018fe <LL_ADC_INJ_IsConversionOngoing>
 8102bf8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8102bfa:	693b      	ldr	r3, [r7, #16]
 8102bfc:	2b00      	cmp	r3, #0
 8102bfe:	d103      	bne.n	8102c08 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8102c00:	68fb      	ldr	r3, [r7, #12]
 8102c02:	2b00      	cmp	r3, #0
 8102c04:	f000 8098 	beq.w	8102d38 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8102c08:	687b      	ldr	r3, [r7, #4]
 8102c0a:	681b      	ldr	r3, [r3, #0]
 8102c0c:	68db      	ldr	r3, [r3, #12]
 8102c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8102c12:	2b00      	cmp	r3, #0
 8102c14:	d02a      	beq.n	8102c6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8102c16:	687b      	ldr	r3, [r7, #4]
 8102c18:	7d5b      	ldrb	r3, [r3, #21]
 8102c1a:	2b01      	cmp	r3, #1
 8102c1c:	d126      	bne.n	8102c6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8102c1e:	687b      	ldr	r3, [r7, #4]
 8102c20:	7d1b      	ldrb	r3, [r3, #20]
 8102c22:	2b01      	cmp	r3, #1
 8102c24:	d122      	bne.n	8102c6c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8102c26:	2301      	movs	r3, #1
 8102c28:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8102c2a:	e014      	b.n	8102c56 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8102c2c:	69fb      	ldr	r3, [r7, #28]
 8102c2e:	4a45      	ldr	r2, [pc, #276]	@ (8102d44 <ADC_ConversionStop+0x174>)
 8102c30:	4293      	cmp	r3, r2
 8102c32:	d90d      	bls.n	8102c50 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102c34:	687b      	ldr	r3, [r7, #4]
 8102c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102c38:	f043 0210 	orr.w	r2, r3, #16
 8102c3c:	687b      	ldr	r3, [r7, #4]
 8102c3e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102c40:	687b      	ldr	r3, [r7, #4]
 8102c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102c44:	f043 0201 	orr.w	r2, r3, #1
 8102c48:	687b      	ldr	r3, [r7, #4]
 8102c4a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8102c4c:	2301      	movs	r3, #1
 8102c4e:	e074      	b.n	8102d3a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8102c50:	69fb      	ldr	r3, [r7, #28]
 8102c52:	3301      	adds	r3, #1
 8102c54:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8102c56:	687b      	ldr	r3, [r7, #4]
 8102c58:	681b      	ldr	r3, [r3, #0]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102c60:	2b40      	cmp	r3, #64	@ 0x40
 8102c62:	d1e3      	bne.n	8102c2c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8102c64:	687b      	ldr	r3, [r7, #4]
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	2240      	movs	r2, #64	@ 0x40
 8102c6a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8102c6c:	69bb      	ldr	r3, [r7, #24]
 8102c6e:	2b02      	cmp	r3, #2
 8102c70:	d014      	beq.n	8102c9c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8102c72:	687b      	ldr	r3, [r7, #4]
 8102c74:	681b      	ldr	r3, [r3, #0]
 8102c76:	4618      	mov	r0, r3
 8102c78:	f7fe fe1a 	bl	81018b0 <LL_ADC_REG_IsConversionOngoing>
 8102c7c:	4603      	mov	r3, r0
 8102c7e:	2b00      	cmp	r3, #0
 8102c80:	d00c      	beq.n	8102c9c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	681b      	ldr	r3, [r3, #0]
 8102c86:	4618      	mov	r0, r3
 8102c88:	f7fe fdd7 	bl	810183a <LL_ADC_IsDisableOngoing>
 8102c8c:	4603      	mov	r3, r0
 8102c8e:	2b00      	cmp	r3, #0
 8102c90:	d104      	bne.n	8102c9c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8102c92:	687b      	ldr	r3, [r7, #4]
 8102c94:	681b      	ldr	r3, [r3, #0]
 8102c96:	4618      	mov	r0, r3
 8102c98:	f7fe fdf6 	bl	8101888 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8102c9c:	69bb      	ldr	r3, [r7, #24]
 8102c9e:	2b01      	cmp	r3, #1
 8102ca0:	d014      	beq.n	8102ccc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8102ca2:	687b      	ldr	r3, [r7, #4]
 8102ca4:	681b      	ldr	r3, [r3, #0]
 8102ca6:	4618      	mov	r0, r3
 8102ca8:	f7fe fe29 	bl	81018fe <LL_ADC_INJ_IsConversionOngoing>
 8102cac:	4603      	mov	r3, r0
 8102cae:	2b00      	cmp	r3, #0
 8102cb0:	d00c      	beq.n	8102ccc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8102cb2:	687b      	ldr	r3, [r7, #4]
 8102cb4:	681b      	ldr	r3, [r3, #0]
 8102cb6:	4618      	mov	r0, r3
 8102cb8:	f7fe fdbf 	bl	810183a <LL_ADC_IsDisableOngoing>
 8102cbc:	4603      	mov	r3, r0
 8102cbe:	2b00      	cmp	r3, #0
 8102cc0:	d104      	bne.n	8102ccc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8102cc2:	687b      	ldr	r3, [r7, #4]
 8102cc4:	681b      	ldr	r3, [r3, #0]
 8102cc6:	4618      	mov	r0, r3
 8102cc8:	f7fe fe05 	bl	81018d6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8102ccc:	69bb      	ldr	r3, [r7, #24]
 8102cce:	2b02      	cmp	r3, #2
 8102cd0:	d005      	beq.n	8102cde <ADC_ConversionStop+0x10e>
 8102cd2:	69bb      	ldr	r3, [r7, #24]
 8102cd4:	2b03      	cmp	r3, #3
 8102cd6:	d105      	bne.n	8102ce4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8102cd8:	230c      	movs	r3, #12
 8102cda:	617b      	str	r3, [r7, #20]
        break;
 8102cdc:	e005      	b.n	8102cea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8102cde:	2308      	movs	r3, #8
 8102ce0:	617b      	str	r3, [r7, #20]
        break;
 8102ce2:	e002      	b.n	8102cea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8102ce4:	2304      	movs	r3, #4
 8102ce6:	617b      	str	r3, [r7, #20]
        break;
 8102ce8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8102cea:	f7fe fb85 	bl	81013f8 <HAL_GetTick>
 8102cee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8102cf0:	e01b      	b.n	8102d2a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8102cf2:	f7fe fb81 	bl	81013f8 <HAL_GetTick>
 8102cf6:	4602      	mov	r2, r0
 8102cf8:	68bb      	ldr	r3, [r7, #8]
 8102cfa:	1ad3      	subs	r3, r2, r3
 8102cfc:	2b05      	cmp	r3, #5
 8102cfe:	d914      	bls.n	8102d2a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	681b      	ldr	r3, [r3, #0]
 8102d04:	689a      	ldr	r2, [r3, #8]
 8102d06:	697b      	ldr	r3, [r7, #20]
 8102d08:	4013      	ands	r3, r2
 8102d0a:	2b00      	cmp	r3, #0
 8102d0c:	d00d      	beq.n	8102d2a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102d0e:	687b      	ldr	r3, [r7, #4]
 8102d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102d12:	f043 0210 	orr.w	r2, r3, #16
 8102d16:	687b      	ldr	r3, [r7, #4]
 8102d18:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102d1a:	687b      	ldr	r3, [r7, #4]
 8102d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102d1e:	f043 0201 	orr.w	r2, r3, #1
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8102d26:	2301      	movs	r3, #1
 8102d28:	e007      	b.n	8102d3a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8102d2a:	687b      	ldr	r3, [r7, #4]
 8102d2c:	681b      	ldr	r3, [r3, #0]
 8102d2e:	689a      	ldr	r2, [r3, #8]
 8102d30:	697b      	ldr	r3, [r7, #20]
 8102d32:	4013      	ands	r3, r2
 8102d34:	2b00      	cmp	r3, #0
 8102d36:	d1dc      	bne.n	8102cf2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8102d38:	2300      	movs	r3, #0
}
 8102d3a:	4618      	mov	r0, r3
 8102d3c:	3720      	adds	r7, #32
 8102d3e:	46bd      	mov	sp, r7
 8102d40:	bd80      	pop	{r7, pc}
 8102d42:	bf00      	nop
 8102d44:	000cdbff 	.word	0x000cdbff

08102d48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8102d48:	b580      	push	{r7, lr}
 8102d4a:	b084      	sub	sp, #16
 8102d4c:	af00      	add	r7, sp, #0
 8102d4e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	4618      	mov	r0, r3
 8102d56:	f7fe fd5d 	bl	8101814 <LL_ADC_IsEnabled>
 8102d5a:	4603      	mov	r3, r0
 8102d5c:	2b00      	cmp	r3, #0
 8102d5e:	d16e      	bne.n	8102e3e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	689a      	ldr	r2, [r3, #8]
 8102d66:	4b38      	ldr	r3, [pc, #224]	@ (8102e48 <ADC_Enable+0x100>)
 8102d68:	4013      	ands	r3, r2
 8102d6a:	2b00      	cmp	r3, #0
 8102d6c:	d00d      	beq.n	8102d8a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102d72:	f043 0210 	orr.w	r2, r3, #16
 8102d76:	687b      	ldr	r3, [r7, #4]
 8102d78:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102d7a:	687b      	ldr	r3, [r7, #4]
 8102d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102d7e:	f043 0201 	orr.w	r2, r3, #1
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8102d86:	2301      	movs	r3, #1
 8102d88:	e05a      	b.n	8102e40 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8102d8a:	687b      	ldr	r3, [r7, #4]
 8102d8c:	681b      	ldr	r3, [r3, #0]
 8102d8e:	4618      	mov	r0, r3
 8102d90:	f7fe fd18 	bl	81017c4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8102d94:	f7fe fb30 	bl	81013f8 <HAL_GetTick>
 8102d98:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102d9a:	687b      	ldr	r3, [r7, #4]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	4a2b      	ldr	r2, [pc, #172]	@ (8102e4c <ADC_Enable+0x104>)
 8102da0:	4293      	cmp	r3, r2
 8102da2:	d004      	beq.n	8102dae <ADC_Enable+0x66>
 8102da4:	687b      	ldr	r3, [r7, #4]
 8102da6:	681b      	ldr	r3, [r3, #0]
 8102da8:	4a29      	ldr	r2, [pc, #164]	@ (8102e50 <ADC_Enable+0x108>)
 8102daa:	4293      	cmp	r3, r2
 8102dac:	d101      	bne.n	8102db2 <ADC_Enable+0x6a>
 8102dae:	4b29      	ldr	r3, [pc, #164]	@ (8102e54 <ADC_Enable+0x10c>)
 8102db0:	e000      	b.n	8102db4 <ADC_Enable+0x6c>
 8102db2:	4b29      	ldr	r3, [pc, #164]	@ (8102e58 <ADC_Enable+0x110>)
 8102db4:	4618      	mov	r0, r3
 8102db6:	f7fe fc9b 	bl	81016f0 <LL_ADC_GetMultimode>
 8102dba:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102dbc:	687b      	ldr	r3, [r7, #4]
 8102dbe:	681b      	ldr	r3, [r3, #0]
 8102dc0:	4a23      	ldr	r2, [pc, #140]	@ (8102e50 <ADC_Enable+0x108>)
 8102dc2:	4293      	cmp	r3, r2
 8102dc4:	d002      	beq.n	8102dcc <ADC_Enable+0x84>
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	681b      	ldr	r3, [r3, #0]
 8102dca:	e000      	b.n	8102dce <ADC_Enable+0x86>
 8102dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8102e4c <ADC_Enable+0x104>)
 8102dce:	687a      	ldr	r2, [r7, #4]
 8102dd0:	6812      	ldr	r2, [r2, #0]
 8102dd2:	4293      	cmp	r3, r2
 8102dd4:	d02c      	beq.n	8102e30 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102dd6:	68bb      	ldr	r3, [r7, #8]
 8102dd8:	2b00      	cmp	r3, #0
 8102dda:	d130      	bne.n	8102e3e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102ddc:	e028      	b.n	8102e30 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102dde:	687b      	ldr	r3, [r7, #4]
 8102de0:	681b      	ldr	r3, [r3, #0]
 8102de2:	4618      	mov	r0, r3
 8102de4:	f7fe fd16 	bl	8101814 <LL_ADC_IsEnabled>
 8102de8:	4603      	mov	r3, r0
 8102dea:	2b00      	cmp	r3, #0
 8102dec:	d104      	bne.n	8102df8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	681b      	ldr	r3, [r3, #0]
 8102df2:	4618      	mov	r0, r3
 8102df4:	f7fe fce6 	bl	81017c4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8102df8:	f7fe fafe 	bl	81013f8 <HAL_GetTick>
 8102dfc:	4602      	mov	r2, r0
 8102dfe:	68fb      	ldr	r3, [r7, #12]
 8102e00:	1ad3      	subs	r3, r2, r3
 8102e02:	2b02      	cmp	r3, #2
 8102e04:	d914      	bls.n	8102e30 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102e06:	687b      	ldr	r3, [r7, #4]
 8102e08:	681b      	ldr	r3, [r3, #0]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	f003 0301 	and.w	r3, r3, #1
 8102e10:	2b01      	cmp	r3, #1
 8102e12:	d00d      	beq.n	8102e30 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102e14:	687b      	ldr	r3, [r7, #4]
 8102e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102e18:	f043 0210 	orr.w	r2, r3, #16
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102e24:	f043 0201 	orr.w	r2, r3, #1
 8102e28:	687b      	ldr	r3, [r7, #4]
 8102e2a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8102e2c:	2301      	movs	r3, #1
 8102e2e:	e007      	b.n	8102e40 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	681b      	ldr	r3, [r3, #0]
 8102e34:	681b      	ldr	r3, [r3, #0]
 8102e36:	f003 0301 	and.w	r3, r3, #1
 8102e3a:	2b01      	cmp	r3, #1
 8102e3c:	d1cf      	bne.n	8102dde <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8102e3e:	2300      	movs	r3, #0
}
 8102e40:	4618      	mov	r0, r3
 8102e42:	3710      	adds	r7, #16
 8102e44:	46bd      	mov	sp, r7
 8102e46:	bd80      	pop	{r7, pc}
 8102e48:	8000003f 	.word	0x8000003f
 8102e4c:	40022000 	.word	0x40022000
 8102e50:	40022100 	.word	0x40022100
 8102e54:	40022300 	.word	0x40022300
 8102e58:	58026300 	.word	0x58026300

08102e5c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8102e5c:	b580      	push	{r7, lr}
 8102e5e:	b084      	sub	sp, #16
 8102e60:	af00      	add	r7, sp, #0
 8102e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8102e64:	687b      	ldr	r3, [r7, #4]
 8102e66:	681b      	ldr	r3, [r3, #0]
 8102e68:	4618      	mov	r0, r3
 8102e6a:	f7fe fce6 	bl	810183a <LL_ADC_IsDisableOngoing>
 8102e6e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8102e70:	687b      	ldr	r3, [r7, #4]
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	4618      	mov	r0, r3
 8102e76:	f7fe fccd 	bl	8101814 <LL_ADC_IsEnabled>
 8102e7a:	4603      	mov	r3, r0
 8102e7c:	2b00      	cmp	r3, #0
 8102e7e:	d047      	beq.n	8102f10 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	2b00      	cmp	r3, #0
 8102e84:	d144      	bne.n	8102f10 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8102e86:	687b      	ldr	r3, [r7, #4]
 8102e88:	681b      	ldr	r3, [r3, #0]
 8102e8a:	689b      	ldr	r3, [r3, #8]
 8102e8c:	f003 030d 	and.w	r3, r3, #13
 8102e90:	2b01      	cmp	r3, #1
 8102e92:	d10c      	bne.n	8102eae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8102e94:	687b      	ldr	r3, [r7, #4]
 8102e96:	681b      	ldr	r3, [r3, #0]
 8102e98:	4618      	mov	r0, r3
 8102e9a:	f7fe fca7 	bl	81017ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8102e9e:	687b      	ldr	r3, [r7, #4]
 8102ea0:	681b      	ldr	r3, [r3, #0]
 8102ea2:	2203      	movs	r2, #3
 8102ea4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8102ea6:	f7fe faa7 	bl	81013f8 <HAL_GetTick>
 8102eaa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8102eac:	e029      	b.n	8102f02 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102eae:	687b      	ldr	r3, [r7, #4]
 8102eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102eb2:	f043 0210 	orr.w	r2, r3, #16
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102eba:	687b      	ldr	r3, [r7, #4]
 8102ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102ebe:	f043 0201 	orr.w	r2, r3, #1
 8102ec2:	687b      	ldr	r3, [r7, #4]
 8102ec4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8102ec6:	2301      	movs	r3, #1
 8102ec8:	e023      	b.n	8102f12 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8102eca:	f7fe fa95 	bl	81013f8 <HAL_GetTick>
 8102ece:	4602      	mov	r2, r0
 8102ed0:	68bb      	ldr	r3, [r7, #8]
 8102ed2:	1ad3      	subs	r3, r2, r3
 8102ed4:	2b02      	cmp	r3, #2
 8102ed6:	d914      	bls.n	8102f02 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	681b      	ldr	r3, [r3, #0]
 8102edc:	689b      	ldr	r3, [r3, #8]
 8102ede:	f003 0301 	and.w	r3, r3, #1
 8102ee2:	2b00      	cmp	r3, #0
 8102ee4:	d00d      	beq.n	8102f02 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102ee6:	687b      	ldr	r3, [r7, #4]
 8102ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102eea:	f043 0210 	orr.w	r2, r3, #16
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102ef2:	687b      	ldr	r3, [r7, #4]
 8102ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102ef6:	f043 0201 	orr.w	r2, r3, #1
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8102efe:	2301      	movs	r3, #1
 8102f00:	e007      	b.n	8102f12 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8102f02:	687b      	ldr	r3, [r7, #4]
 8102f04:	681b      	ldr	r3, [r3, #0]
 8102f06:	689b      	ldr	r3, [r3, #8]
 8102f08:	f003 0301 	and.w	r3, r3, #1
 8102f0c:	2b00      	cmp	r3, #0
 8102f0e:	d1dc      	bne.n	8102eca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8102f10:	2300      	movs	r3, #0
}
 8102f12:	4618      	mov	r0, r3
 8102f14:	3710      	adds	r7, #16
 8102f16:	46bd      	mov	sp, r7
 8102f18:	bd80      	pop	{r7, pc}
	...

08102f1c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8102f1c:	b580      	push	{r7, lr}
 8102f1e:	b084      	sub	sp, #16
 8102f20:	af00      	add	r7, sp, #0
 8102f22:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	681b      	ldr	r3, [r3, #0]
 8102f28:	4a7a      	ldr	r2, [pc, #488]	@ (8103114 <ADC_ConfigureBoostMode+0x1f8>)
 8102f2a:	4293      	cmp	r3, r2
 8102f2c:	d004      	beq.n	8102f38 <ADC_ConfigureBoostMode+0x1c>
 8102f2e:	687b      	ldr	r3, [r7, #4]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	4a79      	ldr	r2, [pc, #484]	@ (8103118 <ADC_ConfigureBoostMode+0x1fc>)
 8102f34:	4293      	cmp	r3, r2
 8102f36:	d109      	bne.n	8102f4c <ADC_ConfigureBoostMode+0x30>
 8102f38:	4b78      	ldr	r3, [pc, #480]	@ (810311c <ADC_ConfigureBoostMode+0x200>)
 8102f3a:	689b      	ldr	r3, [r3, #8]
 8102f3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102f40:	2b00      	cmp	r3, #0
 8102f42:	bf14      	ite	ne
 8102f44:	2301      	movne	r3, #1
 8102f46:	2300      	moveq	r3, #0
 8102f48:	b2db      	uxtb	r3, r3
 8102f4a:	e008      	b.n	8102f5e <ADC_ConfigureBoostMode+0x42>
 8102f4c:	4b74      	ldr	r3, [pc, #464]	@ (8103120 <ADC_ConfigureBoostMode+0x204>)
 8102f4e:	689b      	ldr	r3, [r3, #8]
 8102f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102f54:	2b00      	cmp	r3, #0
 8102f56:	bf14      	ite	ne
 8102f58:	2301      	movne	r3, #1
 8102f5a:	2300      	moveq	r3, #0
 8102f5c:	b2db      	uxtb	r3, r3
 8102f5e:	2b00      	cmp	r3, #0
 8102f60:	d01c      	beq.n	8102f9c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8102f62:	f001 f875 	bl	8104050 <HAL_RCC_GetHCLKFreq>
 8102f66:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	685b      	ldr	r3, [r3, #4]
 8102f6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102f70:	d010      	beq.n	8102f94 <ADC_ConfigureBoostMode+0x78>
 8102f72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102f76:	d873      	bhi.n	8103060 <ADC_ConfigureBoostMode+0x144>
 8102f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102f7c:	d002      	beq.n	8102f84 <ADC_ConfigureBoostMode+0x68>
 8102f7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102f82:	d16d      	bne.n	8103060 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8102f84:	687b      	ldr	r3, [r7, #4]
 8102f86:	685b      	ldr	r3, [r3, #4]
 8102f88:	0c1b      	lsrs	r3, r3, #16
 8102f8a:	68fa      	ldr	r2, [r7, #12]
 8102f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8102f90:	60fb      	str	r3, [r7, #12]
        break;
 8102f92:	e068      	b.n	8103066 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8102f94:	68fb      	ldr	r3, [r7, #12]
 8102f96:	089b      	lsrs	r3, r3, #2
 8102f98:	60fb      	str	r3, [r7, #12]
        break;
 8102f9a:	e064      	b.n	8103066 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8102f9c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8102fa0:	f04f 0100 	mov.w	r1, #0
 8102fa4:	f002 fafc 	bl	81055a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8102fa8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	685b      	ldr	r3, [r3, #4]
 8102fae:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8102fb2:	d051      	beq.n	8103058 <ADC_ConfigureBoostMode+0x13c>
 8102fb4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8102fb8:	d854      	bhi.n	8103064 <ADC_ConfigureBoostMode+0x148>
 8102fba:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8102fbe:	d047      	beq.n	8103050 <ADC_ConfigureBoostMode+0x134>
 8102fc0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8102fc4:	d84e      	bhi.n	8103064 <ADC_ConfigureBoostMode+0x148>
 8102fc6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8102fca:	d03d      	beq.n	8103048 <ADC_ConfigureBoostMode+0x12c>
 8102fcc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8102fd0:	d848      	bhi.n	8103064 <ADC_ConfigureBoostMode+0x148>
 8102fd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102fd6:	d033      	beq.n	8103040 <ADC_ConfigureBoostMode+0x124>
 8102fd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102fdc:	d842      	bhi.n	8103064 <ADC_ConfigureBoostMode+0x148>
 8102fde:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8102fe2:	d029      	beq.n	8103038 <ADC_ConfigureBoostMode+0x11c>
 8102fe4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8102fe8:	d83c      	bhi.n	8103064 <ADC_ConfigureBoostMode+0x148>
 8102fea:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8102fee:	d01a      	beq.n	8103026 <ADC_ConfigureBoostMode+0x10a>
 8102ff0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8102ff4:	d836      	bhi.n	8103064 <ADC_ConfigureBoostMode+0x148>
 8102ff6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8102ffa:	d014      	beq.n	8103026 <ADC_ConfigureBoostMode+0x10a>
 8102ffc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8103000:	d830      	bhi.n	8103064 <ADC_ConfigureBoostMode+0x148>
 8103002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103006:	d00e      	beq.n	8103026 <ADC_ConfigureBoostMode+0x10a>
 8103008:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810300c:	d82a      	bhi.n	8103064 <ADC_ConfigureBoostMode+0x148>
 810300e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8103012:	d008      	beq.n	8103026 <ADC_ConfigureBoostMode+0x10a>
 8103014:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8103018:	d824      	bhi.n	8103064 <ADC_ConfigureBoostMode+0x148>
 810301a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810301e:	d002      	beq.n	8103026 <ADC_ConfigureBoostMode+0x10a>
 8103020:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8103024:	d11e      	bne.n	8103064 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103026:	687b      	ldr	r3, [r7, #4]
 8103028:	685b      	ldr	r3, [r3, #4]
 810302a:	0c9b      	lsrs	r3, r3, #18
 810302c:	005b      	lsls	r3, r3, #1
 810302e:	68fa      	ldr	r2, [r7, #12]
 8103030:	fbb2 f3f3 	udiv	r3, r2, r3
 8103034:	60fb      	str	r3, [r7, #12]
        break;
 8103036:	e016      	b.n	8103066 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103038:	68fb      	ldr	r3, [r7, #12]
 810303a:	091b      	lsrs	r3, r3, #4
 810303c:	60fb      	str	r3, [r7, #12]
        break;
 810303e:	e012      	b.n	8103066 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103040:	68fb      	ldr	r3, [r7, #12]
 8103042:	095b      	lsrs	r3, r3, #5
 8103044:	60fb      	str	r3, [r7, #12]
        break;
 8103046:	e00e      	b.n	8103066 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103048:	68fb      	ldr	r3, [r7, #12]
 810304a:	099b      	lsrs	r3, r3, #6
 810304c:	60fb      	str	r3, [r7, #12]
        break;
 810304e:	e00a      	b.n	8103066 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103050:	68fb      	ldr	r3, [r7, #12]
 8103052:	09db      	lsrs	r3, r3, #7
 8103054:	60fb      	str	r3, [r7, #12]
        break;
 8103056:	e006      	b.n	8103066 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103058:	68fb      	ldr	r3, [r7, #12]
 810305a:	0a1b      	lsrs	r3, r3, #8
 810305c:	60fb      	str	r3, [r7, #12]
        break;
 810305e:	e002      	b.n	8103066 <ADC_ConfigureBoostMode+0x14a>
        break;
 8103060:	bf00      	nop
 8103062:	e000      	b.n	8103066 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8103064:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103066:	f7fe f9f7 	bl	8101458 <HAL_GetREVID>
 810306a:	4603      	mov	r3, r0
 810306c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8103070:	4293      	cmp	r3, r2
 8103072:	d815      	bhi.n	81030a0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8103074:	68fb      	ldr	r3, [r7, #12]
 8103076:	4a2b      	ldr	r2, [pc, #172]	@ (8103124 <ADC_ConfigureBoostMode+0x208>)
 8103078:	4293      	cmp	r3, r2
 810307a:	d908      	bls.n	810308e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810307c:	687b      	ldr	r3, [r7, #4]
 810307e:	681b      	ldr	r3, [r3, #0]
 8103080:	689a      	ldr	r2, [r3, #8]
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	681b      	ldr	r3, [r3, #0]
 8103086:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810308a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 810308c:	e03e      	b.n	810310c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	689a      	ldr	r2, [r3, #8]
 8103094:	687b      	ldr	r3, [r7, #4]
 8103096:	681b      	ldr	r3, [r3, #0]
 8103098:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810309c:	609a      	str	r2, [r3, #8]
}
 810309e:	e035      	b.n	810310c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 81030a0:	68fb      	ldr	r3, [r7, #12]
 81030a2:	085b      	lsrs	r3, r3, #1
 81030a4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 81030a6:	68fb      	ldr	r3, [r7, #12]
 81030a8:	4a1f      	ldr	r2, [pc, #124]	@ (8103128 <ADC_ConfigureBoostMode+0x20c>)
 81030aa:	4293      	cmp	r3, r2
 81030ac:	d808      	bhi.n	81030c0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	681b      	ldr	r3, [r3, #0]
 81030b2:	689a      	ldr	r2, [r3, #8]
 81030b4:	687b      	ldr	r3, [r7, #4]
 81030b6:	681b      	ldr	r3, [r3, #0]
 81030b8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 81030bc:	609a      	str	r2, [r3, #8]
}
 81030be:	e025      	b.n	810310c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 81030c0:	68fb      	ldr	r3, [r7, #12]
 81030c2:	4a1a      	ldr	r2, [pc, #104]	@ (810312c <ADC_ConfigureBoostMode+0x210>)
 81030c4:	4293      	cmp	r3, r2
 81030c6:	d80a      	bhi.n	81030de <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 81030c8:	687b      	ldr	r3, [r7, #4]
 81030ca:	681b      	ldr	r3, [r3, #0]
 81030cc:	689b      	ldr	r3, [r3, #8]
 81030ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81030d2:	687b      	ldr	r3, [r7, #4]
 81030d4:	681b      	ldr	r3, [r3, #0]
 81030d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81030da:	609a      	str	r2, [r3, #8]
}
 81030dc:	e016      	b.n	810310c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 81030de:	68fb      	ldr	r3, [r7, #12]
 81030e0:	4a13      	ldr	r2, [pc, #76]	@ (8103130 <ADC_ConfigureBoostMode+0x214>)
 81030e2:	4293      	cmp	r3, r2
 81030e4:	d80a      	bhi.n	81030fc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	689b      	ldr	r3, [r3, #8]
 81030ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	681b      	ldr	r3, [r3, #0]
 81030f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81030f8:	609a      	str	r2, [r3, #8]
}
 81030fa:	e007      	b.n	810310c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	681b      	ldr	r3, [r3, #0]
 8103100:	689a      	ldr	r2, [r3, #8]
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	681b      	ldr	r3, [r3, #0]
 8103106:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 810310a:	609a      	str	r2, [r3, #8]
}
 810310c:	bf00      	nop
 810310e:	3710      	adds	r7, #16
 8103110:	46bd      	mov	sp, r7
 8103112:	bd80      	pop	{r7, pc}
 8103114:	40022000 	.word	0x40022000
 8103118:	40022100 	.word	0x40022100
 810311c:	40022300 	.word	0x40022300
 8103120:	58026300 	.word	0x58026300
 8103124:	01312d00 	.word	0x01312d00
 8103128:	005f5e10 	.word	0x005f5e10
 810312c:	00bebc20 	.word	0x00bebc20
 8103130:	017d7840 	.word	0x017d7840

08103134 <LL_ADC_IsEnabled>:
{
 8103134:	b480      	push	{r7}
 8103136:	b083      	sub	sp, #12
 8103138:	af00      	add	r7, sp, #0
 810313a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	689b      	ldr	r3, [r3, #8]
 8103140:	f003 0301 	and.w	r3, r3, #1
 8103144:	2b01      	cmp	r3, #1
 8103146:	d101      	bne.n	810314c <LL_ADC_IsEnabled+0x18>
 8103148:	2301      	movs	r3, #1
 810314a:	e000      	b.n	810314e <LL_ADC_IsEnabled+0x1a>
 810314c:	2300      	movs	r3, #0
}
 810314e:	4618      	mov	r0, r3
 8103150:	370c      	adds	r7, #12
 8103152:	46bd      	mov	sp, r7
 8103154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103158:	4770      	bx	lr

0810315a <LL_ADC_REG_IsConversionOngoing>:
{
 810315a:	b480      	push	{r7}
 810315c:	b083      	sub	sp, #12
 810315e:	af00      	add	r7, sp, #0
 8103160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	689b      	ldr	r3, [r3, #8]
 8103166:	f003 0304 	and.w	r3, r3, #4
 810316a:	2b04      	cmp	r3, #4
 810316c:	d101      	bne.n	8103172 <LL_ADC_REG_IsConversionOngoing+0x18>
 810316e:	2301      	movs	r3, #1
 8103170:	e000      	b.n	8103174 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103172:	2300      	movs	r3, #0
}
 8103174:	4618      	mov	r0, r3
 8103176:	370c      	adds	r7, #12
 8103178:	46bd      	mov	sp, r7
 810317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810317e:	4770      	bx	lr

08103180 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103180:	b480      	push	{r7}
 8103182:	b083      	sub	sp, #12
 8103184:	af00      	add	r7, sp, #0
 8103186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8103188:	bf00      	nop
 810318a:	370c      	adds	r7, #12
 810318c:	46bd      	mov	sp, r7
 810318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103192:	4770      	bx	lr

08103194 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8103194:	b480      	push	{r7}
 8103196:	b083      	sub	sp, #12
 8103198:	af00      	add	r7, sp, #0
 810319a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 810319c:	bf00      	nop
 810319e:	370c      	adds	r7, #12
 81031a0:	46bd      	mov	sp, r7
 81031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031a6:	4770      	bx	lr

081031a8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 81031a8:	b480      	push	{r7}
 81031aa:	b083      	sub	sp, #12
 81031ac:	af00      	add	r7, sp, #0
 81031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 81031b0:	bf00      	nop
 81031b2:	370c      	adds	r7, #12
 81031b4:	46bd      	mov	sp, r7
 81031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031ba:	4770      	bx	lr

081031bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 81031bc:	b480      	push	{r7}
 81031be:	b083      	sub	sp, #12
 81031c0:	af00      	add	r7, sp, #0
 81031c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 81031c4:	bf00      	nop
 81031c6:	370c      	adds	r7, #12
 81031c8:	46bd      	mov	sp, r7
 81031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031ce:	4770      	bx	lr

081031d0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 81031d0:	b480      	push	{r7}
 81031d2:	b083      	sub	sp, #12
 81031d4:	af00      	add	r7, sp, #0
 81031d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 81031d8:	bf00      	nop
 81031da:	370c      	adds	r7, #12
 81031dc:	46bd      	mov	sp, r7
 81031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031e2:	4770      	bx	lr

081031e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 81031e4:	b590      	push	{r4, r7, lr}
 81031e6:	b09f      	sub	sp, #124	@ 0x7c
 81031e8:	af00      	add	r7, sp, #0
 81031ea:	6078      	str	r0, [r7, #4]
 81031ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81031ee:	2300      	movs	r3, #0
 81031f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81031f4:	687b      	ldr	r3, [r7, #4]
 81031f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 81031fa:	2b01      	cmp	r3, #1
 81031fc:	d101      	bne.n	8103202 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81031fe:	2302      	movs	r3, #2
 8103200:	e0c4      	b.n	810338c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	2201      	movs	r2, #1
 8103206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810320a:	2300      	movs	r3, #0
 810320c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 810320e:	2300      	movs	r3, #0
 8103210:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	681b      	ldr	r3, [r3, #0]
 8103216:	4a5f      	ldr	r2, [pc, #380]	@ (8103394 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103218:	4293      	cmp	r3, r2
 810321a:	d102      	bne.n	8103222 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 810321c:	4b5e      	ldr	r3, [pc, #376]	@ (8103398 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810321e:	60bb      	str	r3, [r7, #8]
 8103220:	e001      	b.n	8103226 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8103222:	2300      	movs	r3, #0
 8103224:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8103226:	68bb      	ldr	r3, [r7, #8]
 8103228:	2b00      	cmp	r3, #0
 810322a:	d10b      	bne.n	8103244 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810322c:	687b      	ldr	r3, [r7, #4]
 810322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103230:	f043 0220 	orr.w	r2, r3, #32
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8103238:	687b      	ldr	r3, [r7, #4]
 810323a:	2200      	movs	r2, #0
 810323c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8103240:	2301      	movs	r3, #1
 8103242:	e0a3      	b.n	810338c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8103244:	68bb      	ldr	r3, [r7, #8]
 8103246:	4618      	mov	r0, r3
 8103248:	f7ff ff87 	bl	810315a <LL_ADC_REG_IsConversionOngoing>
 810324c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810324e:	687b      	ldr	r3, [r7, #4]
 8103250:	681b      	ldr	r3, [r3, #0]
 8103252:	4618      	mov	r0, r3
 8103254:	f7ff ff81 	bl	810315a <LL_ADC_REG_IsConversionOngoing>
 8103258:	4603      	mov	r3, r0
 810325a:	2b00      	cmp	r3, #0
 810325c:	f040 8085 	bne.w	810336a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8103260:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8103262:	2b00      	cmp	r3, #0
 8103264:	f040 8081 	bne.w	810336a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	681b      	ldr	r3, [r3, #0]
 810326c:	4a49      	ldr	r2, [pc, #292]	@ (8103394 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810326e:	4293      	cmp	r3, r2
 8103270:	d004      	beq.n	810327c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	681b      	ldr	r3, [r3, #0]
 8103276:	4a48      	ldr	r2, [pc, #288]	@ (8103398 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103278:	4293      	cmp	r3, r2
 810327a:	d101      	bne.n	8103280 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 810327c:	4b47      	ldr	r3, [pc, #284]	@ (810339c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 810327e:	e000      	b.n	8103282 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8103280:	4b47      	ldr	r3, [pc, #284]	@ (81033a0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8103282:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103284:	683b      	ldr	r3, [r7, #0]
 8103286:	681b      	ldr	r3, [r3, #0]
 8103288:	2b00      	cmp	r3, #0
 810328a:	d03b      	beq.n	8103304 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 810328c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810328e:	689b      	ldr	r3, [r3, #8]
 8103290:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8103294:	683b      	ldr	r3, [r7, #0]
 8103296:	685b      	ldr	r3, [r3, #4]
 8103298:	431a      	orrs	r2, r3
 810329a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810329c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	4a3c      	ldr	r2, [pc, #240]	@ (8103394 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81032a4:	4293      	cmp	r3, r2
 81032a6:	d004      	beq.n	81032b2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	681b      	ldr	r3, [r3, #0]
 81032ac:	4a3a      	ldr	r2, [pc, #232]	@ (8103398 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81032ae:	4293      	cmp	r3, r2
 81032b0:	d10e      	bne.n	81032d0 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 81032b2:	4838      	ldr	r0, [pc, #224]	@ (8103394 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81032b4:	f7ff ff3e 	bl	8103134 <LL_ADC_IsEnabled>
 81032b8:	4604      	mov	r4, r0
 81032ba:	4837      	ldr	r0, [pc, #220]	@ (8103398 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81032bc:	f7ff ff3a 	bl	8103134 <LL_ADC_IsEnabled>
 81032c0:	4603      	mov	r3, r0
 81032c2:	4323      	orrs	r3, r4
 81032c4:	2b00      	cmp	r3, #0
 81032c6:	bf0c      	ite	eq
 81032c8:	2301      	moveq	r3, #1
 81032ca:	2300      	movne	r3, #0
 81032cc:	b2db      	uxtb	r3, r3
 81032ce:	e008      	b.n	81032e2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 81032d0:	4834      	ldr	r0, [pc, #208]	@ (81033a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81032d2:	f7ff ff2f 	bl	8103134 <LL_ADC_IsEnabled>
 81032d6:	4603      	mov	r3, r0
 81032d8:	2b00      	cmp	r3, #0
 81032da:	bf0c      	ite	eq
 81032dc:	2301      	moveq	r3, #1
 81032de:	2300      	movne	r3, #0
 81032e0:	b2db      	uxtb	r3, r3
 81032e2:	2b00      	cmp	r3, #0
 81032e4:	d04b      	beq.n	810337e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 81032e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81032e8:	689b      	ldr	r3, [r3, #8]
 81032ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 81032ee:	f023 030f 	bic.w	r3, r3, #15
 81032f2:	683a      	ldr	r2, [r7, #0]
 81032f4:	6811      	ldr	r1, [r2, #0]
 81032f6:	683a      	ldr	r2, [r7, #0]
 81032f8:	6892      	ldr	r2, [r2, #8]
 81032fa:	430a      	orrs	r2, r1
 81032fc:	431a      	orrs	r2, r3
 81032fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103300:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103302:	e03c      	b.n	810337e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8103304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103306:	689b      	ldr	r3, [r3, #8]
 8103308:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 810330c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810330e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103310:	687b      	ldr	r3, [r7, #4]
 8103312:	681b      	ldr	r3, [r3, #0]
 8103314:	4a1f      	ldr	r2, [pc, #124]	@ (8103394 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103316:	4293      	cmp	r3, r2
 8103318:	d004      	beq.n	8103324 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 810331a:	687b      	ldr	r3, [r7, #4]
 810331c:	681b      	ldr	r3, [r3, #0]
 810331e:	4a1e      	ldr	r2, [pc, #120]	@ (8103398 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103320:	4293      	cmp	r3, r2
 8103322:	d10e      	bne.n	8103342 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8103324:	481b      	ldr	r0, [pc, #108]	@ (8103394 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103326:	f7ff ff05 	bl	8103134 <LL_ADC_IsEnabled>
 810332a:	4604      	mov	r4, r0
 810332c:	481a      	ldr	r0, [pc, #104]	@ (8103398 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810332e:	f7ff ff01 	bl	8103134 <LL_ADC_IsEnabled>
 8103332:	4603      	mov	r3, r0
 8103334:	4323      	orrs	r3, r4
 8103336:	2b00      	cmp	r3, #0
 8103338:	bf0c      	ite	eq
 810333a:	2301      	moveq	r3, #1
 810333c:	2300      	movne	r3, #0
 810333e:	b2db      	uxtb	r3, r3
 8103340:	e008      	b.n	8103354 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8103342:	4818      	ldr	r0, [pc, #96]	@ (81033a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103344:	f7ff fef6 	bl	8103134 <LL_ADC_IsEnabled>
 8103348:	4603      	mov	r3, r0
 810334a:	2b00      	cmp	r3, #0
 810334c:	bf0c      	ite	eq
 810334e:	2301      	moveq	r3, #1
 8103350:	2300      	movne	r3, #0
 8103352:	b2db      	uxtb	r3, r3
 8103354:	2b00      	cmp	r3, #0
 8103356:	d012      	beq.n	810337e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810335a:	689b      	ldr	r3, [r3, #8]
 810335c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8103360:	f023 030f 	bic.w	r3, r3, #15
 8103364:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8103366:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103368:	e009      	b.n	810337e <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810336e:	f043 0220 	orr.w	r2, r3, #32
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8103376:	2301      	movs	r3, #1
 8103378:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 810337c:	e000      	b.n	8103380 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810337e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	2200      	movs	r2, #0
 8103384:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8103388:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 810338c:	4618      	mov	r0, r3
 810338e:	377c      	adds	r7, #124	@ 0x7c
 8103390:	46bd      	mov	sp, r7
 8103392:	bd90      	pop	{r4, r7, pc}
 8103394:	40022000 	.word	0x40022000
 8103398:	40022100 	.word	0x40022100
 810339c:	40022300 	.word	0x40022300
 81033a0:	58026300 	.word	0x58026300
 81033a4:	58026000 	.word	0x58026000

081033a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81033a8:	b480      	push	{r7}
 81033aa:	b085      	sub	sp, #20
 81033ac:	af00      	add	r7, sp, #0
 81033ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81033b0:	687b      	ldr	r3, [r7, #4]
 81033b2:	f003 0307 	and.w	r3, r3, #7
 81033b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81033b8:	4b0c      	ldr	r3, [pc, #48]	@ (81033ec <__NVIC_SetPriorityGrouping+0x44>)
 81033ba:	68db      	ldr	r3, [r3, #12]
 81033bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81033be:	68ba      	ldr	r2, [r7, #8]
 81033c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81033c4:	4013      	ands	r3, r2
 81033c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81033c8:	68fb      	ldr	r3, [r7, #12]
 81033ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81033cc:	68bb      	ldr	r3, [r7, #8]
 81033ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81033d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81033d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81033d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81033da:	4a04      	ldr	r2, [pc, #16]	@ (81033ec <__NVIC_SetPriorityGrouping+0x44>)
 81033dc:	68bb      	ldr	r3, [r7, #8]
 81033de:	60d3      	str	r3, [r2, #12]
}
 81033e0:	bf00      	nop
 81033e2:	3714      	adds	r7, #20
 81033e4:	46bd      	mov	sp, r7
 81033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033ea:	4770      	bx	lr
 81033ec:	e000ed00 	.word	0xe000ed00

081033f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81033f0:	b480      	push	{r7}
 81033f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81033f4:	4b04      	ldr	r3, [pc, #16]	@ (8103408 <__NVIC_GetPriorityGrouping+0x18>)
 81033f6:	68db      	ldr	r3, [r3, #12]
 81033f8:	0a1b      	lsrs	r3, r3, #8
 81033fa:	f003 0307 	and.w	r3, r3, #7
}
 81033fe:	4618      	mov	r0, r3
 8103400:	46bd      	mov	sp, r7
 8103402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103406:	4770      	bx	lr
 8103408:	e000ed00 	.word	0xe000ed00

0810340c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810340c:	b480      	push	{r7}
 810340e:	b083      	sub	sp, #12
 8103410:	af00      	add	r7, sp, #0
 8103412:	4603      	mov	r3, r0
 8103414:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810341a:	2b00      	cmp	r3, #0
 810341c:	db0b      	blt.n	8103436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810341e:	88fb      	ldrh	r3, [r7, #6]
 8103420:	f003 021f 	and.w	r2, r3, #31
 8103424:	4907      	ldr	r1, [pc, #28]	@ (8103444 <__NVIC_EnableIRQ+0x38>)
 8103426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810342a:	095b      	lsrs	r3, r3, #5
 810342c:	2001      	movs	r0, #1
 810342e:	fa00 f202 	lsl.w	r2, r0, r2
 8103432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103436:	bf00      	nop
 8103438:	370c      	adds	r7, #12
 810343a:	46bd      	mov	sp, r7
 810343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103440:	4770      	bx	lr
 8103442:	bf00      	nop
 8103444:	e000e100 	.word	0xe000e100

08103448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103448:	b480      	push	{r7}
 810344a:	b083      	sub	sp, #12
 810344c:	af00      	add	r7, sp, #0
 810344e:	4603      	mov	r3, r0
 8103450:	6039      	str	r1, [r7, #0]
 8103452:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103458:	2b00      	cmp	r3, #0
 810345a:	db0a      	blt.n	8103472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810345c:	683b      	ldr	r3, [r7, #0]
 810345e:	b2da      	uxtb	r2, r3
 8103460:	490c      	ldr	r1, [pc, #48]	@ (8103494 <__NVIC_SetPriority+0x4c>)
 8103462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103466:	0112      	lsls	r2, r2, #4
 8103468:	b2d2      	uxtb	r2, r2
 810346a:	440b      	add	r3, r1
 810346c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103470:	e00a      	b.n	8103488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103472:	683b      	ldr	r3, [r7, #0]
 8103474:	b2da      	uxtb	r2, r3
 8103476:	4908      	ldr	r1, [pc, #32]	@ (8103498 <__NVIC_SetPriority+0x50>)
 8103478:	88fb      	ldrh	r3, [r7, #6]
 810347a:	f003 030f 	and.w	r3, r3, #15
 810347e:	3b04      	subs	r3, #4
 8103480:	0112      	lsls	r2, r2, #4
 8103482:	b2d2      	uxtb	r2, r2
 8103484:	440b      	add	r3, r1
 8103486:	761a      	strb	r2, [r3, #24]
}
 8103488:	bf00      	nop
 810348a:	370c      	adds	r7, #12
 810348c:	46bd      	mov	sp, r7
 810348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103492:	4770      	bx	lr
 8103494:	e000e100 	.word	0xe000e100
 8103498:	e000ed00 	.word	0xe000ed00

0810349c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810349c:	b480      	push	{r7}
 810349e:	b089      	sub	sp, #36	@ 0x24
 81034a0:	af00      	add	r7, sp, #0
 81034a2:	60f8      	str	r0, [r7, #12]
 81034a4:	60b9      	str	r1, [r7, #8]
 81034a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81034a8:	68fb      	ldr	r3, [r7, #12]
 81034aa:	f003 0307 	and.w	r3, r3, #7
 81034ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81034b0:	69fb      	ldr	r3, [r7, #28]
 81034b2:	f1c3 0307 	rsb	r3, r3, #7
 81034b6:	2b04      	cmp	r3, #4
 81034b8:	bf28      	it	cs
 81034ba:	2304      	movcs	r3, #4
 81034bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81034be:	69fb      	ldr	r3, [r7, #28]
 81034c0:	3304      	adds	r3, #4
 81034c2:	2b06      	cmp	r3, #6
 81034c4:	d902      	bls.n	81034cc <NVIC_EncodePriority+0x30>
 81034c6:	69fb      	ldr	r3, [r7, #28]
 81034c8:	3b03      	subs	r3, #3
 81034ca:	e000      	b.n	81034ce <NVIC_EncodePriority+0x32>
 81034cc:	2300      	movs	r3, #0
 81034ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81034d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81034d4:	69bb      	ldr	r3, [r7, #24]
 81034d6:	fa02 f303 	lsl.w	r3, r2, r3
 81034da:	43da      	mvns	r2, r3
 81034dc:	68bb      	ldr	r3, [r7, #8]
 81034de:	401a      	ands	r2, r3
 81034e0:	697b      	ldr	r3, [r7, #20]
 81034e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81034e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 81034e8:	697b      	ldr	r3, [r7, #20]
 81034ea:	fa01 f303 	lsl.w	r3, r1, r3
 81034ee:	43d9      	mvns	r1, r3
 81034f0:	687b      	ldr	r3, [r7, #4]
 81034f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81034f4:	4313      	orrs	r3, r2
         );
}
 81034f6:	4618      	mov	r0, r3
 81034f8:	3724      	adds	r7, #36	@ 0x24
 81034fa:	46bd      	mov	sp, r7
 81034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103500:	4770      	bx	lr
	...

08103504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103504:	b580      	push	{r7, lr}
 8103506:	b082      	sub	sp, #8
 8103508:	af00      	add	r7, sp, #0
 810350a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810350c:	687b      	ldr	r3, [r7, #4]
 810350e:	3b01      	subs	r3, #1
 8103510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8103514:	d301      	bcc.n	810351a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103516:	2301      	movs	r3, #1
 8103518:	e00f      	b.n	810353a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810351a:	4a0a      	ldr	r2, [pc, #40]	@ (8103544 <SysTick_Config+0x40>)
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	3b01      	subs	r3, #1
 8103520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8103522:	210f      	movs	r1, #15
 8103524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8103528:	f7ff ff8e 	bl	8103448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810352c:	4b05      	ldr	r3, [pc, #20]	@ (8103544 <SysTick_Config+0x40>)
 810352e:	2200      	movs	r2, #0
 8103530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103532:	4b04      	ldr	r3, [pc, #16]	@ (8103544 <SysTick_Config+0x40>)
 8103534:	2207      	movs	r2, #7
 8103536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103538:	2300      	movs	r3, #0
}
 810353a:	4618      	mov	r0, r3
 810353c:	3708      	adds	r7, #8
 810353e:	46bd      	mov	sp, r7
 8103540:	bd80      	pop	{r7, pc}
 8103542:	bf00      	nop
 8103544:	e000e010 	.word	0xe000e010

08103548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103548:	b580      	push	{r7, lr}
 810354a:	b082      	sub	sp, #8
 810354c:	af00      	add	r7, sp, #0
 810354e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103550:	6878      	ldr	r0, [r7, #4]
 8103552:	f7ff ff29 	bl	81033a8 <__NVIC_SetPriorityGrouping>
}
 8103556:	bf00      	nop
 8103558:	3708      	adds	r7, #8
 810355a:	46bd      	mov	sp, r7
 810355c:	bd80      	pop	{r7, pc}

0810355e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810355e:	b580      	push	{r7, lr}
 8103560:	b086      	sub	sp, #24
 8103562:	af00      	add	r7, sp, #0
 8103564:	4603      	mov	r3, r0
 8103566:	60b9      	str	r1, [r7, #8]
 8103568:	607a      	str	r2, [r7, #4]
 810356a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810356c:	f7ff ff40 	bl	81033f0 <__NVIC_GetPriorityGrouping>
 8103570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103572:	687a      	ldr	r2, [r7, #4]
 8103574:	68b9      	ldr	r1, [r7, #8]
 8103576:	6978      	ldr	r0, [r7, #20]
 8103578:	f7ff ff90 	bl	810349c <NVIC_EncodePriority>
 810357c:	4602      	mov	r2, r0
 810357e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103582:	4611      	mov	r1, r2
 8103584:	4618      	mov	r0, r3
 8103586:	f7ff ff5f 	bl	8103448 <__NVIC_SetPriority>
}
 810358a:	bf00      	nop
 810358c:	3718      	adds	r7, #24
 810358e:	46bd      	mov	sp, r7
 8103590:	bd80      	pop	{r7, pc}

08103592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103592:	b580      	push	{r7, lr}
 8103594:	b082      	sub	sp, #8
 8103596:	af00      	add	r7, sp, #0
 8103598:	4603      	mov	r3, r0
 810359a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810359c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81035a0:	4618      	mov	r0, r3
 81035a2:	f7ff ff33 	bl	810340c <__NVIC_EnableIRQ>
}
 81035a6:	bf00      	nop
 81035a8:	3708      	adds	r7, #8
 81035aa:	46bd      	mov	sp, r7
 81035ac:	bd80      	pop	{r7, pc}

081035ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81035ae:	b580      	push	{r7, lr}
 81035b0:	b082      	sub	sp, #8
 81035b2:	af00      	add	r7, sp, #0
 81035b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81035b6:	6878      	ldr	r0, [r7, #4]
 81035b8:	f7ff ffa4 	bl	8103504 <SysTick_Config>
 81035bc:	4603      	mov	r3, r0
}
 81035be:	4618      	mov	r0, r3
 81035c0:	3708      	adds	r7, #8
 81035c2:	46bd      	mov	sp, r7
 81035c4:	bd80      	pop	{r7, pc}
	...

081035c8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81035c8:	b480      	push	{r7}
 81035ca:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81035cc:	4b07      	ldr	r3, [pc, #28]	@ (81035ec <HAL_GetCurrentCPUID+0x24>)
 81035ce:	681b      	ldr	r3, [r3, #0]
 81035d0:	091b      	lsrs	r3, r3, #4
 81035d2:	f003 030f 	and.w	r3, r3, #15
 81035d6:	2b07      	cmp	r3, #7
 81035d8:	d101      	bne.n	81035de <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81035da:	2303      	movs	r3, #3
 81035dc:	e000      	b.n	81035e0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81035de:	2301      	movs	r3, #1
  }
}
 81035e0:	4618      	mov	r0, r3
 81035e2:	46bd      	mov	sp, r7
 81035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035e8:	4770      	bx	lr
 81035ea:	bf00      	nop
 81035ec:	e000ed00 	.word	0xe000ed00

081035f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81035f0:	b480      	push	{r7}
 81035f2:	b089      	sub	sp, #36	@ 0x24
 81035f4:	af00      	add	r7, sp, #0
 81035f6:	6078      	str	r0, [r7, #4]
 81035f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81035fa:	2300      	movs	r3, #0
 81035fc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81035fe:	4b89      	ldr	r3, [pc, #548]	@ (8103824 <HAL_GPIO_Init+0x234>)
 8103600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103602:	e194      	b.n	810392e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103604:	683b      	ldr	r3, [r7, #0]
 8103606:	681a      	ldr	r2, [r3, #0]
 8103608:	2101      	movs	r1, #1
 810360a:	69fb      	ldr	r3, [r7, #28]
 810360c:	fa01 f303 	lsl.w	r3, r1, r3
 8103610:	4013      	ands	r3, r2
 8103612:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103614:	693b      	ldr	r3, [r7, #16]
 8103616:	2b00      	cmp	r3, #0
 8103618:	f000 8186 	beq.w	8103928 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810361c:	683b      	ldr	r3, [r7, #0]
 810361e:	685b      	ldr	r3, [r3, #4]
 8103620:	f003 0303 	and.w	r3, r3, #3
 8103624:	2b01      	cmp	r3, #1
 8103626:	d005      	beq.n	8103634 <HAL_GPIO_Init+0x44>
 8103628:	683b      	ldr	r3, [r7, #0]
 810362a:	685b      	ldr	r3, [r3, #4]
 810362c:	f003 0303 	and.w	r3, r3, #3
 8103630:	2b02      	cmp	r3, #2
 8103632:	d130      	bne.n	8103696 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	689b      	ldr	r3, [r3, #8]
 8103638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810363a:	69fb      	ldr	r3, [r7, #28]
 810363c:	005b      	lsls	r3, r3, #1
 810363e:	2203      	movs	r2, #3
 8103640:	fa02 f303 	lsl.w	r3, r2, r3
 8103644:	43db      	mvns	r3, r3
 8103646:	69ba      	ldr	r2, [r7, #24]
 8103648:	4013      	ands	r3, r2
 810364a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810364c:	683b      	ldr	r3, [r7, #0]
 810364e:	68da      	ldr	r2, [r3, #12]
 8103650:	69fb      	ldr	r3, [r7, #28]
 8103652:	005b      	lsls	r3, r3, #1
 8103654:	fa02 f303 	lsl.w	r3, r2, r3
 8103658:	69ba      	ldr	r2, [r7, #24]
 810365a:	4313      	orrs	r3, r2
 810365c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	69ba      	ldr	r2, [r7, #24]
 8103662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	685b      	ldr	r3, [r3, #4]
 8103668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810366a:	2201      	movs	r2, #1
 810366c:	69fb      	ldr	r3, [r7, #28]
 810366e:	fa02 f303 	lsl.w	r3, r2, r3
 8103672:	43db      	mvns	r3, r3
 8103674:	69ba      	ldr	r2, [r7, #24]
 8103676:	4013      	ands	r3, r2
 8103678:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810367a:	683b      	ldr	r3, [r7, #0]
 810367c:	685b      	ldr	r3, [r3, #4]
 810367e:	091b      	lsrs	r3, r3, #4
 8103680:	f003 0201 	and.w	r2, r3, #1
 8103684:	69fb      	ldr	r3, [r7, #28]
 8103686:	fa02 f303 	lsl.w	r3, r2, r3
 810368a:	69ba      	ldr	r2, [r7, #24]
 810368c:	4313      	orrs	r3, r2
 810368e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	69ba      	ldr	r2, [r7, #24]
 8103694:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8103696:	683b      	ldr	r3, [r7, #0]
 8103698:	685b      	ldr	r3, [r3, #4]
 810369a:	f003 0303 	and.w	r3, r3, #3
 810369e:	2b03      	cmp	r3, #3
 81036a0:	d017      	beq.n	81036d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	68db      	ldr	r3, [r3, #12]
 81036a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81036a8:	69fb      	ldr	r3, [r7, #28]
 81036aa:	005b      	lsls	r3, r3, #1
 81036ac:	2203      	movs	r2, #3
 81036ae:	fa02 f303 	lsl.w	r3, r2, r3
 81036b2:	43db      	mvns	r3, r3
 81036b4:	69ba      	ldr	r2, [r7, #24]
 81036b6:	4013      	ands	r3, r2
 81036b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81036ba:	683b      	ldr	r3, [r7, #0]
 81036bc:	689a      	ldr	r2, [r3, #8]
 81036be:	69fb      	ldr	r3, [r7, #28]
 81036c0:	005b      	lsls	r3, r3, #1
 81036c2:	fa02 f303 	lsl.w	r3, r2, r3
 81036c6:	69ba      	ldr	r2, [r7, #24]
 81036c8:	4313      	orrs	r3, r2
 81036ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81036cc:	687b      	ldr	r3, [r7, #4]
 81036ce:	69ba      	ldr	r2, [r7, #24]
 81036d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81036d2:	683b      	ldr	r3, [r7, #0]
 81036d4:	685b      	ldr	r3, [r3, #4]
 81036d6:	f003 0303 	and.w	r3, r3, #3
 81036da:	2b02      	cmp	r3, #2
 81036dc:	d123      	bne.n	8103726 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81036de:	69fb      	ldr	r3, [r7, #28]
 81036e0:	08da      	lsrs	r2, r3, #3
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	3208      	adds	r2, #8
 81036e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81036ec:	69fb      	ldr	r3, [r7, #28]
 81036ee:	f003 0307 	and.w	r3, r3, #7
 81036f2:	009b      	lsls	r3, r3, #2
 81036f4:	220f      	movs	r2, #15
 81036f6:	fa02 f303 	lsl.w	r3, r2, r3
 81036fa:	43db      	mvns	r3, r3
 81036fc:	69ba      	ldr	r2, [r7, #24]
 81036fe:	4013      	ands	r3, r2
 8103700:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103702:	683b      	ldr	r3, [r7, #0]
 8103704:	691a      	ldr	r2, [r3, #16]
 8103706:	69fb      	ldr	r3, [r7, #28]
 8103708:	f003 0307 	and.w	r3, r3, #7
 810370c:	009b      	lsls	r3, r3, #2
 810370e:	fa02 f303 	lsl.w	r3, r2, r3
 8103712:	69ba      	ldr	r2, [r7, #24]
 8103714:	4313      	orrs	r3, r2
 8103716:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103718:	69fb      	ldr	r3, [r7, #28]
 810371a:	08da      	lsrs	r2, r3, #3
 810371c:	687b      	ldr	r3, [r7, #4]
 810371e:	3208      	adds	r2, #8
 8103720:	69b9      	ldr	r1, [r7, #24]
 8103722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103726:	687b      	ldr	r3, [r7, #4]
 8103728:	681b      	ldr	r3, [r3, #0]
 810372a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810372c:	69fb      	ldr	r3, [r7, #28]
 810372e:	005b      	lsls	r3, r3, #1
 8103730:	2203      	movs	r2, #3
 8103732:	fa02 f303 	lsl.w	r3, r2, r3
 8103736:	43db      	mvns	r3, r3
 8103738:	69ba      	ldr	r2, [r7, #24]
 810373a:	4013      	ands	r3, r2
 810373c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810373e:	683b      	ldr	r3, [r7, #0]
 8103740:	685b      	ldr	r3, [r3, #4]
 8103742:	f003 0203 	and.w	r2, r3, #3
 8103746:	69fb      	ldr	r3, [r7, #28]
 8103748:	005b      	lsls	r3, r3, #1
 810374a:	fa02 f303 	lsl.w	r3, r2, r3
 810374e:	69ba      	ldr	r2, [r7, #24]
 8103750:	4313      	orrs	r3, r2
 8103752:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103754:	687b      	ldr	r3, [r7, #4]
 8103756:	69ba      	ldr	r2, [r7, #24]
 8103758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810375a:	683b      	ldr	r3, [r7, #0]
 810375c:	685b      	ldr	r3, [r3, #4]
 810375e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103762:	2b00      	cmp	r3, #0
 8103764:	f000 80e0 	beq.w	8103928 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103768:	4b2f      	ldr	r3, [pc, #188]	@ (8103828 <HAL_GPIO_Init+0x238>)
 810376a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810376e:	4a2e      	ldr	r2, [pc, #184]	@ (8103828 <HAL_GPIO_Init+0x238>)
 8103770:	f043 0302 	orr.w	r3, r3, #2
 8103774:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8103778:	4b2b      	ldr	r3, [pc, #172]	@ (8103828 <HAL_GPIO_Init+0x238>)
 810377a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810377e:	f003 0302 	and.w	r3, r3, #2
 8103782:	60fb      	str	r3, [r7, #12]
 8103784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103786:	4a29      	ldr	r2, [pc, #164]	@ (810382c <HAL_GPIO_Init+0x23c>)
 8103788:	69fb      	ldr	r3, [r7, #28]
 810378a:	089b      	lsrs	r3, r3, #2
 810378c:	3302      	adds	r3, #2
 810378e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103794:	69fb      	ldr	r3, [r7, #28]
 8103796:	f003 0303 	and.w	r3, r3, #3
 810379a:	009b      	lsls	r3, r3, #2
 810379c:	220f      	movs	r2, #15
 810379e:	fa02 f303 	lsl.w	r3, r2, r3
 81037a2:	43db      	mvns	r3, r3
 81037a4:	69ba      	ldr	r2, [r7, #24]
 81037a6:	4013      	ands	r3, r2
 81037a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	4a20      	ldr	r2, [pc, #128]	@ (8103830 <HAL_GPIO_Init+0x240>)
 81037ae:	4293      	cmp	r3, r2
 81037b0:	d052      	beq.n	8103858 <HAL_GPIO_Init+0x268>
 81037b2:	687b      	ldr	r3, [r7, #4]
 81037b4:	4a1f      	ldr	r2, [pc, #124]	@ (8103834 <HAL_GPIO_Init+0x244>)
 81037b6:	4293      	cmp	r3, r2
 81037b8:	d031      	beq.n	810381e <HAL_GPIO_Init+0x22e>
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	4a1e      	ldr	r2, [pc, #120]	@ (8103838 <HAL_GPIO_Init+0x248>)
 81037be:	4293      	cmp	r3, r2
 81037c0:	d02b      	beq.n	810381a <HAL_GPIO_Init+0x22a>
 81037c2:	687b      	ldr	r3, [r7, #4]
 81037c4:	4a1d      	ldr	r2, [pc, #116]	@ (810383c <HAL_GPIO_Init+0x24c>)
 81037c6:	4293      	cmp	r3, r2
 81037c8:	d025      	beq.n	8103816 <HAL_GPIO_Init+0x226>
 81037ca:	687b      	ldr	r3, [r7, #4]
 81037cc:	4a1c      	ldr	r2, [pc, #112]	@ (8103840 <HAL_GPIO_Init+0x250>)
 81037ce:	4293      	cmp	r3, r2
 81037d0:	d01f      	beq.n	8103812 <HAL_GPIO_Init+0x222>
 81037d2:	687b      	ldr	r3, [r7, #4]
 81037d4:	4a1b      	ldr	r2, [pc, #108]	@ (8103844 <HAL_GPIO_Init+0x254>)
 81037d6:	4293      	cmp	r3, r2
 81037d8:	d019      	beq.n	810380e <HAL_GPIO_Init+0x21e>
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	4a1a      	ldr	r2, [pc, #104]	@ (8103848 <HAL_GPIO_Init+0x258>)
 81037de:	4293      	cmp	r3, r2
 81037e0:	d013      	beq.n	810380a <HAL_GPIO_Init+0x21a>
 81037e2:	687b      	ldr	r3, [r7, #4]
 81037e4:	4a19      	ldr	r2, [pc, #100]	@ (810384c <HAL_GPIO_Init+0x25c>)
 81037e6:	4293      	cmp	r3, r2
 81037e8:	d00d      	beq.n	8103806 <HAL_GPIO_Init+0x216>
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	4a18      	ldr	r2, [pc, #96]	@ (8103850 <HAL_GPIO_Init+0x260>)
 81037ee:	4293      	cmp	r3, r2
 81037f0:	d007      	beq.n	8103802 <HAL_GPIO_Init+0x212>
 81037f2:	687b      	ldr	r3, [r7, #4]
 81037f4:	4a17      	ldr	r2, [pc, #92]	@ (8103854 <HAL_GPIO_Init+0x264>)
 81037f6:	4293      	cmp	r3, r2
 81037f8:	d101      	bne.n	81037fe <HAL_GPIO_Init+0x20e>
 81037fa:	2309      	movs	r3, #9
 81037fc:	e02d      	b.n	810385a <HAL_GPIO_Init+0x26a>
 81037fe:	230a      	movs	r3, #10
 8103800:	e02b      	b.n	810385a <HAL_GPIO_Init+0x26a>
 8103802:	2308      	movs	r3, #8
 8103804:	e029      	b.n	810385a <HAL_GPIO_Init+0x26a>
 8103806:	2307      	movs	r3, #7
 8103808:	e027      	b.n	810385a <HAL_GPIO_Init+0x26a>
 810380a:	2306      	movs	r3, #6
 810380c:	e025      	b.n	810385a <HAL_GPIO_Init+0x26a>
 810380e:	2305      	movs	r3, #5
 8103810:	e023      	b.n	810385a <HAL_GPIO_Init+0x26a>
 8103812:	2304      	movs	r3, #4
 8103814:	e021      	b.n	810385a <HAL_GPIO_Init+0x26a>
 8103816:	2303      	movs	r3, #3
 8103818:	e01f      	b.n	810385a <HAL_GPIO_Init+0x26a>
 810381a:	2302      	movs	r3, #2
 810381c:	e01d      	b.n	810385a <HAL_GPIO_Init+0x26a>
 810381e:	2301      	movs	r3, #1
 8103820:	e01b      	b.n	810385a <HAL_GPIO_Init+0x26a>
 8103822:	bf00      	nop
 8103824:	580000c0 	.word	0x580000c0
 8103828:	58024400 	.word	0x58024400
 810382c:	58000400 	.word	0x58000400
 8103830:	58020000 	.word	0x58020000
 8103834:	58020400 	.word	0x58020400
 8103838:	58020800 	.word	0x58020800
 810383c:	58020c00 	.word	0x58020c00
 8103840:	58021000 	.word	0x58021000
 8103844:	58021400 	.word	0x58021400
 8103848:	58021800 	.word	0x58021800
 810384c:	58021c00 	.word	0x58021c00
 8103850:	58022000 	.word	0x58022000
 8103854:	58022400 	.word	0x58022400
 8103858:	2300      	movs	r3, #0
 810385a:	69fa      	ldr	r2, [r7, #28]
 810385c:	f002 0203 	and.w	r2, r2, #3
 8103860:	0092      	lsls	r2, r2, #2
 8103862:	4093      	lsls	r3, r2
 8103864:	69ba      	ldr	r2, [r7, #24]
 8103866:	4313      	orrs	r3, r2
 8103868:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810386a:	4938      	ldr	r1, [pc, #224]	@ (810394c <HAL_GPIO_Init+0x35c>)
 810386c:	69fb      	ldr	r3, [r7, #28]
 810386e:	089b      	lsrs	r3, r3, #2
 8103870:	3302      	adds	r3, #2
 8103872:	69ba      	ldr	r2, [r7, #24]
 8103874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103880:	693b      	ldr	r3, [r7, #16]
 8103882:	43db      	mvns	r3, r3
 8103884:	69ba      	ldr	r2, [r7, #24]
 8103886:	4013      	ands	r3, r2
 8103888:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810388a:	683b      	ldr	r3, [r7, #0]
 810388c:	685b      	ldr	r3, [r3, #4]
 810388e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8103892:	2b00      	cmp	r3, #0
 8103894:	d003      	beq.n	810389e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103896:	69ba      	ldr	r2, [r7, #24]
 8103898:	693b      	ldr	r3, [r7, #16]
 810389a:	4313      	orrs	r3, r2
 810389c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810389e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81038a2:	69bb      	ldr	r3, [r7, #24]
 81038a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81038a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81038aa:	685b      	ldr	r3, [r3, #4]
 81038ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81038ae:	693b      	ldr	r3, [r7, #16]
 81038b0:	43db      	mvns	r3, r3
 81038b2:	69ba      	ldr	r2, [r7, #24]
 81038b4:	4013      	ands	r3, r2
 81038b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81038b8:	683b      	ldr	r3, [r7, #0]
 81038ba:	685b      	ldr	r3, [r3, #4]
 81038bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81038c0:	2b00      	cmp	r3, #0
 81038c2:	d003      	beq.n	81038cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81038c4:	69ba      	ldr	r2, [r7, #24]
 81038c6:	693b      	ldr	r3, [r7, #16]
 81038c8:	4313      	orrs	r3, r2
 81038ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81038cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81038d0:	69bb      	ldr	r3, [r7, #24]
 81038d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81038d4:	697b      	ldr	r3, [r7, #20]
 81038d6:	685b      	ldr	r3, [r3, #4]
 81038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81038da:	693b      	ldr	r3, [r7, #16]
 81038dc:	43db      	mvns	r3, r3
 81038de:	69ba      	ldr	r2, [r7, #24]
 81038e0:	4013      	ands	r3, r2
 81038e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81038e4:	683b      	ldr	r3, [r7, #0]
 81038e6:	685b      	ldr	r3, [r3, #4]
 81038e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81038ec:	2b00      	cmp	r3, #0
 81038ee:	d003      	beq.n	81038f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81038f0:	69ba      	ldr	r2, [r7, #24]
 81038f2:	693b      	ldr	r3, [r7, #16]
 81038f4:	4313      	orrs	r3, r2
 81038f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81038f8:	697b      	ldr	r3, [r7, #20]
 81038fa:	69ba      	ldr	r2, [r7, #24]
 81038fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81038fe:	697b      	ldr	r3, [r7, #20]
 8103900:	681b      	ldr	r3, [r3, #0]
 8103902:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103904:	693b      	ldr	r3, [r7, #16]
 8103906:	43db      	mvns	r3, r3
 8103908:	69ba      	ldr	r2, [r7, #24]
 810390a:	4013      	ands	r3, r2
 810390c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810390e:	683b      	ldr	r3, [r7, #0]
 8103910:	685b      	ldr	r3, [r3, #4]
 8103912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8103916:	2b00      	cmp	r3, #0
 8103918:	d003      	beq.n	8103922 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810391a:	69ba      	ldr	r2, [r7, #24]
 810391c:	693b      	ldr	r3, [r7, #16]
 810391e:	4313      	orrs	r3, r2
 8103920:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103922:	697b      	ldr	r3, [r7, #20]
 8103924:	69ba      	ldr	r2, [r7, #24]
 8103926:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103928:	69fb      	ldr	r3, [r7, #28]
 810392a:	3301      	adds	r3, #1
 810392c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810392e:	683b      	ldr	r3, [r7, #0]
 8103930:	681a      	ldr	r2, [r3, #0]
 8103932:	69fb      	ldr	r3, [r7, #28]
 8103934:	fa22 f303 	lsr.w	r3, r2, r3
 8103938:	2b00      	cmp	r3, #0
 810393a:	f47f ae63 	bne.w	8103604 <HAL_GPIO_Init+0x14>
  }
}
 810393e:	bf00      	nop
 8103940:	bf00      	nop
 8103942:	3724      	adds	r7, #36	@ 0x24
 8103944:	46bd      	mov	sp, r7
 8103946:	f85d 7b04 	ldr.w	r7, [sp], #4
 810394a:	4770      	bx	lr
 810394c:	58000400 	.word	0x58000400

08103950 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8103950:	b480      	push	{r7}
 8103952:	b087      	sub	sp, #28
 8103954:	af00      	add	r7, sp, #0
 8103956:	6078      	str	r0, [r7, #4]
 8103958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810395a:	2300      	movs	r3, #0
 810395c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810395e:	4b75      	ldr	r3, [pc, #468]	@ (8103b34 <HAL_GPIO_DeInit+0x1e4>)
 8103960:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8103962:	e0d9      	b.n	8103b18 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8103964:	2201      	movs	r2, #1
 8103966:	697b      	ldr	r3, [r7, #20]
 8103968:	fa02 f303 	lsl.w	r3, r2, r3
 810396c:	683a      	ldr	r2, [r7, #0]
 810396e:	4013      	ands	r3, r2
 8103970:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8103972:	68fb      	ldr	r3, [r7, #12]
 8103974:	2b00      	cmp	r3, #0
 8103976:	f000 80cc 	beq.w	8103b12 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 810397a:	4a6f      	ldr	r2, [pc, #444]	@ (8103b38 <HAL_GPIO_DeInit+0x1e8>)
 810397c:	697b      	ldr	r3, [r7, #20]
 810397e:	089b      	lsrs	r3, r3, #2
 8103980:	3302      	adds	r3, #2
 8103982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103986:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8103988:	697b      	ldr	r3, [r7, #20]
 810398a:	f003 0303 	and.w	r3, r3, #3
 810398e:	009b      	lsls	r3, r3, #2
 8103990:	220f      	movs	r2, #15
 8103992:	fa02 f303 	lsl.w	r3, r2, r3
 8103996:	68ba      	ldr	r2, [r7, #8]
 8103998:	4013      	ands	r3, r2
 810399a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	4a67      	ldr	r2, [pc, #412]	@ (8103b3c <HAL_GPIO_DeInit+0x1ec>)
 81039a0:	4293      	cmp	r3, r2
 81039a2:	d037      	beq.n	8103a14 <HAL_GPIO_DeInit+0xc4>
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	4a66      	ldr	r2, [pc, #408]	@ (8103b40 <HAL_GPIO_DeInit+0x1f0>)
 81039a8:	4293      	cmp	r3, r2
 81039aa:	d031      	beq.n	8103a10 <HAL_GPIO_DeInit+0xc0>
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	4a65      	ldr	r2, [pc, #404]	@ (8103b44 <HAL_GPIO_DeInit+0x1f4>)
 81039b0:	4293      	cmp	r3, r2
 81039b2:	d02b      	beq.n	8103a0c <HAL_GPIO_DeInit+0xbc>
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	4a64      	ldr	r2, [pc, #400]	@ (8103b48 <HAL_GPIO_DeInit+0x1f8>)
 81039b8:	4293      	cmp	r3, r2
 81039ba:	d025      	beq.n	8103a08 <HAL_GPIO_DeInit+0xb8>
 81039bc:	687b      	ldr	r3, [r7, #4]
 81039be:	4a63      	ldr	r2, [pc, #396]	@ (8103b4c <HAL_GPIO_DeInit+0x1fc>)
 81039c0:	4293      	cmp	r3, r2
 81039c2:	d01f      	beq.n	8103a04 <HAL_GPIO_DeInit+0xb4>
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	4a62      	ldr	r2, [pc, #392]	@ (8103b50 <HAL_GPIO_DeInit+0x200>)
 81039c8:	4293      	cmp	r3, r2
 81039ca:	d019      	beq.n	8103a00 <HAL_GPIO_DeInit+0xb0>
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	4a61      	ldr	r2, [pc, #388]	@ (8103b54 <HAL_GPIO_DeInit+0x204>)
 81039d0:	4293      	cmp	r3, r2
 81039d2:	d013      	beq.n	81039fc <HAL_GPIO_DeInit+0xac>
 81039d4:	687b      	ldr	r3, [r7, #4]
 81039d6:	4a60      	ldr	r2, [pc, #384]	@ (8103b58 <HAL_GPIO_DeInit+0x208>)
 81039d8:	4293      	cmp	r3, r2
 81039da:	d00d      	beq.n	81039f8 <HAL_GPIO_DeInit+0xa8>
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	4a5f      	ldr	r2, [pc, #380]	@ (8103b5c <HAL_GPIO_DeInit+0x20c>)
 81039e0:	4293      	cmp	r3, r2
 81039e2:	d007      	beq.n	81039f4 <HAL_GPIO_DeInit+0xa4>
 81039e4:	687b      	ldr	r3, [r7, #4]
 81039e6:	4a5e      	ldr	r2, [pc, #376]	@ (8103b60 <HAL_GPIO_DeInit+0x210>)
 81039e8:	4293      	cmp	r3, r2
 81039ea:	d101      	bne.n	81039f0 <HAL_GPIO_DeInit+0xa0>
 81039ec:	2309      	movs	r3, #9
 81039ee:	e012      	b.n	8103a16 <HAL_GPIO_DeInit+0xc6>
 81039f0:	230a      	movs	r3, #10
 81039f2:	e010      	b.n	8103a16 <HAL_GPIO_DeInit+0xc6>
 81039f4:	2308      	movs	r3, #8
 81039f6:	e00e      	b.n	8103a16 <HAL_GPIO_DeInit+0xc6>
 81039f8:	2307      	movs	r3, #7
 81039fa:	e00c      	b.n	8103a16 <HAL_GPIO_DeInit+0xc6>
 81039fc:	2306      	movs	r3, #6
 81039fe:	e00a      	b.n	8103a16 <HAL_GPIO_DeInit+0xc6>
 8103a00:	2305      	movs	r3, #5
 8103a02:	e008      	b.n	8103a16 <HAL_GPIO_DeInit+0xc6>
 8103a04:	2304      	movs	r3, #4
 8103a06:	e006      	b.n	8103a16 <HAL_GPIO_DeInit+0xc6>
 8103a08:	2303      	movs	r3, #3
 8103a0a:	e004      	b.n	8103a16 <HAL_GPIO_DeInit+0xc6>
 8103a0c:	2302      	movs	r3, #2
 8103a0e:	e002      	b.n	8103a16 <HAL_GPIO_DeInit+0xc6>
 8103a10:	2301      	movs	r3, #1
 8103a12:	e000      	b.n	8103a16 <HAL_GPIO_DeInit+0xc6>
 8103a14:	2300      	movs	r3, #0
 8103a16:	697a      	ldr	r2, [r7, #20]
 8103a18:	f002 0203 	and.w	r2, r2, #3
 8103a1c:	0092      	lsls	r2, r2, #2
 8103a1e:	4093      	lsls	r3, r2
 8103a20:	68ba      	ldr	r2, [r7, #8]
 8103a22:	429a      	cmp	r2, r3
 8103a24:	d136      	bne.n	8103a94 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8103a26:	693b      	ldr	r3, [r7, #16]
 8103a28:	681a      	ldr	r2, [r3, #0]
 8103a2a:	68fb      	ldr	r3, [r7, #12]
 8103a2c:	43db      	mvns	r3, r3
 8103a2e:	401a      	ands	r2, r3
 8103a30:	693b      	ldr	r3, [r7, #16]
 8103a32:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8103a34:	693b      	ldr	r3, [r7, #16]
 8103a36:	685a      	ldr	r2, [r3, #4]
 8103a38:	68fb      	ldr	r3, [r7, #12]
 8103a3a:	43db      	mvns	r3, r3
 8103a3c:	401a      	ands	r2, r3
 8103a3e:	693b      	ldr	r3, [r7, #16]
 8103a40:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8103a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8103a46:	685a      	ldr	r2, [r3, #4]
 8103a48:	68fb      	ldr	r3, [r7, #12]
 8103a4a:	43db      	mvns	r3, r3
 8103a4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8103a50:	4013      	ands	r3, r2
 8103a52:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8103a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8103a58:	681a      	ldr	r2, [r3, #0]
 8103a5a:	68fb      	ldr	r3, [r7, #12]
 8103a5c:	43db      	mvns	r3, r3
 8103a5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8103a62:	4013      	ands	r3, r2
 8103a64:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8103a66:	697b      	ldr	r3, [r7, #20]
 8103a68:	f003 0303 	and.w	r3, r3, #3
 8103a6c:	009b      	lsls	r3, r3, #2
 8103a6e:	220f      	movs	r2, #15
 8103a70:	fa02 f303 	lsl.w	r3, r2, r3
 8103a74:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8103a76:	4a30      	ldr	r2, [pc, #192]	@ (8103b38 <HAL_GPIO_DeInit+0x1e8>)
 8103a78:	697b      	ldr	r3, [r7, #20]
 8103a7a:	089b      	lsrs	r3, r3, #2
 8103a7c:	3302      	adds	r3, #2
 8103a7e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8103a82:	68bb      	ldr	r3, [r7, #8]
 8103a84:	43da      	mvns	r2, r3
 8103a86:	482c      	ldr	r0, [pc, #176]	@ (8103b38 <HAL_GPIO_DeInit+0x1e8>)
 8103a88:	697b      	ldr	r3, [r7, #20]
 8103a8a:	089b      	lsrs	r3, r3, #2
 8103a8c:	400a      	ands	r2, r1
 8103a8e:	3302      	adds	r3, #2
 8103a90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	681a      	ldr	r2, [r3, #0]
 8103a98:	697b      	ldr	r3, [r7, #20]
 8103a9a:	005b      	lsls	r3, r3, #1
 8103a9c:	2103      	movs	r1, #3
 8103a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8103aa2:	431a      	orrs	r2, r3
 8103aa4:	687b      	ldr	r3, [r7, #4]
 8103aa6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8103aa8:	697b      	ldr	r3, [r7, #20]
 8103aaa:	08da      	lsrs	r2, r3, #3
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	3208      	adds	r2, #8
 8103ab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8103ab4:	697b      	ldr	r3, [r7, #20]
 8103ab6:	f003 0307 	and.w	r3, r3, #7
 8103aba:	009b      	lsls	r3, r3, #2
 8103abc:	220f      	movs	r2, #15
 8103abe:	fa02 f303 	lsl.w	r3, r2, r3
 8103ac2:	43db      	mvns	r3, r3
 8103ac4:	697a      	ldr	r2, [r7, #20]
 8103ac6:	08d2      	lsrs	r2, r2, #3
 8103ac8:	4019      	ands	r1, r3
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	3208      	adds	r2, #8
 8103ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	68da      	ldr	r2, [r3, #12]
 8103ad6:	697b      	ldr	r3, [r7, #20]
 8103ad8:	005b      	lsls	r3, r3, #1
 8103ada:	2103      	movs	r1, #3
 8103adc:	fa01 f303 	lsl.w	r3, r1, r3
 8103ae0:	43db      	mvns	r3, r3
 8103ae2:	401a      	ands	r2, r3
 8103ae4:	687b      	ldr	r3, [r7, #4]
 8103ae6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	685a      	ldr	r2, [r3, #4]
 8103aec:	2101      	movs	r1, #1
 8103aee:	697b      	ldr	r3, [r7, #20]
 8103af0:	fa01 f303 	lsl.w	r3, r1, r3
 8103af4:	43db      	mvns	r3, r3
 8103af6:	401a      	ands	r2, r3
 8103af8:	687b      	ldr	r3, [r7, #4]
 8103afa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	689a      	ldr	r2, [r3, #8]
 8103b00:	697b      	ldr	r3, [r7, #20]
 8103b02:	005b      	lsls	r3, r3, #1
 8103b04:	2103      	movs	r1, #3
 8103b06:	fa01 f303 	lsl.w	r3, r1, r3
 8103b0a:	43db      	mvns	r3, r3
 8103b0c:	401a      	ands	r2, r3
 8103b0e:	687b      	ldr	r3, [r7, #4]
 8103b10:	609a      	str	r2, [r3, #8]
    }

    position++;
 8103b12:	697b      	ldr	r3, [r7, #20]
 8103b14:	3301      	adds	r3, #1
 8103b16:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8103b18:	683a      	ldr	r2, [r7, #0]
 8103b1a:	697b      	ldr	r3, [r7, #20]
 8103b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8103b20:	2b00      	cmp	r3, #0
 8103b22:	f47f af1f 	bne.w	8103964 <HAL_GPIO_DeInit+0x14>
  }
}
 8103b26:	bf00      	nop
 8103b28:	bf00      	nop
 8103b2a:	371c      	adds	r7, #28
 8103b2c:	46bd      	mov	sp, r7
 8103b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b32:	4770      	bx	lr
 8103b34:	580000c0 	.word	0x580000c0
 8103b38:	58000400 	.word	0x58000400
 8103b3c:	58020000 	.word	0x58020000
 8103b40:	58020400 	.word	0x58020400
 8103b44:	58020800 	.word	0x58020800
 8103b48:	58020c00 	.word	0x58020c00
 8103b4c:	58021000 	.word	0x58021000
 8103b50:	58021400 	.word	0x58021400
 8103b54:	58021800 	.word	0x58021800
 8103b58:	58021c00 	.word	0x58021c00
 8103b5c:	58022000 	.word	0x58022000
 8103b60:	58022400 	.word	0x58022400

08103b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103b64:	b480      	push	{r7}
 8103b66:	b083      	sub	sp, #12
 8103b68:	af00      	add	r7, sp, #0
 8103b6a:	6078      	str	r0, [r7, #4]
 8103b6c:	460b      	mov	r3, r1
 8103b6e:	807b      	strh	r3, [r7, #2]
 8103b70:	4613      	mov	r3, r2
 8103b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103b74:	787b      	ldrb	r3, [r7, #1]
 8103b76:	2b00      	cmp	r3, #0
 8103b78:	d003      	beq.n	8103b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103b7a:	887a      	ldrh	r2, [r7, #2]
 8103b7c:	687b      	ldr	r3, [r7, #4]
 8103b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103b80:	e003      	b.n	8103b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103b82:	887b      	ldrh	r3, [r7, #2]
 8103b84:	041a      	lsls	r2, r3, #16
 8103b86:	687b      	ldr	r3, [r7, #4]
 8103b88:	619a      	str	r2, [r3, #24]
}
 8103b8a:	bf00      	nop
 8103b8c:	370c      	adds	r7, #12
 8103b8e:	46bd      	mov	sp, r7
 8103b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b94:	4770      	bx	lr
	...

08103b98 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8103b98:	b480      	push	{r7}
 8103b9a:	b083      	sub	sp, #12
 8103b9c:	af00      	add	r7, sp, #0
 8103b9e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8103ba0:	4a08      	ldr	r2, [pc, #32]	@ (8103bc4 <HAL_HSEM_FastTake+0x2c>)
 8103ba2:	687b      	ldr	r3, [r7, #4]
 8103ba4:	3320      	adds	r3, #32
 8103ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103baa:	4a07      	ldr	r2, [pc, #28]	@ (8103bc8 <HAL_HSEM_FastTake+0x30>)
 8103bac:	4293      	cmp	r3, r2
 8103bae:	d101      	bne.n	8103bb4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8103bb0:	2300      	movs	r3, #0
 8103bb2:	e000      	b.n	8103bb6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8103bb4:	2301      	movs	r3, #1
}
 8103bb6:	4618      	mov	r0, r3
 8103bb8:	370c      	adds	r7, #12
 8103bba:	46bd      	mov	sp, r7
 8103bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bc0:	4770      	bx	lr
 8103bc2:	bf00      	nop
 8103bc4:	58026400 	.word	0x58026400
 8103bc8:	80000100 	.word	0x80000100

08103bcc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8103bcc:	b480      	push	{r7}
 8103bce:	b083      	sub	sp, #12
 8103bd0:	af00      	add	r7, sp, #0
 8103bd2:	6078      	str	r0, [r7, #4]
 8103bd4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8103bd6:	4906      	ldr	r1, [pc, #24]	@ (8103bf0 <HAL_HSEM_Release+0x24>)
 8103bd8:	683b      	ldr	r3, [r7, #0]
 8103bda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8103bde:	687b      	ldr	r3, [r7, #4]
 8103be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8103be4:	bf00      	nop
 8103be6:	370c      	adds	r7, #12
 8103be8:	46bd      	mov	sp, r7
 8103bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bee:	4770      	bx	lr
 8103bf0:	58026400 	.word	0x58026400

08103bf4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103bf4:	b480      	push	{r7}
 8103bf6:	b083      	sub	sp, #12
 8103bf8:	af00      	add	r7, sp, #0
 8103bfa:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103bfc:	4b05      	ldr	r3, [pc, #20]	@ (8103c14 <HAL_HSEM_ActivateNotification+0x20>)
 8103bfe:	681a      	ldr	r2, [r3, #0]
 8103c00:	4904      	ldr	r1, [pc, #16]	@ (8103c14 <HAL_HSEM_ActivateNotification+0x20>)
 8103c02:	687b      	ldr	r3, [r7, #4]
 8103c04:	4313      	orrs	r3, r2
 8103c06:	600b      	str	r3, [r1, #0]
#endif
}
 8103c08:	bf00      	nop
 8103c0a:	370c      	adds	r7, #12
 8103c0c:	46bd      	mov	sp, r7
 8103c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c12:	4770      	bx	lr
 8103c14:	58026510 	.word	0x58026510

08103c18 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8103c18:	b580      	push	{r7, lr}
 8103c1a:	b082      	sub	sp, #8
 8103c1c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8103c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8103c48 <HAL_HSEM_IRQHandler+0x30>)
 8103c20:	68db      	ldr	r3, [r3, #12]
 8103c22:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8103c24:	4b08      	ldr	r3, [pc, #32]	@ (8103c48 <HAL_HSEM_IRQHandler+0x30>)
 8103c26:	681a      	ldr	r2, [r3, #0]
 8103c28:	687b      	ldr	r3, [r7, #4]
 8103c2a:	43db      	mvns	r3, r3
 8103c2c:	4906      	ldr	r1, [pc, #24]	@ (8103c48 <HAL_HSEM_IRQHandler+0x30>)
 8103c2e:	4013      	ands	r3, r2
 8103c30:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8103c32:	4a05      	ldr	r2, [pc, #20]	@ (8103c48 <HAL_HSEM_IRQHandler+0x30>)
 8103c34:	687b      	ldr	r3, [r7, #4]
 8103c36:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8103c38:	6878      	ldr	r0, [r7, #4]
 8103c3a:	f006 f951 	bl	8109ee0 <HAL_HSEM_FreeCallback>
}
 8103c3e:	bf00      	nop
 8103c40:	3708      	adds	r7, #8
 8103c42:	46bd      	mov	sp, r7
 8103c44:	bd80      	pop	{r7, pc}
 8103c46:	bf00      	nop
 8103c48:	58026510 	.word	0x58026510

08103c4c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103c4c:	b580      	push	{r7, lr}
 8103c4e:	b084      	sub	sp, #16
 8103c50:	af00      	add	r7, sp, #0
 8103c52:	60f8      	str	r0, [r7, #12]
 8103c54:	460b      	mov	r3, r1
 8103c56:	607a      	str	r2, [r7, #4]
 8103c58:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103c5a:	4b37      	ldr	r3, [pc, #220]	@ (8103d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103c5c:	681b      	ldr	r3, [r3, #0]
 8103c5e:	f023 0201 	bic.w	r2, r3, #1
 8103c62:	4935      	ldr	r1, [pc, #212]	@ (8103d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103c64:	68fb      	ldr	r3, [r7, #12]
 8103c66:	4313      	orrs	r3, r2
 8103c68:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	2b00      	cmp	r3, #0
 8103c6e:	d123      	bne.n	8103cb8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103c70:	f7ff fcaa 	bl	81035c8 <HAL_GetCurrentCPUID>
 8103c74:	4603      	mov	r3, r0
 8103c76:	2b03      	cmp	r3, #3
 8103c78:	d158      	bne.n	8103d2c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8103d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103c7c:	691b      	ldr	r3, [r3, #16]
 8103c7e:	4a2e      	ldr	r2, [pc, #184]	@ (8103d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103c80:	f023 0301 	bic.w	r3, r3, #1
 8103c84:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103c86:	4b2d      	ldr	r3, [pc, #180]	@ (8103d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103c88:	691b      	ldr	r3, [r3, #16]
 8103c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8103d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103c8c:	f043 0304 	orr.w	r3, r3, #4
 8103c90:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103c92:	f3bf 8f4f 	dsb	sy
}
 8103c96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103c98:	f3bf 8f6f 	isb	sy
}
 8103c9c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103c9e:	7afb      	ldrb	r3, [r7, #11]
 8103ca0:	2b01      	cmp	r3, #1
 8103ca2:	d101      	bne.n	8103ca8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103ca4:	bf30      	wfi
 8103ca6:	e000      	b.n	8103caa <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103ca8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103caa:	4b24      	ldr	r3, [pc, #144]	@ (8103d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103cac:	691b      	ldr	r3, [r3, #16]
 8103cae:	4a23      	ldr	r2, [pc, #140]	@ (8103d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103cb0:	f023 0304 	bic.w	r3, r3, #4
 8103cb4:	6113      	str	r3, [r2, #16]
 8103cb6:	e03c      	b.n	8103d32 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	2b01      	cmp	r3, #1
 8103cbc:	d123      	bne.n	8103d06 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103cbe:	f7ff fc83 	bl	81035c8 <HAL_GetCurrentCPUID>
 8103cc2:	4603      	mov	r3, r0
 8103cc4:	2b01      	cmp	r3, #1
 8103cc6:	d133      	bne.n	8103d30 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8103d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103cca:	695b      	ldr	r3, [r3, #20]
 8103ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8103d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103cce:	f023 0302 	bic.w	r3, r3, #2
 8103cd2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103cd4:	4b19      	ldr	r3, [pc, #100]	@ (8103d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103cd6:	691b      	ldr	r3, [r3, #16]
 8103cd8:	4a18      	ldr	r2, [pc, #96]	@ (8103d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103cda:	f043 0304 	orr.w	r3, r3, #4
 8103cde:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103ce0:	f3bf 8f4f 	dsb	sy
}
 8103ce4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103ce6:	f3bf 8f6f 	isb	sy
}
 8103cea:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103cec:	7afb      	ldrb	r3, [r7, #11]
 8103cee:	2b01      	cmp	r3, #1
 8103cf0:	d101      	bne.n	8103cf6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103cf2:	bf30      	wfi
 8103cf4:	e000      	b.n	8103cf8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103cf6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103cf8:	4b10      	ldr	r3, [pc, #64]	@ (8103d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103cfa:	691b      	ldr	r3, [r3, #16]
 8103cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8103d3c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103cfe:	f023 0304 	bic.w	r3, r3, #4
 8103d02:	6113      	str	r3, [r2, #16]
 8103d04:	e015      	b.n	8103d32 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103d06:	f7ff fc5f 	bl	81035c8 <HAL_GetCurrentCPUID>
 8103d0a:	4603      	mov	r3, r0
 8103d0c:	2b03      	cmp	r3, #3
 8103d0e:	d106      	bne.n	8103d1e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103d10:	4b09      	ldr	r3, [pc, #36]	@ (8103d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103d12:	691b      	ldr	r3, [r3, #16]
 8103d14:	4a08      	ldr	r2, [pc, #32]	@ (8103d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103d16:	f023 0304 	bic.w	r3, r3, #4
 8103d1a:	6113      	str	r3, [r2, #16]
 8103d1c:	e009      	b.n	8103d32 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103d1e:	4b06      	ldr	r3, [pc, #24]	@ (8103d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103d20:	695b      	ldr	r3, [r3, #20]
 8103d22:	4a05      	ldr	r2, [pc, #20]	@ (8103d38 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103d24:	f023 0304 	bic.w	r3, r3, #4
 8103d28:	6153      	str	r3, [r2, #20]
 8103d2a:	e002      	b.n	8103d32 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103d2c:	bf00      	nop
 8103d2e:	e000      	b.n	8103d32 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103d30:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103d32:	3710      	adds	r7, #16
 8103d34:	46bd      	mov	sp, r7
 8103d36:	bd80      	pop	{r7, pc}
 8103d38:	58024800 	.word	0x58024800
 8103d3c:	e000ed00 	.word	0xe000ed00

08103d40 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103d40:	b580      	push	{r7, lr}
 8103d42:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103d44:	f7ff fc40 	bl	81035c8 <HAL_GetCurrentCPUID>
 8103d48:	4603      	mov	r3, r0
 8103d4a:	2b03      	cmp	r3, #3
 8103d4c:	d101      	bne.n	8103d52 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103d4e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103d50:	e001      	b.n	8103d56 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103d52:	bf40      	sev
    __WFE ();
 8103d54:	bf20      	wfe
}
 8103d56:	bf00      	nop
 8103d58:	bd80      	pop	{r7, pc}
	...

08103d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103d5c:	b480      	push	{r7}
 8103d5e:	b089      	sub	sp, #36	@ 0x24
 8103d60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103d62:	4bb3      	ldr	r3, [pc, #716]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d64:	691b      	ldr	r3, [r3, #16]
 8103d66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8103d6a:	2b18      	cmp	r3, #24
 8103d6c:	f200 8155 	bhi.w	810401a <HAL_RCC_GetSysClockFreq+0x2be>
 8103d70:	a201      	add	r2, pc, #4	@ (adr r2, 8103d78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8103d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d76:	bf00      	nop
 8103d78:	08103ddd 	.word	0x08103ddd
 8103d7c:	0810401b 	.word	0x0810401b
 8103d80:	0810401b 	.word	0x0810401b
 8103d84:	0810401b 	.word	0x0810401b
 8103d88:	0810401b 	.word	0x0810401b
 8103d8c:	0810401b 	.word	0x0810401b
 8103d90:	0810401b 	.word	0x0810401b
 8103d94:	0810401b 	.word	0x0810401b
 8103d98:	08103e03 	.word	0x08103e03
 8103d9c:	0810401b 	.word	0x0810401b
 8103da0:	0810401b 	.word	0x0810401b
 8103da4:	0810401b 	.word	0x0810401b
 8103da8:	0810401b 	.word	0x0810401b
 8103dac:	0810401b 	.word	0x0810401b
 8103db0:	0810401b 	.word	0x0810401b
 8103db4:	0810401b 	.word	0x0810401b
 8103db8:	08103e09 	.word	0x08103e09
 8103dbc:	0810401b 	.word	0x0810401b
 8103dc0:	0810401b 	.word	0x0810401b
 8103dc4:	0810401b 	.word	0x0810401b
 8103dc8:	0810401b 	.word	0x0810401b
 8103dcc:	0810401b 	.word	0x0810401b
 8103dd0:	0810401b 	.word	0x0810401b
 8103dd4:	0810401b 	.word	0x0810401b
 8103dd8:	08103e0f 	.word	0x08103e0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103ddc:	4b94      	ldr	r3, [pc, #592]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103dde:	681b      	ldr	r3, [r3, #0]
 8103de0:	f003 0320 	and.w	r3, r3, #32
 8103de4:	2b00      	cmp	r3, #0
 8103de6:	d009      	beq.n	8103dfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103de8:	4b91      	ldr	r3, [pc, #580]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103dea:	681b      	ldr	r3, [r3, #0]
 8103dec:	08db      	lsrs	r3, r3, #3
 8103dee:	f003 0303 	and.w	r3, r3, #3
 8103df2:	4a90      	ldr	r2, [pc, #576]	@ (8104034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103df4:	fa22 f303 	lsr.w	r3, r2, r3
 8103df8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8103dfa:	e111      	b.n	8104020 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103dfc:	4b8d      	ldr	r3, [pc, #564]	@ (8104034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103dfe:	61bb      	str	r3, [r7, #24]
      break;
 8103e00:	e10e      	b.n	8104020 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8103e02:	4b8d      	ldr	r3, [pc, #564]	@ (8104038 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103e04:	61bb      	str	r3, [r7, #24]
      break;
 8103e06:	e10b      	b.n	8104020 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8103e08:	4b8c      	ldr	r3, [pc, #560]	@ (810403c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103e0a:	61bb      	str	r3, [r7, #24]
      break;
 8103e0c:	e108      	b.n	8104020 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103e0e:	4b88      	ldr	r3, [pc, #544]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103e12:	f003 0303 	and.w	r3, r3, #3
 8103e16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8103e18:	4b85      	ldr	r3, [pc, #532]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103e1c:	091b      	lsrs	r3, r3, #4
 8103e1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103e22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103e24:	4b82      	ldr	r3, [pc, #520]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103e28:	f003 0301 	and.w	r3, r3, #1
 8103e2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8103e2e:	4b80      	ldr	r3, [pc, #512]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103e32:	08db      	lsrs	r3, r3, #3
 8103e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103e38:	68fa      	ldr	r2, [r7, #12]
 8103e3a:	fb02 f303 	mul.w	r3, r2, r3
 8103e3e:	ee07 3a90 	vmov	s15, r3
 8103e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8103e4a:	693b      	ldr	r3, [r7, #16]
 8103e4c:	2b00      	cmp	r3, #0
 8103e4e:	f000 80e1 	beq.w	8104014 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103e52:	697b      	ldr	r3, [r7, #20]
 8103e54:	2b02      	cmp	r3, #2
 8103e56:	f000 8083 	beq.w	8103f60 <HAL_RCC_GetSysClockFreq+0x204>
 8103e5a:	697b      	ldr	r3, [r7, #20]
 8103e5c:	2b02      	cmp	r3, #2
 8103e5e:	f200 80a1 	bhi.w	8103fa4 <HAL_RCC_GetSysClockFreq+0x248>
 8103e62:	697b      	ldr	r3, [r7, #20]
 8103e64:	2b00      	cmp	r3, #0
 8103e66:	d003      	beq.n	8103e70 <HAL_RCC_GetSysClockFreq+0x114>
 8103e68:	697b      	ldr	r3, [r7, #20]
 8103e6a:	2b01      	cmp	r3, #1
 8103e6c:	d056      	beq.n	8103f1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8103e6e:	e099      	b.n	8103fa4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103e70:	4b6f      	ldr	r3, [pc, #444]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e72:	681b      	ldr	r3, [r3, #0]
 8103e74:	f003 0320 	and.w	r3, r3, #32
 8103e78:	2b00      	cmp	r3, #0
 8103e7a:	d02d      	beq.n	8103ed8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103e7c:	4b6c      	ldr	r3, [pc, #432]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	08db      	lsrs	r3, r3, #3
 8103e82:	f003 0303 	and.w	r3, r3, #3
 8103e86:	4a6b      	ldr	r2, [pc, #428]	@ (8104034 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103e88:	fa22 f303 	lsr.w	r3, r2, r3
 8103e8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103e8e:	687b      	ldr	r3, [r7, #4]
 8103e90:	ee07 3a90 	vmov	s15, r3
 8103e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e98:	693b      	ldr	r3, [r7, #16]
 8103e9a:	ee07 3a90 	vmov	s15, r3
 8103e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ea6:	4b62      	ldr	r3, [pc, #392]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103eae:	ee07 3a90 	vmov	s15, r3
 8103eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8103eba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8104040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103ed2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8103ed6:	e087      	b.n	8103fe8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103ed8:	693b      	ldr	r3, [r7, #16]
 8103eda:	ee07 3a90 	vmov	s15, r3
 8103ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ee2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8104044 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103eea:	4b51      	ldr	r3, [pc, #324]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ef2:	ee07 3a90 	vmov	s15, r3
 8103ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8103efe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8104040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103f1a:	e065      	b.n	8103fe8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103f1c:	693b      	ldr	r3, [r7, #16]
 8103f1e:	ee07 3a90 	vmov	s15, r3
 8103f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f26:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8104048 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f2e:	4b40      	ldr	r3, [pc, #256]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f36:	ee07 3a90 	vmov	s15, r3
 8103f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103f42:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8104040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103f5e:	e043      	b.n	8103fe8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103f60:	693b      	ldr	r3, [r7, #16]
 8103f62:	ee07 3a90 	vmov	s15, r3
 8103f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f6a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810404c <HAL_RCC_GetSysClockFreq+0x2f0>
 8103f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f72:	4b2f      	ldr	r3, [pc, #188]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f7a:	ee07 3a90 	vmov	s15, r3
 8103f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8103f86:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8104040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103fa2:	e021      	b.n	8103fe8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103fa4:	693b      	ldr	r3, [r7, #16]
 8103fa6:	ee07 3a90 	vmov	s15, r3
 8103faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103fae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8104048 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103fbe:	ee07 3a90 	vmov	s15, r3
 8103fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8103fca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8104040 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103fe2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103fe6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8103fe8:	4b11      	ldr	r3, [pc, #68]	@ (8104030 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103fec:	0a5b      	lsrs	r3, r3, #9
 8103fee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103ff2:	3301      	adds	r3, #1
 8103ff4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8103ff6:	683b      	ldr	r3, [r7, #0]
 8103ff8:	ee07 3a90 	vmov	s15, r3
 8103ffc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104000:	edd7 6a07 	vldr	s13, [r7, #28]
 8104004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810400c:	ee17 3a90 	vmov	r3, s15
 8104010:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8104012:	e005      	b.n	8104020 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8104014:	2300      	movs	r3, #0
 8104016:	61bb      	str	r3, [r7, #24]
      break;
 8104018:	e002      	b.n	8104020 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810401a:	4b07      	ldr	r3, [pc, #28]	@ (8104038 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810401c:	61bb      	str	r3, [r7, #24]
      break;
 810401e:	bf00      	nop
  }

  return sysclockfreq;
 8104020:	69bb      	ldr	r3, [r7, #24]
}
 8104022:	4618      	mov	r0, r3
 8104024:	3724      	adds	r7, #36	@ 0x24
 8104026:	46bd      	mov	sp, r7
 8104028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810402c:	4770      	bx	lr
 810402e:	bf00      	nop
 8104030:	58024400 	.word	0x58024400
 8104034:	03d09000 	.word	0x03d09000
 8104038:	003d0900 	.word	0x003d0900
 810403c:	017d7840 	.word	0x017d7840
 8104040:	46000000 	.word	0x46000000
 8104044:	4c742400 	.word	0x4c742400
 8104048:	4a742400 	.word	0x4a742400
 810404c:	4bbebc20 	.word	0x4bbebc20

08104050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104050:	b580      	push	{r7, lr}
 8104052:	b082      	sub	sp, #8
 8104054:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104056:	f7ff fe81 	bl	8103d5c <HAL_RCC_GetSysClockFreq>
 810405a:	4602      	mov	r2, r0
 810405c:	4b11      	ldr	r3, [pc, #68]	@ (81040a4 <HAL_RCC_GetHCLKFreq+0x54>)
 810405e:	699b      	ldr	r3, [r3, #24]
 8104060:	0a1b      	lsrs	r3, r3, #8
 8104062:	f003 030f 	and.w	r3, r3, #15
 8104066:	4910      	ldr	r1, [pc, #64]	@ (81040a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8104068:	5ccb      	ldrb	r3, [r1, r3]
 810406a:	f003 031f 	and.w	r3, r3, #31
 810406e:	fa22 f303 	lsr.w	r3, r2, r3
 8104072:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104074:	4b0b      	ldr	r3, [pc, #44]	@ (81040a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8104076:	699b      	ldr	r3, [r3, #24]
 8104078:	f003 030f 	and.w	r3, r3, #15
 810407c:	4a0a      	ldr	r2, [pc, #40]	@ (81040a8 <HAL_RCC_GetHCLKFreq+0x58>)
 810407e:	5cd3      	ldrb	r3, [r2, r3]
 8104080:	f003 031f 	and.w	r3, r3, #31
 8104084:	687a      	ldr	r2, [r7, #4]
 8104086:	fa22 f303 	lsr.w	r3, r2, r3
 810408a:	4a08      	ldr	r2, [pc, #32]	@ (81040ac <HAL_RCC_GetHCLKFreq+0x5c>)
 810408c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810408e:	4b07      	ldr	r3, [pc, #28]	@ (81040ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8104090:	681b      	ldr	r3, [r3, #0]
 8104092:	4a07      	ldr	r2, [pc, #28]	@ (81040b0 <HAL_RCC_GetHCLKFreq+0x60>)
 8104094:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104096:	4b05      	ldr	r3, [pc, #20]	@ (81040ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8104098:	681b      	ldr	r3, [r3, #0]
}
 810409a:	4618      	mov	r0, r3
 810409c:	3708      	adds	r7, #8
 810409e:	46bd      	mov	sp, r7
 81040a0:	bd80      	pop	{r7, pc}
 81040a2:	bf00      	nop
 81040a4:	58024400 	.word	0x58024400
 81040a8:	0810b8e0 	.word	0x0810b8e0
 81040ac:	10000004 	.word	0x10000004
 81040b0:	10000000 	.word	0x10000000

081040b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81040b4:	b580      	push	{r7, lr}
 81040b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81040b8:	f7ff ffca 	bl	8104050 <HAL_RCC_GetHCLKFreq>
 81040bc:	4602      	mov	r2, r0
 81040be:	4b06      	ldr	r3, [pc, #24]	@ (81040d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 81040c0:	69db      	ldr	r3, [r3, #28]
 81040c2:	091b      	lsrs	r3, r3, #4
 81040c4:	f003 0307 	and.w	r3, r3, #7
 81040c8:	4904      	ldr	r1, [pc, #16]	@ (81040dc <HAL_RCC_GetPCLK1Freq+0x28>)
 81040ca:	5ccb      	ldrb	r3, [r1, r3]
 81040cc:	f003 031f 	and.w	r3, r3, #31
 81040d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81040d4:	4618      	mov	r0, r3
 81040d6:	bd80      	pop	{r7, pc}
 81040d8:	58024400 	.word	0x58024400
 81040dc:	0810b8e0 	.word	0x0810b8e0

081040e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81040e0:	b580      	push	{r7, lr}
 81040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81040e4:	f7ff ffb4 	bl	8104050 <HAL_RCC_GetHCLKFreq>
 81040e8:	4602      	mov	r2, r0
 81040ea:	4b06      	ldr	r3, [pc, #24]	@ (8104104 <HAL_RCC_GetPCLK2Freq+0x24>)
 81040ec:	69db      	ldr	r3, [r3, #28]
 81040ee:	0a1b      	lsrs	r3, r3, #8
 81040f0:	f003 0307 	and.w	r3, r3, #7
 81040f4:	4904      	ldr	r1, [pc, #16]	@ (8104108 <HAL_RCC_GetPCLK2Freq+0x28>)
 81040f6:	5ccb      	ldrb	r3, [r1, r3]
 81040f8:	f003 031f 	and.w	r3, r3, #31
 81040fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104100:	4618      	mov	r0, r3
 8104102:	bd80      	pop	{r7, pc}
 8104104:	58024400 	.word	0x58024400
 8104108:	0810b8e0 	.word	0x0810b8e0

0810410c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810410c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104110:	b0cc      	sub	sp, #304	@ 0x130
 8104112:	af00      	add	r7, sp, #0
 8104114:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104118:	2300      	movs	r3, #0
 810411a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810411e:	2300      	movs	r3, #0
 8104120:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104124:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104128:	e9d3 2300 	ldrd	r2, r3, [r3]
 810412c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8104130:	2500      	movs	r5, #0
 8104132:	ea54 0305 	orrs.w	r3, r4, r5
 8104136:	d049      	beq.n	81041cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8104138:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810413c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810413e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104142:	d02f      	beq.n	81041a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8104144:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104148:	d828      	bhi.n	810419c <HAL_RCCEx_PeriphCLKConfig+0x90>
 810414a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810414e:	d01a      	beq.n	8104186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8104150:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104154:	d822      	bhi.n	810419c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104156:	2b00      	cmp	r3, #0
 8104158:	d003      	beq.n	8104162 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810415a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810415e:	d007      	beq.n	8104170 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104160:	e01c      	b.n	810419c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104162:	4bb8      	ldr	r3, [pc, #736]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104166:	4ab7      	ldr	r2, [pc, #732]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810416c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810416e:	e01a      	b.n	81041a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104170:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104174:	3308      	adds	r3, #8
 8104176:	2102      	movs	r1, #2
 8104178:	4618      	mov	r0, r3
 810417a:	f002 fba1 	bl	81068c0 <RCCEx_PLL2_Config>
 810417e:	4603      	mov	r3, r0
 8104180:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104184:	e00f      	b.n	81041a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104186:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810418a:	3328      	adds	r3, #40	@ 0x28
 810418c:	2102      	movs	r1, #2
 810418e:	4618      	mov	r0, r3
 8104190:	f002 fc48 	bl	8106a24 <RCCEx_PLL3_Config>
 8104194:	4603      	mov	r3, r0
 8104196:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810419a:	e004      	b.n	81041a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810419c:	2301      	movs	r3, #1
 810419e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81041a2:	e000      	b.n	81041a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81041a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81041a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81041aa:	2b00      	cmp	r3, #0
 81041ac:	d10a      	bne.n	81041c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81041ae:	4ba5      	ldr	r3, [pc, #660]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81041b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81041b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81041b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81041bc:	4aa1      	ldr	r2, [pc, #644]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81041be:	430b      	orrs	r3, r1
 81041c0:	6513      	str	r3, [r2, #80]	@ 0x50
 81041c2:	e003      	b.n	81041cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81041c8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81041cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81041d8:	f04f 0900 	mov.w	r9, #0
 81041dc:	ea58 0309 	orrs.w	r3, r8, r9
 81041e0:	d047      	beq.n	8104272 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81041e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81041e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81041e8:	2b04      	cmp	r3, #4
 81041ea:	d82a      	bhi.n	8104242 <HAL_RCCEx_PeriphCLKConfig+0x136>
 81041ec:	a201      	add	r2, pc, #4	@ (adr r2, 81041f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81041f2:	bf00      	nop
 81041f4:	08104209 	.word	0x08104209
 81041f8:	08104217 	.word	0x08104217
 81041fc:	0810422d 	.word	0x0810422d
 8104200:	0810424b 	.word	0x0810424b
 8104204:	0810424b 	.word	0x0810424b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104208:	4b8e      	ldr	r3, [pc, #568]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810420c:	4a8d      	ldr	r2, [pc, #564]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810420e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104214:	e01a      	b.n	810424c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810421a:	3308      	adds	r3, #8
 810421c:	2100      	movs	r1, #0
 810421e:	4618      	mov	r0, r3
 8104220:	f002 fb4e 	bl	81068c0 <RCCEx_PLL2_Config>
 8104224:	4603      	mov	r3, r0
 8104226:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810422a:	e00f      	b.n	810424c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810422c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104230:	3328      	adds	r3, #40	@ 0x28
 8104232:	2100      	movs	r1, #0
 8104234:	4618      	mov	r0, r3
 8104236:	f002 fbf5 	bl	8106a24 <RCCEx_PLL3_Config>
 810423a:	4603      	mov	r3, r0
 810423c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104240:	e004      	b.n	810424c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104242:	2301      	movs	r3, #1
 8104244:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104248:	e000      	b.n	810424c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810424a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810424c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104250:	2b00      	cmp	r3, #0
 8104252:	d10a      	bne.n	810426a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104254:	4b7b      	ldr	r3, [pc, #492]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104258:	f023 0107 	bic.w	r1, r3, #7
 810425c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104262:	4a78      	ldr	r2, [pc, #480]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104264:	430b      	orrs	r3, r1
 8104266:	6513      	str	r3, [r2, #80]	@ 0x50
 8104268:	e003      	b.n	8104272 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810426a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810426e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104276:	e9d3 2300 	ldrd	r2, r3, [r3]
 810427a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810427e:	f04f 0b00 	mov.w	fp, #0
 8104282:	ea5a 030b 	orrs.w	r3, sl, fp
 8104286:	d04c      	beq.n	8104322 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8104288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810428c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810428e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104292:	d030      	beq.n	81042f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8104294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104298:	d829      	bhi.n	81042ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810429a:	2bc0      	cmp	r3, #192	@ 0xc0
 810429c:	d02d      	beq.n	81042fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810429e:	2bc0      	cmp	r3, #192	@ 0xc0
 81042a0:	d825      	bhi.n	81042ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81042a2:	2b80      	cmp	r3, #128	@ 0x80
 81042a4:	d018      	beq.n	81042d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81042a6:	2b80      	cmp	r3, #128	@ 0x80
 81042a8:	d821      	bhi.n	81042ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81042aa:	2b00      	cmp	r3, #0
 81042ac:	d002      	beq.n	81042b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81042ae:	2b40      	cmp	r3, #64	@ 0x40
 81042b0:	d007      	beq.n	81042c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81042b2:	e01c      	b.n	81042ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81042b4:	4b63      	ldr	r3, [pc, #396]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81042b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81042b8:	4a62      	ldr	r2, [pc, #392]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81042ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81042be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81042c0:	e01c      	b.n	81042fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81042c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042c6:	3308      	adds	r3, #8
 81042c8:	2100      	movs	r1, #0
 81042ca:	4618      	mov	r0, r3
 81042cc:	f002 faf8 	bl	81068c0 <RCCEx_PLL2_Config>
 81042d0:	4603      	mov	r3, r0
 81042d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81042d6:	e011      	b.n	81042fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81042d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81042dc:	3328      	adds	r3, #40	@ 0x28
 81042de:	2100      	movs	r1, #0
 81042e0:	4618      	mov	r0, r3
 81042e2:	f002 fb9f 	bl	8106a24 <RCCEx_PLL3_Config>
 81042e6:	4603      	mov	r3, r0
 81042e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81042ec:	e006      	b.n	81042fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81042ee:	2301      	movs	r3, #1
 81042f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81042f4:	e002      	b.n	81042fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81042f6:	bf00      	nop
 81042f8:	e000      	b.n	81042fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81042fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81042fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104300:	2b00      	cmp	r3, #0
 8104302:	d10a      	bne.n	810431a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104304:	4b4f      	ldr	r3, [pc, #316]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104308:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810430c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104312:	4a4c      	ldr	r2, [pc, #304]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104314:	430b      	orrs	r3, r1
 8104316:	6513      	str	r3, [r2, #80]	@ 0x50
 8104318:	e003      	b.n	8104322 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810431a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810431e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104322:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104326:	e9d3 2300 	ldrd	r2, r3, [r3]
 810432a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810432e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8104332:	2300      	movs	r3, #0
 8104334:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8104338:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 810433c:	460b      	mov	r3, r1
 810433e:	4313      	orrs	r3, r2
 8104340:	d053      	beq.n	81043ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8104342:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104346:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810434a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810434e:	d035      	beq.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8104350:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104354:	d82e      	bhi.n	81043b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104356:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810435a:	d031      	beq.n	81043c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810435c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104360:	d828      	bhi.n	81043b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104366:	d01a      	beq.n	810439e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8104368:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810436c:	d822      	bhi.n	81043b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810436e:	2b00      	cmp	r3, #0
 8104370:	d003      	beq.n	810437a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8104372:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104376:	d007      	beq.n	8104388 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8104378:	e01c      	b.n	81043b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810437a:	4b32      	ldr	r3, [pc, #200]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810437e:	4a31      	ldr	r2, [pc, #196]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104384:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104386:	e01c      	b.n	81043c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104388:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810438c:	3308      	adds	r3, #8
 810438e:	2100      	movs	r1, #0
 8104390:	4618      	mov	r0, r3
 8104392:	f002 fa95 	bl	81068c0 <RCCEx_PLL2_Config>
 8104396:	4603      	mov	r3, r0
 8104398:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810439c:	e011      	b.n	81043c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810439e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043a2:	3328      	adds	r3, #40	@ 0x28
 81043a4:	2100      	movs	r1, #0
 81043a6:	4618      	mov	r0, r3
 81043a8:	f002 fb3c 	bl	8106a24 <RCCEx_PLL3_Config>
 81043ac:	4603      	mov	r3, r0
 81043ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81043b2:	e006      	b.n	81043c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81043b4:	2301      	movs	r3, #1
 81043b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81043ba:	e002      	b.n	81043c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81043bc:	bf00      	nop
 81043be:	e000      	b.n	81043c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81043c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81043c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81043c6:	2b00      	cmp	r3, #0
 81043c8:	d10b      	bne.n	81043e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81043ca:	4b1e      	ldr	r3, [pc, #120]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81043cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81043ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81043d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81043da:	4a1a      	ldr	r2, [pc, #104]	@ (8104444 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81043dc:	430b      	orrs	r3, r1
 81043de:	6593      	str	r3, [r2, #88]	@ 0x58
 81043e0:	e003      	b.n	81043ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81043e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81043ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 81043f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 81043fa:	2300      	movs	r3, #0
 81043fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8104400:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8104404:	460b      	mov	r3, r1
 8104406:	4313      	orrs	r3, r2
 8104408:	d056      	beq.n	81044b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810440a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810440e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104412:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104416:	d038      	beq.n	810448a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8104418:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810441c:	d831      	bhi.n	8104482 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810441e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104422:	d034      	beq.n	810448e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8104424:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104428:	d82b      	bhi.n	8104482 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810442a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810442e:	d01d      	beq.n	810446c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8104430:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104434:	d825      	bhi.n	8104482 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104436:	2b00      	cmp	r3, #0
 8104438:	d006      	beq.n	8104448 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810443a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810443e:	d00a      	beq.n	8104456 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104440:	e01f      	b.n	8104482 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104442:	bf00      	nop
 8104444:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104448:	4ba2      	ldr	r3, [pc, #648]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810444c:	4aa1      	ldr	r2, [pc, #644]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810444e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104454:	e01c      	b.n	8104490 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104456:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810445a:	3308      	adds	r3, #8
 810445c:	2100      	movs	r1, #0
 810445e:	4618      	mov	r0, r3
 8104460:	f002 fa2e 	bl	81068c0 <RCCEx_PLL2_Config>
 8104464:	4603      	mov	r3, r0
 8104466:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810446a:	e011      	b.n	8104490 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810446c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104470:	3328      	adds	r3, #40	@ 0x28
 8104472:	2100      	movs	r1, #0
 8104474:	4618      	mov	r0, r3
 8104476:	f002 fad5 	bl	8106a24 <RCCEx_PLL3_Config>
 810447a:	4603      	mov	r3, r0
 810447c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104480:	e006      	b.n	8104490 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104482:	2301      	movs	r3, #1
 8104484:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104488:	e002      	b.n	8104490 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810448a:	bf00      	nop
 810448c:	e000      	b.n	8104490 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810448e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104490:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104494:	2b00      	cmp	r3, #0
 8104496:	d10b      	bne.n	81044b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104498:	4b8e      	ldr	r3, [pc, #568]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810449a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810449c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81044a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81044a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81044a8:	4a8a      	ldr	r2, [pc, #552]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81044aa:	430b      	orrs	r3, r1
 81044ac:	6593      	str	r3, [r2, #88]	@ 0x58
 81044ae:	e003      	b.n	81044b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81044b4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81044b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81044bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81044c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 81044c8:	2300      	movs	r3, #0
 81044ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81044ce:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81044d2:	460b      	mov	r3, r1
 81044d4:	4313      	orrs	r3, r2
 81044d6:	d03a      	beq.n	810454e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81044d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81044dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81044de:	2b30      	cmp	r3, #48	@ 0x30
 81044e0:	d01f      	beq.n	8104522 <HAL_RCCEx_PeriphCLKConfig+0x416>
 81044e2:	2b30      	cmp	r3, #48	@ 0x30
 81044e4:	d819      	bhi.n	810451a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81044e6:	2b20      	cmp	r3, #32
 81044e8:	d00c      	beq.n	8104504 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81044ea:	2b20      	cmp	r3, #32
 81044ec:	d815      	bhi.n	810451a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81044ee:	2b00      	cmp	r3, #0
 81044f0:	d019      	beq.n	8104526 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81044f2:	2b10      	cmp	r3, #16
 81044f4:	d111      	bne.n	810451a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81044f6:	4b77      	ldr	r3, [pc, #476]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81044f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81044fa:	4a76      	ldr	r2, [pc, #472]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81044fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104500:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104502:	e011      	b.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104504:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104508:	3308      	adds	r3, #8
 810450a:	2102      	movs	r1, #2
 810450c:	4618      	mov	r0, r3
 810450e:	f002 f9d7 	bl	81068c0 <RCCEx_PLL2_Config>
 8104512:	4603      	mov	r3, r0
 8104514:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104518:	e006      	b.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810451a:	2301      	movs	r3, #1
 810451c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104520:	e002      	b.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8104522:	bf00      	nop
 8104524:	e000      	b.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8104526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104528:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810452c:	2b00      	cmp	r3, #0
 810452e:	d10a      	bne.n	8104546 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104530:	4b68      	ldr	r3, [pc, #416]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104534:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8104538:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810453c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810453e:	4a65      	ldr	r2, [pc, #404]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104540:	430b      	orrs	r3, r1
 8104542:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8104544:	e003      	b.n	810454e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104546:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810454a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810454e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104556:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810455a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810455e:	2300      	movs	r3, #0
 8104560:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8104564:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8104568:	460b      	mov	r3, r1
 810456a:	4313      	orrs	r3, r2
 810456c:	d051      	beq.n	8104612 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810456e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104574:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104578:	d035      	beq.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810457a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810457e:	d82e      	bhi.n	81045de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104580:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104584:	d031      	beq.n	81045ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8104586:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810458a:	d828      	bhi.n	81045de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810458c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104590:	d01a      	beq.n	81045c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8104592:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104596:	d822      	bhi.n	81045de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104598:	2b00      	cmp	r3, #0
 810459a:	d003      	beq.n	81045a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810459c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81045a0:	d007      	beq.n	81045b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81045a2:	e01c      	b.n	81045de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81045a4:	4b4b      	ldr	r3, [pc, #300]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81045a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81045a8:	4a4a      	ldr	r2, [pc, #296]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81045aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81045ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81045b0:	e01c      	b.n	81045ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81045b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81045b6:	3308      	adds	r3, #8
 81045b8:	2100      	movs	r1, #0
 81045ba:	4618      	mov	r0, r3
 81045bc:	f002 f980 	bl	81068c0 <RCCEx_PLL2_Config>
 81045c0:	4603      	mov	r3, r0
 81045c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81045c6:	e011      	b.n	81045ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81045c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81045cc:	3328      	adds	r3, #40	@ 0x28
 81045ce:	2100      	movs	r1, #0
 81045d0:	4618      	mov	r0, r3
 81045d2:	f002 fa27 	bl	8106a24 <RCCEx_PLL3_Config>
 81045d6:	4603      	mov	r3, r0
 81045d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81045dc:	e006      	b.n	81045ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81045de:	2301      	movs	r3, #1
 81045e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81045e4:	e002      	b.n	81045ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81045e6:	bf00      	nop
 81045e8:	e000      	b.n	81045ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81045ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 81045ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81045f0:	2b00      	cmp	r3, #0
 81045f2:	d10a      	bne.n	810460a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81045f4:	4b37      	ldr	r3, [pc, #220]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81045f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81045f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 81045fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104602:	4a34      	ldr	r2, [pc, #208]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104604:	430b      	orrs	r3, r1
 8104606:	6513      	str	r3, [r2, #80]	@ 0x50
 8104608:	e003      	b.n	8104612 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810460a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810460e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104612:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104616:	e9d3 2300 	ldrd	r2, r3, [r3]
 810461a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810461e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8104622:	2300      	movs	r3, #0
 8104624:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8104628:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 810462c:	460b      	mov	r3, r1
 810462e:	4313      	orrs	r3, r2
 8104630:	d056      	beq.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8104632:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104638:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810463c:	d033      	beq.n	81046a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810463e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104642:	d82c      	bhi.n	810469e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104644:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104648:	d02f      	beq.n	81046aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810464a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810464e:	d826      	bhi.n	810469e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104650:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104654:	d02b      	beq.n	81046ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8104656:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810465a:	d820      	bhi.n	810469e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810465c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104660:	d012      	beq.n	8104688 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8104662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104666:	d81a      	bhi.n	810469e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104668:	2b00      	cmp	r3, #0
 810466a:	d022      	beq.n	81046b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810466c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104670:	d115      	bne.n	810469e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104672:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104676:	3308      	adds	r3, #8
 8104678:	2101      	movs	r1, #1
 810467a:	4618      	mov	r0, r3
 810467c:	f002 f920 	bl	81068c0 <RCCEx_PLL2_Config>
 8104680:	4603      	mov	r3, r0
 8104682:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104686:	e015      	b.n	81046b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104688:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810468c:	3328      	adds	r3, #40	@ 0x28
 810468e:	2101      	movs	r1, #1
 8104690:	4618      	mov	r0, r3
 8104692:	f002 f9c7 	bl	8106a24 <RCCEx_PLL3_Config>
 8104696:	4603      	mov	r3, r0
 8104698:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810469c:	e00a      	b.n	81046b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810469e:	2301      	movs	r3, #1
 81046a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81046a4:	e006      	b.n	81046b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81046a6:	bf00      	nop
 81046a8:	e004      	b.n	81046b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81046aa:	bf00      	nop
 81046ac:	e002      	b.n	81046b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81046ae:	bf00      	nop
 81046b0:	e000      	b.n	81046b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81046b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81046b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81046b8:	2b00      	cmp	r3, #0
 81046ba:	d10d      	bne.n	81046d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81046bc:	4b05      	ldr	r3, [pc, #20]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81046be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81046c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81046c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81046c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81046ca:	4a02      	ldr	r2, [pc, #8]	@ (81046d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81046cc:	430b      	orrs	r3, r1
 81046ce:	6513      	str	r3, [r2, #80]	@ 0x50
 81046d0:	e006      	b.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81046d2:	bf00      	nop
 81046d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81046dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81046e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81046e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81046ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 81046f0:	2300      	movs	r3, #0
 81046f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 81046f6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 81046fa:	460b      	mov	r3, r1
 81046fc:	4313      	orrs	r3, r2
 81046fe:	d055      	beq.n	81047ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8104700:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104704:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8104708:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810470c:	d033      	beq.n	8104776 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810470e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104712:	d82c      	bhi.n	810476e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104718:	d02f      	beq.n	810477a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810471a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810471e:	d826      	bhi.n	810476e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104720:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104724:	d02b      	beq.n	810477e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8104726:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810472a:	d820      	bhi.n	810476e <HAL_RCCEx_PeriphCLKConfig+0x662>
 810472c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104730:	d012      	beq.n	8104758 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8104732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104736:	d81a      	bhi.n	810476e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104738:	2b00      	cmp	r3, #0
 810473a:	d022      	beq.n	8104782 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810473c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104740:	d115      	bne.n	810476e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104742:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104746:	3308      	adds	r3, #8
 8104748:	2101      	movs	r1, #1
 810474a:	4618      	mov	r0, r3
 810474c:	f002 f8b8 	bl	81068c0 <RCCEx_PLL2_Config>
 8104750:	4603      	mov	r3, r0
 8104752:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8104756:	e015      	b.n	8104784 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104758:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810475c:	3328      	adds	r3, #40	@ 0x28
 810475e:	2101      	movs	r1, #1
 8104760:	4618      	mov	r0, r3
 8104762:	f002 f95f 	bl	8106a24 <RCCEx_PLL3_Config>
 8104766:	4603      	mov	r3, r0
 8104768:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810476c:	e00a      	b.n	8104784 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810476e:	2301      	movs	r3, #1
 8104770:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104774:	e006      	b.n	8104784 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104776:	bf00      	nop
 8104778:	e004      	b.n	8104784 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810477a:	bf00      	nop
 810477c:	e002      	b.n	8104784 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810477e:	bf00      	nop
 8104780:	e000      	b.n	8104784 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104784:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104788:	2b00      	cmp	r3, #0
 810478a:	d10b      	bne.n	81047a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810478c:	4bb7      	ldr	r3, [pc, #732]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810478e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104790:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8104794:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104798:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810479c:	4ab3      	ldr	r2, [pc, #716]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810479e:	430b      	orrs	r3, r1
 81047a0:	6593      	str	r3, [r2, #88]	@ 0x58
 81047a2:	e003      	b.n	81047ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81047a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 81047ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047b4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 81047b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81047bc:	2300      	movs	r3, #0
 81047be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81047c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81047c6:	460b      	mov	r3, r1
 81047c8:	4313      	orrs	r3, r2
 81047ca:	d02a      	beq.n	8104822 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 81047cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81047d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81047d2:	2b00      	cmp	r3, #0
 81047d4:	d011      	beq.n	81047fa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 81047d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81047da:	d10a      	bne.n	81047f2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81047dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81047e0:	3308      	adds	r3, #8
 81047e2:	2101      	movs	r1, #1
 81047e4:	4618      	mov	r0, r3
 81047e6:	f002 f86b 	bl	81068c0 <RCCEx_PLL2_Config>
 81047ea:	4603      	mov	r3, r0
 81047ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 81047f0:	e004      	b.n	81047fc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81047f2:	2301      	movs	r3, #1
 81047f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81047f8:	e000      	b.n	81047fc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 81047fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81047fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104800:	2b00      	cmp	r3, #0
 8104802:	d10a      	bne.n	810481a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8104804:	4b99      	ldr	r3, [pc, #612]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104808:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 810480c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104812:	4a96      	ldr	r2, [pc, #600]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104814:	430b      	orrs	r3, r1
 8104816:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8104818:	e003      	b.n	8104822 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810481a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810481e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104822:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104826:	e9d3 2300 	ldrd	r2, r3, [r3]
 810482a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810482e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8104832:	2300      	movs	r3, #0
 8104834:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8104838:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810483c:	460b      	mov	r3, r1
 810483e:	4313      	orrs	r3, r2
 8104840:	d037      	beq.n	81048b2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8104842:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8104848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810484c:	d00e      	beq.n	810486c <HAL_RCCEx_PeriphCLKConfig+0x760>
 810484e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104852:	d816      	bhi.n	8104882 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8104854:	2b00      	cmp	r3, #0
 8104856:	d018      	beq.n	810488a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8104858:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810485c:	d111      	bne.n	8104882 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810485e:	4b83      	ldr	r3, [pc, #524]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104862:	4a82      	ldr	r2, [pc, #520]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810486a:	e00f      	b.n	810488c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810486c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104870:	3308      	adds	r3, #8
 8104872:	2101      	movs	r1, #1
 8104874:	4618      	mov	r0, r3
 8104876:	f002 f823 	bl	81068c0 <RCCEx_PLL2_Config>
 810487a:	4603      	mov	r3, r0
 810487c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104880:	e004      	b.n	810488c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104882:	2301      	movs	r3, #1
 8104884:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104888:	e000      	b.n	810488c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810488a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810488c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104890:	2b00      	cmp	r3, #0
 8104892:	d10a      	bne.n	81048aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104894:	4b75      	ldr	r3, [pc, #468]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104898:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810489c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81048a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81048a2:	4a72      	ldr	r2, [pc, #456]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81048a4:	430b      	orrs	r3, r1
 81048a6:	6513      	str	r3, [r2, #80]	@ 0x50
 81048a8:	e003      	b.n	81048b2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81048ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81048b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048ba:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 81048be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81048c2:	2300      	movs	r3, #0
 81048c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81048c8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81048cc:	460b      	mov	r3, r1
 81048ce:	4313      	orrs	r3, r2
 81048d0:	d03a      	beq.n	8104948 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81048d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81048d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81048d8:	2b03      	cmp	r3, #3
 81048da:	d81d      	bhi.n	8104918 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 81048dc:	a201      	add	r2, pc, #4	@ (adr r2, 81048e4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 81048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81048e2:	bf00      	nop
 81048e4:	08104921 	.word	0x08104921
 81048e8:	081048f5 	.word	0x081048f5
 81048ec:	08104903 	.word	0x08104903
 81048f0:	08104921 	.word	0x08104921
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81048f4:	4b5d      	ldr	r3, [pc, #372]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81048f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81048f8:	4a5c      	ldr	r2, [pc, #368]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81048fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81048fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8104900:	e00f      	b.n	8104922 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104902:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104906:	3308      	adds	r3, #8
 8104908:	2102      	movs	r1, #2
 810490a:	4618      	mov	r0, r3
 810490c:	f001 ffd8 	bl	81068c0 <RCCEx_PLL2_Config>
 8104910:	4603      	mov	r3, r0
 8104912:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8104916:	e004      	b.n	8104922 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8104918:	2301      	movs	r3, #1
 810491a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810491e:	e000      	b.n	8104922 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8104920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104922:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104926:	2b00      	cmp	r3, #0
 8104928:	d10a      	bne.n	8104940 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810492a:	4b50      	ldr	r3, [pc, #320]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810492c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810492e:	f023 0103 	bic.w	r1, r3, #3
 8104932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104938:	4a4c      	ldr	r2, [pc, #304]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810493a:	430b      	orrs	r3, r1
 810493c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810493e:	e003      	b.n	8104948 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104940:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104944:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104948:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104950:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8104954:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8104958:	2300      	movs	r3, #0
 810495a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810495e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8104962:	460b      	mov	r3, r1
 8104964:	4313      	orrs	r3, r2
 8104966:	f000 80a0 	beq.w	8104aaa <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810496a:	4b41      	ldr	r3, [pc, #260]	@ (8104a70 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810496c:	681b      	ldr	r3, [r3, #0]
 810496e:	4a40      	ldr	r2, [pc, #256]	@ (8104a70 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8104970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8104974:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104976:	f7fc fd3f 	bl	81013f8 <HAL_GetTick>
 810497a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810497e:	e00b      	b.n	8104998 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104980:	f7fc fd3a 	bl	81013f8 <HAL_GetTick>
 8104984:	4602      	mov	r2, r0
 8104986:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810498a:	1ad3      	subs	r3, r2, r3
 810498c:	2b64      	cmp	r3, #100	@ 0x64
 810498e:	d903      	bls.n	8104998 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8104990:	2303      	movs	r3, #3
 8104992:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104996:	e005      	b.n	81049a4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104998:	4b35      	ldr	r3, [pc, #212]	@ (8104a70 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810499a:	681b      	ldr	r3, [r3, #0]
 810499c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81049a0:	2b00      	cmp	r3, #0
 81049a2:	d0ed      	beq.n	8104980 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 81049a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81049a8:	2b00      	cmp	r3, #0
 81049aa:	d17a      	bne.n	8104aa2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81049ac:	4b2f      	ldr	r3, [pc, #188]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81049ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81049b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81049b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81049b8:	4053      	eors	r3, r2
 81049ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81049be:	2b00      	cmp	r3, #0
 81049c0:	d015      	beq.n	81049ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81049c2:	4b2a      	ldr	r3, [pc, #168]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81049c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81049c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81049ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81049ce:	4b27      	ldr	r3, [pc, #156]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81049d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81049d2:	4a26      	ldr	r2, [pc, #152]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81049d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81049d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81049da:	4b24      	ldr	r3, [pc, #144]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81049dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81049de:	4a23      	ldr	r2, [pc, #140]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81049e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81049e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81049e6:	4a21      	ldr	r2, [pc, #132]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81049e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 81049ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81049ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81049f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81049f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81049fa:	d118      	bne.n	8104a2e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81049fc:	f7fc fcfc 	bl	81013f8 <HAL_GetTick>
 8104a00:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104a04:	e00d      	b.n	8104a22 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104a06:	f7fc fcf7 	bl	81013f8 <HAL_GetTick>
 8104a0a:	4602      	mov	r2, r0
 8104a0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8104a10:	1ad2      	subs	r2, r2, r3
 8104a12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8104a16:	429a      	cmp	r2, r3
 8104a18:	d903      	bls.n	8104a22 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8104a1a:	2303      	movs	r3, #3
 8104a1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8104a20:	e005      	b.n	8104a2e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104a22:	4b12      	ldr	r3, [pc, #72]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104a26:	f003 0302 	and.w	r3, r3, #2
 8104a2a:	2b00      	cmp	r3, #0
 8104a2c:	d0eb      	beq.n	8104a06 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8104a2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104a32:	2b00      	cmp	r3, #0
 8104a34:	d130      	bne.n	8104a98 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104a3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8104a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8104a42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104a46:	d115      	bne.n	8104a74 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8104a48:	4b08      	ldr	r3, [pc, #32]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104a4a:	691b      	ldr	r3, [r3, #16]
 8104a4c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8104a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104a54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8104a58:	091b      	lsrs	r3, r3, #4
 8104a5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8104a5e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8104a62:	4a02      	ldr	r2, [pc, #8]	@ (8104a6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104a64:	430b      	orrs	r3, r1
 8104a66:	6113      	str	r3, [r2, #16]
 8104a68:	e00a      	b.n	8104a80 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8104a6a:	bf00      	nop
 8104a6c:	58024400 	.word	0x58024400
 8104a70:	58024800 	.word	0x58024800
 8104a74:	4bd4      	ldr	r3, [pc, #848]	@ (8104dc8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104a76:	691b      	ldr	r3, [r3, #16]
 8104a78:	4ad3      	ldr	r2, [pc, #844]	@ (8104dc8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104a7a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8104a7e:	6113      	str	r3, [r2, #16]
 8104a80:	4bd1      	ldr	r3, [pc, #836]	@ (8104dc8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104a82:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8104a84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104a88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8104a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104a90:	4acd      	ldr	r2, [pc, #820]	@ (8104dc8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104a92:	430b      	orrs	r3, r1
 8104a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8104a96:	e008      	b.n	8104aaa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104a98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104a9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8104aa0:	e003      	b.n	8104aaa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104aa2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104aa6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104aaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ab2:	f002 0301 	and.w	r3, r2, #1
 8104ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8104aba:	2300      	movs	r3, #0
 8104abc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8104ac0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8104ac4:	460b      	mov	r3, r1
 8104ac6:	4313      	orrs	r3, r2
 8104ac8:	f000 808b 	beq.w	8104be2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8104acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104ad4:	2b28      	cmp	r3, #40	@ 0x28
 8104ad6:	d86b      	bhi.n	8104bb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8104ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8104ae0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8104ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104ade:	bf00      	nop
 8104ae0:	08104bb9 	.word	0x08104bb9
 8104ae4:	08104bb1 	.word	0x08104bb1
 8104ae8:	08104bb1 	.word	0x08104bb1
 8104aec:	08104bb1 	.word	0x08104bb1
 8104af0:	08104bb1 	.word	0x08104bb1
 8104af4:	08104bb1 	.word	0x08104bb1
 8104af8:	08104bb1 	.word	0x08104bb1
 8104afc:	08104bb1 	.word	0x08104bb1
 8104b00:	08104b85 	.word	0x08104b85
 8104b04:	08104bb1 	.word	0x08104bb1
 8104b08:	08104bb1 	.word	0x08104bb1
 8104b0c:	08104bb1 	.word	0x08104bb1
 8104b10:	08104bb1 	.word	0x08104bb1
 8104b14:	08104bb1 	.word	0x08104bb1
 8104b18:	08104bb1 	.word	0x08104bb1
 8104b1c:	08104bb1 	.word	0x08104bb1
 8104b20:	08104b9b 	.word	0x08104b9b
 8104b24:	08104bb1 	.word	0x08104bb1
 8104b28:	08104bb1 	.word	0x08104bb1
 8104b2c:	08104bb1 	.word	0x08104bb1
 8104b30:	08104bb1 	.word	0x08104bb1
 8104b34:	08104bb1 	.word	0x08104bb1
 8104b38:	08104bb1 	.word	0x08104bb1
 8104b3c:	08104bb1 	.word	0x08104bb1
 8104b40:	08104bb9 	.word	0x08104bb9
 8104b44:	08104bb1 	.word	0x08104bb1
 8104b48:	08104bb1 	.word	0x08104bb1
 8104b4c:	08104bb1 	.word	0x08104bb1
 8104b50:	08104bb1 	.word	0x08104bb1
 8104b54:	08104bb1 	.word	0x08104bb1
 8104b58:	08104bb1 	.word	0x08104bb1
 8104b5c:	08104bb1 	.word	0x08104bb1
 8104b60:	08104bb9 	.word	0x08104bb9
 8104b64:	08104bb1 	.word	0x08104bb1
 8104b68:	08104bb1 	.word	0x08104bb1
 8104b6c:	08104bb1 	.word	0x08104bb1
 8104b70:	08104bb1 	.word	0x08104bb1
 8104b74:	08104bb1 	.word	0x08104bb1
 8104b78:	08104bb1 	.word	0x08104bb1
 8104b7c:	08104bb1 	.word	0x08104bb1
 8104b80:	08104bb9 	.word	0x08104bb9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104b84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104b88:	3308      	adds	r3, #8
 8104b8a:	2101      	movs	r1, #1
 8104b8c:	4618      	mov	r0, r3
 8104b8e:	f001 fe97 	bl	81068c0 <RCCEx_PLL2_Config>
 8104b92:	4603      	mov	r3, r0
 8104b94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104b98:	e00f      	b.n	8104bba <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104b9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104b9e:	3328      	adds	r3, #40	@ 0x28
 8104ba0:	2101      	movs	r1, #1
 8104ba2:	4618      	mov	r0, r3
 8104ba4:	f001 ff3e 	bl	8106a24 <RCCEx_PLL3_Config>
 8104ba8:	4603      	mov	r3, r0
 8104baa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104bae:	e004      	b.n	8104bba <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104bb0:	2301      	movs	r3, #1
 8104bb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104bb6:	e000      	b.n	8104bba <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8104bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104bba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104bbe:	2b00      	cmp	r3, #0
 8104bc0:	d10b      	bne.n	8104bda <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104bc2:	4b81      	ldr	r3, [pc, #516]	@ (8104dc8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104bc6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8104bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104bd2:	4a7d      	ldr	r2, [pc, #500]	@ (8104dc8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104bd4:	430b      	orrs	r3, r1
 8104bd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8104bd8:	e003      	b.n	8104be2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104bda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104bde:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104be2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104bea:	f002 0302 	and.w	r3, r2, #2
 8104bee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8104bf2:	2300      	movs	r3, #0
 8104bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8104bf8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8104bfc:	460b      	mov	r3, r1
 8104bfe:	4313      	orrs	r3, r2
 8104c00:	d042      	beq.n	8104c88 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104c06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8104c08:	2b05      	cmp	r3, #5
 8104c0a:	d825      	bhi.n	8104c58 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8104c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8104c14 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8104c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c12:	bf00      	nop
 8104c14:	08104c61 	.word	0x08104c61
 8104c18:	08104c2d 	.word	0x08104c2d
 8104c1c:	08104c43 	.word	0x08104c43
 8104c20:	08104c61 	.word	0x08104c61
 8104c24:	08104c61 	.word	0x08104c61
 8104c28:	08104c61 	.word	0x08104c61
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104c2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104c30:	3308      	adds	r3, #8
 8104c32:	2101      	movs	r1, #1
 8104c34:	4618      	mov	r0, r3
 8104c36:	f001 fe43 	bl	81068c0 <RCCEx_PLL2_Config>
 8104c3a:	4603      	mov	r3, r0
 8104c3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104c40:	e00f      	b.n	8104c62 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104c46:	3328      	adds	r3, #40	@ 0x28
 8104c48:	2101      	movs	r1, #1
 8104c4a:	4618      	mov	r0, r3
 8104c4c:	f001 feea 	bl	8106a24 <RCCEx_PLL3_Config>
 8104c50:	4603      	mov	r3, r0
 8104c52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104c56:	e004      	b.n	8104c62 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104c58:	2301      	movs	r3, #1
 8104c5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104c5e:	e000      	b.n	8104c62 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8104c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104c62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104c66:	2b00      	cmp	r3, #0
 8104c68:	d10a      	bne.n	8104c80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104c6a:	4b57      	ldr	r3, [pc, #348]	@ (8104dc8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104c6e:	f023 0107 	bic.w	r1, r3, #7
 8104c72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104c76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8104c78:	4a53      	ldr	r2, [pc, #332]	@ (8104dc8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104c7a:	430b      	orrs	r3, r1
 8104c7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8104c7e:	e003      	b.n	8104c88 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c80:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104c84:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c90:	f002 0304 	and.w	r3, r2, #4
 8104c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8104c98:	2300      	movs	r3, #0
 8104c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8104c9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8104ca2:	460b      	mov	r3, r1
 8104ca4:	4313      	orrs	r3, r2
 8104ca6:	d044      	beq.n	8104d32 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8104ca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8104cb0:	2b05      	cmp	r3, #5
 8104cb2:	d825      	bhi.n	8104d00 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8104cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8104cbc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8104cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104cba:	bf00      	nop
 8104cbc:	08104d09 	.word	0x08104d09
 8104cc0:	08104cd5 	.word	0x08104cd5
 8104cc4:	08104ceb 	.word	0x08104ceb
 8104cc8:	08104d09 	.word	0x08104d09
 8104ccc:	08104d09 	.word	0x08104d09
 8104cd0:	08104d09 	.word	0x08104d09
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104cd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104cd8:	3308      	adds	r3, #8
 8104cda:	2101      	movs	r1, #1
 8104cdc:	4618      	mov	r0, r3
 8104cde:	f001 fdef 	bl	81068c0 <RCCEx_PLL2_Config>
 8104ce2:	4603      	mov	r3, r0
 8104ce4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104ce8:	e00f      	b.n	8104d0a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104cea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104cee:	3328      	adds	r3, #40	@ 0x28
 8104cf0:	2101      	movs	r1, #1
 8104cf2:	4618      	mov	r0, r3
 8104cf4:	f001 fe96 	bl	8106a24 <RCCEx_PLL3_Config>
 8104cf8:	4603      	mov	r3, r0
 8104cfa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104cfe:	e004      	b.n	8104d0a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104d00:	2301      	movs	r3, #1
 8104d02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104d06:	e000      	b.n	8104d0a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8104d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104d0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104d0e:	2b00      	cmp	r3, #0
 8104d10:	d10b      	bne.n	8104d2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104d12:	4b2d      	ldr	r3, [pc, #180]	@ (8104dc8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104d16:	f023 0107 	bic.w	r1, r3, #7
 8104d1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8104d22:	4a29      	ldr	r2, [pc, #164]	@ (8104dc8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104d24:	430b      	orrs	r3, r1
 8104d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8104d28:	e003      	b.n	8104d32 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104d2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d3a:	f002 0320 	and.w	r3, r2, #32
 8104d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8104d42:	2300      	movs	r3, #0
 8104d44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8104d48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8104d4c:	460b      	mov	r3, r1
 8104d4e:	4313      	orrs	r3, r2
 8104d50:	d057      	beq.n	8104e02 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8104d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8104d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104d5e:	d035      	beq.n	8104dcc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8104d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104d64:	d82c      	bhi.n	8104dc0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8104d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104d6a:	d031      	beq.n	8104dd0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8104d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104d70:	d826      	bhi.n	8104dc0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8104d72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104d76:	d02d      	beq.n	8104dd4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8104d78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104d7c:	d820      	bhi.n	8104dc0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8104d7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104d82:	d012      	beq.n	8104daa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8104d84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104d88:	d81a      	bhi.n	8104dc0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8104d8a:	2b00      	cmp	r3, #0
 8104d8c:	d024      	beq.n	8104dd8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8104d8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104d92:	d115      	bne.n	8104dc0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104d98:	3308      	adds	r3, #8
 8104d9a:	2100      	movs	r1, #0
 8104d9c:	4618      	mov	r0, r3
 8104d9e:	f001 fd8f 	bl	81068c0 <RCCEx_PLL2_Config>
 8104da2:	4603      	mov	r3, r0
 8104da4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104da8:	e017      	b.n	8104dda <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104dae:	3328      	adds	r3, #40	@ 0x28
 8104db0:	2102      	movs	r1, #2
 8104db2:	4618      	mov	r0, r3
 8104db4:	f001 fe36 	bl	8106a24 <RCCEx_PLL3_Config>
 8104db8:	4603      	mov	r3, r0
 8104dba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104dbe:	e00c      	b.n	8104dda <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104dc0:	2301      	movs	r3, #1
 8104dc2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104dc6:	e008      	b.n	8104dda <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8104dc8:	58024400 	.word	0x58024400
        break;
 8104dcc:	bf00      	nop
 8104dce:	e004      	b.n	8104dda <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8104dd0:	bf00      	nop
 8104dd2:	e002      	b.n	8104dda <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8104dd4:	bf00      	nop
 8104dd6:	e000      	b.n	8104dda <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8104dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104dda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104dde:	2b00      	cmp	r3, #0
 8104de0:	d10b      	bne.n	8104dfa <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8104de2:	4bc2      	ldr	r3, [pc, #776]	@ (81050ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104de6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8104dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8104df2:	4abe      	ldr	r2, [pc, #760]	@ (81050ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104df4:	430b      	orrs	r3, r1
 8104df6:	6553      	str	r3, [r2, #84]	@ 0x54
 8104df8:	e003      	b.n	8104e02 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104dfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104dfe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e0a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8104e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8104e12:	2300      	movs	r3, #0
 8104e14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8104e18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8104e1c:	460b      	mov	r3, r1
 8104e1e:	4313      	orrs	r3, r2
 8104e20:	d055      	beq.n	8104ece <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8104e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104e26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8104e2a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8104e2e:	d033      	beq.n	8104e98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8104e30:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8104e34:	d82c      	bhi.n	8104e90 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8104e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104e3a:	d02f      	beq.n	8104e9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8104e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104e40:	d826      	bhi.n	8104e90 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8104e42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8104e46:	d02b      	beq.n	8104ea0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8104e48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8104e4c:	d820      	bhi.n	8104e90 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8104e4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104e52:	d012      	beq.n	8104e7a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8104e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104e58:	d81a      	bhi.n	8104e90 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8104e5a:	2b00      	cmp	r3, #0
 8104e5c:	d022      	beq.n	8104ea4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8104e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8104e62:	d115      	bne.n	8104e90 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104e64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104e68:	3308      	adds	r3, #8
 8104e6a:	2100      	movs	r1, #0
 8104e6c:	4618      	mov	r0, r3
 8104e6e:	f001 fd27 	bl	81068c0 <RCCEx_PLL2_Config>
 8104e72:	4603      	mov	r3, r0
 8104e74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104e78:	e015      	b.n	8104ea6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104e7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104e7e:	3328      	adds	r3, #40	@ 0x28
 8104e80:	2102      	movs	r1, #2
 8104e82:	4618      	mov	r0, r3
 8104e84:	f001 fdce 	bl	8106a24 <RCCEx_PLL3_Config>
 8104e88:	4603      	mov	r3, r0
 8104e8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104e8e:	e00a      	b.n	8104ea6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104e90:	2301      	movs	r3, #1
 8104e92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104e96:	e006      	b.n	8104ea6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8104e98:	bf00      	nop
 8104e9a:	e004      	b.n	8104ea6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8104e9c:	bf00      	nop
 8104e9e:	e002      	b.n	8104ea6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8104ea0:	bf00      	nop
 8104ea2:	e000      	b.n	8104ea6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8104ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104ea6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104eaa:	2b00      	cmp	r3, #0
 8104eac:	d10b      	bne.n	8104ec6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8104eae:	4b8f      	ldr	r3, [pc, #572]	@ (81050ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104eb2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8104eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104eba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8104ebe:	4a8b      	ldr	r2, [pc, #556]	@ (81050ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104ec0:	430b      	orrs	r3, r1
 8104ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8104ec4:	e003      	b.n	8104ece <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ec6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104eca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ed6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8104eda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8104ede:	2300      	movs	r3, #0
 8104ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8104ee4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8104ee8:	460b      	mov	r3, r1
 8104eea:	4313      	orrs	r3, r2
 8104eec:	d055      	beq.n	8104f9a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8104eee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104ef2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104ef6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8104efa:	d033      	beq.n	8104f64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8104efc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8104f00:	d82c      	bhi.n	8104f5c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8104f02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104f06:	d02f      	beq.n	8104f68 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8104f08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104f0c:	d826      	bhi.n	8104f5c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8104f0e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8104f12:	d02b      	beq.n	8104f6c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8104f14:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8104f18:	d820      	bhi.n	8104f5c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8104f1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104f1e:	d012      	beq.n	8104f46 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8104f20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104f24:	d81a      	bhi.n	8104f5c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8104f26:	2b00      	cmp	r3, #0
 8104f28:	d022      	beq.n	8104f70 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8104f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104f2e:	d115      	bne.n	8104f5c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104f30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104f34:	3308      	adds	r3, #8
 8104f36:	2100      	movs	r1, #0
 8104f38:	4618      	mov	r0, r3
 8104f3a:	f001 fcc1 	bl	81068c0 <RCCEx_PLL2_Config>
 8104f3e:	4603      	mov	r3, r0
 8104f40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104f44:	e015      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104f46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104f4a:	3328      	adds	r3, #40	@ 0x28
 8104f4c:	2102      	movs	r1, #2
 8104f4e:	4618      	mov	r0, r3
 8104f50:	f001 fd68 	bl	8106a24 <RCCEx_PLL3_Config>
 8104f54:	4603      	mov	r3, r0
 8104f56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104f5a:	e00a      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104f5c:	2301      	movs	r3, #1
 8104f5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8104f62:	e006      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104f64:	bf00      	nop
 8104f66:	e004      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104f68:	bf00      	nop
 8104f6a:	e002      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104f6c:	bf00      	nop
 8104f6e:	e000      	b.n	8104f72 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104f72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104f76:	2b00      	cmp	r3, #0
 8104f78:	d10b      	bne.n	8104f92 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104f7a:	4b5c      	ldr	r3, [pc, #368]	@ (81050ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104f7e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8104f82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104f86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104f8a:	4a58      	ldr	r2, [pc, #352]	@ (81050ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104f8c:	430b      	orrs	r3, r1
 8104f8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8104f90:	e003      	b.n	8104f9a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f92:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8104f96:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104fa2:	f002 0308 	and.w	r3, r2, #8
 8104fa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8104faa:	2300      	movs	r3, #0
 8104fac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8104fb0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8104fb4:	460b      	mov	r3, r1
 8104fb6:	4313      	orrs	r3, r2
 8104fb8:	d01e      	beq.n	8104ff8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8104fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104fc6:	d10c      	bne.n	8104fe2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104fc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104fcc:	3328      	adds	r3, #40	@ 0x28
 8104fce:	2102      	movs	r1, #2
 8104fd0:	4618      	mov	r0, r3
 8104fd2:	f001 fd27 	bl	8106a24 <RCCEx_PLL3_Config>
 8104fd6:	4603      	mov	r3, r0
 8104fd8:	2b00      	cmp	r3, #0
 8104fda:	d002      	beq.n	8104fe2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8104fdc:	2301      	movs	r3, #1
 8104fde:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104fe2:	4b42      	ldr	r3, [pc, #264]	@ (81050ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104fe6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8104fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104ff2:	4a3e      	ldr	r2, [pc, #248]	@ (81050ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104ff4:	430b      	orrs	r3, r1
 8104ff6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104ff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105000:	f002 0310 	and.w	r3, r2, #16
 8105004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8105008:	2300      	movs	r3, #0
 810500a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810500e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8105012:	460b      	mov	r3, r1
 8105014:	4313      	orrs	r3, r2
 8105016:	d01e      	beq.n	8105056 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8105018:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810501c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8105020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105024:	d10c      	bne.n	8105040 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105026:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810502a:	3328      	adds	r3, #40	@ 0x28
 810502c:	2102      	movs	r1, #2
 810502e:	4618      	mov	r0, r3
 8105030:	f001 fcf8 	bl	8106a24 <RCCEx_PLL3_Config>
 8105034:	4603      	mov	r3, r0
 8105036:	2b00      	cmp	r3, #0
 8105038:	d002      	beq.n	8105040 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 810503a:	2301      	movs	r3, #1
 810503c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105040:	4b2a      	ldr	r3, [pc, #168]	@ (81050ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105044:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8105048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810504c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8105050:	4a26      	ldr	r2, [pc, #152]	@ (81050ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8105052:	430b      	orrs	r3, r1
 8105054:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105056:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810505e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8105062:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8105066:	2300      	movs	r3, #0
 8105068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810506c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8105070:	460b      	mov	r3, r1
 8105072:	4313      	orrs	r3, r2
 8105074:	d040      	beq.n	81050f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8105076:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810507a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810507e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105082:	d022      	beq.n	81050ca <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8105084:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105088:	d81b      	bhi.n	81050c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810508a:	2b00      	cmp	r3, #0
 810508c:	d003      	beq.n	8105096 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 810508e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105092:	d00b      	beq.n	81050ac <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8105094:	e015      	b.n	81050c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105096:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810509a:	3308      	adds	r3, #8
 810509c:	2100      	movs	r1, #0
 810509e:	4618      	mov	r0, r3
 81050a0:	f001 fc0e 	bl	81068c0 <RCCEx_PLL2_Config>
 81050a4:	4603      	mov	r3, r0
 81050a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 81050aa:	e00f      	b.n	81050cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81050ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81050b0:	3328      	adds	r3, #40	@ 0x28
 81050b2:	2102      	movs	r1, #2
 81050b4:	4618      	mov	r0, r3
 81050b6:	f001 fcb5 	bl	8106a24 <RCCEx_PLL3_Config>
 81050ba:	4603      	mov	r3, r0
 81050bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 81050c0:	e004      	b.n	81050cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81050c2:	2301      	movs	r3, #1
 81050c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81050c8:	e000      	b.n	81050cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 81050ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81050cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81050d0:	2b00      	cmp	r3, #0
 81050d2:	d10d      	bne.n	81050f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81050d4:	4b05      	ldr	r3, [pc, #20]	@ (81050ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81050d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81050d8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81050dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81050e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81050e4:	4a01      	ldr	r2, [pc, #4]	@ (81050ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81050e6:	430b      	orrs	r3, r1
 81050e8:	6593      	str	r3, [r2, #88]	@ 0x58
 81050ea:	e005      	b.n	81050f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 81050ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81050f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81050f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81050f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105100:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8105104:	67bb      	str	r3, [r7, #120]	@ 0x78
 8105106:	2300      	movs	r3, #0
 8105108:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810510a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810510e:	460b      	mov	r3, r1
 8105110:	4313      	orrs	r3, r2
 8105112:	d03b      	beq.n	810518c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8105114:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105118:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810511c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105120:	d01f      	beq.n	8105162 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8105122:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105126:	d818      	bhi.n	810515a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8105128:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810512c:	d003      	beq.n	8105136 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 810512e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105132:	d007      	beq.n	8105144 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8105134:	e011      	b.n	810515a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105136:	4b64      	ldr	r3, [pc, #400]	@ (81052c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8105138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810513a:	4a63      	ldr	r2, [pc, #396]	@ (81052c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810513c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105140:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8105142:	e00f      	b.n	8105164 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105144:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105148:	3328      	adds	r3, #40	@ 0x28
 810514a:	2101      	movs	r1, #1
 810514c:	4618      	mov	r0, r3
 810514e:	f001 fc69 	bl	8106a24 <RCCEx_PLL3_Config>
 8105152:	4603      	mov	r3, r0
 8105154:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8105158:	e004      	b.n	8105164 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810515a:	2301      	movs	r3, #1
 810515c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105160:	e000      	b.n	8105164 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8105162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105164:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105168:	2b00      	cmp	r3, #0
 810516a:	d10b      	bne.n	8105184 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810516c:	4b56      	ldr	r3, [pc, #344]	@ (81052c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810516e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105170:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8105174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810517c:	4a52      	ldr	r2, [pc, #328]	@ (81052c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810517e:	430b      	orrs	r3, r1
 8105180:	6553      	str	r3, [r2, #84]	@ 0x54
 8105182:	e003      	b.n	810518c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105184:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105188:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810518c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105194:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8105198:	673b      	str	r3, [r7, #112]	@ 0x70
 810519a:	2300      	movs	r3, #0
 810519c:	677b      	str	r3, [r7, #116]	@ 0x74
 810519e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81051a2:	460b      	mov	r3, r1
 81051a4:	4313      	orrs	r3, r2
 81051a6:	d031      	beq.n	810520c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81051a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81051ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81051ae:	2b00      	cmp	r3, #0
 81051b0:	d003      	beq.n	81051ba <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 81051b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81051b6:	d007      	beq.n	81051c8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 81051b8:	e011      	b.n	81051de <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81051ba:	4b43      	ldr	r3, [pc, #268]	@ (81052c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81051be:	4a42      	ldr	r2, [pc, #264]	@ (81052c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81051c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81051c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81051c6:	e00e      	b.n	81051e6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81051c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81051cc:	3308      	adds	r3, #8
 81051ce:	2102      	movs	r1, #2
 81051d0:	4618      	mov	r0, r3
 81051d2:	f001 fb75 	bl	81068c0 <RCCEx_PLL2_Config>
 81051d6:	4603      	mov	r3, r0
 81051d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81051dc:	e003      	b.n	81051e6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 81051de:	2301      	movs	r3, #1
 81051e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81051e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81051e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81051ea:	2b00      	cmp	r3, #0
 81051ec:	d10a      	bne.n	8105204 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81051ee:	4b36      	ldr	r3, [pc, #216]	@ (81052c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81051f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81051f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81051f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81051fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81051fc:	4a32      	ldr	r2, [pc, #200]	@ (81052c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81051fe:	430b      	orrs	r3, r1
 8105200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105202:	e003      	b.n	810520c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105204:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105208:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810520c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105214:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8105218:	66bb      	str	r3, [r7, #104]	@ 0x68
 810521a:	2300      	movs	r3, #0
 810521c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810521e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8105222:	460b      	mov	r3, r1
 8105224:	4313      	orrs	r3, r2
 8105226:	d00c      	beq.n	8105242 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105228:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810522c:	3328      	adds	r3, #40	@ 0x28
 810522e:	2102      	movs	r1, #2
 8105230:	4618      	mov	r0, r3
 8105232:	f001 fbf7 	bl	8106a24 <RCCEx_PLL3_Config>
 8105236:	4603      	mov	r3, r0
 8105238:	2b00      	cmp	r3, #0
 810523a:	d002      	beq.n	8105242 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 810523c:	2301      	movs	r3, #1
 810523e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105242:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105246:	e9d3 2300 	ldrd	r2, r3, [r3]
 810524a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810524e:	663b      	str	r3, [r7, #96]	@ 0x60
 8105250:	2300      	movs	r3, #0
 8105252:	667b      	str	r3, [r7, #100]	@ 0x64
 8105254:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8105258:	460b      	mov	r3, r1
 810525a:	4313      	orrs	r3, r2
 810525c:	d03a      	beq.n	81052d4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 810525e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810526a:	d018      	beq.n	810529e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 810526c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105270:	d811      	bhi.n	8105296 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8105272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8105276:	d014      	beq.n	81052a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8105278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810527c:	d80b      	bhi.n	8105296 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810527e:	2b00      	cmp	r3, #0
 8105280:	d011      	beq.n	81052a6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8105282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105286:	d106      	bne.n	8105296 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105288:	4b0f      	ldr	r3, [pc, #60]	@ (81052c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810528c:	4a0e      	ldr	r2, [pc, #56]	@ (81052c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810528e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8105294:	e008      	b.n	81052a8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105296:	2301      	movs	r3, #1
 8105298:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810529c:	e004      	b.n	81052a8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810529e:	bf00      	nop
 81052a0:	e002      	b.n	81052a8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81052a2:	bf00      	nop
 81052a4:	e000      	b.n	81052a8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81052a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81052a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81052ac:	2b00      	cmp	r3, #0
 81052ae:	d10d      	bne.n	81052cc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81052b0:	4b05      	ldr	r3, [pc, #20]	@ (81052c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81052b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81052b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81052b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81052bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81052c0:	4a01      	ldr	r2, [pc, #4]	@ (81052c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81052c2:	430b      	orrs	r3, r1
 81052c4:	6553      	str	r3, [r2, #84]	@ 0x54
 81052c6:	e005      	b.n	81052d4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 81052c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81052cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81052d0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81052d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81052d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81052dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81052e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 81052e2:	2300      	movs	r3, #0
 81052e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81052e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81052ea:	460b      	mov	r3, r1
 81052ec:	4313      	orrs	r3, r2
 81052ee:	d009      	beq.n	8105304 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81052f0:	4baa      	ldr	r3, [pc, #680]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81052f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81052f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81052f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81052fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81052fe:	4aa7      	ldr	r2, [pc, #668]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105300:	430b      	orrs	r3, r1
 8105302:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8105304:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105308:	e9d3 2300 	ldrd	r2, r3, [r3]
 810530c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8105310:	653b      	str	r3, [r7, #80]	@ 0x50
 8105312:	2300      	movs	r3, #0
 8105314:	657b      	str	r3, [r7, #84]	@ 0x54
 8105316:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810531a:	460b      	mov	r3, r1
 810531c:	4313      	orrs	r3, r2
 810531e:	d00a      	beq.n	8105336 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105320:	4b9e      	ldr	r3, [pc, #632]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105322:	691b      	ldr	r3, [r3, #16]
 8105324:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8105328:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810532c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8105330:	4a9a      	ldr	r2, [pc, #616]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105332:	430b      	orrs	r3, r1
 8105334:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8105336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810533e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8105342:	64bb      	str	r3, [r7, #72]	@ 0x48
 8105344:	2300      	movs	r3, #0
 8105346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105348:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810534c:	460b      	mov	r3, r1
 810534e:	4313      	orrs	r3, r2
 8105350:	d009      	beq.n	8105366 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105352:	4b92      	ldr	r3, [pc, #584]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105356:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810535a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810535e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105360:	4a8e      	ldr	r2, [pc, #568]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105362:	430b      	orrs	r3, r1
 8105364:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105366:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810536e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8105372:	643b      	str	r3, [r7, #64]	@ 0x40
 8105374:	2300      	movs	r3, #0
 8105376:	647b      	str	r3, [r7, #68]	@ 0x44
 8105378:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810537c:	460b      	mov	r3, r1
 810537e:	4313      	orrs	r3, r2
 8105380:	d00e      	beq.n	81053a0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105382:	4b86      	ldr	r3, [pc, #536]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105384:	691b      	ldr	r3, [r3, #16]
 8105386:	4a85      	ldr	r2, [pc, #532]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105388:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810538c:	6113      	str	r3, [r2, #16]
 810538e:	4b83      	ldr	r3, [pc, #524]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8105390:	6919      	ldr	r1, [r3, #16]
 8105392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105396:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810539a:	4a80      	ldr	r2, [pc, #512]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810539c:	430b      	orrs	r3, r1
 810539e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81053a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81053a8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81053ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 81053ae:	2300      	movs	r3, #0
 81053b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81053b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 81053b6:	460b      	mov	r3, r1
 81053b8:	4313      	orrs	r3, r2
 81053ba:	d009      	beq.n	81053d0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81053bc:	4b77      	ldr	r3, [pc, #476]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81053be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81053c0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81053c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81053c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81053ca:	4a74      	ldr	r2, [pc, #464]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81053cc:	430b      	orrs	r3, r1
 81053ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81053d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81053d8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81053dc:	633b      	str	r3, [r7, #48]	@ 0x30
 81053de:	2300      	movs	r3, #0
 81053e0:	637b      	str	r3, [r7, #52]	@ 0x34
 81053e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81053e6:	460b      	mov	r3, r1
 81053e8:	4313      	orrs	r3, r2
 81053ea:	d00a      	beq.n	8105402 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81053ec:	4b6b      	ldr	r3, [pc, #428]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81053ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81053f0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81053f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81053fc:	4a67      	ldr	r2, [pc, #412]	@ (810559c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81053fe:	430b      	orrs	r3, r1
 8105400:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8105402:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105406:	e9d3 2300 	ldrd	r2, r3, [r3]
 810540a:	2100      	movs	r1, #0
 810540c:	62b9      	str	r1, [r7, #40]	@ 0x28
 810540e:	f003 0301 	and.w	r3, r3, #1
 8105412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8105414:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8105418:	460b      	mov	r3, r1
 810541a:	4313      	orrs	r3, r2
 810541c:	d011      	beq.n	8105442 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810541e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105422:	3308      	adds	r3, #8
 8105424:	2100      	movs	r1, #0
 8105426:	4618      	mov	r0, r3
 8105428:	f001 fa4a 	bl	81068c0 <RCCEx_PLL2_Config>
 810542c:	4603      	mov	r3, r0
 810542e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8105432:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105436:	2b00      	cmp	r3, #0
 8105438:	d003      	beq.n	8105442 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810543a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810543e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8105442:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105446:	e9d3 2300 	ldrd	r2, r3, [r3]
 810544a:	2100      	movs	r1, #0
 810544c:	6239      	str	r1, [r7, #32]
 810544e:	f003 0302 	and.w	r3, r3, #2
 8105452:	627b      	str	r3, [r7, #36]	@ 0x24
 8105454:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8105458:	460b      	mov	r3, r1
 810545a:	4313      	orrs	r3, r2
 810545c:	d011      	beq.n	8105482 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810545e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105462:	3308      	adds	r3, #8
 8105464:	2101      	movs	r1, #1
 8105466:	4618      	mov	r0, r3
 8105468:	f001 fa2a 	bl	81068c0 <RCCEx_PLL2_Config>
 810546c:	4603      	mov	r3, r0
 810546e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8105472:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105476:	2b00      	cmp	r3, #0
 8105478:	d003      	beq.n	8105482 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810547a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810547e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8105482:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105486:	e9d3 2300 	ldrd	r2, r3, [r3]
 810548a:	2100      	movs	r1, #0
 810548c:	61b9      	str	r1, [r7, #24]
 810548e:	f003 0304 	and.w	r3, r3, #4
 8105492:	61fb      	str	r3, [r7, #28]
 8105494:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8105498:	460b      	mov	r3, r1
 810549a:	4313      	orrs	r3, r2
 810549c:	d011      	beq.n	81054c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810549e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81054a2:	3308      	adds	r3, #8
 81054a4:	2102      	movs	r1, #2
 81054a6:	4618      	mov	r0, r3
 81054a8:	f001 fa0a 	bl	81068c0 <RCCEx_PLL2_Config>
 81054ac:	4603      	mov	r3, r0
 81054ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81054b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81054b6:	2b00      	cmp	r3, #0
 81054b8:	d003      	beq.n	81054c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81054ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81054be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81054c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054ca:	2100      	movs	r1, #0
 81054cc:	6139      	str	r1, [r7, #16]
 81054ce:	f003 0308 	and.w	r3, r3, #8
 81054d2:	617b      	str	r3, [r7, #20]
 81054d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81054d8:	460b      	mov	r3, r1
 81054da:	4313      	orrs	r3, r2
 81054dc:	d011      	beq.n	8105502 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81054de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81054e2:	3328      	adds	r3, #40	@ 0x28
 81054e4:	2100      	movs	r1, #0
 81054e6:	4618      	mov	r0, r3
 81054e8:	f001 fa9c 	bl	8106a24 <RCCEx_PLL3_Config>
 81054ec:	4603      	mov	r3, r0
 81054ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 81054f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81054f6:	2b00      	cmp	r3, #0
 81054f8:	d003      	beq.n	8105502 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81054fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81054fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8105502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105506:	e9d3 2300 	ldrd	r2, r3, [r3]
 810550a:	2100      	movs	r1, #0
 810550c:	60b9      	str	r1, [r7, #8]
 810550e:	f003 0310 	and.w	r3, r3, #16
 8105512:	60fb      	str	r3, [r7, #12]
 8105514:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8105518:	460b      	mov	r3, r1
 810551a:	4313      	orrs	r3, r2
 810551c:	d011      	beq.n	8105542 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810551e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105522:	3328      	adds	r3, #40	@ 0x28
 8105524:	2101      	movs	r1, #1
 8105526:	4618      	mov	r0, r3
 8105528:	f001 fa7c 	bl	8106a24 <RCCEx_PLL3_Config>
 810552c:	4603      	mov	r3, r0
 810552e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8105532:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105536:	2b00      	cmp	r3, #0
 8105538:	d003      	beq.n	8105542 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810553a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810553e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8105542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105546:	e9d3 2300 	ldrd	r2, r3, [r3]
 810554a:	2100      	movs	r1, #0
 810554c:	6039      	str	r1, [r7, #0]
 810554e:	f003 0320 	and.w	r3, r3, #32
 8105552:	607b      	str	r3, [r7, #4]
 8105554:	e9d7 1200 	ldrd	r1, r2, [r7]
 8105558:	460b      	mov	r3, r1
 810555a:	4313      	orrs	r3, r2
 810555c:	d011      	beq.n	8105582 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810555e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105562:	3328      	adds	r3, #40	@ 0x28
 8105564:	2102      	movs	r1, #2
 8105566:	4618      	mov	r0, r3
 8105568:	f001 fa5c 	bl	8106a24 <RCCEx_PLL3_Config>
 810556c:	4603      	mov	r3, r0
 810556e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8105572:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105576:	2b00      	cmp	r3, #0
 8105578:	d003      	beq.n	8105582 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810557a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810557e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8105582:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8105586:	2b00      	cmp	r3, #0
 8105588:	d101      	bne.n	810558e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 810558a:	2300      	movs	r3, #0
 810558c:	e000      	b.n	8105590 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 810558e:	2301      	movs	r3, #1
}
 8105590:	4618      	mov	r0, r3
 8105592:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8105596:	46bd      	mov	sp, r7
 8105598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810559c:	58024400 	.word	0x58024400

081055a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 81055a0:	b580      	push	{r7, lr}
 81055a2:	b090      	sub	sp, #64	@ 0x40
 81055a4:	af00      	add	r7, sp, #0
 81055a6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 81055aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 81055ae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 81055b2:	430b      	orrs	r3, r1
 81055b4:	f040 8094 	bne.w	81056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 81055b8:	4b9e      	ldr	r3, [pc, #632]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81055ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81055bc:	f003 0307 	and.w	r3, r3, #7
 81055c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81055c4:	2b04      	cmp	r3, #4
 81055c6:	f200 8087 	bhi.w	81056d8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 81055ca:	a201      	add	r2, pc, #4	@ (adr r2, 81055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 81055cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81055d0:	081055e5 	.word	0x081055e5
 81055d4:	0810560d 	.word	0x0810560d
 81055d8:	08105635 	.word	0x08105635
 81055dc:	081056d1 	.word	0x081056d1
 81055e0:	0810565d 	.word	0x0810565d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81055e4:	4b93      	ldr	r3, [pc, #588]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81055e6:	681b      	ldr	r3, [r3, #0]
 81055e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81055ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81055f0:	d108      	bne.n	8105604 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81055f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81055f6:	4618      	mov	r0, r3
 81055f8:	f001 f810 	bl	810661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81055fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81055fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105600:	f000 bd45 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105604:	2300      	movs	r3, #0
 8105606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105608:	f000 bd41 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810560c:	4b89      	ldr	r3, [pc, #548]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810560e:	681b      	ldr	r3, [r3, #0]
 8105610:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105614:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105618:	d108      	bne.n	810562c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810561a:	f107 0318 	add.w	r3, r7, #24
 810561e:	4618      	mov	r0, r3
 8105620:	f000 fd54 	bl	81060cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105624:	69bb      	ldr	r3, [r7, #24]
 8105626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105628:	f000 bd31 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810562c:	2300      	movs	r3, #0
 810562e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105630:	f000 bd2d 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105634:	4b7f      	ldr	r3, [pc, #508]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105636:	681b      	ldr	r3, [r3, #0]
 8105638:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810563c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105640:	d108      	bne.n	8105654 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105642:	f107 030c 	add.w	r3, r7, #12
 8105646:	4618      	mov	r0, r3
 8105648:	f000 fe94 	bl	8106374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810564c:	68fb      	ldr	r3, [r7, #12]
 810564e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105650:	f000 bd1d 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105654:	2300      	movs	r3, #0
 8105656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105658:	f000 bd19 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810565c:	4b75      	ldr	r3, [pc, #468]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810565e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105660:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8105664:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105666:	4b73      	ldr	r3, [pc, #460]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105668:	681b      	ldr	r3, [r3, #0]
 810566a:	f003 0304 	and.w	r3, r3, #4
 810566e:	2b04      	cmp	r3, #4
 8105670:	d10c      	bne.n	810568c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8105672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105674:	2b00      	cmp	r3, #0
 8105676:	d109      	bne.n	810568c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105678:	4b6e      	ldr	r3, [pc, #440]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810567a:	681b      	ldr	r3, [r3, #0]
 810567c:	08db      	lsrs	r3, r3, #3
 810567e:	f003 0303 	and.w	r3, r3, #3
 8105682:	4a6d      	ldr	r2, [pc, #436]	@ (8105838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8105684:	fa22 f303 	lsr.w	r3, r2, r3
 8105688:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810568a:	e01f      	b.n	81056cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810568c:	4b69      	ldr	r3, [pc, #420]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810568e:	681b      	ldr	r3, [r3, #0]
 8105690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105698:	d106      	bne.n	81056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 810569a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810569c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81056a0:	d102      	bne.n	81056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81056a2:	4b66      	ldr	r3, [pc, #408]	@ (810583c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81056a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81056a6:	e011      	b.n	81056cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81056a8:	4b62      	ldr	r3, [pc, #392]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81056aa:	681b      	ldr	r3, [r3, #0]
 81056ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81056b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81056b4:	d106      	bne.n	81056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 81056b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81056b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81056bc:	d102      	bne.n	81056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81056be:	4b60      	ldr	r3, [pc, #384]	@ (8105840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81056c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81056c2:	e003      	b.n	81056cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81056c4:	2300      	movs	r3, #0
 81056c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81056c8:	f000 bce1 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81056cc:	f000 bcdf 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81056d0:	4b5c      	ldr	r3, [pc, #368]	@ (8105844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81056d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81056d4:	f000 bcdb 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81056d8:	2300      	movs	r3, #0
 81056da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81056dc:	f000 bcd7 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 81056e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81056e4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 81056e8:	430b      	orrs	r3, r1
 81056ea:	f040 80ad 	bne.w	8105848 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 81056ee:	4b51      	ldr	r3, [pc, #324]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81056f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81056f2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 81056f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81056f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81056fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81056fe:	d056      	beq.n	81057ae <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8105700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105706:	f200 8090 	bhi.w	810582a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810570c:	2bc0      	cmp	r3, #192	@ 0xc0
 810570e:	f000 8088 	beq.w	8105822 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8105712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105714:	2bc0      	cmp	r3, #192	@ 0xc0
 8105716:	f200 8088 	bhi.w	810582a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810571c:	2b80      	cmp	r3, #128	@ 0x80
 810571e:	d032      	beq.n	8105786 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8105720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105722:	2b80      	cmp	r3, #128	@ 0x80
 8105724:	f200 8081 	bhi.w	810582a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8105728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810572a:	2b00      	cmp	r3, #0
 810572c:	d003      	beq.n	8105736 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810572e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105730:	2b40      	cmp	r3, #64	@ 0x40
 8105732:	d014      	beq.n	810575e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105734:	e079      	b.n	810582a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105736:	4b3f      	ldr	r3, [pc, #252]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105738:	681b      	ldr	r3, [r3, #0]
 810573a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810573e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105742:	d108      	bne.n	8105756 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105748:	4618      	mov	r0, r3
 810574a:	f000 ff67 	bl	810661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810574e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105752:	f000 bc9c 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105756:	2300      	movs	r3, #0
 8105758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810575a:	f000 bc98 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810575e:	4b35      	ldr	r3, [pc, #212]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105760:	681b      	ldr	r3, [r3, #0]
 8105762:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810576a:	d108      	bne.n	810577e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810576c:	f107 0318 	add.w	r3, r7, #24
 8105770:	4618      	mov	r0, r3
 8105772:	f000 fcab 	bl	81060cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105776:	69bb      	ldr	r3, [r7, #24]
 8105778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810577a:	f000 bc88 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810577e:	2300      	movs	r3, #0
 8105780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105782:	f000 bc84 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105786:	4b2b      	ldr	r3, [pc, #172]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105788:	681b      	ldr	r3, [r3, #0]
 810578a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810578e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105792:	d108      	bne.n	81057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105794:	f107 030c 	add.w	r3, r7, #12
 8105798:	4618      	mov	r0, r3
 810579a:	f000 fdeb 	bl	8106374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810579e:	68fb      	ldr	r3, [r7, #12]
 81057a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81057a2:	f000 bc74 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81057a6:	2300      	movs	r3, #0
 81057a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81057aa:	f000 bc70 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81057ae:	4b21      	ldr	r3, [pc, #132]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81057b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81057b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81057b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81057b8:	4b1e      	ldr	r3, [pc, #120]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81057ba:	681b      	ldr	r3, [r3, #0]
 81057bc:	f003 0304 	and.w	r3, r3, #4
 81057c0:	2b04      	cmp	r3, #4
 81057c2:	d10c      	bne.n	81057de <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 81057c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81057c6:	2b00      	cmp	r3, #0
 81057c8:	d109      	bne.n	81057de <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81057ca:	4b1a      	ldr	r3, [pc, #104]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81057cc:	681b      	ldr	r3, [r3, #0]
 81057ce:	08db      	lsrs	r3, r3, #3
 81057d0:	f003 0303 	and.w	r3, r3, #3
 81057d4:	4a18      	ldr	r2, [pc, #96]	@ (8105838 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81057d6:	fa22 f303 	lsr.w	r3, r2, r3
 81057da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81057dc:	e01f      	b.n	810581e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81057de:	4b15      	ldr	r3, [pc, #84]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81057e0:	681b      	ldr	r3, [r3, #0]
 81057e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81057e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81057ea:	d106      	bne.n	81057fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81057ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81057ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81057f2:	d102      	bne.n	81057fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81057f4:	4b11      	ldr	r3, [pc, #68]	@ (810583c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81057f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81057f8:	e011      	b.n	810581e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81057fa:	4b0e      	ldr	r3, [pc, #56]	@ (8105834 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81057fc:	681b      	ldr	r3, [r3, #0]
 81057fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105802:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105806:	d106      	bne.n	8105816 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8105808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810580a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810580e:	d102      	bne.n	8105816 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105810:	4b0b      	ldr	r3, [pc, #44]	@ (8105840 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8105812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105814:	e003      	b.n	810581e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105816:	2300      	movs	r3, #0
 8105818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810581a:	f000 bc38 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810581e:	f000 bc36 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105822:	4b08      	ldr	r3, [pc, #32]	@ (8105844 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8105824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105826:	f000 bc32 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810582a:	2300      	movs	r3, #0
 810582c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810582e:	f000 bc2e 	b.w	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105832:	bf00      	nop
 8105834:	58024400 	.word	0x58024400
 8105838:	03d09000 	.word	0x03d09000
 810583c:	003d0900 	.word	0x003d0900
 8105840:	017d7840 	.word	0x017d7840
 8105844:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8105848:	e9d7 2300 	ldrd	r2, r3, [r7]
 810584c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8105850:	430b      	orrs	r3, r1
 8105852:	f040 809c 	bne.w	810598e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8105856:	4b9e      	ldr	r3, [pc, #632]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810585a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 810585e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8105860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105862:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8105866:	d054      	beq.n	8105912 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8105868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810586a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810586e:	f200 808b 	bhi.w	8105988 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8105872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105874:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105878:	f000 8083 	beq.w	8105982 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 810587c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810587e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105882:	f200 8081 	bhi.w	8105988 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8105886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810588c:	d02f      	beq.n	81058ee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 810588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105890:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105894:	d878      	bhi.n	8105988 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8105896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105898:	2b00      	cmp	r3, #0
 810589a:	d004      	beq.n	81058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 810589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810589e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81058a2:	d012      	beq.n	81058ca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 81058a4:	e070      	b.n	8105988 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81058a6:	4b8a      	ldr	r3, [pc, #552]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81058ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81058b2:	d107      	bne.n	81058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81058b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81058b8:	4618      	mov	r0, r3
 81058ba:	f000 feaf 	bl	810661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81058be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81058c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81058c2:	e3e4      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81058c4:	2300      	movs	r3, #0
 81058c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81058c8:	e3e1      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81058ca:	4b81      	ldr	r3, [pc, #516]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81058cc:	681b      	ldr	r3, [r3, #0]
 81058ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81058d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81058d6:	d107      	bne.n	81058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81058d8:	f107 0318 	add.w	r3, r7, #24
 81058dc:	4618      	mov	r0, r3
 81058de:	f000 fbf5 	bl	81060cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81058e2:	69bb      	ldr	r3, [r7, #24]
 81058e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81058e6:	e3d2      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81058e8:	2300      	movs	r3, #0
 81058ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81058ec:	e3cf      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81058ee:	4b78      	ldr	r3, [pc, #480]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81058f0:	681b      	ldr	r3, [r3, #0]
 81058f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81058f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81058fa:	d107      	bne.n	810590c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81058fc:	f107 030c 	add.w	r3, r7, #12
 8105900:	4618      	mov	r0, r3
 8105902:	f000 fd37 	bl	8106374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105906:	68fb      	ldr	r3, [r7, #12]
 8105908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810590a:	e3c0      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810590c:	2300      	movs	r3, #0
 810590e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105910:	e3bd      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105912:	4b6f      	ldr	r3, [pc, #444]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105916:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810591a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810591c:	4b6c      	ldr	r3, [pc, #432]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810591e:	681b      	ldr	r3, [r3, #0]
 8105920:	f003 0304 	and.w	r3, r3, #4
 8105924:	2b04      	cmp	r3, #4
 8105926:	d10c      	bne.n	8105942 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8105928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810592a:	2b00      	cmp	r3, #0
 810592c:	d109      	bne.n	8105942 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810592e:	4b68      	ldr	r3, [pc, #416]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105930:	681b      	ldr	r3, [r3, #0]
 8105932:	08db      	lsrs	r3, r3, #3
 8105934:	f003 0303 	and.w	r3, r3, #3
 8105938:	4a66      	ldr	r2, [pc, #408]	@ (8105ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810593a:	fa22 f303 	lsr.w	r3, r2, r3
 810593e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105940:	e01e      	b.n	8105980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105942:	4b63      	ldr	r3, [pc, #396]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105944:	681b      	ldr	r3, [r3, #0]
 8105946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810594a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810594e:	d106      	bne.n	810595e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8105950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105952:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105956:	d102      	bne.n	810595e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105958:	4b5f      	ldr	r3, [pc, #380]	@ (8105ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810595a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810595c:	e010      	b.n	8105980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810595e:	4b5c      	ldr	r3, [pc, #368]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105960:	681b      	ldr	r3, [r3, #0]
 8105962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810596a:	d106      	bne.n	810597a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 810596c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810596e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105972:	d102      	bne.n	810597a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105974:	4b59      	ldr	r3, [pc, #356]	@ (8105adc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8105976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105978:	e002      	b.n	8105980 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810597a:	2300      	movs	r3, #0
 810597c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810597e:	e386      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105980:	e385      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105982:	4b57      	ldr	r3, [pc, #348]	@ (8105ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8105984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105986:	e382      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8105988:	2300      	movs	r3, #0
 810598a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810598c:	e37f      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810598e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105992:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8105996:	430b      	orrs	r3, r1
 8105998:	f040 80a7 	bne.w	8105aea <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 810599c:	4b4c      	ldr	r3, [pc, #304]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810599e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81059a0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 81059a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81059a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81059ac:	d055      	beq.n	8105a5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 81059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81059b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81059b4:	f200 8096 	bhi.w	8105ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81059b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81059ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81059be:	f000 8084 	beq.w	8105aca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 81059c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81059c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81059c8:	f200 808c 	bhi.w	8105ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81059ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81059d2:	d030      	beq.n	8105a36 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 81059d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81059d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81059da:	f200 8083 	bhi.w	8105ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81059de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81059e0:	2b00      	cmp	r3, #0
 81059e2:	d004      	beq.n	81059ee <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 81059e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81059e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81059ea:	d012      	beq.n	8105a12 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 81059ec:	e07a      	b.n	8105ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81059ee:	4b38      	ldr	r3, [pc, #224]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81059f0:	681b      	ldr	r3, [r3, #0]
 81059f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81059f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81059fa:	d107      	bne.n	8105a0c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81059fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105a00:	4618      	mov	r0, r3
 8105a02:	f000 fe0b 	bl	810661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105a0a:	e340      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105a0c:	2300      	movs	r3, #0
 8105a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105a10:	e33d      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105a12:	4b2f      	ldr	r3, [pc, #188]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105a14:	681b      	ldr	r3, [r3, #0]
 8105a16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105a1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105a1e:	d107      	bne.n	8105a30 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105a20:	f107 0318 	add.w	r3, r7, #24
 8105a24:	4618      	mov	r0, r3
 8105a26:	f000 fb51 	bl	81060cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105a2a:	69bb      	ldr	r3, [r7, #24]
 8105a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105a2e:	e32e      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105a30:	2300      	movs	r3, #0
 8105a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105a34:	e32b      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105a36:	4b26      	ldr	r3, [pc, #152]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105a38:	681b      	ldr	r3, [r3, #0]
 8105a3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105a42:	d107      	bne.n	8105a54 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105a44:	f107 030c 	add.w	r3, r7, #12
 8105a48:	4618      	mov	r0, r3
 8105a4a:	f000 fc93 	bl	8106374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105a4e:	68fb      	ldr	r3, [r7, #12]
 8105a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105a52:	e31c      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105a54:	2300      	movs	r3, #0
 8105a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105a58:	e319      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105a5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8105a62:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105a64:	4b1a      	ldr	r3, [pc, #104]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105a66:	681b      	ldr	r3, [r3, #0]
 8105a68:	f003 0304 	and.w	r3, r3, #4
 8105a6c:	2b04      	cmp	r3, #4
 8105a6e:	d10c      	bne.n	8105a8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8105a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105a72:	2b00      	cmp	r3, #0
 8105a74:	d109      	bne.n	8105a8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105a76:	4b16      	ldr	r3, [pc, #88]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	08db      	lsrs	r3, r3, #3
 8105a7c:	f003 0303 	and.w	r3, r3, #3
 8105a80:	4a14      	ldr	r2, [pc, #80]	@ (8105ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8105a82:	fa22 f303 	lsr.w	r3, r2, r3
 8105a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105a88:	e01e      	b.n	8105ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105a8a:	4b11      	ldr	r3, [pc, #68]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105a8c:	681b      	ldr	r3, [r3, #0]
 8105a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105a96:	d106      	bne.n	8105aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8105a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105a9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105a9e:	d102      	bne.n	8105aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8105ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8105aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105aa4:	e010      	b.n	8105ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8105ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105aae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105ab2:	d106      	bne.n	8105ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8105ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105aba:	d102      	bne.n	8105ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105abc:	4b07      	ldr	r3, [pc, #28]	@ (8105adc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8105abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105ac0:	e002      	b.n	8105ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105ac2:	2300      	movs	r3, #0
 8105ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8105ac6:	e2e2      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105ac8:	e2e1      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105aca:	4b05      	ldr	r3, [pc, #20]	@ (8105ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8105acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105ace:	e2de      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105ad0:	58024400 	.word	0x58024400
 8105ad4:	03d09000 	.word	0x03d09000
 8105ad8:	003d0900 	.word	0x003d0900
 8105adc:	017d7840 	.word	0x017d7840
 8105ae0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8105ae4:	2300      	movs	r3, #0
 8105ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105ae8:	e2d1      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8105aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105aee:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8105af2:	430b      	orrs	r3, r1
 8105af4:	f040 809c 	bne.w	8105c30 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8105af8:	4b93      	ldr	r3, [pc, #588]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105afc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8105b00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8105b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105b08:	d054      	beq.n	8105bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8105b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105b0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105b10:	f200 808b 	bhi.w	8105c2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105b16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8105b1a:	f000 8083 	beq.w	8105c24 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8105b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105b20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8105b24:	f200 8081 	bhi.w	8105c2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105b2e:	d02f      	beq.n	8105b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8105b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105b36:	d878      	bhi.n	8105c2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105b3a:	2b00      	cmp	r3, #0
 8105b3c:	d004      	beq.n	8105b48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8105b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105b44:	d012      	beq.n	8105b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8105b46:	e070      	b.n	8105c2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105b48:	4b7f      	ldr	r3, [pc, #508]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105b4a:	681b      	ldr	r3, [r3, #0]
 8105b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105b50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105b54:	d107      	bne.n	8105b66 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105b5a:	4618      	mov	r0, r3
 8105b5c:	f000 fd5e 	bl	810661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105b64:	e293      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105b66:	2300      	movs	r3, #0
 8105b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105b6a:	e290      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105b6c:	4b76      	ldr	r3, [pc, #472]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105b6e:	681b      	ldr	r3, [r3, #0]
 8105b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105b74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105b78:	d107      	bne.n	8105b8a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105b7a:	f107 0318 	add.w	r3, r7, #24
 8105b7e:	4618      	mov	r0, r3
 8105b80:	f000 faa4 	bl	81060cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105b84:	69bb      	ldr	r3, [r7, #24]
 8105b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105b88:	e281      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105b8a:	2300      	movs	r3, #0
 8105b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105b8e:	e27e      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105b90:	4b6d      	ldr	r3, [pc, #436]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105b92:	681b      	ldr	r3, [r3, #0]
 8105b94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105b98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105b9c:	d107      	bne.n	8105bae <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105b9e:	f107 030c 	add.w	r3, r7, #12
 8105ba2:	4618      	mov	r0, r3
 8105ba4:	f000 fbe6 	bl	8106374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105ba8:	68fb      	ldr	r3, [r7, #12]
 8105baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105bac:	e26f      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105bae:	2300      	movs	r3, #0
 8105bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105bb2:	e26c      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105bb4:	4b64      	ldr	r3, [pc, #400]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105bb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8105bbc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105bbe:	4b62      	ldr	r3, [pc, #392]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105bc0:	681b      	ldr	r3, [r3, #0]
 8105bc2:	f003 0304 	and.w	r3, r3, #4
 8105bc6:	2b04      	cmp	r3, #4
 8105bc8:	d10c      	bne.n	8105be4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8105bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105bcc:	2b00      	cmp	r3, #0
 8105bce:	d109      	bne.n	8105be4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105bd0:	4b5d      	ldr	r3, [pc, #372]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105bd2:	681b      	ldr	r3, [r3, #0]
 8105bd4:	08db      	lsrs	r3, r3, #3
 8105bd6:	f003 0303 	and.w	r3, r3, #3
 8105bda:	4a5c      	ldr	r2, [pc, #368]	@ (8105d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8105bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8105be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105be2:	e01e      	b.n	8105c22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105be4:	4b58      	ldr	r3, [pc, #352]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105be6:	681b      	ldr	r3, [r3, #0]
 8105be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105bec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105bf0:	d106      	bne.n	8105c00 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8105bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105bf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105bf8:	d102      	bne.n	8105c00 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105bfa:	4b55      	ldr	r3, [pc, #340]	@ (8105d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8105bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105bfe:	e010      	b.n	8105c22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105c00:	4b51      	ldr	r3, [pc, #324]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105c02:	681b      	ldr	r3, [r3, #0]
 8105c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105c08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105c0c:	d106      	bne.n	8105c1c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8105c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105c14:	d102      	bne.n	8105c1c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105c16:	4b4f      	ldr	r3, [pc, #316]	@ (8105d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8105c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105c1a:	e002      	b.n	8105c22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105c1c:	2300      	movs	r3, #0
 8105c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8105c20:	e235      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105c22:	e234      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105c24:	4b4c      	ldr	r3, [pc, #304]	@ (8105d58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8105c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105c28:	e231      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105c2a:	2300      	movs	r3, #0
 8105c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105c2e:	e22e      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8105c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105c34:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8105c38:	430b      	orrs	r3, r1
 8105c3a:	f040 808f 	bne.w	8105d5c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8105c3e:	4b42      	ldr	r3, [pc, #264]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105c42:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8105c46:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8105c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105c4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8105c4e:	d06b      	beq.n	8105d28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8105c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105c52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8105c56:	d874      	bhi.n	8105d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105c5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105c5e:	d056      	beq.n	8105d0e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8105c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105c62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105c66:	d86c      	bhi.n	8105d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105c6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105c6e:	d03b      	beq.n	8105ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8105c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105c72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105c76:	d864      	bhi.n	8105d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105c7e:	d021      	beq.n	8105cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8105c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105c82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105c86:	d85c      	bhi.n	8105d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105c8a:	2b00      	cmp	r3, #0
 8105c8c:	d004      	beq.n	8105c98 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8105c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105c94:	d004      	beq.n	8105ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8105c96:	e054      	b.n	8105d42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8105c98:	f7fe fa0c 	bl	81040b4 <HAL_RCC_GetPCLK1Freq>
 8105c9c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105c9e:	e1f6      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105ca0:	4b29      	ldr	r3, [pc, #164]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105ca2:	681b      	ldr	r3, [r3, #0]
 8105ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105ca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105cac:	d107      	bne.n	8105cbe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105cae:	f107 0318 	add.w	r3, r7, #24
 8105cb2:	4618      	mov	r0, r3
 8105cb4:	f000 fa0a 	bl	81060cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105cb8:	69fb      	ldr	r3, [r7, #28]
 8105cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105cbc:	e1e7      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105cbe:	2300      	movs	r3, #0
 8105cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105cc2:	e1e4      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105cc4:	4b20      	ldr	r3, [pc, #128]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105cc6:	681b      	ldr	r3, [r3, #0]
 8105cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105ccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105cd0:	d107      	bne.n	8105ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105cd2:	f107 030c 	add.w	r3, r7, #12
 8105cd6:	4618      	mov	r0, r3
 8105cd8:	f000 fb4c 	bl	8106374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105cdc:	693b      	ldr	r3, [r7, #16]
 8105cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105ce0:	e1d5      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105ce2:	2300      	movs	r3, #0
 8105ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105ce6:	e1d2      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105ce8:	4b17      	ldr	r3, [pc, #92]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105cea:	681b      	ldr	r3, [r3, #0]
 8105cec:	f003 0304 	and.w	r3, r3, #4
 8105cf0:	2b04      	cmp	r3, #4
 8105cf2:	d109      	bne.n	8105d08 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105cf4:	4b14      	ldr	r3, [pc, #80]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105cf6:	681b      	ldr	r3, [r3, #0]
 8105cf8:	08db      	lsrs	r3, r3, #3
 8105cfa:	f003 0303 	and.w	r3, r3, #3
 8105cfe:	4a13      	ldr	r2, [pc, #76]	@ (8105d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8105d00:	fa22 f303 	lsr.w	r3, r2, r3
 8105d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105d06:	e1c2      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105d08:	2300      	movs	r3, #0
 8105d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105d0c:	e1bf      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8105d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105d10:	681b      	ldr	r3, [r3, #0]
 8105d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105d1a:	d102      	bne.n	8105d22 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8105d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8105d50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8105d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105d20:	e1b5      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105d22:	2300      	movs	r3, #0
 8105d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105d26:	e1b2      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105d28:	4b07      	ldr	r3, [pc, #28]	@ (8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105d2a:	681b      	ldr	r3, [r3, #0]
 8105d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105d34:	d102      	bne.n	8105d3c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8105d36:	4b07      	ldr	r3, [pc, #28]	@ (8105d54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8105d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105d3a:	e1a8      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105d3c:	2300      	movs	r3, #0
 8105d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105d40:	e1a5      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105d42:	2300      	movs	r3, #0
 8105d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105d46:	e1a2      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105d48:	58024400 	.word	0x58024400
 8105d4c:	03d09000 	.word	0x03d09000
 8105d50:	003d0900 	.word	0x003d0900
 8105d54:	017d7840 	.word	0x017d7840
 8105d58:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8105d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105d60:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8105d64:	430b      	orrs	r3, r1
 8105d66:	d173      	bne.n	8105e50 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8105d68:	4b9c      	ldr	r3, [pc, #624]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105d6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105d70:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8105d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105d78:	d02f      	beq.n	8105dda <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8105d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105d7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105d80:	d863      	bhi.n	8105e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8105d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105d84:	2b00      	cmp	r3, #0
 8105d86:	d004      	beq.n	8105d92 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8105d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105d8e:	d012      	beq.n	8105db6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8105d90:	e05b      	b.n	8105e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105d92:	4b92      	ldr	r3, [pc, #584]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105d94:	681b      	ldr	r3, [r3, #0]
 8105d96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105d9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105d9e:	d107      	bne.n	8105db0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105da0:	f107 0318 	add.w	r3, r7, #24
 8105da4:	4618      	mov	r0, r3
 8105da6:	f000 f991 	bl	81060cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105daa:	69bb      	ldr	r3, [r7, #24]
 8105dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105dae:	e16e      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105db0:	2300      	movs	r3, #0
 8105db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105db4:	e16b      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105db6:	4b89      	ldr	r3, [pc, #548]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105db8:	681b      	ldr	r3, [r3, #0]
 8105dba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105dbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105dc2:	d107      	bne.n	8105dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105dc4:	f107 030c 	add.w	r3, r7, #12
 8105dc8:	4618      	mov	r0, r3
 8105dca:	f000 fad3 	bl	8106374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8105dce:	697b      	ldr	r3, [r7, #20]
 8105dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105dd2:	e15c      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105dd4:	2300      	movs	r3, #0
 8105dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105dd8:	e159      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105dda:	4b80      	ldr	r3, [pc, #512]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105dde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8105de2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105de4:	4b7d      	ldr	r3, [pc, #500]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105de6:	681b      	ldr	r3, [r3, #0]
 8105de8:	f003 0304 	and.w	r3, r3, #4
 8105dec:	2b04      	cmp	r3, #4
 8105dee:	d10c      	bne.n	8105e0a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8105df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105df2:	2b00      	cmp	r3, #0
 8105df4:	d109      	bne.n	8105e0a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105df6:	4b79      	ldr	r3, [pc, #484]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105df8:	681b      	ldr	r3, [r3, #0]
 8105dfa:	08db      	lsrs	r3, r3, #3
 8105dfc:	f003 0303 	and.w	r3, r3, #3
 8105e00:	4a77      	ldr	r2, [pc, #476]	@ (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8105e02:	fa22 f303 	lsr.w	r3, r2, r3
 8105e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105e08:	e01e      	b.n	8105e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105e0a:	4b74      	ldr	r3, [pc, #464]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105e0c:	681b      	ldr	r3, [r3, #0]
 8105e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105e16:	d106      	bne.n	8105e26 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8105e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105e1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105e1e:	d102      	bne.n	8105e26 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105e20:	4b70      	ldr	r3, [pc, #448]	@ (8105fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8105e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105e24:	e010      	b.n	8105e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105e26:	4b6d      	ldr	r3, [pc, #436]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105e28:	681b      	ldr	r3, [r3, #0]
 8105e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105e2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105e32:	d106      	bne.n	8105e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8105e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105e3a:	d102      	bne.n	8105e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105e3c:	4b6a      	ldr	r3, [pc, #424]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8105e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105e40:	e002      	b.n	8105e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105e42:	2300      	movs	r3, #0
 8105e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8105e46:	e122      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105e48:	e121      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8105e4a:	2300      	movs	r3, #0
 8105e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105e4e:	e11e      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8105e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105e54:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8105e58:	430b      	orrs	r3, r1
 8105e5a:	d133      	bne.n	8105ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8105e5c:	4b5f      	ldr	r3, [pc, #380]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105e64:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8105e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105e68:	2b00      	cmp	r3, #0
 8105e6a:	d004      	beq.n	8105e76 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8105e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105e72:	d012      	beq.n	8105e9a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8105e74:	e023      	b.n	8105ebe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105e76:	4b59      	ldr	r3, [pc, #356]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105e78:	681b      	ldr	r3, [r3, #0]
 8105e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105e7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105e82:	d107      	bne.n	8105e94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105e88:	4618      	mov	r0, r3
 8105e8a:	f000 fbc7 	bl	810661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105e92:	e0fc      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105e94:	2300      	movs	r3, #0
 8105e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105e98:	e0f9      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105e9a:	4b50      	ldr	r3, [pc, #320]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105e9c:	681b      	ldr	r3, [r3, #0]
 8105e9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105ea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105ea6:	d107      	bne.n	8105eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105ea8:	f107 0318 	add.w	r3, r7, #24
 8105eac:	4618      	mov	r0, r3
 8105eae:	f000 f90d 	bl	81060cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8105eb2:	6a3b      	ldr	r3, [r7, #32]
 8105eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105eb6:	e0ea      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105eb8:	2300      	movs	r3, #0
 8105eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105ebc:	e0e7      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8105ebe:	2300      	movs	r3, #0
 8105ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105ec2:	e0e4      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8105ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105ec8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8105ecc:	430b      	orrs	r3, r1
 8105ece:	f040 808d 	bne.w	8105fec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8105ed2:	4b42      	ldr	r3, [pc, #264]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105ed6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8105eda:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8105edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105ee2:	d06b      	beq.n	8105fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8105ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105eea:	d874      	bhi.n	8105fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105ef2:	d056      	beq.n	8105fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8105ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105efa:	d86c      	bhi.n	8105fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105efe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105f02:	d03b      	beq.n	8105f7c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8105f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105f06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105f0a:	d864      	bhi.n	8105fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105f12:	d021      	beq.n	8105f58 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8105f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105f16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105f1a:	d85c      	bhi.n	8105fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105f1e:	2b00      	cmp	r3, #0
 8105f20:	d004      	beq.n	8105f2c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8105f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105f24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105f28:	d004      	beq.n	8105f34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8105f2a:	e054      	b.n	8105fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8105f2c:	f000 f8b8 	bl	81060a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8105f30:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105f32:	e0ac      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105f34:	4b29      	ldr	r3, [pc, #164]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105f36:	681b      	ldr	r3, [r3, #0]
 8105f38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105f3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105f40:	d107      	bne.n	8105f52 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105f42:	f107 0318 	add.w	r3, r7, #24
 8105f46:	4618      	mov	r0, r3
 8105f48:	f000 f8c0 	bl	81060cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105f4c:	69fb      	ldr	r3, [r7, #28]
 8105f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105f50:	e09d      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105f52:	2300      	movs	r3, #0
 8105f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105f56:	e09a      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105f58:	4b20      	ldr	r3, [pc, #128]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105f5a:	681b      	ldr	r3, [r3, #0]
 8105f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105f64:	d107      	bne.n	8105f76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105f66:	f107 030c 	add.w	r3, r7, #12
 8105f6a:	4618      	mov	r0, r3
 8105f6c:	f000 fa02 	bl	8106374 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105f70:	693b      	ldr	r3, [r7, #16]
 8105f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105f74:	e08b      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105f76:	2300      	movs	r3, #0
 8105f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105f7a:	e088      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105f7c:	4b17      	ldr	r3, [pc, #92]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105f7e:	681b      	ldr	r3, [r3, #0]
 8105f80:	f003 0304 	and.w	r3, r3, #4
 8105f84:	2b04      	cmp	r3, #4
 8105f86:	d109      	bne.n	8105f9c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105f88:	4b14      	ldr	r3, [pc, #80]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105f8a:	681b      	ldr	r3, [r3, #0]
 8105f8c:	08db      	lsrs	r3, r3, #3
 8105f8e:	f003 0303 	and.w	r3, r3, #3
 8105f92:	4a13      	ldr	r2, [pc, #76]	@ (8105fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8105f94:	fa22 f303 	lsr.w	r3, r2, r3
 8105f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105f9a:	e078      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105f9c:	2300      	movs	r3, #0
 8105f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105fa0:	e075      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8105fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105fa4:	681b      	ldr	r3, [r3, #0]
 8105fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105fae:	d102      	bne.n	8105fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8105fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8105fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8105fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105fb4:	e06b      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105fb6:	2300      	movs	r3, #0
 8105fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105fba:	e068      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105fbc:	4b07      	ldr	r3, [pc, #28]	@ (8105fdc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105fbe:	681b      	ldr	r3, [r3, #0]
 8105fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105fc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105fc8:	d102      	bne.n	8105fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8105fca:	4b07      	ldr	r3, [pc, #28]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8105fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105fce:	e05e      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105fd0:	2300      	movs	r3, #0
 8105fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105fd4:	e05b      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8105fd6:	2300      	movs	r3, #0
 8105fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105fda:	e058      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105fdc:	58024400 	.word	0x58024400
 8105fe0:	03d09000 	.word	0x03d09000
 8105fe4:	003d0900 	.word	0x003d0900
 8105fe8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8105fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105ff0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8105ff4:	430b      	orrs	r3, r1
 8105ff6:	d148      	bne.n	810608a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8105ff8:	4b27      	ldr	r3, [pc, #156]	@ (8106098 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105ffc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106000:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8106002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106008:	d02a      	beq.n	8106060 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810600a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810600c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106010:	d838      	bhi.n	8106084 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8106012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106014:	2b00      	cmp	r3, #0
 8106016:	d004      	beq.n	8106022 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8106018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810601a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810601e:	d00d      	beq.n	810603c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8106020:	e030      	b.n	8106084 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106022:	4b1d      	ldr	r3, [pc, #116]	@ (8106098 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106024:	681b      	ldr	r3, [r3, #0]
 8106026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810602a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810602e:	d102      	bne.n	8106036 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8106030:	4b1a      	ldr	r3, [pc, #104]	@ (810609c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8106032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106034:	e02b      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106036:	2300      	movs	r3, #0
 8106038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810603a:	e028      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810603c:	4b16      	ldr	r3, [pc, #88]	@ (8106098 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810603e:	681b      	ldr	r3, [r3, #0]
 8106040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106044:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106048:	d107      	bne.n	810605a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810604a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810604e:	4618      	mov	r0, r3
 8106050:	f000 fae4 	bl	810661c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106058:	e019      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810605a:	2300      	movs	r3, #0
 810605c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810605e:	e016      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106060:	4b0d      	ldr	r3, [pc, #52]	@ (8106098 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106062:	681b      	ldr	r3, [r3, #0]
 8106064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106068:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810606c:	d107      	bne.n	810607e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810606e:	f107 0318 	add.w	r3, r7, #24
 8106072:	4618      	mov	r0, r3
 8106074:	f000 f82a 	bl	81060cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106078:	69fb      	ldr	r3, [r7, #28]
 810607a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810607c:	e007      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810607e:	2300      	movs	r3, #0
 8106080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106082:	e004      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106084:	2300      	movs	r3, #0
 8106086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106088:	e001      	b.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810608a:	2300      	movs	r3, #0
 810608c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 810608e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8106090:	4618      	mov	r0, r3
 8106092:	3740      	adds	r7, #64	@ 0x40
 8106094:	46bd      	mov	sp, r7
 8106096:	bd80      	pop	{r7, pc}
 8106098:	58024400 	.word	0x58024400
 810609c:	017d7840 	.word	0x017d7840

081060a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81060a0:	b580      	push	{r7, lr}
 81060a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81060a4:	f7fd ffd4 	bl	8104050 <HAL_RCC_GetHCLKFreq>
 81060a8:	4602      	mov	r2, r0
 81060aa:	4b06      	ldr	r3, [pc, #24]	@ (81060c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81060ac:	6a1b      	ldr	r3, [r3, #32]
 81060ae:	091b      	lsrs	r3, r3, #4
 81060b0:	f003 0307 	and.w	r3, r3, #7
 81060b4:	4904      	ldr	r1, [pc, #16]	@ (81060c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81060b6:	5ccb      	ldrb	r3, [r1, r3]
 81060b8:	f003 031f 	and.w	r3, r3, #31
 81060bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81060c0:	4618      	mov	r0, r3
 81060c2:	bd80      	pop	{r7, pc}
 81060c4:	58024400 	.word	0x58024400
 81060c8:	0810b8e0 	.word	0x0810b8e0

081060cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81060cc:	b480      	push	{r7}
 81060ce:	b089      	sub	sp, #36	@ 0x24
 81060d0:	af00      	add	r7, sp, #0
 81060d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81060d4:	4ba1      	ldr	r3, [pc, #644]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81060d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81060d8:	f003 0303 	and.w	r3, r3, #3
 81060dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81060de:	4b9f      	ldr	r3, [pc, #636]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81060e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81060e2:	0b1b      	lsrs	r3, r3, #12
 81060e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81060e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81060ea:	4b9c      	ldr	r3, [pc, #624]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81060ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81060ee:	091b      	lsrs	r3, r3, #4
 81060f0:	f003 0301 	and.w	r3, r3, #1
 81060f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81060f6:	4b99      	ldr	r3, [pc, #612]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81060f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81060fa:	08db      	lsrs	r3, r3, #3
 81060fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106100:	693a      	ldr	r2, [r7, #16]
 8106102:	fb02 f303 	mul.w	r3, r2, r3
 8106106:	ee07 3a90 	vmov	s15, r3
 810610a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810610e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8106112:	697b      	ldr	r3, [r7, #20]
 8106114:	2b00      	cmp	r3, #0
 8106116:	f000 8111 	beq.w	810633c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810611a:	69bb      	ldr	r3, [r7, #24]
 810611c:	2b02      	cmp	r3, #2
 810611e:	f000 8083 	beq.w	8106228 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8106122:	69bb      	ldr	r3, [r7, #24]
 8106124:	2b02      	cmp	r3, #2
 8106126:	f200 80a1 	bhi.w	810626c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810612a:	69bb      	ldr	r3, [r7, #24]
 810612c:	2b00      	cmp	r3, #0
 810612e:	d003      	beq.n	8106138 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106130:	69bb      	ldr	r3, [r7, #24]
 8106132:	2b01      	cmp	r3, #1
 8106134:	d056      	beq.n	81061e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8106136:	e099      	b.n	810626c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106138:	4b88      	ldr	r3, [pc, #544]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810613a:	681b      	ldr	r3, [r3, #0]
 810613c:	f003 0320 	and.w	r3, r3, #32
 8106140:	2b00      	cmp	r3, #0
 8106142:	d02d      	beq.n	81061a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106144:	4b85      	ldr	r3, [pc, #532]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106146:	681b      	ldr	r3, [r3, #0]
 8106148:	08db      	lsrs	r3, r3, #3
 810614a:	f003 0303 	and.w	r3, r3, #3
 810614e:	4a84      	ldr	r2, [pc, #528]	@ (8106360 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8106150:	fa22 f303 	lsr.w	r3, r2, r3
 8106154:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106156:	68bb      	ldr	r3, [r7, #8]
 8106158:	ee07 3a90 	vmov	s15, r3
 810615c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106160:	697b      	ldr	r3, [r7, #20]
 8106162:	ee07 3a90 	vmov	s15, r3
 8106166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810616a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810616e:	4b7b      	ldr	r3, [pc, #492]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106176:	ee07 3a90 	vmov	s15, r3
 810617a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810617e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106182:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8106364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810618a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810618e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106196:	ee67 7a27 	vmul.f32	s15, s14, s15
 810619a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810619e:	e087      	b.n	81062b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81061a0:	697b      	ldr	r3, [r7, #20]
 81061a2:	ee07 3a90 	vmov	s15, r3
 81061a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8106368 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81061ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81061b2:	4b6a      	ldr	r3, [pc, #424]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81061b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81061b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81061ba:	ee07 3a90 	vmov	s15, r3
 81061be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81061c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81061c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8106364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81061ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81061ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81061d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81061d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81061da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81061de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81061e2:	e065      	b.n	81062b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81061e4:	697b      	ldr	r3, [r7, #20]
 81061e6:	ee07 3a90 	vmov	s15, r3
 81061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810636c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81061f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81061f6:	4b59      	ldr	r3, [pc, #356]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81061f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81061fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81061fe:	ee07 3a90 	vmov	s15, r3
 8106202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106206:	ed97 6a03 	vldr	s12, [r7, #12]
 810620a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8106364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810620e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810621a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810621e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106226:	e043      	b.n	81062b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106228:	697b      	ldr	r3, [r7, #20]
 810622a:	ee07 3a90 	vmov	s15, r3
 810622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106232:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8106370 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8106236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810623a:	4b48      	ldr	r3, [pc, #288]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810623c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810623e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106242:	ee07 3a90 	vmov	s15, r3
 8106246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810624a:	ed97 6a03 	vldr	s12, [r7, #12]
 810624e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8106364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810625a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810625e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810626a:	e021      	b.n	81062b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810626c:	697b      	ldr	r3, [r7, #20]
 810626e:	ee07 3a90 	vmov	s15, r3
 8106272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106276:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810636c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810627a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810627e:	4b37      	ldr	r3, [pc, #220]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106286:	ee07 3a90 	vmov	s15, r3
 810628a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810628e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106292:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8106364 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810629a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810629e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81062a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81062a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81062aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81062ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81062b0:	4b2a      	ldr	r3, [pc, #168]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81062b4:	0a5b      	lsrs	r3, r3, #9
 81062b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81062ba:	ee07 3a90 	vmov	s15, r3
 81062be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81062c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81062ca:	edd7 6a07 	vldr	s13, [r7, #28]
 81062ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81062d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81062d6:	ee17 2a90 	vmov	r2, s15
 81062da:	687b      	ldr	r3, [r7, #4]
 81062dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81062de:	4b1f      	ldr	r3, [pc, #124]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81062e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81062e2:	0c1b      	lsrs	r3, r3, #16
 81062e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81062e8:	ee07 3a90 	vmov	s15, r3
 81062ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81062f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81062f8:	edd7 6a07 	vldr	s13, [r7, #28]
 81062fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106304:	ee17 2a90 	vmov	r2, s15
 8106308:	687b      	ldr	r3, [r7, #4]
 810630a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810630c:	4b13      	ldr	r3, [pc, #76]	@ (810635c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810630e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106310:	0e1b      	lsrs	r3, r3, #24
 8106312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106316:	ee07 3a90 	vmov	s15, r3
 810631a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810631e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106322:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106326:	edd7 6a07 	vldr	s13, [r7, #28]
 810632a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810632e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106332:	ee17 2a90 	vmov	r2, s15
 8106336:	687b      	ldr	r3, [r7, #4]
 8106338:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810633a:	e008      	b.n	810634e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810633c:	687b      	ldr	r3, [r7, #4]
 810633e:	2200      	movs	r2, #0
 8106340:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	2200      	movs	r2, #0
 8106346:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8106348:	687b      	ldr	r3, [r7, #4]
 810634a:	2200      	movs	r2, #0
 810634c:	609a      	str	r2, [r3, #8]
}
 810634e:	bf00      	nop
 8106350:	3724      	adds	r7, #36	@ 0x24
 8106352:	46bd      	mov	sp, r7
 8106354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106358:	4770      	bx	lr
 810635a:	bf00      	nop
 810635c:	58024400 	.word	0x58024400
 8106360:	03d09000 	.word	0x03d09000
 8106364:	46000000 	.word	0x46000000
 8106368:	4c742400 	.word	0x4c742400
 810636c:	4a742400 	.word	0x4a742400
 8106370:	4bbebc20 	.word	0x4bbebc20

08106374 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8106374:	b480      	push	{r7}
 8106376:	b089      	sub	sp, #36	@ 0x24
 8106378:	af00      	add	r7, sp, #0
 810637a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810637c:	4ba1      	ldr	r3, [pc, #644]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810637e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106380:	f003 0303 	and.w	r3, r3, #3
 8106384:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8106386:	4b9f      	ldr	r3, [pc, #636]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810638a:	0d1b      	lsrs	r3, r3, #20
 810638c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106390:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8106392:	4b9c      	ldr	r3, [pc, #624]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106396:	0a1b      	lsrs	r3, r3, #8
 8106398:	f003 0301 	and.w	r3, r3, #1
 810639c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810639e:	4b99      	ldr	r3, [pc, #612]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81063a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81063a2:	08db      	lsrs	r3, r3, #3
 81063a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81063a8:	693a      	ldr	r2, [r7, #16]
 81063aa:	fb02 f303 	mul.w	r3, r2, r3
 81063ae:	ee07 3a90 	vmov	s15, r3
 81063b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81063ba:	697b      	ldr	r3, [r7, #20]
 81063bc:	2b00      	cmp	r3, #0
 81063be:	f000 8111 	beq.w	81065e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81063c2:	69bb      	ldr	r3, [r7, #24]
 81063c4:	2b02      	cmp	r3, #2
 81063c6:	f000 8083 	beq.w	81064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81063ca:	69bb      	ldr	r3, [r7, #24]
 81063cc:	2b02      	cmp	r3, #2
 81063ce:	f200 80a1 	bhi.w	8106514 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81063d2:	69bb      	ldr	r3, [r7, #24]
 81063d4:	2b00      	cmp	r3, #0
 81063d6:	d003      	beq.n	81063e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81063d8:	69bb      	ldr	r3, [r7, #24]
 81063da:	2b01      	cmp	r3, #1
 81063dc:	d056      	beq.n	810648c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81063de:	e099      	b.n	8106514 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81063e0:	4b88      	ldr	r3, [pc, #544]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81063e2:	681b      	ldr	r3, [r3, #0]
 81063e4:	f003 0320 	and.w	r3, r3, #32
 81063e8:	2b00      	cmp	r3, #0
 81063ea:	d02d      	beq.n	8106448 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81063ec:	4b85      	ldr	r3, [pc, #532]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81063ee:	681b      	ldr	r3, [r3, #0]
 81063f0:	08db      	lsrs	r3, r3, #3
 81063f2:	f003 0303 	and.w	r3, r3, #3
 81063f6:	4a84      	ldr	r2, [pc, #528]	@ (8106608 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81063f8:	fa22 f303 	lsr.w	r3, r2, r3
 81063fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81063fe:	68bb      	ldr	r3, [r7, #8]
 8106400:	ee07 3a90 	vmov	s15, r3
 8106404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106408:	697b      	ldr	r3, [r7, #20]
 810640a:	ee07 3a90 	vmov	s15, r3
 810640e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106416:	4b7b      	ldr	r3, [pc, #492]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810641a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810641e:	ee07 3a90 	vmov	s15, r3
 8106422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106426:	ed97 6a03 	vldr	s12, [r7, #12]
 810642a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810660c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810642e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810643a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810643e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106442:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8106446:	e087      	b.n	8106558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106448:	697b      	ldr	r3, [r7, #20]
 810644a:	ee07 3a90 	vmov	s15, r3
 810644e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106452:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8106610 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8106456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810645a:	4b6a      	ldr	r3, [pc, #424]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810645e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106462:	ee07 3a90 	vmov	s15, r3
 8106466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810646a:	ed97 6a03 	vldr	s12, [r7, #12]
 810646e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810660c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810647a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810647e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810648a:	e065      	b.n	8106558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810648c:	697b      	ldr	r3, [r7, #20]
 810648e:	ee07 3a90 	vmov	s15, r3
 8106492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106496:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8106614 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810649a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810649e:	4b59      	ldr	r3, [pc, #356]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81064a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81064a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064a6:	ee07 3a90 	vmov	s15, r3
 81064aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81064b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810660c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81064b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81064c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81064ce:	e043      	b.n	8106558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81064d0:	697b      	ldr	r3, [r7, #20]
 81064d2:	ee07 3a90 	vmov	s15, r3
 81064d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8106618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81064de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064e2:	4b48      	ldr	r3, [pc, #288]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81064e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81064e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064ea:	ee07 3a90 	vmov	s15, r3
 81064ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064f2:	ed97 6a03 	vldr	s12, [r7, #12]
 81064f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810660c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81064fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810650a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810650e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106512:	e021      	b.n	8106558 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106514:	697b      	ldr	r3, [r7, #20]
 8106516:	ee07 3a90 	vmov	s15, r3
 810651a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810651e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8106614 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106526:	4b37      	ldr	r3, [pc, #220]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810652a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810652e:	ee07 3a90 	vmov	s15, r3
 8106532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106536:	ed97 6a03 	vldr	s12, [r7, #12]
 810653a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810660c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810653e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810654a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810654e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106556:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8106558:	4b2a      	ldr	r3, [pc, #168]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810655a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810655c:	0a5b      	lsrs	r3, r3, #9
 810655e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106562:	ee07 3a90 	vmov	s15, r3
 8106566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810656a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810656e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106572:	edd7 6a07 	vldr	s13, [r7, #28]
 8106576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810657a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810657e:	ee17 2a90 	vmov	r2, s15
 8106582:	687b      	ldr	r3, [r7, #4]
 8106584:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8106586:	4b1f      	ldr	r3, [pc, #124]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810658a:	0c1b      	lsrs	r3, r3, #16
 810658c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106590:	ee07 3a90 	vmov	s15, r3
 8106594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106598:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810659c:	ee37 7a87 	vadd.f32	s14, s15, s14
 81065a0:	edd7 6a07 	vldr	s13, [r7, #28]
 81065a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81065a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81065ac:	ee17 2a90 	vmov	r2, s15
 81065b0:	687b      	ldr	r3, [r7, #4]
 81065b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81065b4:	4b13      	ldr	r3, [pc, #76]	@ (8106604 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81065b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81065b8:	0e1b      	lsrs	r3, r3, #24
 81065ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81065be:	ee07 3a90 	vmov	s15, r3
 81065c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81065ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 81065ce:	edd7 6a07 	vldr	s13, [r7, #28]
 81065d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81065d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81065da:	ee17 2a90 	vmov	r2, s15
 81065de:	687b      	ldr	r3, [r7, #4]
 81065e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81065e2:	e008      	b.n	81065f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81065e4:	687b      	ldr	r3, [r7, #4]
 81065e6:	2200      	movs	r2, #0
 81065e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81065ea:	687b      	ldr	r3, [r7, #4]
 81065ec:	2200      	movs	r2, #0
 81065ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81065f0:	687b      	ldr	r3, [r7, #4]
 81065f2:	2200      	movs	r2, #0
 81065f4:	609a      	str	r2, [r3, #8]
}
 81065f6:	bf00      	nop
 81065f8:	3724      	adds	r7, #36	@ 0x24
 81065fa:	46bd      	mov	sp, r7
 81065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106600:	4770      	bx	lr
 8106602:	bf00      	nop
 8106604:	58024400 	.word	0x58024400
 8106608:	03d09000 	.word	0x03d09000
 810660c:	46000000 	.word	0x46000000
 8106610:	4c742400 	.word	0x4c742400
 8106614:	4a742400 	.word	0x4a742400
 8106618:	4bbebc20 	.word	0x4bbebc20

0810661c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810661c:	b480      	push	{r7}
 810661e:	b089      	sub	sp, #36	@ 0x24
 8106620:	af00      	add	r7, sp, #0
 8106622:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106624:	4ba0      	ldr	r3, [pc, #640]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106628:	f003 0303 	and.w	r3, r3, #3
 810662c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810662e:	4b9e      	ldr	r3, [pc, #632]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106632:	091b      	lsrs	r3, r3, #4
 8106634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106638:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810663a:	4b9b      	ldr	r3, [pc, #620]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810663c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810663e:	f003 0301 	and.w	r3, r3, #1
 8106642:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8106644:	4b98      	ldr	r3, [pc, #608]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106648:	08db      	lsrs	r3, r3, #3
 810664a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810664e:	693a      	ldr	r2, [r7, #16]
 8106650:	fb02 f303 	mul.w	r3, r2, r3
 8106654:	ee07 3a90 	vmov	s15, r3
 8106658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810665c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8106660:	697b      	ldr	r3, [r7, #20]
 8106662:	2b00      	cmp	r3, #0
 8106664:	f000 8111 	beq.w	810688a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8106668:	69bb      	ldr	r3, [r7, #24]
 810666a:	2b02      	cmp	r3, #2
 810666c:	f000 8083 	beq.w	8106776 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8106670:	69bb      	ldr	r3, [r7, #24]
 8106672:	2b02      	cmp	r3, #2
 8106674:	f200 80a1 	bhi.w	81067ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8106678:	69bb      	ldr	r3, [r7, #24]
 810667a:	2b00      	cmp	r3, #0
 810667c:	d003      	beq.n	8106686 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810667e:	69bb      	ldr	r3, [r7, #24]
 8106680:	2b01      	cmp	r3, #1
 8106682:	d056      	beq.n	8106732 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8106684:	e099      	b.n	81067ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106686:	4b88      	ldr	r3, [pc, #544]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106688:	681b      	ldr	r3, [r3, #0]
 810668a:	f003 0320 	and.w	r3, r3, #32
 810668e:	2b00      	cmp	r3, #0
 8106690:	d02d      	beq.n	81066ee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106692:	4b85      	ldr	r3, [pc, #532]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106694:	681b      	ldr	r3, [r3, #0]
 8106696:	08db      	lsrs	r3, r3, #3
 8106698:	f003 0303 	and.w	r3, r3, #3
 810669c:	4a83      	ldr	r2, [pc, #524]	@ (81068ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810669e:	fa22 f303 	lsr.w	r3, r2, r3
 81066a2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81066a4:	68bb      	ldr	r3, [r7, #8]
 81066a6:	ee07 3a90 	vmov	s15, r3
 81066aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81066ae:	697b      	ldr	r3, [r7, #20]
 81066b0:	ee07 3a90 	vmov	s15, r3
 81066b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81066b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81066bc:	4b7a      	ldr	r3, [pc, #488]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81066be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81066c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81066c4:	ee07 3a90 	vmov	s15, r3
 81066c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81066cc:	ed97 6a03 	vldr	s12, [r7, #12]
 81066d0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 81068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81066d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81066d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81066dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81066e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81066e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81066e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81066ec:	e087      	b.n	81067fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81066ee:	697b      	ldr	r3, [r7, #20]
 81066f0:	ee07 3a90 	vmov	s15, r3
 81066f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81066f8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 81068b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81066fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106700:	4b69      	ldr	r3, [pc, #420]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106708:	ee07 3a90 	vmov	s15, r3
 810670c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106710:	ed97 6a03 	vldr	s12, [r7, #12]
 8106714:	eddf 5a66 	vldr	s11, [pc, #408]	@ 81068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810671c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106720:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106728:	ee67 7a27 	vmul.f32	s15, s14, s15
 810672c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106730:	e065      	b.n	81067fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106732:	697b      	ldr	r3, [r7, #20]
 8106734:	ee07 3a90 	vmov	s15, r3
 8106738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810673c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 81068b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8106740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106744:	4b58      	ldr	r3, [pc, #352]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810674c:	ee07 3a90 	vmov	s15, r3
 8106750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106754:	ed97 6a03 	vldr	s12, [r7, #12]
 8106758:	eddf 5a55 	vldr	s11, [pc, #340]	@ 81068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810675c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106764:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810676c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106770:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106774:	e043      	b.n	81067fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106776:	697b      	ldr	r3, [r7, #20]
 8106778:	ee07 3a90 	vmov	s15, r3
 810677c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106780:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 81068bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8106784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106788:	4b47      	ldr	r3, [pc, #284]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810678a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810678c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106790:	ee07 3a90 	vmov	s15, r3
 8106794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106798:	ed97 6a03 	vldr	s12, [r7, #12]
 810679c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 81068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81067a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81067a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81067a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81067ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81067b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81067b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81067b8:	e021      	b.n	81067fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81067ba:	697b      	ldr	r3, [r7, #20]
 81067bc:	ee07 3a90 	vmov	s15, r3
 81067c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067c4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 81068b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81067c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067cc:	4b36      	ldr	r3, [pc, #216]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81067ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81067d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81067d4:	ee07 3a90 	vmov	s15, r3
 81067d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81067dc:	ed97 6a03 	vldr	s12, [r7, #12]
 81067e0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 81068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81067e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81067e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81067ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81067f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81067f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81067f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81067fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81067fe:	4b2a      	ldr	r3, [pc, #168]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106802:	0a5b      	lsrs	r3, r3, #9
 8106804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106808:	ee07 3a90 	vmov	s15, r3
 810680c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106810:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106814:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106818:	edd7 6a07 	vldr	s13, [r7, #28]
 810681c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106824:	ee17 2a90 	vmov	r2, s15
 8106828:	687b      	ldr	r3, [r7, #4]
 810682a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810682c:	4b1e      	ldr	r3, [pc, #120]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810682e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106830:	0c1b      	lsrs	r3, r3, #16
 8106832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106836:	ee07 3a90 	vmov	s15, r3
 810683a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810683e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106846:	edd7 6a07 	vldr	s13, [r7, #28]
 810684a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810684e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106852:	ee17 2a90 	vmov	r2, s15
 8106856:	687b      	ldr	r3, [r7, #4]
 8106858:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810685a:	4b13      	ldr	r3, [pc, #76]	@ (81068a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810685c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810685e:	0e1b      	lsrs	r3, r3, #24
 8106860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106864:	ee07 3a90 	vmov	s15, r3
 8106868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810686c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106870:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106874:	edd7 6a07 	vldr	s13, [r7, #28]
 8106878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810687c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106880:	ee17 2a90 	vmov	r2, s15
 8106884:	687b      	ldr	r3, [r7, #4]
 8106886:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8106888:	e008      	b.n	810689c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810688a:	687b      	ldr	r3, [r7, #4]
 810688c:	2200      	movs	r2, #0
 810688e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8106890:	687b      	ldr	r3, [r7, #4]
 8106892:	2200      	movs	r2, #0
 8106894:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8106896:	687b      	ldr	r3, [r7, #4]
 8106898:	2200      	movs	r2, #0
 810689a:	609a      	str	r2, [r3, #8]
}
 810689c:	bf00      	nop
 810689e:	3724      	adds	r7, #36	@ 0x24
 81068a0:	46bd      	mov	sp, r7
 81068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068a6:	4770      	bx	lr
 81068a8:	58024400 	.word	0x58024400
 81068ac:	03d09000 	.word	0x03d09000
 81068b0:	46000000 	.word	0x46000000
 81068b4:	4c742400 	.word	0x4c742400
 81068b8:	4a742400 	.word	0x4a742400
 81068bc:	4bbebc20 	.word	0x4bbebc20

081068c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81068c0:	b580      	push	{r7, lr}
 81068c2:	b084      	sub	sp, #16
 81068c4:	af00      	add	r7, sp, #0
 81068c6:	6078      	str	r0, [r7, #4]
 81068c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81068ca:	2300      	movs	r3, #0
 81068cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81068ce:	4b54      	ldr	r3, [pc, #336]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 81068d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81068d2:	f003 0303 	and.w	r3, r3, #3
 81068d6:	2b03      	cmp	r3, #3
 81068d8:	d101      	bne.n	81068de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81068da:	2301      	movs	r3, #1
 81068dc:	e09b      	b.n	8106a16 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81068de:	4b50      	ldr	r3, [pc, #320]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 81068e0:	681b      	ldr	r3, [r3, #0]
 81068e2:	4a4f      	ldr	r2, [pc, #316]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 81068e4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81068e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81068ea:	f7fa fd85 	bl	81013f8 <HAL_GetTick>
 81068ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81068f0:	e008      	b.n	8106904 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81068f2:	f7fa fd81 	bl	81013f8 <HAL_GetTick>
 81068f6:	4602      	mov	r2, r0
 81068f8:	68bb      	ldr	r3, [r7, #8]
 81068fa:	1ad3      	subs	r3, r2, r3
 81068fc:	2b02      	cmp	r3, #2
 81068fe:	d901      	bls.n	8106904 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106900:	2303      	movs	r3, #3
 8106902:	e088      	b.n	8106a16 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106904:	4b46      	ldr	r3, [pc, #280]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 8106906:	681b      	ldr	r3, [r3, #0]
 8106908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810690c:	2b00      	cmp	r3, #0
 810690e:	d1f0      	bne.n	81068f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106910:	4b43      	ldr	r3, [pc, #268]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 8106912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106914:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8106918:	687b      	ldr	r3, [r7, #4]
 810691a:	681b      	ldr	r3, [r3, #0]
 810691c:	031b      	lsls	r3, r3, #12
 810691e:	4940      	ldr	r1, [pc, #256]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 8106920:	4313      	orrs	r3, r2
 8106922:	628b      	str	r3, [r1, #40]	@ 0x28
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	685b      	ldr	r3, [r3, #4]
 8106928:	3b01      	subs	r3, #1
 810692a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810692e:	687b      	ldr	r3, [r7, #4]
 8106930:	689b      	ldr	r3, [r3, #8]
 8106932:	3b01      	subs	r3, #1
 8106934:	025b      	lsls	r3, r3, #9
 8106936:	b29b      	uxth	r3, r3
 8106938:	431a      	orrs	r2, r3
 810693a:	687b      	ldr	r3, [r7, #4]
 810693c:	68db      	ldr	r3, [r3, #12]
 810693e:	3b01      	subs	r3, #1
 8106940:	041b      	lsls	r3, r3, #16
 8106942:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8106946:	431a      	orrs	r2, r3
 8106948:	687b      	ldr	r3, [r7, #4]
 810694a:	691b      	ldr	r3, [r3, #16]
 810694c:	3b01      	subs	r3, #1
 810694e:	061b      	lsls	r3, r3, #24
 8106950:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8106954:	4932      	ldr	r1, [pc, #200]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 8106956:	4313      	orrs	r3, r2
 8106958:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810695a:	4b31      	ldr	r3, [pc, #196]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 810695c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810695e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8106962:	687b      	ldr	r3, [r7, #4]
 8106964:	695b      	ldr	r3, [r3, #20]
 8106966:	492e      	ldr	r1, [pc, #184]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 8106968:	4313      	orrs	r3, r2
 810696a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810696c:	4b2c      	ldr	r3, [pc, #176]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 810696e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106970:	f023 0220 	bic.w	r2, r3, #32
 8106974:	687b      	ldr	r3, [r7, #4]
 8106976:	699b      	ldr	r3, [r3, #24]
 8106978:	4929      	ldr	r1, [pc, #164]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 810697a:	4313      	orrs	r3, r2
 810697c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810697e:	4b28      	ldr	r3, [pc, #160]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 8106980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106982:	4a27      	ldr	r2, [pc, #156]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 8106984:	f023 0310 	bic.w	r3, r3, #16
 8106988:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810698a:	4b25      	ldr	r3, [pc, #148]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 810698c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810698e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8106992:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8106996:	687a      	ldr	r2, [r7, #4]
 8106998:	69d2      	ldr	r2, [r2, #28]
 810699a:	00d2      	lsls	r2, r2, #3
 810699c:	4920      	ldr	r1, [pc, #128]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 810699e:	4313      	orrs	r3, r2
 81069a0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81069a2:	4b1f      	ldr	r3, [pc, #124]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 81069a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81069a6:	4a1e      	ldr	r2, [pc, #120]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 81069a8:	f043 0310 	orr.w	r3, r3, #16
 81069ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81069ae:	683b      	ldr	r3, [r7, #0]
 81069b0:	2b00      	cmp	r3, #0
 81069b2:	d106      	bne.n	81069c2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81069b4:	4b1a      	ldr	r3, [pc, #104]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 81069b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81069b8:	4a19      	ldr	r2, [pc, #100]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 81069ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81069be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81069c0:	e00f      	b.n	81069e2 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81069c2:	683b      	ldr	r3, [r7, #0]
 81069c4:	2b01      	cmp	r3, #1
 81069c6:	d106      	bne.n	81069d6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81069c8:	4b15      	ldr	r3, [pc, #84]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 81069ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81069cc:	4a14      	ldr	r2, [pc, #80]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 81069ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81069d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81069d4:	e005      	b.n	81069e2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81069d6:	4b12      	ldr	r3, [pc, #72]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 81069d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81069da:	4a11      	ldr	r2, [pc, #68]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 81069dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81069e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81069e2:	4b0f      	ldr	r3, [pc, #60]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 81069e4:	681b      	ldr	r3, [r3, #0]
 81069e6:	4a0e      	ldr	r2, [pc, #56]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 81069e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81069ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81069ee:	f7fa fd03 	bl	81013f8 <HAL_GetTick>
 81069f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81069f4:	e008      	b.n	8106a08 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81069f6:	f7fa fcff 	bl	81013f8 <HAL_GetTick>
 81069fa:	4602      	mov	r2, r0
 81069fc:	68bb      	ldr	r3, [r7, #8]
 81069fe:	1ad3      	subs	r3, r2, r3
 8106a00:	2b02      	cmp	r3, #2
 8106a02:	d901      	bls.n	8106a08 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106a04:	2303      	movs	r3, #3
 8106a06:	e006      	b.n	8106a16 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106a08:	4b05      	ldr	r3, [pc, #20]	@ (8106a20 <RCCEx_PLL2_Config+0x160>)
 8106a0a:	681b      	ldr	r3, [r3, #0]
 8106a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106a10:	2b00      	cmp	r3, #0
 8106a12:	d0f0      	beq.n	81069f6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8106a16:	4618      	mov	r0, r3
 8106a18:	3710      	adds	r7, #16
 8106a1a:	46bd      	mov	sp, r7
 8106a1c:	bd80      	pop	{r7, pc}
 8106a1e:	bf00      	nop
 8106a20:	58024400 	.word	0x58024400

08106a24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106a24:	b580      	push	{r7, lr}
 8106a26:	b084      	sub	sp, #16
 8106a28:	af00      	add	r7, sp, #0
 8106a2a:	6078      	str	r0, [r7, #4]
 8106a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106a2e:	2300      	movs	r3, #0
 8106a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106a32:	4b54      	ldr	r3, [pc, #336]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106a36:	f003 0303 	and.w	r3, r3, #3
 8106a3a:	2b03      	cmp	r3, #3
 8106a3c:	d101      	bne.n	8106a42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8106a3e:	2301      	movs	r3, #1
 8106a40:	e09b      	b.n	8106b7a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106a42:	4b50      	ldr	r3, [pc, #320]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106a44:	681b      	ldr	r3, [r3, #0]
 8106a46:	4a4f      	ldr	r2, [pc, #316]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106a48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8106a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106a4e:	f7fa fcd3 	bl	81013f8 <HAL_GetTick>
 8106a52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106a54:	e008      	b.n	8106a68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106a56:	f7fa fccf 	bl	81013f8 <HAL_GetTick>
 8106a5a:	4602      	mov	r2, r0
 8106a5c:	68bb      	ldr	r3, [r7, #8]
 8106a5e:	1ad3      	subs	r3, r2, r3
 8106a60:	2b02      	cmp	r3, #2
 8106a62:	d901      	bls.n	8106a68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106a64:	2303      	movs	r3, #3
 8106a66:	e088      	b.n	8106b7a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106a68:	4b46      	ldr	r3, [pc, #280]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106a6a:	681b      	ldr	r3, [r3, #0]
 8106a6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106a70:	2b00      	cmp	r3, #0
 8106a72:	d1f0      	bne.n	8106a56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106a74:	4b43      	ldr	r3, [pc, #268]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106a78:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8106a7c:	687b      	ldr	r3, [r7, #4]
 8106a7e:	681b      	ldr	r3, [r3, #0]
 8106a80:	051b      	lsls	r3, r3, #20
 8106a82:	4940      	ldr	r1, [pc, #256]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106a84:	4313      	orrs	r3, r2
 8106a86:	628b      	str	r3, [r1, #40]	@ 0x28
 8106a88:	687b      	ldr	r3, [r7, #4]
 8106a8a:	685b      	ldr	r3, [r3, #4]
 8106a8c:	3b01      	subs	r3, #1
 8106a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106a92:	687b      	ldr	r3, [r7, #4]
 8106a94:	689b      	ldr	r3, [r3, #8]
 8106a96:	3b01      	subs	r3, #1
 8106a98:	025b      	lsls	r3, r3, #9
 8106a9a:	b29b      	uxth	r3, r3
 8106a9c:	431a      	orrs	r2, r3
 8106a9e:	687b      	ldr	r3, [r7, #4]
 8106aa0:	68db      	ldr	r3, [r3, #12]
 8106aa2:	3b01      	subs	r3, #1
 8106aa4:	041b      	lsls	r3, r3, #16
 8106aa6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8106aaa:	431a      	orrs	r2, r3
 8106aac:	687b      	ldr	r3, [r7, #4]
 8106aae:	691b      	ldr	r3, [r3, #16]
 8106ab0:	3b01      	subs	r3, #1
 8106ab2:	061b      	lsls	r3, r3, #24
 8106ab4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8106ab8:	4932      	ldr	r1, [pc, #200]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106aba:	4313      	orrs	r3, r2
 8106abc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8106abe:	4b31      	ldr	r3, [pc, #196]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106ac2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8106ac6:	687b      	ldr	r3, [r7, #4]
 8106ac8:	695b      	ldr	r3, [r3, #20]
 8106aca:	492e      	ldr	r1, [pc, #184]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106acc:	4313      	orrs	r3, r2
 8106ace:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106ad4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8106ad8:	687b      	ldr	r3, [r7, #4]
 8106ada:	699b      	ldr	r3, [r3, #24]
 8106adc:	4929      	ldr	r1, [pc, #164]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106ade:	4313      	orrs	r3, r2
 8106ae0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106ae2:	4b28      	ldr	r3, [pc, #160]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106ae6:	4a27      	ldr	r2, [pc, #156]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8106aec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8106aee:	4b25      	ldr	r3, [pc, #148]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106af2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8106af6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8106afa:	687a      	ldr	r2, [r7, #4]
 8106afc:	69d2      	ldr	r2, [r2, #28]
 8106afe:	00d2      	lsls	r2, r2, #3
 8106b00:	4920      	ldr	r1, [pc, #128]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106b02:	4313      	orrs	r3, r2
 8106b04:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8106b06:	4b1f      	ldr	r3, [pc, #124]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106b10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106b12:	683b      	ldr	r3, [r7, #0]
 8106b14:	2b00      	cmp	r3, #0
 8106b16:	d106      	bne.n	8106b26 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106b18:	4b1a      	ldr	r3, [pc, #104]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106b1c:	4a19      	ldr	r2, [pc, #100]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106b1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8106b22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106b24:	e00f      	b.n	8106b46 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106b26:	683b      	ldr	r3, [r7, #0]
 8106b28:	2b01      	cmp	r3, #1
 8106b2a:	d106      	bne.n	8106b3a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8106b2c:	4b15      	ldr	r3, [pc, #84]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106b30:	4a14      	ldr	r2, [pc, #80]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106b32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8106b36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106b38:	e005      	b.n	8106b46 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8106b3a:	4b12      	ldr	r3, [pc, #72]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106b3e:	4a11      	ldr	r2, [pc, #68]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106b40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8106b44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106b46:	4b0f      	ldr	r3, [pc, #60]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106b48:	681b      	ldr	r3, [r3, #0]
 8106b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8106b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106b52:	f7fa fc51 	bl	81013f8 <HAL_GetTick>
 8106b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106b58:	e008      	b.n	8106b6c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106b5a:	f7fa fc4d 	bl	81013f8 <HAL_GetTick>
 8106b5e:	4602      	mov	r2, r0
 8106b60:	68bb      	ldr	r3, [r7, #8]
 8106b62:	1ad3      	subs	r3, r2, r3
 8106b64:	2b02      	cmp	r3, #2
 8106b66:	d901      	bls.n	8106b6c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106b68:	2303      	movs	r3, #3
 8106b6a:	e006      	b.n	8106b7a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106b6c:	4b05      	ldr	r3, [pc, #20]	@ (8106b84 <RCCEx_PLL3_Config+0x160>)
 8106b6e:	681b      	ldr	r3, [r3, #0]
 8106b70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106b74:	2b00      	cmp	r3, #0
 8106b76:	d0f0      	beq.n	8106b5a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8106b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8106b7a:	4618      	mov	r0, r3
 8106b7c:	3710      	adds	r7, #16
 8106b7e:	46bd      	mov	sp, r7
 8106b80:	bd80      	pop	{r7, pc}
 8106b82:	bf00      	nop
 8106b84:	58024400 	.word	0x58024400

08106b88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8106b88:	b580      	push	{r7, lr}
 8106b8a:	b082      	sub	sp, #8
 8106b8c:	af00      	add	r7, sp, #0
 8106b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	2b00      	cmp	r3, #0
 8106b94:	d101      	bne.n	8106b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8106b96:	2301      	movs	r3, #1
 8106b98:	e042      	b.n	8106c20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8106b9a:	687b      	ldr	r3, [r7, #4]
 8106b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106ba0:	2b00      	cmp	r3, #0
 8106ba2:	d106      	bne.n	8106bb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8106ba4:	687b      	ldr	r3, [r7, #4]
 8106ba6:	2200      	movs	r2, #0
 8106ba8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8106bac:	6878      	ldr	r0, [r7, #4]
 8106bae:	f7fa f8b1 	bl	8100d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8106bb2:	687b      	ldr	r3, [r7, #4]
 8106bb4:	2224      	movs	r2, #36	@ 0x24
 8106bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8106bba:	687b      	ldr	r3, [r7, #4]
 8106bbc:	681b      	ldr	r3, [r3, #0]
 8106bbe:	681a      	ldr	r2, [r3, #0]
 8106bc0:	687b      	ldr	r3, [r7, #4]
 8106bc2:	681b      	ldr	r3, [r3, #0]
 8106bc4:	f022 0201 	bic.w	r2, r2, #1
 8106bc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8106bca:	687b      	ldr	r3, [r7, #4]
 8106bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106bce:	2b00      	cmp	r3, #0
 8106bd0:	d002      	beq.n	8106bd8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8106bd2:	6878      	ldr	r0, [r7, #4]
 8106bd4:	f000 fe5e 	bl	8107894 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8106bd8:	6878      	ldr	r0, [r7, #4]
 8106bda:	f000 f8f3 	bl	8106dc4 <UART_SetConfig>
 8106bde:	4603      	mov	r3, r0
 8106be0:	2b01      	cmp	r3, #1
 8106be2:	d101      	bne.n	8106be8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8106be4:	2301      	movs	r3, #1
 8106be6:	e01b      	b.n	8106c20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	681b      	ldr	r3, [r3, #0]
 8106bec:	685a      	ldr	r2, [r3, #4]
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	681b      	ldr	r3, [r3, #0]
 8106bf2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8106bf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	681b      	ldr	r3, [r3, #0]
 8106bfc:	689a      	ldr	r2, [r3, #8]
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	681b      	ldr	r3, [r3, #0]
 8106c02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8106c06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8106c08:	687b      	ldr	r3, [r7, #4]
 8106c0a:	681b      	ldr	r3, [r3, #0]
 8106c0c:	681a      	ldr	r2, [r3, #0]
 8106c0e:	687b      	ldr	r3, [r7, #4]
 8106c10:	681b      	ldr	r3, [r3, #0]
 8106c12:	f042 0201 	orr.w	r2, r2, #1
 8106c16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8106c18:	6878      	ldr	r0, [r7, #4]
 8106c1a:	f000 fedd 	bl	81079d8 <UART_CheckIdleState>
 8106c1e:	4603      	mov	r3, r0
}
 8106c20:	4618      	mov	r0, r3
 8106c22:	3708      	adds	r7, #8
 8106c24:	46bd      	mov	sp, r7
 8106c26:	bd80      	pop	{r7, pc}

08106c28 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8106c28:	b580      	push	{r7, lr}
 8106c2a:	b082      	sub	sp, #8
 8106c2c:	af00      	add	r7, sp, #0
 8106c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8106c30:	687b      	ldr	r3, [r7, #4]
 8106c32:	2b00      	cmp	r3, #0
 8106c34:	d101      	bne.n	8106c3a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8106c36:	2301      	movs	r3, #1
 8106c38:	e031      	b.n	8106c9e <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8106c3a:	687b      	ldr	r3, [r7, #4]
 8106c3c:	2224      	movs	r2, #36	@ 0x24
 8106c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8106c42:	687b      	ldr	r3, [r7, #4]
 8106c44:	681b      	ldr	r3, [r3, #0]
 8106c46:	681a      	ldr	r2, [r3, #0]
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	681b      	ldr	r3, [r3, #0]
 8106c4c:	f022 0201 	bic.w	r2, r2, #1
 8106c50:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	681b      	ldr	r3, [r3, #0]
 8106c56:	2200      	movs	r2, #0
 8106c58:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8106c5a:	687b      	ldr	r3, [r7, #4]
 8106c5c:	681b      	ldr	r3, [r3, #0]
 8106c5e:	2200      	movs	r2, #0
 8106c60:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	681b      	ldr	r3, [r3, #0]
 8106c66:	2200      	movs	r2, #0
 8106c68:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8106c6a:	6878      	ldr	r0, [r7, #4]
 8106c6c:	f7fa f88c 	bl	8100d88 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106c70:	687b      	ldr	r3, [r7, #4]
 8106c72:	2200      	movs	r2, #0
 8106c74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8106c78:	687b      	ldr	r3, [r7, #4]
 8106c7a:	2200      	movs	r2, #0
 8106c7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8106c80:	687b      	ldr	r3, [r7, #4]
 8106c82:	2200      	movs	r2, #0
 8106c84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106c88:	687b      	ldr	r3, [r7, #4]
 8106c8a:	2200      	movs	r2, #0
 8106c8c:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8106c8e:	687b      	ldr	r3, [r7, #4]
 8106c90:	2200      	movs	r2, #0
 8106c92:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8106c94:	687b      	ldr	r3, [r7, #4]
 8106c96:	2200      	movs	r2, #0
 8106c98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8106c9c:	2300      	movs	r3, #0
}
 8106c9e:	4618      	mov	r0, r3
 8106ca0:	3708      	adds	r7, #8
 8106ca2:	46bd      	mov	sp, r7
 8106ca4:	bd80      	pop	{r7, pc}

08106ca6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106ca6:	b580      	push	{r7, lr}
 8106ca8:	b08a      	sub	sp, #40	@ 0x28
 8106caa:	af02      	add	r7, sp, #8
 8106cac:	60f8      	str	r0, [r7, #12]
 8106cae:	60b9      	str	r1, [r7, #8]
 8106cb0:	603b      	str	r3, [r7, #0]
 8106cb2:	4613      	mov	r3, r2
 8106cb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8106cb6:	68fb      	ldr	r3, [r7, #12]
 8106cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106cbc:	2b20      	cmp	r3, #32
 8106cbe:	d17b      	bne.n	8106db8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8106cc0:	68bb      	ldr	r3, [r7, #8]
 8106cc2:	2b00      	cmp	r3, #0
 8106cc4:	d002      	beq.n	8106ccc <HAL_UART_Transmit+0x26>
 8106cc6:	88fb      	ldrh	r3, [r7, #6]
 8106cc8:	2b00      	cmp	r3, #0
 8106cca:	d101      	bne.n	8106cd0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8106ccc:	2301      	movs	r3, #1
 8106cce:	e074      	b.n	8106dba <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106cd0:	68fb      	ldr	r3, [r7, #12]
 8106cd2:	2200      	movs	r2, #0
 8106cd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106cd8:	68fb      	ldr	r3, [r7, #12]
 8106cda:	2221      	movs	r2, #33	@ 0x21
 8106cdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8106ce0:	f7fa fb8a 	bl	81013f8 <HAL_GetTick>
 8106ce4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8106ce6:	68fb      	ldr	r3, [r7, #12]
 8106ce8:	88fa      	ldrh	r2, [r7, #6]
 8106cea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8106cee:	68fb      	ldr	r3, [r7, #12]
 8106cf0:	88fa      	ldrh	r2, [r7, #6]
 8106cf2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106cf6:	68fb      	ldr	r3, [r7, #12]
 8106cf8:	689b      	ldr	r3, [r3, #8]
 8106cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106cfe:	d108      	bne.n	8106d12 <HAL_UART_Transmit+0x6c>
 8106d00:	68fb      	ldr	r3, [r7, #12]
 8106d02:	691b      	ldr	r3, [r3, #16]
 8106d04:	2b00      	cmp	r3, #0
 8106d06:	d104      	bne.n	8106d12 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8106d08:	2300      	movs	r3, #0
 8106d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8106d0c:	68bb      	ldr	r3, [r7, #8]
 8106d0e:	61bb      	str	r3, [r7, #24]
 8106d10:	e003      	b.n	8106d1a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8106d12:	68bb      	ldr	r3, [r7, #8]
 8106d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8106d16:	2300      	movs	r3, #0
 8106d18:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8106d1a:	e030      	b.n	8106d7e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8106d1c:	683b      	ldr	r3, [r7, #0]
 8106d1e:	9300      	str	r3, [sp, #0]
 8106d20:	697b      	ldr	r3, [r7, #20]
 8106d22:	2200      	movs	r2, #0
 8106d24:	2180      	movs	r1, #128	@ 0x80
 8106d26:	68f8      	ldr	r0, [r7, #12]
 8106d28:	f000 ff00 	bl	8107b2c <UART_WaitOnFlagUntilTimeout>
 8106d2c:	4603      	mov	r3, r0
 8106d2e:	2b00      	cmp	r3, #0
 8106d30:	d005      	beq.n	8106d3e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8106d32:	68fb      	ldr	r3, [r7, #12]
 8106d34:	2220      	movs	r2, #32
 8106d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8106d3a:	2303      	movs	r3, #3
 8106d3c:	e03d      	b.n	8106dba <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8106d3e:	69fb      	ldr	r3, [r7, #28]
 8106d40:	2b00      	cmp	r3, #0
 8106d42:	d10b      	bne.n	8106d5c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8106d44:	69bb      	ldr	r3, [r7, #24]
 8106d46:	881b      	ldrh	r3, [r3, #0]
 8106d48:	461a      	mov	r2, r3
 8106d4a:	68fb      	ldr	r3, [r7, #12]
 8106d4c:	681b      	ldr	r3, [r3, #0]
 8106d4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8106d52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8106d54:	69bb      	ldr	r3, [r7, #24]
 8106d56:	3302      	adds	r3, #2
 8106d58:	61bb      	str	r3, [r7, #24]
 8106d5a:	e007      	b.n	8106d6c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8106d5c:	69fb      	ldr	r3, [r7, #28]
 8106d5e:	781a      	ldrb	r2, [r3, #0]
 8106d60:	68fb      	ldr	r3, [r7, #12]
 8106d62:	681b      	ldr	r3, [r3, #0]
 8106d64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8106d66:	69fb      	ldr	r3, [r7, #28]
 8106d68:	3301      	adds	r3, #1
 8106d6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8106d6c:	68fb      	ldr	r3, [r7, #12]
 8106d6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8106d72:	b29b      	uxth	r3, r3
 8106d74:	3b01      	subs	r3, #1
 8106d76:	b29a      	uxth	r2, r3
 8106d78:	68fb      	ldr	r3, [r7, #12]
 8106d7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8106d7e:	68fb      	ldr	r3, [r7, #12]
 8106d80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8106d84:	b29b      	uxth	r3, r3
 8106d86:	2b00      	cmp	r3, #0
 8106d88:	d1c8      	bne.n	8106d1c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8106d8a:	683b      	ldr	r3, [r7, #0]
 8106d8c:	9300      	str	r3, [sp, #0]
 8106d8e:	697b      	ldr	r3, [r7, #20]
 8106d90:	2200      	movs	r2, #0
 8106d92:	2140      	movs	r1, #64	@ 0x40
 8106d94:	68f8      	ldr	r0, [r7, #12]
 8106d96:	f000 fec9 	bl	8107b2c <UART_WaitOnFlagUntilTimeout>
 8106d9a:	4603      	mov	r3, r0
 8106d9c:	2b00      	cmp	r3, #0
 8106d9e:	d005      	beq.n	8106dac <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8106da0:	68fb      	ldr	r3, [r7, #12]
 8106da2:	2220      	movs	r2, #32
 8106da4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8106da8:	2303      	movs	r3, #3
 8106daa:	e006      	b.n	8106dba <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8106dac:	68fb      	ldr	r3, [r7, #12]
 8106dae:	2220      	movs	r2, #32
 8106db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8106db4:	2300      	movs	r3, #0
 8106db6:	e000      	b.n	8106dba <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8106db8:	2302      	movs	r3, #2
  }
}
 8106dba:	4618      	mov	r0, r3
 8106dbc:	3720      	adds	r7, #32
 8106dbe:	46bd      	mov	sp, r7
 8106dc0:	bd80      	pop	{r7, pc}
	...

08106dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8106dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8106dc8:	b092      	sub	sp, #72	@ 0x48
 8106dca:	af00      	add	r7, sp, #0
 8106dcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8106dce:	2300      	movs	r3, #0
 8106dd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106dd4:	697b      	ldr	r3, [r7, #20]
 8106dd6:	689a      	ldr	r2, [r3, #8]
 8106dd8:	697b      	ldr	r3, [r7, #20]
 8106dda:	691b      	ldr	r3, [r3, #16]
 8106ddc:	431a      	orrs	r2, r3
 8106dde:	697b      	ldr	r3, [r7, #20]
 8106de0:	695b      	ldr	r3, [r3, #20]
 8106de2:	431a      	orrs	r2, r3
 8106de4:	697b      	ldr	r3, [r7, #20]
 8106de6:	69db      	ldr	r3, [r3, #28]
 8106de8:	4313      	orrs	r3, r2
 8106dea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8106dec:	697b      	ldr	r3, [r7, #20]
 8106dee:	681b      	ldr	r3, [r3, #0]
 8106df0:	681a      	ldr	r2, [r3, #0]
 8106df2:	4bbd      	ldr	r3, [pc, #756]	@ (81070e8 <UART_SetConfig+0x324>)
 8106df4:	4013      	ands	r3, r2
 8106df6:	697a      	ldr	r2, [r7, #20]
 8106df8:	6812      	ldr	r2, [r2, #0]
 8106dfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8106dfc:	430b      	orrs	r3, r1
 8106dfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8106e00:	697b      	ldr	r3, [r7, #20]
 8106e02:	681b      	ldr	r3, [r3, #0]
 8106e04:	685b      	ldr	r3, [r3, #4]
 8106e06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8106e0a:	697b      	ldr	r3, [r7, #20]
 8106e0c:	68da      	ldr	r2, [r3, #12]
 8106e0e:	697b      	ldr	r3, [r7, #20]
 8106e10:	681b      	ldr	r3, [r3, #0]
 8106e12:	430a      	orrs	r2, r1
 8106e14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8106e16:	697b      	ldr	r3, [r7, #20]
 8106e18:	699b      	ldr	r3, [r3, #24]
 8106e1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8106e1c:	697b      	ldr	r3, [r7, #20]
 8106e1e:	681b      	ldr	r3, [r3, #0]
 8106e20:	4ab2      	ldr	r2, [pc, #712]	@ (81070ec <UART_SetConfig+0x328>)
 8106e22:	4293      	cmp	r3, r2
 8106e24:	d004      	beq.n	8106e30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8106e26:	697b      	ldr	r3, [r7, #20]
 8106e28:	6a1b      	ldr	r3, [r3, #32]
 8106e2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8106e2c:	4313      	orrs	r3, r2
 8106e2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8106e30:	697b      	ldr	r3, [r7, #20]
 8106e32:	681b      	ldr	r3, [r3, #0]
 8106e34:	689b      	ldr	r3, [r3, #8]
 8106e36:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8106e3a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8106e3e:	697a      	ldr	r2, [r7, #20]
 8106e40:	6812      	ldr	r2, [r2, #0]
 8106e42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8106e44:	430b      	orrs	r3, r1
 8106e46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8106e48:	697b      	ldr	r3, [r7, #20]
 8106e4a:	681b      	ldr	r3, [r3, #0]
 8106e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e4e:	f023 010f 	bic.w	r1, r3, #15
 8106e52:	697b      	ldr	r3, [r7, #20]
 8106e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8106e56:	697b      	ldr	r3, [r7, #20]
 8106e58:	681b      	ldr	r3, [r3, #0]
 8106e5a:	430a      	orrs	r2, r1
 8106e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106e5e:	697b      	ldr	r3, [r7, #20]
 8106e60:	681b      	ldr	r3, [r3, #0]
 8106e62:	4aa3      	ldr	r2, [pc, #652]	@ (81070f0 <UART_SetConfig+0x32c>)
 8106e64:	4293      	cmp	r3, r2
 8106e66:	d177      	bne.n	8106f58 <UART_SetConfig+0x194>
 8106e68:	4ba2      	ldr	r3, [pc, #648]	@ (81070f4 <UART_SetConfig+0x330>)
 8106e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106e6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8106e70:	2b28      	cmp	r3, #40	@ 0x28
 8106e72:	d86d      	bhi.n	8106f50 <UART_SetConfig+0x18c>
 8106e74:	a201      	add	r2, pc, #4	@ (adr r2, 8106e7c <UART_SetConfig+0xb8>)
 8106e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e7a:	bf00      	nop
 8106e7c:	08106f21 	.word	0x08106f21
 8106e80:	08106f51 	.word	0x08106f51
 8106e84:	08106f51 	.word	0x08106f51
 8106e88:	08106f51 	.word	0x08106f51
 8106e8c:	08106f51 	.word	0x08106f51
 8106e90:	08106f51 	.word	0x08106f51
 8106e94:	08106f51 	.word	0x08106f51
 8106e98:	08106f51 	.word	0x08106f51
 8106e9c:	08106f29 	.word	0x08106f29
 8106ea0:	08106f51 	.word	0x08106f51
 8106ea4:	08106f51 	.word	0x08106f51
 8106ea8:	08106f51 	.word	0x08106f51
 8106eac:	08106f51 	.word	0x08106f51
 8106eb0:	08106f51 	.word	0x08106f51
 8106eb4:	08106f51 	.word	0x08106f51
 8106eb8:	08106f51 	.word	0x08106f51
 8106ebc:	08106f31 	.word	0x08106f31
 8106ec0:	08106f51 	.word	0x08106f51
 8106ec4:	08106f51 	.word	0x08106f51
 8106ec8:	08106f51 	.word	0x08106f51
 8106ecc:	08106f51 	.word	0x08106f51
 8106ed0:	08106f51 	.word	0x08106f51
 8106ed4:	08106f51 	.word	0x08106f51
 8106ed8:	08106f51 	.word	0x08106f51
 8106edc:	08106f39 	.word	0x08106f39
 8106ee0:	08106f51 	.word	0x08106f51
 8106ee4:	08106f51 	.word	0x08106f51
 8106ee8:	08106f51 	.word	0x08106f51
 8106eec:	08106f51 	.word	0x08106f51
 8106ef0:	08106f51 	.word	0x08106f51
 8106ef4:	08106f51 	.word	0x08106f51
 8106ef8:	08106f51 	.word	0x08106f51
 8106efc:	08106f41 	.word	0x08106f41
 8106f00:	08106f51 	.word	0x08106f51
 8106f04:	08106f51 	.word	0x08106f51
 8106f08:	08106f51 	.word	0x08106f51
 8106f0c:	08106f51 	.word	0x08106f51
 8106f10:	08106f51 	.word	0x08106f51
 8106f14:	08106f51 	.word	0x08106f51
 8106f18:	08106f51 	.word	0x08106f51
 8106f1c:	08106f49 	.word	0x08106f49
 8106f20:	2301      	movs	r3, #1
 8106f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106f26:	e220      	b.n	810736a <UART_SetConfig+0x5a6>
 8106f28:	2304      	movs	r3, #4
 8106f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106f2e:	e21c      	b.n	810736a <UART_SetConfig+0x5a6>
 8106f30:	2308      	movs	r3, #8
 8106f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106f36:	e218      	b.n	810736a <UART_SetConfig+0x5a6>
 8106f38:	2310      	movs	r3, #16
 8106f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106f3e:	e214      	b.n	810736a <UART_SetConfig+0x5a6>
 8106f40:	2320      	movs	r3, #32
 8106f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106f46:	e210      	b.n	810736a <UART_SetConfig+0x5a6>
 8106f48:	2340      	movs	r3, #64	@ 0x40
 8106f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106f4e:	e20c      	b.n	810736a <UART_SetConfig+0x5a6>
 8106f50:	2380      	movs	r3, #128	@ 0x80
 8106f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106f56:	e208      	b.n	810736a <UART_SetConfig+0x5a6>
 8106f58:	697b      	ldr	r3, [r7, #20]
 8106f5a:	681b      	ldr	r3, [r3, #0]
 8106f5c:	4a66      	ldr	r2, [pc, #408]	@ (81070f8 <UART_SetConfig+0x334>)
 8106f5e:	4293      	cmp	r3, r2
 8106f60:	d130      	bne.n	8106fc4 <UART_SetConfig+0x200>
 8106f62:	4b64      	ldr	r3, [pc, #400]	@ (81070f4 <UART_SetConfig+0x330>)
 8106f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106f66:	f003 0307 	and.w	r3, r3, #7
 8106f6a:	2b05      	cmp	r3, #5
 8106f6c:	d826      	bhi.n	8106fbc <UART_SetConfig+0x1f8>
 8106f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8106f74 <UART_SetConfig+0x1b0>)
 8106f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106f74:	08106f8d 	.word	0x08106f8d
 8106f78:	08106f95 	.word	0x08106f95
 8106f7c:	08106f9d 	.word	0x08106f9d
 8106f80:	08106fa5 	.word	0x08106fa5
 8106f84:	08106fad 	.word	0x08106fad
 8106f88:	08106fb5 	.word	0x08106fb5
 8106f8c:	2300      	movs	r3, #0
 8106f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106f92:	e1ea      	b.n	810736a <UART_SetConfig+0x5a6>
 8106f94:	2304      	movs	r3, #4
 8106f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106f9a:	e1e6      	b.n	810736a <UART_SetConfig+0x5a6>
 8106f9c:	2308      	movs	r3, #8
 8106f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106fa2:	e1e2      	b.n	810736a <UART_SetConfig+0x5a6>
 8106fa4:	2310      	movs	r3, #16
 8106fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106faa:	e1de      	b.n	810736a <UART_SetConfig+0x5a6>
 8106fac:	2320      	movs	r3, #32
 8106fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106fb2:	e1da      	b.n	810736a <UART_SetConfig+0x5a6>
 8106fb4:	2340      	movs	r3, #64	@ 0x40
 8106fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106fba:	e1d6      	b.n	810736a <UART_SetConfig+0x5a6>
 8106fbc:	2380      	movs	r3, #128	@ 0x80
 8106fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106fc2:	e1d2      	b.n	810736a <UART_SetConfig+0x5a6>
 8106fc4:	697b      	ldr	r3, [r7, #20]
 8106fc6:	681b      	ldr	r3, [r3, #0]
 8106fc8:	4a4c      	ldr	r2, [pc, #304]	@ (81070fc <UART_SetConfig+0x338>)
 8106fca:	4293      	cmp	r3, r2
 8106fcc:	d130      	bne.n	8107030 <UART_SetConfig+0x26c>
 8106fce:	4b49      	ldr	r3, [pc, #292]	@ (81070f4 <UART_SetConfig+0x330>)
 8106fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106fd2:	f003 0307 	and.w	r3, r3, #7
 8106fd6:	2b05      	cmp	r3, #5
 8106fd8:	d826      	bhi.n	8107028 <UART_SetConfig+0x264>
 8106fda:	a201      	add	r2, pc, #4	@ (adr r2, 8106fe0 <UART_SetConfig+0x21c>)
 8106fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106fe0:	08106ff9 	.word	0x08106ff9
 8106fe4:	08107001 	.word	0x08107001
 8106fe8:	08107009 	.word	0x08107009
 8106fec:	08107011 	.word	0x08107011
 8106ff0:	08107019 	.word	0x08107019
 8106ff4:	08107021 	.word	0x08107021
 8106ff8:	2300      	movs	r3, #0
 8106ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8106ffe:	e1b4      	b.n	810736a <UART_SetConfig+0x5a6>
 8107000:	2304      	movs	r3, #4
 8107002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107006:	e1b0      	b.n	810736a <UART_SetConfig+0x5a6>
 8107008:	2308      	movs	r3, #8
 810700a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810700e:	e1ac      	b.n	810736a <UART_SetConfig+0x5a6>
 8107010:	2310      	movs	r3, #16
 8107012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107016:	e1a8      	b.n	810736a <UART_SetConfig+0x5a6>
 8107018:	2320      	movs	r3, #32
 810701a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810701e:	e1a4      	b.n	810736a <UART_SetConfig+0x5a6>
 8107020:	2340      	movs	r3, #64	@ 0x40
 8107022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107026:	e1a0      	b.n	810736a <UART_SetConfig+0x5a6>
 8107028:	2380      	movs	r3, #128	@ 0x80
 810702a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810702e:	e19c      	b.n	810736a <UART_SetConfig+0x5a6>
 8107030:	697b      	ldr	r3, [r7, #20]
 8107032:	681b      	ldr	r3, [r3, #0]
 8107034:	4a32      	ldr	r2, [pc, #200]	@ (8107100 <UART_SetConfig+0x33c>)
 8107036:	4293      	cmp	r3, r2
 8107038:	d130      	bne.n	810709c <UART_SetConfig+0x2d8>
 810703a:	4b2e      	ldr	r3, [pc, #184]	@ (81070f4 <UART_SetConfig+0x330>)
 810703c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810703e:	f003 0307 	and.w	r3, r3, #7
 8107042:	2b05      	cmp	r3, #5
 8107044:	d826      	bhi.n	8107094 <UART_SetConfig+0x2d0>
 8107046:	a201      	add	r2, pc, #4	@ (adr r2, 810704c <UART_SetConfig+0x288>)
 8107048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810704c:	08107065 	.word	0x08107065
 8107050:	0810706d 	.word	0x0810706d
 8107054:	08107075 	.word	0x08107075
 8107058:	0810707d 	.word	0x0810707d
 810705c:	08107085 	.word	0x08107085
 8107060:	0810708d 	.word	0x0810708d
 8107064:	2300      	movs	r3, #0
 8107066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810706a:	e17e      	b.n	810736a <UART_SetConfig+0x5a6>
 810706c:	2304      	movs	r3, #4
 810706e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107072:	e17a      	b.n	810736a <UART_SetConfig+0x5a6>
 8107074:	2308      	movs	r3, #8
 8107076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810707a:	e176      	b.n	810736a <UART_SetConfig+0x5a6>
 810707c:	2310      	movs	r3, #16
 810707e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107082:	e172      	b.n	810736a <UART_SetConfig+0x5a6>
 8107084:	2320      	movs	r3, #32
 8107086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810708a:	e16e      	b.n	810736a <UART_SetConfig+0x5a6>
 810708c:	2340      	movs	r3, #64	@ 0x40
 810708e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107092:	e16a      	b.n	810736a <UART_SetConfig+0x5a6>
 8107094:	2380      	movs	r3, #128	@ 0x80
 8107096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810709a:	e166      	b.n	810736a <UART_SetConfig+0x5a6>
 810709c:	697b      	ldr	r3, [r7, #20]
 810709e:	681b      	ldr	r3, [r3, #0]
 81070a0:	4a18      	ldr	r2, [pc, #96]	@ (8107104 <UART_SetConfig+0x340>)
 81070a2:	4293      	cmp	r3, r2
 81070a4:	d140      	bne.n	8107128 <UART_SetConfig+0x364>
 81070a6:	4b13      	ldr	r3, [pc, #76]	@ (81070f4 <UART_SetConfig+0x330>)
 81070a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81070aa:	f003 0307 	and.w	r3, r3, #7
 81070ae:	2b05      	cmp	r3, #5
 81070b0:	d836      	bhi.n	8107120 <UART_SetConfig+0x35c>
 81070b2:	a201      	add	r2, pc, #4	@ (adr r2, 81070b8 <UART_SetConfig+0x2f4>)
 81070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81070b8:	081070d1 	.word	0x081070d1
 81070bc:	081070d9 	.word	0x081070d9
 81070c0:	081070e1 	.word	0x081070e1
 81070c4:	08107109 	.word	0x08107109
 81070c8:	08107111 	.word	0x08107111
 81070cc:	08107119 	.word	0x08107119
 81070d0:	2300      	movs	r3, #0
 81070d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81070d6:	e148      	b.n	810736a <UART_SetConfig+0x5a6>
 81070d8:	2304      	movs	r3, #4
 81070da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81070de:	e144      	b.n	810736a <UART_SetConfig+0x5a6>
 81070e0:	2308      	movs	r3, #8
 81070e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81070e6:	e140      	b.n	810736a <UART_SetConfig+0x5a6>
 81070e8:	cfff69f3 	.word	0xcfff69f3
 81070ec:	58000c00 	.word	0x58000c00
 81070f0:	40011000 	.word	0x40011000
 81070f4:	58024400 	.word	0x58024400
 81070f8:	40004400 	.word	0x40004400
 81070fc:	40004800 	.word	0x40004800
 8107100:	40004c00 	.word	0x40004c00
 8107104:	40005000 	.word	0x40005000
 8107108:	2310      	movs	r3, #16
 810710a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810710e:	e12c      	b.n	810736a <UART_SetConfig+0x5a6>
 8107110:	2320      	movs	r3, #32
 8107112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107116:	e128      	b.n	810736a <UART_SetConfig+0x5a6>
 8107118:	2340      	movs	r3, #64	@ 0x40
 810711a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810711e:	e124      	b.n	810736a <UART_SetConfig+0x5a6>
 8107120:	2380      	movs	r3, #128	@ 0x80
 8107122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107126:	e120      	b.n	810736a <UART_SetConfig+0x5a6>
 8107128:	697b      	ldr	r3, [r7, #20]
 810712a:	681b      	ldr	r3, [r3, #0]
 810712c:	4acb      	ldr	r2, [pc, #812]	@ (810745c <UART_SetConfig+0x698>)
 810712e:	4293      	cmp	r3, r2
 8107130:	d176      	bne.n	8107220 <UART_SetConfig+0x45c>
 8107132:	4bcb      	ldr	r3, [pc, #812]	@ (8107460 <UART_SetConfig+0x69c>)
 8107134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107136:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810713a:	2b28      	cmp	r3, #40	@ 0x28
 810713c:	d86c      	bhi.n	8107218 <UART_SetConfig+0x454>
 810713e:	a201      	add	r2, pc, #4	@ (adr r2, 8107144 <UART_SetConfig+0x380>)
 8107140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107144:	081071e9 	.word	0x081071e9
 8107148:	08107219 	.word	0x08107219
 810714c:	08107219 	.word	0x08107219
 8107150:	08107219 	.word	0x08107219
 8107154:	08107219 	.word	0x08107219
 8107158:	08107219 	.word	0x08107219
 810715c:	08107219 	.word	0x08107219
 8107160:	08107219 	.word	0x08107219
 8107164:	081071f1 	.word	0x081071f1
 8107168:	08107219 	.word	0x08107219
 810716c:	08107219 	.word	0x08107219
 8107170:	08107219 	.word	0x08107219
 8107174:	08107219 	.word	0x08107219
 8107178:	08107219 	.word	0x08107219
 810717c:	08107219 	.word	0x08107219
 8107180:	08107219 	.word	0x08107219
 8107184:	081071f9 	.word	0x081071f9
 8107188:	08107219 	.word	0x08107219
 810718c:	08107219 	.word	0x08107219
 8107190:	08107219 	.word	0x08107219
 8107194:	08107219 	.word	0x08107219
 8107198:	08107219 	.word	0x08107219
 810719c:	08107219 	.word	0x08107219
 81071a0:	08107219 	.word	0x08107219
 81071a4:	08107201 	.word	0x08107201
 81071a8:	08107219 	.word	0x08107219
 81071ac:	08107219 	.word	0x08107219
 81071b0:	08107219 	.word	0x08107219
 81071b4:	08107219 	.word	0x08107219
 81071b8:	08107219 	.word	0x08107219
 81071bc:	08107219 	.word	0x08107219
 81071c0:	08107219 	.word	0x08107219
 81071c4:	08107209 	.word	0x08107209
 81071c8:	08107219 	.word	0x08107219
 81071cc:	08107219 	.word	0x08107219
 81071d0:	08107219 	.word	0x08107219
 81071d4:	08107219 	.word	0x08107219
 81071d8:	08107219 	.word	0x08107219
 81071dc:	08107219 	.word	0x08107219
 81071e0:	08107219 	.word	0x08107219
 81071e4:	08107211 	.word	0x08107211
 81071e8:	2301      	movs	r3, #1
 81071ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81071ee:	e0bc      	b.n	810736a <UART_SetConfig+0x5a6>
 81071f0:	2304      	movs	r3, #4
 81071f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81071f6:	e0b8      	b.n	810736a <UART_SetConfig+0x5a6>
 81071f8:	2308      	movs	r3, #8
 81071fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81071fe:	e0b4      	b.n	810736a <UART_SetConfig+0x5a6>
 8107200:	2310      	movs	r3, #16
 8107202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107206:	e0b0      	b.n	810736a <UART_SetConfig+0x5a6>
 8107208:	2320      	movs	r3, #32
 810720a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810720e:	e0ac      	b.n	810736a <UART_SetConfig+0x5a6>
 8107210:	2340      	movs	r3, #64	@ 0x40
 8107212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107216:	e0a8      	b.n	810736a <UART_SetConfig+0x5a6>
 8107218:	2380      	movs	r3, #128	@ 0x80
 810721a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810721e:	e0a4      	b.n	810736a <UART_SetConfig+0x5a6>
 8107220:	697b      	ldr	r3, [r7, #20]
 8107222:	681b      	ldr	r3, [r3, #0]
 8107224:	4a8f      	ldr	r2, [pc, #572]	@ (8107464 <UART_SetConfig+0x6a0>)
 8107226:	4293      	cmp	r3, r2
 8107228:	d130      	bne.n	810728c <UART_SetConfig+0x4c8>
 810722a:	4b8d      	ldr	r3, [pc, #564]	@ (8107460 <UART_SetConfig+0x69c>)
 810722c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810722e:	f003 0307 	and.w	r3, r3, #7
 8107232:	2b05      	cmp	r3, #5
 8107234:	d826      	bhi.n	8107284 <UART_SetConfig+0x4c0>
 8107236:	a201      	add	r2, pc, #4	@ (adr r2, 810723c <UART_SetConfig+0x478>)
 8107238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810723c:	08107255 	.word	0x08107255
 8107240:	0810725d 	.word	0x0810725d
 8107244:	08107265 	.word	0x08107265
 8107248:	0810726d 	.word	0x0810726d
 810724c:	08107275 	.word	0x08107275
 8107250:	0810727d 	.word	0x0810727d
 8107254:	2300      	movs	r3, #0
 8107256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810725a:	e086      	b.n	810736a <UART_SetConfig+0x5a6>
 810725c:	2304      	movs	r3, #4
 810725e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107262:	e082      	b.n	810736a <UART_SetConfig+0x5a6>
 8107264:	2308      	movs	r3, #8
 8107266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810726a:	e07e      	b.n	810736a <UART_SetConfig+0x5a6>
 810726c:	2310      	movs	r3, #16
 810726e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107272:	e07a      	b.n	810736a <UART_SetConfig+0x5a6>
 8107274:	2320      	movs	r3, #32
 8107276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810727a:	e076      	b.n	810736a <UART_SetConfig+0x5a6>
 810727c:	2340      	movs	r3, #64	@ 0x40
 810727e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107282:	e072      	b.n	810736a <UART_SetConfig+0x5a6>
 8107284:	2380      	movs	r3, #128	@ 0x80
 8107286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810728a:	e06e      	b.n	810736a <UART_SetConfig+0x5a6>
 810728c:	697b      	ldr	r3, [r7, #20]
 810728e:	681b      	ldr	r3, [r3, #0]
 8107290:	4a75      	ldr	r2, [pc, #468]	@ (8107468 <UART_SetConfig+0x6a4>)
 8107292:	4293      	cmp	r3, r2
 8107294:	d130      	bne.n	81072f8 <UART_SetConfig+0x534>
 8107296:	4b72      	ldr	r3, [pc, #456]	@ (8107460 <UART_SetConfig+0x69c>)
 8107298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810729a:	f003 0307 	and.w	r3, r3, #7
 810729e:	2b05      	cmp	r3, #5
 81072a0:	d826      	bhi.n	81072f0 <UART_SetConfig+0x52c>
 81072a2:	a201      	add	r2, pc, #4	@ (adr r2, 81072a8 <UART_SetConfig+0x4e4>)
 81072a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81072a8:	081072c1 	.word	0x081072c1
 81072ac:	081072c9 	.word	0x081072c9
 81072b0:	081072d1 	.word	0x081072d1
 81072b4:	081072d9 	.word	0x081072d9
 81072b8:	081072e1 	.word	0x081072e1
 81072bc:	081072e9 	.word	0x081072e9
 81072c0:	2300      	movs	r3, #0
 81072c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81072c6:	e050      	b.n	810736a <UART_SetConfig+0x5a6>
 81072c8:	2304      	movs	r3, #4
 81072ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81072ce:	e04c      	b.n	810736a <UART_SetConfig+0x5a6>
 81072d0:	2308      	movs	r3, #8
 81072d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81072d6:	e048      	b.n	810736a <UART_SetConfig+0x5a6>
 81072d8:	2310      	movs	r3, #16
 81072da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81072de:	e044      	b.n	810736a <UART_SetConfig+0x5a6>
 81072e0:	2320      	movs	r3, #32
 81072e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81072e6:	e040      	b.n	810736a <UART_SetConfig+0x5a6>
 81072e8:	2340      	movs	r3, #64	@ 0x40
 81072ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81072ee:	e03c      	b.n	810736a <UART_SetConfig+0x5a6>
 81072f0:	2380      	movs	r3, #128	@ 0x80
 81072f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81072f6:	e038      	b.n	810736a <UART_SetConfig+0x5a6>
 81072f8:	697b      	ldr	r3, [r7, #20]
 81072fa:	681b      	ldr	r3, [r3, #0]
 81072fc:	4a5b      	ldr	r2, [pc, #364]	@ (810746c <UART_SetConfig+0x6a8>)
 81072fe:	4293      	cmp	r3, r2
 8107300:	d130      	bne.n	8107364 <UART_SetConfig+0x5a0>
 8107302:	4b57      	ldr	r3, [pc, #348]	@ (8107460 <UART_SetConfig+0x69c>)
 8107304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107306:	f003 0307 	and.w	r3, r3, #7
 810730a:	2b05      	cmp	r3, #5
 810730c:	d826      	bhi.n	810735c <UART_SetConfig+0x598>
 810730e:	a201      	add	r2, pc, #4	@ (adr r2, 8107314 <UART_SetConfig+0x550>)
 8107310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107314:	0810732d 	.word	0x0810732d
 8107318:	08107335 	.word	0x08107335
 810731c:	0810733d 	.word	0x0810733d
 8107320:	08107345 	.word	0x08107345
 8107324:	0810734d 	.word	0x0810734d
 8107328:	08107355 	.word	0x08107355
 810732c:	2302      	movs	r3, #2
 810732e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107332:	e01a      	b.n	810736a <UART_SetConfig+0x5a6>
 8107334:	2304      	movs	r3, #4
 8107336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810733a:	e016      	b.n	810736a <UART_SetConfig+0x5a6>
 810733c:	2308      	movs	r3, #8
 810733e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107342:	e012      	b.n	810736a <UART_SetConfig+0x5a6>
 8107344:	2310      	movs	r3, #16
 8107346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810734a:	e00e      	b.n	810736a <UART_SetConfig+0x5a6>
 810734c:	2320      	movs	r3, #32
 810734e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107352:	e00a      	b.n	810736a <UART_SetConfig+0x5a6>
 8107354:	2340      	movs	r3, #64	@ 0x40
 8107356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810735a:	e006      	b.n	810736a <UART_SetConfig+0x5a6>
 810735c:	2380      	movs	r3, #128	@ 0x80
 810735e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8107362:	e002      	b.n	810736a <UART_SetConfig+0x5a6>
 8107364:	2380      	movs	r3, #128	@ 0x80
 8107366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810736a:	697b      	ldr	r3, [r7, #20]
 810736c:	681b      	ldr	r3, [r3, #0]
 810736e:	4a3f      	ldr	r2, [pc, #252]	@ (810746c <UART_SetConfig+0x6a8>)
 8107370:	4293      	cmp	r3, r2
 8107372:	f040 80f8 	bne.w	8107566 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8107376:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810737a:	2b20      	cmp	r3, #32
 810737c:	dc46      	bgt.n	810740c <UART_SetConfig+0x648>
 810737e:	2b02      	cmp	r3, #2
 8107380:	f2c0 8082 	blt.w	8107488 <UART_SetConfig+0x6c4>
 8107384:	3b02      	subs	r3, #2
 8107386:	2b1e      	cmp	r3, #30
 8107388:	d87e      	bhi.n	8107488 <UART_SetConfig+0x6c4>
 810738a:	a201      	add	r2, pc, #4	@ (adr r2, 8107390 <UART_SetConfig+0x5cc>)
 810738c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107390:	08107413 	.word	0x08107413
 8107394:	08107489 	.word	0x08107489
 8107398:	0810741b 	.word	0x0810741b
 810739c:	08107489 	.word	0x08107489
 81073a0:	08107489 	.word	0x08107489
 81073a4:	08107489 	.word	0x08107489
 81073a8:	0810742b 	.word	0x0810742b
 81073ac:	08107489 	.word	0x08107489
 81073b0:	08107489 	.word	0x08107489
 81073b4:	08107489 	.word	0x08107489
 81073b8:	08107489 	.word	0x08107489
 81073bc:	08107489 	.word	0x08107489
 81073c0:	08107489 	.word	0x08107489
 81073c4:	08107489 	.word	0x08107489
 81073c8:	0810743b 	.word	0x0810743b
 81073cc:	08107489 	.word	0x08107489
 81073d0:	08107489 	.word	0x08107489
 81073d4:	08107489 	.word	0x08107489
 81073d8:	08107489 	.word	0x08107489
 81073dc:	08107489 	.word	0x08107489
 81073e0:	08107489 	.word	0x08107489
 81073e4:	08107489 	.word	0x08107489
 81073e8:	08107489 	.word	0x08107489
 81073ec:	08107489 	.word	0x08107489
 81073f0:	08107489 	.word	0x08107489
 81073f4:	08107489 	.word	0x08107489
 81073f8:	08107489 	.word	0x08107489
 81073fc:	08107489 	.word	0x08107489
 8107400:	08107489 	.word	0x08107489
 8107404:	08107489 	.word	0x08107489
 8107408:	0810747b 	.word	0x0810747b
 810740c:	2b40      	cmp	r3, #64	@ 0x40
 810740e:	d037      	beq.n	8107480 <UART_SetConfig+0x6bc>
 8107410:	e03a      	b.n	8107488 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8107412:	f7fe fe45 	bl	81060a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8107416:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107418:	e03c      	b.n	8107494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810741a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810741e:	4618      	mov	r0, r3
 8107420:	f7fe fe54 	bl	81060cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107428:	e034      	b.n	8107494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810742a:	f107 0318 	add.w	r3, r7, #24
 810742e:	4618      	mov	r0, r3
 8107430:	f7fe ffa0 	bl	8106374 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107434:	69fb      	ldr	r3, [r7, #28]
 8107436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107438:	e02c      	b.n	8107494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810743a:	4b09      	ldr	r3, [pc, #36]	@ (8107460 <UART_SetConfig+0x69c>)
 810743c:	681b      	ldr	r3, [r3, #0]
 810743e:	f003 0320 	and.w	r3, r3, #32
 8107442:	2b00      	cmp	r3, #0
 8107444:	d016      	beq.n	8107474 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107446:	4b06      	ldr	r3, [pc, #24]	@ (8107460 <UART_SetConfig+0x69c>)
 8107448:	681b      	ldr	r3, [r3, #0]
 810744a:	08db      	lsrs	r3, r3, #3
 810744c:	f003 0303 	and.w	r3, r3, #3
 8107450:	4a07      	ldr	r2, [pc, #28]	@ (8107470 <UART_SetConfig+0x6ac>)
 8107452:	fa22 f303 	lsr.w	r3, r2, r3
 8107456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107458:	e01c      	b.n	8107494 <UART_SetConfig+0x6d0>
 810745a:	bf00      	nop
 810745c:	40011400 	.word	0x40011400
 8107460:	58024400 	.word	0x58024400
 8107464:	40007800 	.word	0x40007800
 8107468:	40007c00 	.word	0x40007c00
 810746c:	58000c00 	.word	0x58000c00
 8107470:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8107474:	4b9d      	ldr	r3, [pc, #628]	@ (81076ec <UART_SetConfig+0x928>)
 8107476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107478:	e00c      	b.n	8107494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810747a:	4b9d      	ldr	r3, [pc, #628]	@ (81076f0 <UART_SetConfig+0x92c>)
 810747c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810747e:	e009      	b.n	8107494 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8107484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107486:	e005      	b.n	8107494 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8107488:	2300      	movs	r3, #0
 810748a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810748c:	2301      	movs	r3, #1
 810748e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8107492:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8107494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107496:	2b00      	cmp	r3, #0
 8107498:	f000 81de 	beq.w	8107858 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810749c:	697b      	ldr	r3, [r7, #20]
 810749e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81074a0:	4a94      	ldr	r2, [pc, #592]	@ (81076f4 <UART_SetConfig+0x930>)
 81074a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81074a6:	461a      	mov	r2, r3
 81074a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81074aa:	fbb3 f3f2 	udiv	r3, r3, r2
 81074ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81074b0:	697b      	ldr	r3, [r7, #20]
 81074b2:	685a      	ldr	r2, [r3, #4]
 81074b4:	4613      	mov	r3, r2
 81074b6:	005b      	lsls	r3, r3, #1
 81074b8:	4413      	add	r3, r2
 81074ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81074bc:	429a      	cmp	r2, r3
 81074be:	d305      	bcc.n	81074cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81074c0:	697b      	ldr	r3, [r7, #20]
 81074c2:	685b      	ldr	r3, [r3, #4]
 81074c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81074c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81074c8:	429a      	cmp	r2, r3
 81074ca:	d903      	bls.n	81074d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81074cc:	2301      	movs	r3, #1
 81074ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81074d2:	e1c1      	b.n	8107858 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81074d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81074d6:	2200      	movs	r2, #0
 81074d8:	60bb      	str	r3, [r7, #8]
 81074da:	60fa      	str	r2, [r7, #12]
 81074dc:	697b      	ldr	r3, [r7, #20]
 81074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81074e0:	4a84      	ldr	r2, [pc, #528]	@ (81076f4 <UART_SetConfig+0x930>)
 81074e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81074e6:	b29b      	uxth	r3, r3
 81074e8:	2200      	movs	r2, #0
 81074ea:	603b      	str	r3, [r7, #0]
 81074ec:	607a      	str	r2, [r7, #4]
 81074ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 81074f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81074f6:	f7f8 ff53 	bl	81003a0 <__aeabi_uldivmod>
 81074fa:	4602      	mov	r2, r0
 81074fc:	460b      	mov	r3, r1
 81074fe:	4610      	mov	r0, r2
 8107500:	4619      	mov	r1, r3
 8107502:	f04f 0200 	mov.w	r2, #0
 8107506:	f04f 0300 	mov.w	r3, #0
 810750a:	020b      	lsls	r3, r1, #8
 810750c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8107510:	0202      	lsls	r2, r0, #8
 8107512:	6979      	ldr	r1, [r7, #20]
 8107514:	6849      	ldr	r1, [r1, #4]
 8107516:	0849      	lsrs	r1, r1, #1
 8107518:	2000      	movs	r0, #0
 810751a:	460c      	mov	r4, r1
 810751c:	4605      	mov	r5, r0
 810751e:	eb12 0804 	adds.w	r8, r2, r4
 8107522:	eb43 0905 	adc.w	r9, r3, r5
 8107526:	697b      	ldr	r3, [r7, #20]
 8107528:	685b      	ldr	r3, [r3, #4]
 810752a:	2200      	movs	r2, #0
 810752c:	469a      	mov	sl, r3
 810752e:	4693      	mov	fp, r2
 8107530:	4652      	mov	r2, sl
 8107532:	465b      	mov	r3, fp
 8107534:	4640      	mov	r0, r8
 8107536:	4649      	mov	r1, r9
 8107538:	f7f8 ff32 	bl	81003a0 <__aeabi_uldivmod>
 810753c:	4602      	mov	r2, r0
 810753e:	460b      	mov	r3, r1
 8107540:	4613      	mov	r3, r2
 8107542:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107546:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810754a:	d308      	bcc.n	810755e <UART_SetConfig+0x79a>
 810754c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810754e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107552:	d204      	bcs.n	810755e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8107554:	697b      	ldr	r3, [r7, #20]
 8107556:	681b      	ldr	r3, [r3, #0]
 8107558:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810755a:	60da      	str	r2, [r3, #12]
 810755c:	e17c      	b.n	8107858 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810755e:	2301      	movs	r3, #1
 8107560:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8107564:	e178      	b.n	8107858 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8107566:	697b      	ldr	r3, [r7, #20]
 8107568:	69db      	ldr	r3, [r3, #28]
 810756a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810756e:	f040 80c5 	bne.w	81076fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8107572:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8107576:	2b20      	cmp	r3, #32
 8107578:	dc48      	bgt.n	810760c <UART_SetConfig+0x848>
 810757a:	2b00      	cmp	r3, #0
 810757c:	db7b      	blt.n	8107676 <UART_SetConfig+0x8b2>
 810757e:	2b20      	cmp	r3, #32
 8107580:	d879      	bhi.n	8107676 <UART_SetConfig+0x8b2>
 8107582:	a201      	add	r2, pc, #4	@ (adr r2, 8107588 <UART_SetConfig+0x7c4>)
 8107584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107588:	08107613 	.word	0x08107613
 810758c:	0810761b 	.word	0x0810761b
 8107590:	08107677 	.word	0x08107677
 8107594:	08107677 	.word	0x08107677
 8107598:	08107623 	.word	0x08107623
 810759c:	08107677 	.word	0x08107677
 81075a0:	08107677 	.word	0x08107677
 81075a4:	08107677 	.word	0x08107677
 81075a8:	08107633 	.word	0x08107633
 81075ac:	08107677 	.word	0x08107677
 81075b0:	08107677 	.word	0x08107677
 81075b4:	08107677 	.word	0x08107677
 81075b8:	08107677 	.word	0x08107677
 81075bc:	08107677 	.word	0x08107677
 81075c0:	08107677 	.word	0x08107677
 81075c4:	08107677 	.word	0x08107677
 81075c8:	08107643 	.word	0x08107643
 81075cc:	08107677 	.word	0x08107677
 81075d0:	08107677 	.word	0x08107677
 81075d4:	08107677 	.word	0x08107677
 81075d8:	08107677 	.word	0x08107677
 81075dc:	08107677 	.word	0x08107677
 81075e0:	08107677 	.word	0x08107677
 81075e4:	08107677 	.word	0x08107677
 81075e8:	08107677 	.word	0x08107677
 81075ec:	08107677 	.word	0x08107677
 81075f0:	08107677 	.word	0x08107677
 81075f4:	08107677 	.word	0x08107677
 81075f8:	08107677 	.word	0x08107677
 81075fc:	08107677 	.word	0x08107677
 8107600:	08107677 	.word	0x08107677
 8107604:	08107677 	.word	0x08107677
 8107608:	08107669 	.word	0x08107669
 810760c:	2b40      	cmp	r3, #64	@ 0x40
 810760e:	d02e      	beq.n	810766e <UART_SetConfig+0x8aa>
 8107610:	e031      	b.n	8107676 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107612:	f7fc fd4f 	bl	81040b4 <HAL_RCC_GetPCLK1Freq>
 8107616:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107618:	e033      	b.n	8107682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810761a:	f7fc fd61 	bl	81040e0 <HAL_RCC_GetPCLK2Freq>
 810761e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107620:	e02f      	b.n	8107682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107626:	4618      	mov	r0, r3
 8107628:	f7fe fd50 	bl	81060cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810762c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810762e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107630:	e027      	b.n	8107682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107632:	f107 0318 	add.w	r3, r7, #24
 8107636:	4618      	mov	r0, r3
 8107638:	f7fe fe9c 	bl	8106374 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810763c:	69fb      	ldr	r3, [r7, #28]
 810763e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107640:	e01f      	b.n	8107682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107642:	4b2d      	ldr	r3, [pc, #180]	@ (81076f8 <UART_SetConfig+0x934>)
 8107644:	681b      	ldr	r3, [r3, #0]
 8107646:	f003 0320 	and.w	r3, r3, #32
 810764a:	2b00      	cmp	r3, #0
 810764c:	d009      	beq.n	8107662 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810764e:	4b2a      	ldr	r3, [pc, #168]	@ (81076f8 <UART_SetConfig+0x934>)
 8107650:	681b      	ldr	r3, [r3, #0]
 8107652:	08db      	lsrs	r3, r3, #3
 8107654:	f003 0303 	and.w	r3, r3, #3
 8107658:	4a24      	ldr	r2, [pc, #144]	@ (81076ec <UART_SetConfig+0x928>)
 810765a:	fa22 f303 	lsr.w	r3, r2, r3
 810765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107660:	e00f      	b.n	8107682 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8107662:	4b22      	ldr	r3, [pc, #136]	@ (81076ec <UART_SetConfig+0x928>)
 8107664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107666:	e00c      	b.n	8107682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107668:	4b21      	ldr	r3, [pc, #132]	@ (81076f0 <UART_SetConfig+0x92c>)
 810766a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810766c:	e009      	b.n	8107682 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810766e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8107672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107674:	e005      	b.n	8107682 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8107676:	2300      	movs	r3, #0
 8107678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810767a:	2301      	movs	r3, #1
 810767c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8107680:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8107682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107684:	2b00      	cmp	r3, #0
 8107686:	f000 80e7 	beq.w	8107858 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810768a:	697b      	ldr	r3, [r7, #20]
 810768c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810768e:	4a19      	ldr	r2, [pc, #100]	@ (81076f4 <UART_SetConfig+0x930>)
 8107690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107694:	461a      	mov	r2, r3
 8107696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107698:	fbb3 f3f2 	udiv	r3, r3, r2
 810769c:	005a      	lsls	r2, r3, #1
 810769e:	697b      	ldr	r3, [r7, #20]
 81076a0:	685b      	ldr	r3, [r3, #4]
 81076a2:	085b      	lsrs	r3, r3, #1
 81076a4:	441a      	add	r2, r3
 81076a6:	697b      	ldr	r3, [r7, #20]
 81076a8:	685b      	ldr	r3, [r3, #4]
 81076aa:	fbb2 f3f3 	udiv	r3, r2, r3
 81076ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81076b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076b2:	2b0f      	cmp	r3, #15
 81076b4:	d916      	bls.n	81076e4 <UART_SetConfig+0x920>
 81076b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81076bc:	d212      	bcs.n	81076e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81076be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076c0:	b29b      	uxth	r3, r3
 81076c2:	f023 030f 	bic.w	r3, r3, #15
 81076c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81076c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076ca:	085b      	lsrs	r3, r3, #1
 81076cc:	b29b      	uxth	r3, r3
 81076ce:	f003 0307 	and.w	r3, r3, #7
 81076d2:	b29a      	uxth	r2, r3
 81076d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 81076d6:	4313      	orrs	r3, r2
 81076d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 81076da:	697b      	ldr	r3, [r7, #20]
 81076dc:	681b      	ldr	r3, [r3, #0]
 81076de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 81076e0:	60da      	str	r2, [r3, #12]
 81076e2:	e0b9      	b.n	8107858 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81076e4:	2301      	movs	r3, #1
 81076e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81076ea:	e0b5      	b.n	8107858 <UART_SetConfig+0xa94>
 81076ec:	03d09000 	.word	0x03d09000
 81076f0:	003d0900 	.word	0x003d0900
 81076f4:	0810b8f0 	.word	0x0810b8f0
 81076f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81076fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8107700:	2b20      	cmp	r3, #32
 8107702:	dc49      	bgt.n	8107798 <UART_SetConfig+0x9d4>
 8107704:	2b00      	cmp	r3, #0
 8107706:	db7c      	blt.n	8107802 <UART_SetConfig+0xa3e>
 8107708:	2b20      	cmp	r3, #32
 810770a:	d87a      	bhi.n	8107802 <UART_SetConfig+0xa3e>
 810770c:	a201      	add	r2, pc, #4	@ (adr r2, 8107714 <UART_SetConfig+0x950>)
 810770e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107712:	bf00      	nop
 8107714:	0810779f 	.word	0x0810779f
 8107718:	081077a7 	.word	0x081077a7
 810771c:	08107803 	.word	0x08107803
 8107720:	08107803 	.word	0x08107803
 8107724:	081077af 	.word	0x081077af
 8107728:	08107803 	.word	0x08107803
 810772c:	08107803 	.word	0x08107803
 8107730:	08107803 	.word	0x08107803
 8107734:	081077bf 	.word	0x081077bf
 8107738:	08107803 	.word	0x08107803
 810773c:	08107803 	.word	0x08107803
 8107740:	08107803 	.word	0x08107803
 8107744:	08107803 	.word	0x08107803
 8107748:	08107803 	.word	0x08107803
 810774c:	08107803 	.word	0x08107803
 8107750:	08107803 	.word	0x08107803
 8107754:	081077cf 	.word	0x081077cf
 8107758:	08107803 	.word	0x08107803
 810775c:	08107803 	.word	0x08107803
 8107760:	08107803 	.word	0x08107803
 8107764:	08107803 	.word	0x08107803
 8107768:	08107803 	.word	0x08107803
 810776c:	08107803 	.word	0x08107803
 8107770:	08107803 	.word	0x08107803
 8107774:	08107803 	.word	0x08107803
 8107778:	08107803 	.word	0x08107803
 810777c:	08107803 	.word	0x08107803
 8107780:	08107803 	.word	0x08107803
 8107784:	08107803 	.word	0x08107803
 8107788:	08107803 	.word	0x08107803
 810778c:	08107803 	.word	0x08107803
 8107790:	08107803 	.word	0x08107803
 8107794:	081077f5 	.word	0x081077f5
 8107798:	2b40      	cmp	r3, #64	@ 0x40
 810779a:	d02e      	beq.n	81077fa <UART_SetConfig+0xa36>
 810779c:	e031      	b.n	8107802 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810779e:	f7fc fc89 	bl	81040b4 <HAL_RCC_GetPCLK1Freq>
 81077a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81077a4:	e033      	b.n	810780e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81077a6:	f7fc fc9b 	bl	81040e0 <HAL_RCC_GetPCLK2Freq>
 81077aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81077ac:	e02f      	b.n	810780e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81077ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81077b2:	4618      	mov	r0, r3
 81077b4:	f7fe fc8a 	bl	81060cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81077b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81077ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077bc:	e027      	b.n	810780e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81077be:	f107 0318 	add.w	r3, r7, #24
 81077c2:	4618      	mov	r0, r3
 81077c4:	f7fe fdd6 	bl	8106374 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81077c8:	69fb      	ldr	r3, [r7, #28]
 81077ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077cc:	e01f      	b.n	810780e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81077ce:	4b2d      	ldr	r3, [pc, #180]	@ (8107884 <UART_SetConfig+0xac0>)
 81077d0:	681b      	ldr	r3, [r3, #0]
 81077d2:	f003 0320 	and.w	r3, r3, #32
 81077d6:	2b00      	cmp	r3, #0
 81077d8:	d009      	beq.n	81077ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81077da:	4b2a      	ldr	r3, [pc, #168]	@ (8107884 <UART_SetConfig+0xac0>)
 81077dc:	681b      	ldr	r3, [r3, #0]
 81077de:	08db      	lsrs	r3, r3, #3
 81077e0:	f003 0303 	and.w	r3, r3, #3
 81077e4:	4a28      	ldr	r2, [pc, #160]	@ (8107888 <UART_SetConfig+0xac4>)
 81077e6:	fa22 f303 	lsr.w	r3, r2, r3
 81077ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81077ec:	e00f      	b.n	810780e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81077ee:	4b26      	ldr	r3, [pc, #152]	@ (8107888 <UART_SetConfig+0xac4>)
 81077f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077f2:	e00c      	b.n	810780e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81077f4:	4b25      	ldr	r3, [pc, #148]	@ (810788c <UART_SetConfig+0xac8>)
 81077f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81077f8:	e009      	b.n	810780e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81077fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81077fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107800:	e005      	b.n	810780e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8107802:	2300      	movs	r3, #0
 8107804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8107806:	2301      	movs	r3, #1
 8107808:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810780c:	bf00      	nop
    }

    if (pclk != 0U)
 810780e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107810:	2b00      	cmp	r3, #0
 8107812:	d021      	beq.n	8107858 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107814:	697b      	ldr	r3, [r7, #20]
 8107816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107818:	4a1d      	ldr	r2, [pc, #116]	@ (8107890 <UART_SetConfig+0xacc>)
 810781a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810781e:	461a      	mov	r2, r3
 8107820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107822:	fbb3 f2f2 	udiv	r2, r3, r2
 8107826:	697b      	ldr	r3, [r7, #20]
 8107828:	685b      	ldr	r3, [r3, #4]
 810782a:	085b      	lsrs	r3, r3, #1
 810782c:	441a      	add	r2, r3
 810782e:	697b      	ldr	r3, [r7, #20]
 8107830:	685b      	ldr	r3, [r3, #4]
 8107832:	fbb2 f3f3 	udiv	r3, r2, r3
 8107836:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810783a:	2b0f      	cmp	r3, #15
 810783c:	d909      	bls.n	8107852 <UART_SetConfig+0xa8e>
 810783e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107844:	d205      	bcs.n	8107852 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8107846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107848:	b29a      	uxth	r2, r3
 810784a:	697b      	ldr	r3, [r7, #20]
 810784c:	681b      	ldr	r3, [r3, #0]
 810784e:	60da      	str	r2, [r3, #12]
 8107850:	e002      	b.n	8107858 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8107852:	2301      	movs	r3, #1
 8107854:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8107858:	697b      	ldr	r3, [r7, #20]
 810785a:	2201      	movs	r2, #1
 810785c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8107860:	697b      	ldr	r3, [r7, #20]
 8107862:	2201      	movs	r2, #1
 8107864:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8107868:	697b      	ldr	r3, [r7, #20]
 810786a:	2200      	movs	r2, #0
 810786c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810786e:	697b      	ldr	r3, [r7, #20]
 8107870:	2200      	movs	r2, #0
 8107872:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8107874:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8107878:	4618      	mov	r0, r3
 810787a:	3748      	adds	r7, #72	@ 0x48
 810787c:	46bd      	mov	sp, r7
 810787e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107882:	bf00      	nop
 8107884:	58024400 	.word	0x58024400
 8107888:	03d09000 	.word	0x03d09000
 810788c:	003d0900 	.word	0x003d0900
 8107890:	0810b8f0 	.word	0x0810b8f0

08107894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8107894:	b480      	push	{r7}
 8107896:	b083      	sub	sp, #12
 8107898:	af00      	add	r7, sp, #0
 810789a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810789c:	687b      	ldr	r3, [r7, #4]
 810789e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81078a0:	f003 0308 	and.w	r3, r3, #8
 81078a4:	2b00      	cmp	r3, #0
 81078a6:	d00a      	beq.n	81078be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81078a8:	687b      	ldr	r3, [r7, #4]
 81078aa:	681b      	ldr	r3, [r3, #0]
 81078ac:	685b      	ldr	r3, [r3, #4]
 81078ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 81078b2:	687b      	ldr	r3, [r7, #4]
 81078b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81078b6:	687b      	ldr	r3, [r7, #4]
 81078b8:	681b      	ldr	r3, [r3, #0]
 81078ba:	430a      	orrs	r2, r1
 81078bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81078be:	687b      	ldr	r3, [r7, #4]
 81078c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81078c2:	f003 0301 	and.w	r3, r3, #1
 81078c6:	2b00      	cmp	r3, #0
 81078c8:	d00a      	beq.n	81078e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81078ca:	687b      	ldr	r3, [r7, #4]
 81078cc:	681b      	ldr	r3, [r3, #0]
 81078ce:	685b      	ldr	r3, [r3, #4]
 81078d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 81078d4:	687b      	ldr	r3, [r7, #4]
 81078d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81078d8:	687b      	ldr	r3, [r7, #4]
 81078da:	681b      	ldr	r3, [r3, #0]
 81078dc:	430a      	orrs	r2, r1
 81078de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81078e0:	687b      	ldr	r3, [r7, #4]
 81078e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81078e4:	f003 0302 	and.w	r3, r3, #2
 81078e8:	2b00      	cmp	r3, #0
 81078ea:	d00a      	beq.n	8107902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81078ec:	687b      	ldr	r3, [r7, #4]
 81078ee:	681b      	ldr	r3, [r3, #0]
 81078f0:	685b      	ldr	r3, [r3, #4]
 81078f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81078f6:	687b      	ldr	r3, [r7, #4]
 81078f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81078fa:	687b      	ldr	r3, [r7, #4]
 81078fc:	681b      	ldr	r3, [r3, #0]
 81078fe:	430a      	orrs	r2, r1
 8107900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107902:	687b      	ldr	r3, [r7, #4]
 8107904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107906:	f003 0304 	and.w	r3, r3, #4
 810790a:	2b00      	cmp	r3, #0
 810790c:	d00a      	beq.n	8107924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810790e:	687b      	ldr	r3, [r7, #4]
 8107910:	681b      	ldr	r3, [r3, #0]
 8107912:	685b      	ldr	r3, [r3, #4]
 8107914:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8107918:	687b      	ldr	r3, [r7, #4]
 810791a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810791c:	687b      	ldr	r3, [r7, #4]
 810791e:	681b      	ldr	r3, [r3, #0]
 8107920:	430a      	orrs	r2, r1
 8107922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8107924:	687b      	ldr	r3, [r7, #4]
 8107926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107928:	f003 0310 	and.w	r3, r3, #16
 810792c:	2b00      	cmp	r3, #0
 810792e:	d00a      	beq.n	8107946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107930:	687b      	ldr	r3, [r7, #4]
 8107932:	681b      	ldr	r3, [r3, #0]
 8107934:	689b      	ldr	r3, [r3, #8]
 8107936:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810793a:	687b      	ldr	r3, [r7, #4]
 810793c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810793e:	687b      	ldr	r3, [r7, #4]
 8107940:	681b      	ldr	r3, [r3, #0]
 8107942:	430a      	orrs	r2, r1
 8107944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8107946:	687b      	ldr	r3, [r7, #4]
 8107948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810794a:	f003 0320 	and.w	r3, r3, #32
 810794e:	2b00      	cmp	r3, #0
 8107950:	d00a      	beq.n	8107968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107952:	687b      	ldr	r3, [r7, #4]
 8107954:	681b      	ldr	r3, [r3, #0]
 8107956:	689b      	ldr	r3, [r3, #8]
 8107958:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810795c:	687b      	ldr	r3, [r7, #4]
 810795e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8107960:	687b      	ldr	r3, [r7, #4]
 8107962:	681b      	ldr	r3, [r3, #0]
 8107964:	430a      	orrs	r2, r1
 8107966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8107968:	687b      	ldr	r3, [r7, #4]
 810796a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810796c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8107970:	2b00      	cmp	r3, #0
 8107972:	d01a      	beq.n	81079aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107974:	687b      	ldr	r3, [r7, #4]
 8107976:	681b      	ldr	r3, [r3, #0]
 8107978:	685b      	ldr	r3, [r3, #4]
 810797a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810797e:	687b      	ldr	r3, [r7, #4]
 8107980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8107982:	687b      	ldr	r3, [r7, #4]
 8107984:	681b      	ldr	r3, [r3, #0]
 8107986:	430a      	orrs	r2, r1
 8107988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810798a:	687b      	ldr	r3, [r7, #4]
 810798c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810798e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107992:	d10a      	bne.n	81079aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8107994:	687b      	ldr	r3, [r7, #4]
 8107996:	681b      	ldr	r3, [r3, #0]
 8107998:	685b      	ldr	r3, [r3, #4]
 810799a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810799e:	687b      	ldr	r3, [r7, #4]
 81079a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	681b      	ldr	r3, [r3, #0]
 81079a6:	430a      	orrs	r2, r1
 81079a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81079aa:	687b      	ldr	r3, [r7, #4]
 81079ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81079ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81079b2:	2b00      	cmp	r3, #0
 81079b4:	d00a      	beq.n	81079cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81079b6:	687b      	ldr	r3, [r7, #4]
 81079b8:	681b      	ldr	r3, [r3, #0]
 81079ba:	685b      	ldr	r3, [r3, #4]
 81079bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 81079c0:	687b      	ldr	r3, [r7, #4]
 81079c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81079c4:	687b      	ldr	r3, [r7, #4]
 81079c6:	681b      	ldr	r3, [r3, #0]
 81079c8:	430a      	orrs	r2, r1
 81079ca:	605a      	str	r2, [r3, #4]
  }
}
 81079cc:	bf00      	nop
 81079ce:	370c      	adds	r7, #12
 81079d0:	46bd      	mov	sp, r7
 81079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079d6:	4770      	bx	lr

081079d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81079d8:	b580      	push	{r7, lr}
 81079da:	b098      	sub	sp, #96	@ 0x60
 81079dc:	af02      	add	r7, sp, #8
 81079de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81079e0:	687b      	ldr	r3, [r7, #4]
 81079e2:	2200      	movs	r2, #0
 81079e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81079e8:	f7f9 fd06 	bl	81013f8 <HAL_GetTick>
 81079ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81079ee:	687b      	ldr	r3, [r7, #4]
 81079f0:	681b      	ldr	r3, [r3, #0]
 81079f2:	681b      	ldr	r3, [r3, #0]
 81079f4:	f003 0308 	and.w	r3, r3, #8
 81079f8:	2b08      	cmp	r3, #8
 81079fa:	d12f      	bne.n	8107a5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81079fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8107a00:	9300      	str	r3, [sp, #0]
 8107a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8107a04:	2200      	movs	r2, #0
 8107a06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8107a0a:	6878      	ldr	r0, [r7, #4]
 8107a0c:	f000 f88e 	bl	8107b2c <UART_WaitOnFlagUntilTimeout>
 8107a10:	4603      	mov	r3, r0
 8107a12:	2b00      	cmp	r3, #0
 8107a14:	d022      	beq.n	8107a5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8107a16:	687b      	ldr	r3, [r7, #4]
 8107a18:	681b      	ldr	r3, [r3, #0]
 8107a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107a1e:	e853 3f00 	ldrex	r3, [r3]
 8107a22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8107a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107a26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8107a2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8107a2c:	687b      	ldr	r3, [r7, #4]
 8107a2e:	681b      	ldr	r3, [r3, #0]
 8107a30:	461a      	mov	r2, r3
 8107a32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8107a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8107a36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107a38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8107a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8107a3c:	e841 2300 	strex	r3, r2, [r1]
 8107a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8107a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107a44:	2b00      	cmp	r3, #0
 8107a46:	d1e6      	bne.n	8107a16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8107a48:	687b      	ldr	r3, [r7, #4]
 8107a4a:	2220      	movs	r2, #32
 8107a4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8107a50:	687b      	ldr	r3, [r7, #4]
 8107a52:	2200      	movs	r2, #0
 8107a54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107a58:	2303      	movs	r3, #3
 8107a5a:	e063      	b.n	8107b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8107a5c:	687b      	ldr	r3, [r7, #4]
 8107a5e:	681b      	ldr	r3, [r3, #0]
 8107a60:	681b      	ldr	r3, [r3, #0]
 8107a62:	f003 0304 	and.w	r3, r3, #4
 8107a66:	2b04      	cmp	r3, #4
 8107a68:	d149      	bne.n	8107afe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107a6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8107a6e:	9300      	str	r3, [sp, #0]
 8107a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8107a72:	2200      	movs	r2, #0
 8107a74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8107a78:	6878      	ldr	r0, [r7, #4]
 8107a7a:	f000 f857 	bl	8107b2c <UART_WaitOnFlagUntilTimeout>
 8107a7e:	4603      	mov	r3, r0
 8107a80:	2b00      	cmp	r3, #0
 8107a82:	d03c      	beq.n	8107afe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8107a84:	687b      	ldr	r3, [r7, #4]
 8107a86:	681b      	ldr	r3, [r3, #0]
 8107a88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107a8c:	e853 3f00 	ldrex	r3, [r3]
 8107a90:	623b      	str	r3, [r7, #32]
   return(result);
 8107a92:	6a3b      	ldr	r3, [r7, #32]
 8107a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8107a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8107a9a:	687b      	ldr	r3, [r7, #4]
 8107a9c:	681b      	ldr	r3, [r3, #0]
 8107a9e:	461a      	mov	r2, r3
 8107aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8107aa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8107aa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107aa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8107aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8107aaa:	e841 2300 	strex	r3, r2, [r1]
 8107aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8107ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107ab2:	2b00      	cmp	r3, #0
 8107ab4:	d1e6      	bne.n	8107a84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	681b      	ldr	r3, [r3, #0]
 8107aba:	3308      	adds	r3, #8
 8107abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107abe:	693b      	ldr	r3, [r7, #16]
 8107ac0:	e853 3f00 	ldrex	r3, [r3]
 8107ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8107ac6:	68fb      	ldr	r3, [r7, #12]
 8107ac8:	f023 0301 	bic.w	r3, r3, #1
 8107acc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107ace:	687b      	ldr	r3, [r7, #4]
 8107ad0:	681b      	ldr	r3, [r3, #0]
 8107ad2:	3308      	adds	r3, #8
 8107ad4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8107ad6:	61fa      	str	r2, [r7, #28]
 8107ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107ada:	69b9      	ldr	r1, [r7, #24]
 8107adc:	69fa      	ldr	r2, [r7, #28]
 8107ade:	e841 2300 	strex	r3, r2, [r1]
 8107ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8107ae4:	697b      	ldr	r3, [r7, #20]
 8107ae6:	2b00      	cmp	r3, #0
 8107ae8:	d1e5      	bne.n	8107ab6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8107aea:	687b      	ldr	r3, [r7, #4]
 8107aec:	2220      	movs	r2, #32
 8107aee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8107af2:	687b      	ldr	r3, [r7, #4]
 8107af4:	2200      	movs	r2, #0
 8107af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107afa:	2303      	movs	r3, #3
 8107afc:	e012      	b.n	8107b24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8107afe:	687b      	ldr	r3, [r7, #4]
 8107b00:	2220      	movs	r2, #32
 8107b02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8107b06:	687b      	ldr	r3, [r7, #4]
 8107b08:	2220      	movs	r2, #32
 8107b0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107b0e:	687b      	ldr	r3, [r7, #4]
 8107b10:	2200      	movs	r2, #0
 8107b12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8107b14:	687b      	ldr	r3, [r7, #4]
 8107b16:	2200      	movs	r2, #0
 8107b18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8107b1a:	687b      	ldr	r3, [r7, #4]
 8107b1c:	2200      	movs	r2, #0
 8107b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8107b22:	2300      	movs	r3, #0
}
 8107b24:	4618      	mov	r0, r3
 8107b26:	3758      	adds	r7, #88	@ 0x58
 8107b28:	46bd      	mov	sp, r7
 8107b2a:	bd80      	pop	{r7, pc}

08107b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8107b2c:	b580      	push	{r7, lr}
 8107b2e:	b084      	sub	sp, #16
 8107b30:	af00      	add	r7, sp, #0
 8107b32:	60f8      	str	r0, [r7, #12]
 8107b34:	60b9      	str	r1, [r7, #8]
 8107b36:	603b      	str	r3, [r7, #0]
 8107b38:	4613      	mov	r3, r2
 8107b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107b3c:	e04f      	b.n	8107bde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107b3e:	69bb      	ldr	r3, [r7, #24]
 8107b40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8107b44:	d04b      	beq.n	8107bde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107b46:	f7f9 fc57 	bl	81013f8 <HAL_GetTick>
 8107b4a:	4602      	mov	r2, r0
 8107b4c:	683b      	ldr	r3, [r7, #0]
 8107b4e:	1ad3      	subs	r3, r2, r3
 8107b50:	69ba      	ldr	r2, [r7, #24]
 8107b52:	429a      	cmp	r2, r3
 8107b54:	d302      	bcc.n	8107b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8107b56:	69bb      	ldr	r3, [r7, #24]
 8107b58:	2b00      	cmp	r3, #0
 8107b5a:	d101      	bne.n	8107b60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8107b5c:	2303      	movs	r3, #3
 8107b5e:	e04e      	b.n	8107bfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8107b60:	68fb      	ldr	r3, [r7, #12]
 8107b62:	681b      	ldr	r3, [r3, #0]
 8107b64:	681b      	ldr	r3, [r3, #0]
 8107b66:	f003 0304 	and.w	r3, r3, #4
 8107b6a:	2b00      	cmp	r3, #0
 8107b6c:	d037      	beq.n	8107bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8107b6e:	68bb      	ldr	r3, [r7, #8]
 8107b70:	2b80      	cmp	r3, #128	@ 0x80
 8107b72:	d034      	beq.n	8107bde <UART_WaitOnFlagUntilTimeout+0xb2>
 8107b74:	68bb      	ldr	r3, [r7, #8]
 8107b76:	2b40      	cmp	r3, #64	@ 0x40
 8107b78:	d031      	beq.n	8107bde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8107b7a:	68fb      	ldr	r3, [r7, #12]
 8107b7c:	681b      	ldr	r3, [r3, #0]
 8107b7e:	69db      	ldr	r3, [r3, #28]
 8107b80:	f003 0308 	and.w	r3, r3, #8
 8107b84:	2b08      	cmp	r3, #8
 8107b86:	d110      	bne.n	8107baa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8107b88:	68fb      	ldr	r3, [r7, #12]
 8107b8a:	681b      	ldr	r3, [r3, #0]
 8107b8c:	2208      	movs	r2, #8
 8107b8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8107b90:	68f8      	ldr	r0, [r7, #12]
 8107b92:	f000 f838 	bl	8107c06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8107b96:	68fb      	ldr	r3, [r7, #12]
 8107b98:	2208      	movs	r2, #8
 8107b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8107b9e:	68fb      	ldr	r3, [r7, #12]
 8107ba0:	2200      	movs	r2, #0
 8107ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8107ba6:	2301      	movs	r3, #1
 8107ba8:	e029      	b.n	8107bfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107baa:	68fb      	ldr	r3, [r7, #12]
 8107bac:	681b      	ldr	r3, [r3, #0]
 8107bae:	69db      	ldr	r3, [r3, #28]
 8107bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8107bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8107bb8:	d111      	bne.n	8107bde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107bba:	68fb      	ldr	r3, [r7, #12]
 8107bbc:	681b      	ldr	r3, [r3, #0]
 8107bbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8107bc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8107bc4:	68f8      	ldr	r0, [r7, #12]
 8107bc6:	f000 f81e 	bl	8107c06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107bca:	68fb      	ldr	r3, [r7, #12]
 8107bcc:	2220      	movs	r2, #32
 8107bce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8107bd2:	68fb      	ldr	r3, [r7, #12]
 8107bd4:	2200      	movs	r2, #0
 8107bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8107bda:	2303      	movs	r3, #3
 8107bdc:	e00f      	b.n	8107bfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107bde:	68fb      	ldr	r3, [r7, #12]
 8107be0:	681b      	ldr	r3, [r3, #0]
 8107be2:	69da      	ldr	r2, [r3, #28]
 8107be4:	68bb      	ldr	r3, [r7, #8]
 8107be6:	4013      	ands	r3, r2
 8107be8:	68ba      	ldr	r2, [r7, #8]
 8107bea:	429a      	cmp	r2, r3
 8107bec:	bf0c      	ite	eq
 8107bee:	2301      	moveq	r3, #1
 8107bf0:	2300      	movne	r3, #0
 8107bf2:	b2db      	uxtb	r3, r3
 8107bf4:	461a      	mov	r2, r3
 8107bf6:	79fb      	ldrb	r3, [r7, #7]
 8107bf8:	429a      	cmp	r2, r3
 8107bfa:	d0a0      	beq.n	8107b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8107bfc:	2300      	movs	r3, #0
}
 8107bfe:	4618      	mov	r0, r3
 8107c00:	3710      	adds	r7, #16
 8107c02:	46bd      	mov	sp, r7
 8107c04:	bd80      	pop	{r7, pc}

08107c06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8107c06:	b480      	push	{r7}
 8107c08:	b095      	sub	sp, #84	@ 0x54
 8107c0a:	af00      	add	r7, sp, #0
 8107c0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8107c0e:	687b      	ldr	r3, [r7, #4]
 8107c10:	681b      	ldr	r3, [r3, #0]
 8107c12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107c16:	e853 3f00 	ldrex	r3, [r3]
 8107c1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8107c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107c1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8107c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8107c24:	687b      	ldr	r3, [r7, #4]
 8107c26:	681b      	ldr	r3, [r3, #0]
 8107c28:	461a      	mov	r2, r3
 8107c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8107c2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8107c2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107c30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8107c32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8107c34:	e841 2300 	strex	r3, r2, [r1]
 8107c38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8107c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107c3c:	2b00      	cmp	r3, #0
 8107c3e:	d1e6      	bne.n	8107c0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8107c40:	687b      	ldr	r3, [r7, #4]
 8107c42:	681b      	ldr	r3, [r3, #0]
 8107c44:	3308      	adds	r3, #8
 8107c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107c48:	6a3b      	ldr	r3, [r7, #32]
 8107c4a:	e853 3f00 	ldrex	r3, [r3]
 8107c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8107c50:	69fb      	ldr	r3, [r7, #28]
 8107c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8107c56:	f023 0301 	bic.w	r3, r3, #1
 8107c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107c5c:	687b      	ldr	r3, [r7, #4]
 8107c5e:	681b      	ldr	r3, [r3, #0]
 8107c60:	3308      	adds	r3, #8
 8107c62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8107c64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8107c66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107c68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8107c6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8107c6c:	e841 2300 	strex	r3, r2, [r1]
 8107c70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8107c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107c74:	2b00      	cmp	r3, #0
 8107c76:	d1e3      	bne.n	8107c40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8107c78:	687b      	ldr	r3, [r7, #4]
 8107c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107c7c:	2b01      	cmp	r3, #1
 8107c7e:	d118      	bne.n	8107cb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8107c80:	687b      	ldr	r3, [r7, #4]
 8107c82:	681b      	ldr	r3, [r3, #0]
 8107c84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107c86:	68fb      	ldr	r3, [r7, #12]
 8107c88:	e853 3f00 	ldrex	r3, [r3]
 8107c8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8107c8e:	68bb      	ldr	r3, [r7, #8]
 8107c90:	f023 0310 	bic.w	r3, r3, #16
 8107c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8107c96:	687b      	ldr	r3, [r7, #4]
 8107c98:	681b      	ldr	r3, [r3, #0]
 8107c9a:	461a      	mov	r2, r3
 8107c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8107c9e:	61bb      	str	r3, [r7, #24]
 8107ca0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107ca2:	6979      	ldr	r1, [r7, #20]
 8107ca4:	69ba      	ldr	r2, [r7, #24]
 8107ca6:	e841 2300 	strex	r3, r2, [r1]
 8107caa:	613b      	str	r3, [r7, #16]
   return(result);
 8107cac:	693b      	ldr	r3, [r7, #16]
 8107cae:	2b00      	cmp	r3, #0
 8107cb0:	d1e6      	bne.n	8107c80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8107cb2:	687b      	ldr	r3, [r7, #4]
 8107cb4:	2220      	movs	r2, #32
 8107cb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107cba:	687b      	ldr	r3, [r7, #4]
 8107cbc:	2200      	movs	r2, #0
 8107cbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8107cc0:	687b      	ldr	r3, [r7, #4]
 8107cc2:	2200      	movs	r2, #0
 8107cc4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8107cc6:	bf00      	nop
 8107cc8:	3754      	adds	r7, #84	@ 0x54
 8107cca:	46bd      	mov	sp, r7
 8107ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cd0:	4770      	bx	lr

08107cd2 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8107cd2:	b480      	push	{r7}
 8107cd4:	b083      	sub	sp, #12
 8107cd6:	af00      	add	r7, sp, #0
 8107cd8:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8107cda:	687b      	ldr	r3, [r7, #4]
 8107cdc:	687a      	ldr	r2, [r7, #4]
 8107cde:	605a      	str	r2, [r3, #4]
 8107ce0:	687b      	ldr	r3, [r7, #4]
 8107ce2:	685a      	ldr	r2, [r3, #4]
 8107ce4:	687b      	ldr	r3, [r7, #4]
 8107ce6:	601a      	str	r2, [r3, #0]
}
 8107ce8:	bf00      	nop
 8107cea:	370c      	adds	r7, #12
 8107cec:	46bd      	mov	sp, r7
 8107cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cf2:	4770      	bx	lr

08107cf4 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8107cf4:	b480      	push	{r7}
 8107cf6:	b083      	sub	sp, #12
 8107cf8:	af00      	add	r7, sp, #0
 8107cfa:	6078      	str	r0, [r7, #4]
 8107cfc:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8107cfe:	687b      	ldr	r3, [r7, #4]
 8107d00:	685a      	ldr	r2, [r3, #4]
 8107d02:	683b      	ldr	r3, [r7, #0]
 8107d04:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8107d06:	683b      	ldr	r3, [r7, #0]
 8107d08:	687a      	ldr	r2, [r7, #4]
 8107d0a:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8107d0c:	683b      	ldr	r3, [r7, #0]
 8107d0e:	681b      	ldr	r3, [r3, #0]
 8107d10:	683a      	ldr	r2, [r7, #0]
 8107d12:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8107d14:	683b      	ldr	r3, [r7, #0]
 8107d16:	685b      	ldr	r3, [r3, #4]
 8107d18:	683a      	ldr	r2, [r7, #0]
 8107d1a:	601a      	str	r2, [r3, #0]
}
 8107d1c:	bf00      	nop
 8107d1e:	370c      	adds	r7, #12
 8107d20:	46bd      	mov	sp, r7
 8107d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d26:	4770      	bx	lr

08107d28 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8107d28:	b580      	push	{r7, lr}
 8107d2a:	b082      	sub	sp, #8
 8107d2c:	af00      	add	r7, sp, #0
 8107d2e:	6078      	str	r0, [r7, #4]
 8107d30:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8107d32:	6839      	ldr	r1, [r7, #0]
 8107d34:	6878      	ldr	r0, [r7, #4]
 8107d36:	f7ff ffdd 	bl	8107cf4 <metal_list_add_before>
}
 8107d3a:	bf00      	nop
 8107d3c:	3708      	adds	r7, #8
 8107d3e:	46bd      	mov	sp, r7
 8107d40:	bd80      	pop	{r7, pc}

08107d42 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8107d42:	b580      	push	{r7, lr}
 8107d44:	b082      	sub	sp, #8
 8107d46:	af00      	add	r7, sp, #0
 8107d48:	6078      	str	r0, [r7, #4]
 8107d4a:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8107d4c:	6839      	ldr	r1, [r7, #0]
 8107d4e:	6878      	ldr	r0, [r7, #4]
 8107d50:	f001 fdc0 	bl	81098d4 <metal_machine_cache_flush>
}
 8107d54:	bf00      	nop
 8107d56:	3708      	adds	r7, #8
 8107d58:	46bd      	mov	sp, r7
 8107d5a:	bd80      	pop	{r7, pc}

08107d5c <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8107d5c:	b580      	push	{r7, lr}
 8107d5e:	b082      	sub	sp, #8
 8107d60:	af00      	add	r7, sp, #0
 8107d62:	6078      	str	r0, [r7, #4]
 8107d64:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8107d66:	6839      	ldr	r1, [r7, #0]
 8107d68:	6878      	ldr	r0, [r7, #4]
 8107d6a:	f001 fdbe 	bl	81098ea <metal_machine_cache_invalidate>
}
 8107d6e:	bf00      	nop
 8107d70:	3708      	adds	r7, #8
 8107d72:	46bd      	mov	sp, r7
 8107d74:	bd80      	pop	{r7, pc}

08107d76 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8107d76:	b580      	push	{r7, lr}
 8107d78:	b082      	sub	sp, #8
 8107d7a:	af00      	add	r7, sp, #0
 8107d7c:	6078      	str	r0, [r7, #4]
 8107d7e:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8107d80:	6839      	ldr	r1, [r7, #0]
 8107d82:	6878      	ldr	r0, [r7, #4]
 8107d84:	f7ff ffdd 	bl	8107d42 <__metal_cache_flush>
}
 8107d88:	bf00      	nop
 8107d8a:	3708      	adds	r7, #8
 8107d8c:	46bd      	mov	sp, r7
 8107d8e:	bd80      	pop	{r7, pc}

08107d90 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8107d90:	b580      	push	{r7, lr}
 8107d92:	b082      	sub	sp, #8
 8107d94:	af00      	add	r7, sp, #0
 8107d96:	6078      	str	r0, [r7, #4]
 8107d98:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8107d9a:	6839      	ldr	r1, [r7, #0]
 8107d9c:	6878      	ldr	r0, [r7, #4]
 8107d9e:	f7ff ffdd 	bl	8107d5c <__metal_cache_invalidate>
}
 8107da2:	bf00      	nop
 8107da4:	3708      	adds	r7, #8
 8107da6:	46bd      	mov	sp, r7
 8107da8:	bd80      	pop	{r7, pc}
	...

08107dac <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8107dac:	b580      	push	{r7, lr}
 8107dae:	b082      	sub	sp, #8
 8107db0:	af00      	add	r7, sp, #0
 8107db2:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8107db4:	687b      	ldr	r3, [r7, #4]
 8107db6:	2b00      	cmp	r3, #0
 8107db8:	d008      	beq.n	8107dcc <metal_bus_register+0x20>
 8107dba:	687b      	ldr	r3, [r7, #4]
 8107dbc:	681b      	ldr	r3, [r3, #0]
 8107dbe:	2b00      	cmp	r3, #0
 8107dc0:	d004      	beq.n	8107dcc <metal_bus_register+0x20>
 8107dc2:	687b      	ldr	r3, [r7, #4]
 8107dc4:	681b      	ldr	r3, [r3, #0]
 8107dc6:	781b      	ldrb	r3, [r3, #0]
 8107dc8:	2b00      	cmp	r3, #0
 8107dca:	d102      	bne.n	8107dd2 <metal_bus_register+0x26>
		return -EINVAL;
 8107dcc:	f06f 0315 	mvn.w	r3, #21
 8107dd0:	e026      	b.n	8107e20 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8107dd2:	687b      	ldr	r3, [r7, #4]
 8107dd4:	681b      	ldr	r3, [r3, #0]
 8107dd6:	2100      	movs	r1, #0
 8107dd8:	4618      	mov	r0, r3
 8107dda:	f000 f82b 	bl	8107e34 <metal_bus_find>
 8107dde:	4603      	mov	r3, r0
 8107de0:	2b00      	cmp	r3, #0
 8107de2:	d102      	bne.n	8107dea <metal_bus_register+0x3e>
		return -EEXIST;
 8107de4:	f06f 0310 	mvn.w	r3, #16
 8107de8:	e01a      	b.n	8107e20 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8107dea:	687b      	ldr	r3, [r7, #4]
 8107dec:	331c      	adds	r3, #28
 8107dee:	4618      	mov	r0, r3
 8107df0:	f7ff ff6f 	bl	8107cd2 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8107df4:	687b      	ldr	r3, [r7, #4]
 8107df6:	3324      	adds	r3, #36	@ 0x24
 8107df8:	4619      	mov	r1, r3
 8107dfa:	480b      	ldr	r0, [pc, #44]	@ (8107e28 <metal_bus_register+0x7c>)
 8107dfc:	f7ff ff94 	bl	8107d28 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8107e00:	4b0a      	ldr	r3, [pc, #40]	@ (8107e2c <metal_bus_register+0x80>)
 8107e02:	781b      	ldrb	r3, [r3, #0]
 8107e04:	2b06      	cmp	r3, #6
 8107e06:	d90a      	bls.n	8107e1e <metal_bus_register+0x72>
 8107e08:	4b08      	ldr	r3, [pc, #32]	@ (8107e2c <metal_bus_register+0x80>)
 8107e0a:	685b      	ldr	r3, [r3, #4]
 8107e0c:	2b00      	cmp	r3, #0
 8107e0e:	d006      	beq.n	8107e1e <metal_bus_register+0x72>
 8107e10:	4b06      	ldr	r3, [pc, #24]	@ (8107e2c <metal_bus_register+0x80>)
 8107e12:	685b      	ldr	r3, [r3, #4]
 8107e14:	687a      	ldr	r2, [r7, #4]
 8107e16:	6812      	ldr	r2, [r2, #0]
 8107e18:	4905      	ldr	r1, [pc, #20]	@ (8107e30 <metal_bus_register+0x84>)
 8107e1a:	2007      	movs	r0, #7
 8107e1c:	4798      	blx	r3
	return 0;
 8107e1e:	2300      	movs	r3, #0
}
 8107e20:	4618      	mov	r0, r3
 8107e22:	3708      	adds	r7, #8
 8107e24:	46bd      	mov	sp, r7
 8107e26:	bd80      	pop	{r7, pc}
 8107e28:	10000540 	.word	0x10000540
 8107e2c:	10000538 	.word	0x10000538
 8107e30:	0810b710 	.word	0x0810b710

08107e34 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8107e34:	b580      	push	{r7, lr}
 8107e36:	b084      	sub	sp, #16
 8107e38:	af00      	add	r7, sp, #0
 8107e3a:	6078      	str	r0, [r7, #4]
 8107e3c:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8107e3e:	4b13      	ldr	r3, [pc, #76]	@ (8107e8c <metal_bus_find+0x58>)
 8107e40:	689b      	ldr	r3, [r3, #8]
 8107e42:	60fb      	str	r3, [r7, #12]
 8107e44:	e017      	b.n	8107e76 <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8107e46:	68fb      	ldr	r3, [r7, #12]
 8107e48:	3b24      	subs	r3, #36	@ 0x24
 8107e4a:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8107e4c:	68bb      	ldr	r3, [r7, #8]
 8107e4e:	681b      	ldr	r3, [r3, #0]
 8107e50:	6879      	ldr	r1, [r7, #4]
 8107e52:	4618      	mov	r0, r3
 8107e54:	f7f8 fa44 	bl	81002e0 <strcmp>
 8107e58:	4603      	mov	r3, r0
 8107e5a:	2b00      	cmp	r3, #0
 8107e5c:	d107      	bne.n	8107e6e <metal_bus_find+0x3a>
			continue;
		if (result)
 8107e5e:	683b      	ldr	r3, [r7, #0]
 8107e60:	2b00      	cmp	r3, #0
 8107e62:	d002      	beq.n	8107e6a <metal_bus_find+0x36>
			*result = bus;
 8107e64:	683b      	ldr	r3, [r7, #0]
 8107e66:	68ba      	ldr	r2, [r7, #8]
 8107e68:	601a      	str	r2, [r3, #0]
		return 0;
 8107e6a:	2300      	movs	r3, #0
 8107e6c:	e009      	b.n	8107e82 <metal_bus_find+0x4e>
			continue;
 8107e6e:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 8107e70:	68fb      	ldr	r3, [r7, #12]
 8107e72:	681b      	ldr	r3, [r3, #0]
 8107e74:	60fb      	str	r3, [r7, #12]
 8107e76:	68fb      	ldr	r3, [r7, #12]
 8107e78:	4a05      	ldr	r2, [pc, #20]	@ (8107e90 <metal_bus_find+0x5c>)
 8107e7a:	4293      	cmp	r3, r2
 8107e7c:	d1e3      	bne.n	8107e46 <metal_bus_find+0x12>
	}
	return -ENOENT;
 8107e7e:	f06f 0301 	mvn.w	r3, #1
}
 8107e82:	4618      	mov	r0, r3
 8107e84:	3710      	adds	r7, #16
 8107e86:	46bd      	mov	sp, r7
 8107e88:	bd80      	pop	{r7, pc}
 8107e8a:	bf00      	nop
 8107e8c:	10000538 	.word	0x10000538
 8107e90:	10000540 	.word	0x10000540

08107e94 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8107e94:	b580      	push	{r7, lr}
 8107e96:	b086      	sub	sp, #24
 8107e98:	af00      	add	r7, sp, #0
 8107e9a:	60f8      	str	r0, [r7, #12]
 8107e9c:	60b9      	str	r1, [r7, #8]
 8107e9e:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8107ea0:	68fb      	ldr	r3, [r7, #12]
 8107ea2:	2b00      	cmp	r3, #0
 8107ea4:	d00d      	beq.n	8107ec2 <metal_device_open+0x2e>
 8107ea6:	68fb      	ldr	r3, [r7, #12]
 8107ea8:	781b      	ldrb	r3, [r3, #0]
 8107eaa:	2b00      	cmp	r3, #0
 8107eac:	d009      	beq.n	8107ec2 <metal_device_open+0x2e>
 8107eae:	68bb      	ldr	r3, [r7, #8]
 8107eb0:	2b00      	cmp	r3, #0
 8107eb2:	d006      	beq.n	8107ec2 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8107eb4:	68bb      	ldr	r3, [r7, #8]
 8107eb6:	781b      	ldrb	r3, [r3, #0]
 8107eb8:	2b00      	cmp	r3, #0
 8107eba:	d002      	beq.n	8107ec2 <metal_device_open+0x2e>
 8107ebc:	687b      	ldr	r3, [r7, #4]
 8107ebe:	2b00      	cmp	r3, #0
 8107ec0:	d102      	bne.n	8107ec8 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8107ec2:	f06f 0315 	mvn.w	r3, #21
 8107ec6:	e01f      	b.n	8107f08 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8107ec8:	f107 0310 	add.w	r3, r7, #16
 8107ecc:	4619      	mov	r1, r3
 8107ece:	68f8      	ldr	r0, [r7, #12]
 8107ed0:	f7ff ffb0 	bl	8107e34 <metal_bus_find>
 8107ed4:	6178      	str	r0, [r7, #20]
	if (error)
 8107ed6:	697b      	ldr	r3, [r7, #20]
 8107ed8:	2b00      	cmp	r3, #0
 8107eda:	d001      	beq.n	8107ee0 <metal_device_open+0x4c>
		return error;
 8107edc:	697b      	ldr	r3, [r7, #20]
 8107ede:	e013      	b.n	8107f08 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8107ee0:	693b      	ldr	r3, [r7, #16]
 8107ee2:	689b      	ldr	r3, [r3, #8]
 8107ee4:	2b00      	cmp	r3, #0
 8107ee6:	d102      	bne.n	8107eee <metal_device_open+0x5a>
		return -ENODEV;
 8107ee8:	f06f 0312 	mvn.w	r3, #18
 8107eec:	e00c      	b.n	8107f08 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8107eee:	693b      	ldr	r3, [r7, #16]
 8107ef0:	689b      	ldr	r3, [r3, #8]
 8107ef2:	6938      	ldr	r0, [r7, #16]
 8107ef4:	687a      	ldr	r2, [r7, #4]
 8107ef6:	68b9      	ldr	r1, [r7, #8]
 8107ef8:	4798      	blx	r3
 8107efa:	6178      	str	r0, [r7, #20]
	if (error)
 8107efc:	697b      	ldr	r3, [r7, #20]
 8107efe:	2b00      	cmp	r3, #0
 8107f00:	d001      	beq.n	8107f06 <metal_device_open+0x72>
		return error;
 8107f02:	697b      	ldr	r3, [r7, #20]
 8107f04:	e000      	b.n	8107f08 <metal_device_open+0x74>

	return 0;
 8107f06:	2300      	movs	r3, #0
}
 8107f08:	4618      	mov	r0, r3
 8107f0a:	3718      	adds	r7, #24
 8107f0c:	46bd      	mov	sp, r7
 8107f0e:	bd80      	pop	{r7, pc}

08107f10 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8107f10:	b580      	push	{r7, lr}
 8107f12:	b082      	sub	sp, #8
 8107f14:	af00      	add	r7, sp, #0
 8107f16:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8107f18:	687b      	ldr	r3, [r7, #4]
 8107f1a:	681b      	ldr	r3, [r3, #0]
 8107f1c:	2b00      	cmp	r3, #0
 8107f1e:	d008      	beq.n	8107f32 <metal_register_generic_device+0x22>
 8107f20:	687b      	ldr	r3, [r7, #4]
 8107f22:	681b      	ldr	r3, [r3, #0]
 8107f24:	781b      	ldrb	r3, [r3, #0]
 8107f26:	2b00      	cmp	r3, #0
 8107f28:	d003      	beq.n	8107f32 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8107f2a:	687b      	ldr	r3, [r7, #4]
 8107f2c:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8107f2e:	2b02      	cmp	r3, #2
 8107f30:	d902      	bls.n	8107f38 <metal_register_generic_device+0x28>
		return -EINVAL;
 8107f32:	f06f 0315 	mvn.w	r3, #21
 8107f36:	e009      	b.n	8107f4c <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8107f38:	687b      	ldr	r3, [r7, #4]
 8107f3a:	4a06      	ldr	r2, [pc, #24]	@ (8107f54 <metal_register_generic_device+0x44>)
 8107f3c:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8107f3e:	687b      	ldr	r3, [r7, #4]
 8107f40:	336c      	adds	r3, #108	@ 0x6c
 8107f42:	4619      	mov	r1, r3
 8107f44:	4804      	ldr	r0, [pc, #16]	@ (8107f58 <metal_register_generic_device+0x48>)
 8107f46:	f7ff feef 	bl	8107d28 <metal_list_add_tail>
			    &device->node);
	return 0;
 8107f4a:	2300      	movs	r3, #0
}
 8107f4c:	4618      	mov	r0, r3
 8107f4e:	3708      	adds	r7, #8
 8107f50:	46bd      	mov	sp, r7
 8107f52:	bd80      	pop	{r7, pc}
 8107f54:	10000014 	.word	0x10000014
 8107f58:	10000550 	.word	0x10000550

08107f5c <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8107f5c:	b580      	push	{r7, lr}
 8107f5e:	b086      	sub	sp, #24
 8107f60:	af00      	add	r7, sp, #0
 8107f62:	60f8      	str	r0, [r7, #12]
 8107f64:	60b9      	str	r1, [r7, #8]
 8107f66:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8107f68:	4b12      	ldr	r3, [pc, #72]	@ (8107fb4 <metal_generic_dev_open+0x58>)
 8107f6a:	699b      	ldr	r3, [r3, #24]
 8107f6c:	617b      	str	r3, [r7, #20]
 8107f6e:	e017      	b.n	8107fa0 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8107f70:	697b      	ldr	r3, [r7, #20]
 8107f72:	3b6c      	subs	r3, #108	@ 0x6c
 8107f74:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8107f76:	693b      	ldr	r3, [r7, #16]
 8107f78:	681b      	ldr	r3, [r3, #0]
 8107f7a:	68b9      	ldr	r1, [r7, #8]
 8107f7c:	4618      	mov	r0, r3
 8107f7e:	f7f8 f9af 	bl	81002e0 <strcmp>
 8107f82:	4603      	mov	r3, r0
 8107f84:	2b00      	cmp	r3, #0
 8107f86:	d107      	bne.n	8107f98 <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 8107f88:	687b      	ldr	r3, [r7, #4]
 8107f8a:	693a      	ldr	r2, [r7, #16]
 8107f8c:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8107f8e:	6938      	ldr	r0, [r7, #16]
 8107f90:	f000 f890 	bl	81080b4 <metal_generic_dev_sys_open>
 8107f94:	4603      	mov	r3, r0
 8107f96:	e009      	b.n	8107fac <metal_generic_dev_open+0x50>
			continue;
 8107f98:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8107f9a:	697b      	ldr	r3, [r7, #20]
 8107f9c:	681b      	ldr	r3, [r3, #0]
 8107f9e:	617b      	str	r3, [r7, #20]
 8107fa0:	697b      	ldr	r3, [r7, #20]
 8107fa2:	4a05      	ldr	r2, [pc, #20]	@ (8107fb8 <metal_generic_dev_open+0x5c>)
 8107fa4:	4293      	cmp	r3, r2
 8107fa6:	d1e3      	bne.n	8107f70 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8107fa8:	f06f 0312 	mvn.w	r3, #18
}
 8107fac:	4618      	mov	r0, r3
 8107fae:	3718      	adds	r7, #24
 8107fb0:	46bd      	mov	sp, r7
 8107fb2:	bd80      	pop	{r7, pc}
 8107fb4:	10000538 	.word	0x10000538
 8107fb8:	10000550 	.word	0x10000550

08107fbc <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8107fbc:	b580      	push	{r7, lr}
 8107fbe:	b086      	sub	sp, #24
 8107fc0:	af00      	add	r7, sp, #0
 8107fc2:	60f8      	str	r0, [r7, #12]
 8107fc4:	60b9      	str	r1, [r7, #8]
 8107fc6:	607a      	str	r2, [r7, #4]
 8107fc8:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8107fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8107fcc:	683b      	ldr	r3, [r7, #0]
 8107fce:	429a      	cmp	r2, r3
 8107fd0:	d009      	beq.n	8107fe6 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8107fd2:	6a3a      	ldr	r2, [r7, #32]
 8107fd4:	4613      	mov	r3, r2
 8107fd6:	005b      	lsls	r3, r3, #1
 8107fd8:	4413      	add	r3, r2
 8107fda:	009b      	lsls	r3, r3, #2
 8107fdc:	461a      	mov	r2, r3
 8107fde:	6839      	ldr	r1, [r7, #0]
 8107fe0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8107fe2:	f002 fd9e 	bl	810ab22 <memcpy>
	for (i = 0; i < nents_in; i++) {
 8107fe6:	2300      	movs	r3, #0
 8107fe8:	617b      	str	r3, [r7, #20]
 8107fea:	e02f      	b.n	810804c <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8107fec:	687b      	ldr	r3, [r7, #4]
 8107fee:	2b02      	cmp	r3, #2
 8107ff0:	d114      	bne.n	810801c <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8107ff2:	697a      	ldr	r2, [r7, #20]
 8107ff4:	4613      	mov	r3, r2
 8107ff6:	005b      	lsls	r3, r3, #1
 8107ff8:	4413      	add	r3, r2
 8107ffa:	009b      	lsls	r3, r3, #2
 8107ffc:	461a      	mov	r2, r3
 8107ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108000:	4413      	add	r3, r2
 8108002:	6818      	ldr	r0, [r3, #0]
 8108004:	697a      	ldr	r2, [r7, #20]
 8108006:	4613      	mov	r3, r2
 8108008:	005b      	lsls	r3, r3, #1
 810800a:	4413      	add	r3, r2
 810800c:	009b      	lsls	r3, r3, #2
 810800e:	461a      	mov	r2, r3
 8108010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108012:	4413      	add	r3, r2
 8108014:	689b      	ldr	r3, [r3, #8]
 8108016:	4619      	mov	r1, r3
 8108018:	f7ff fead 	bl	8107d76 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 810801c:	697a      	ldr	r2, [r7, #20]
 810801e:	4613      	mov	r3, r2
 8108020:	005b      	lsls	r3, r3, #1
 8108022:	4413      	add	r3, r2
 8108024:	009b      	lsls	r3, r3, #2
 8108026:	461a      	mov	r2, r3
 8108028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810802a:	4413      	add	r3, r2
 810802c:	6818      	ldr	r0, [r3, #0]
 810802e:	697a      	ldr	r2, [r7, #20]
 8108030:	4613      	mov	r3, r2
 8108032:	005b      	lsls	r3, r3, #1
 8108034:	4413      	add	r3, r2
 8108036:	009b      	lsls	r3, r3, #2
 8108038:	461a      	mov	r2, r3
 810803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810803c:	4413      	add	r3, r2
 810803e:	689b      	ldr	r3, [r3, #8]
 8108040:	4619      	mov	r1, r3
 8108042:	f7ff fea5 	bl	8107d90 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8108046:	697b      	ldr	r3, [r7, #20]
 8108048:	3301      	adds	r3, #1
 810804a:	617b      	str	r3, [r7, #20]
 810804c:	697a      	ldr	r2, [r7, #20]
 810804e:	6a3b      	ldr	r3, [r7, #32]
 8108050:	429a      	cmp	r2, r3
 8108052:	dbcb      	blt.n	8107fec <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8108054:	6a3b      	ldr	r3, [r7, #32]
}
 8108056:	4618      	mov	r0, r3
 8108058:	3718      	adds	r7, #24
 810805a:	46bd      	mov	sp, r7
 810805c:	bd80      	pop	{r7, pc}

0810805e <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 810805e:	b580      	push	{r7, lr}
 8108060:	b086      	sub	sp, #24
 8108062:	af00      	add	r7, sp, #0
 8108064:	60f8      	str	r0, [r7, #12]
 8108066:	60b9      	str	r1, [r7, #8]
 8108068:	607a      	str	r2, [r7, #4]
 810806a:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 810806c:	2300      	movs	r3, #0
 810806e:	617b      	str	r3, [r7, #20]
 8108070:	e017      	b.n	81080a2 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8108072:	697a      	ldr	r2, [r7, #20]
 8108074:	4613      	mov	r3, r2
 8108076:	005b      	lsls	r3, r3, #1
 8108078:	4413      	add	r3, r2
 810807a:	009b      	lsls	r3, r3, #2
 810807c:	461a      	mov	r2, r3
 810807e:	683b      	ldr	r3, [r7, #0]
 8108080:	4413      	add	r3, r2
 8108082:	6818      	ldr	r0, [r3, #0]
 8108084:	697a      	ldr	r2, [r7, #20]
 8108086:	4613      	mov	r3, r2
 8108088:	005b      	lsls	r3, r3, #1
 810808a:	4413      	add	r3, r2
 810808c:	009b      	lsls	r3, r3, #2
 810808e:	461a      	mov	r2, r3
 8108090:	683b      	ldr	r3, [r7, #0]
 8108092:	4413      	add	r3, r2
 8108094:	689b      	ldr	r3, [r3, #8]
 8108096:	4619      	mov	r1, r3
 8108098:	f7ff fe7a 	bl	8107d90 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 810809c:	697b      	ldr	r3, [r7, #20]
 810809e:	3301      	adds	r3, #1
 81080a0:	617b      	str	r3, [r7, #20]
 81080a2:	697a      	ldr	r2, [r7, #20]
 81080a4:	6a3b      	ldr	r3, [r7, #32]
 81080a6:	429a      	cmp	r2, r3
 81080a8:	dbe3      	blt.n	8108072 <metal_generic_dev_dma_unmap+0x14>
	}
}
 81080aa:	bf00      	nop
 81080ac:	bf00      	nop
 81080ae:	3718      	adds	r7, #24
 81080b0:	46bd      	mov	sp, r7
 81080b2:	bd80      	pop	{r7, pc}

081080b4 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 81080b4:	b580      	push	{r7, lr}
 81080b6:	b084      	sub	sp, #16
 81080b8:	af00      	add	r7, sp, #0
 81080ba:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 81080bc:	2300      	movs	r3, #0
 81080be:	60fb      	str	r3, [r7, #12]
 81080c0:	e013      	b.n	81080ea <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 81080c2:	68fa      	ldr	r2, [r7, #12]
 81080c4:	4613      	mov	r3, r2
 81080c6:	005b      	lsls	r3, r3, #1
 81080c8:	4413      	add	r3, r2
 81080ca:	011b      	lsls	r3, r3, #4
 81080cc:	3308      	adds	r3, #8
 81080ce:	687a      	ldr	r2, [r7, #4]
 81080d0:	4413      	add	r3, r2
 81080d2:	3304      	adds	r3, #4
 81080d4:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 81080d6:	68bb      	ldr	r3, [r7, #8]
 81080d8:	689b      	ldr	r3, [r3, #8]
 81080da:	2b00      	cmp	r3, #0
 81080dc:	d00b      	beq.n	81080f6 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 81080de:	68b8      	ldr	r0, [r7, #8]
 81080e0:	f000 f81e 	bl	8108120 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 81080e4:	68fb      	ldr	r3, [r7, #12]
 81080e6:	3301      	adds	r3, #1
 81080e8:	60fb      	str	r3, [r7, #12]
 81080ea:	687b      	ldr	r3, [r7, #4]
 81080ec:	689b      	ldr	r3, [r3, #8]
 81080ee:	68fa      	ldr	r2, [r7, #12]
 81080f0:	429a      	cmp	r2, r3
 81080f2:	d3e6      	bcc.n	81080c2 <metal_generic_dev_sys_open+0xe>
 81080f4:	e000      	b.n	81080f8 <metal_generic_dev_sys_open+0x44>
			break;
 81080f6:	bf00      	nop
	}

	return 0;
 81080f8:	2300      	movs	r3, #0
}
 81080fa:	4618      	mov	r0, r3
 81080fc:	3710      	adds	r7, #16
 81080fe:	46bd      	mov	sp, r7
 8108100:	bd80      	pop	{r7, pc}
	...

08108104 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8108104:	b580      	push	{r7, lr}
 8108106:	b082      	sub	sp, #8
 8108108:	af00      	add	r7, sp, #0
 810810a:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 810810c:	4803      	ldr	r0, [pc, #12]	@ (810811c <metal_sys_init+0x18>)
 810810e:	f7ff fe4d 	bl	8107dac <metal_bus_register>
	return 0;
 8108112:	2300      	movs	r3, #0
}
 8108114:	4618      	mov	r0, r3
 8108116:	3708      	adds	r7, #8
 8108118:	46bd      	mov	sp, r7
 810811a:	bd80      	pop	{r7, pc}
 810811c:	10000014 	.word	0x10000014

08108120 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8108120:	b580      	push	{r7, lr}
 8108122:	b086      	sub	sp, #24
 8108124:	af00      	add	r7, sp, #0
 8108126:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8108128:	687b      	ldr	r3, [r7, #4]
 810812a:	681b      	ldr	r3, [r3, #0]
 810812c:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 810812e:	687b      	ldr	r3, [r7, #4]
 8108130:	689b      	ldr	r3, [r3, #8]
 8108132:	613b      	str	r3, [r7, #16]
	if (psize) {
 8108134:	693b      	ldr	r3, [r7, #16]
 8108136:	2b00      	cmp	r3, #0
 8108138:	d02c      	beq.n	8108194 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 810813a:	687b      	ldr	r3, [r7, #4]
 810813c:	68db      	ldr	r3, [r3, #12]
 810813e:	693a      	ldr	r2, [r7, #16]
 8108140:	fa22 f303 	lsr.w	r3, r2, r3
 8108144:	2b00      	cmp	r3, #0
 8108146:	d005      	beq.n	8108154 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8108148:	687b      	ldr	r3, [r7, #4]
 810814a:	68db      	ldr	r3, [r3, #12]
 810814c:	2201      	movs	r2, #1
 810814e:	fa02 f303 	lsl.w	r3, r2, r3
 8108152:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8108154:	2300      	movs	r3, #0
 8108156:	617b      	str	r3, [r7, #20]
 8108158:	e013      	b.n	8108182 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 810815a:	687b      	ldr	r3, [r7, #4]
 810815c:	685a      	ldr	r2, [r3, #4]
 810815e:	697b      	ldr	r3, [r7, #20]
 8108160:	009b      	lsls	r3, r3, #2
 8108162:	4413      	add	r3, r2
 8108164:	6819      	ldr	r1, [r3, #0]
 8108166:	687b      	ldr	r3, [r7, #4]
 8108168:	695b      	ldr	r3, [r3, #20]
 810816a:	693a      	ldr	r2, [r7, #16]
 810816c:	68f8      	ldr	r0, [r7, #12]
 810816e:	f001 fbc7 	bl	8109900 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8108172:	693b      	ldr	r3, [r7, #16]
 8108174:	009b      	lsls	r3, r3, #2
 8108176:	68fa      	ldr	r2, [r7, #12]
 8108178:	4413      	add	r3, r2
 810817a:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 810817c:	697b      	ldr	r3, [r7, #20]
 810817e:	3301      	adds	r3, #1
 8108180:	617b      	str	r3, [r7, #20]
 8108182:	687b      	ldr	r3, [r7, #4]
 8108184:	689a      	ldr	r2, [r3, #8]
 8108186:	687b      	ldr	r3, [r7, #4]
 8108188:	68db      	ldr	r3, [r3, #12]
 810818a:	fa22 f303 	lsr.w	r3, r2, r3
 810818e:	697a      	ldr	r2, [r7, #20]
 8108190:	429a      	cmp	r2, r3
 8108192:	d9e2      	bls.n	810815a <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8108194:	bf00      	nop
 8108196:	3718      	adds	r7, #24
 8108198:	46bd      	mov	sp, r7
 810819a:	bd80      	pop	{r7, pc}

0810819c <metal_list_init>:
{
 810819c:	b480      	push	{r7}
 810819e:	b083      	sub	sp, #12
 81081a0:	af00      	add	r7, sp, #0
 81081a2:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 81081a4:	687b      	ldr	r3, [r7, #4]
 81081a6:	687a      	ldr	r2, [r7, #4]
 81081a8:	605a      	str	r2, [r3, #4]
 81081aa:	687b      	ldr	r3, [r7, #4]
 81081ac:	685a      	ldr	r2, [r3, #4]
 81081ae:	687b      	ldr	r3, [r7, #4]
 81081b0:	601a      	str	r2, [r3, #0]
}
 81081b2:	bf00      	nop
 81081b4:	370c      	adds	r7, #12
 81081b6:	46bd      	mov	sp, r7
 81081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081bc:	4770      	bx	lr
	...

081081c0 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 81081c0:	b580      	push	{r7, lr}
 81081c2:	b084      	sub	sp, #16
 81081c4:	af00      	add	r7, sp, #0
 81081c6:	6078      	str	r0, [r7, #4]
	int error = 0;
 81081c8:	2300      	movs	r3, #0
 81081ca:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 81081cc:	2220      	movs	r2, #32
 81081ce:	2100      	movs	r1, #0
 81081d0:	4810      	ldr	r0, [pc, #64]	@ (8108214 <metal_init+0x54>)
 81081d2:	f002 fc66 	bl	810aaa2 <memset>

	_metal.common.log_handler   = params->log_handler;
 81081d6:	687b      	ldr	r3, [r7, #4]
 81081d8:	681b      	ldr	r3, [r3, #0]
 81081da:	4a0e      	ldr	r2, [pc, #56]	@ (8108214 <metal_init+0x54>)
 81081dc:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 81081de:	687b      	ldr	r3, [r7, #4]
 81081e0:	791a      	ldrb	r2, [r3, #4]
 81081e2:	4b0c      	ldr	r3, [pc, #48]	@ (8108214 <metal_init+0x54>)
 81081e4:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 81081e6:	480c      	ldr	r0, [pc, #48]	@ (8108218 <metal_init+0x58>)
 81081e8:	f7ff ffd8 	bl	810819c <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 81081ec:	480b      	ldr	r0, [pc, #44]	@ (810821c <metal_init+0x5c>)
 81081ee:	f7ff ffd5 	bl	810819c <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 81081f2:	480b      	ldr	r0, [pc, #44]	@ (8108220 <metal_init+0x60>)
 81081f4:	f7ff ffd2 	bl	810819c <metal_list_init>

	error = metal_sys_init(params);
 81081f8:	6878      	ldr	r0, [r7, #4]
 81081fa:	f7ff ff83 	bl	8108104 <metal_sys_init>
 81081fe:	60f8      	str	r0, [r7, #12]
	if (error)
 8108200:	68fb      	ldr	r3, [r7, #12]
 8108202:	2b00      	cmp	r3, #0
 8108204:	d001      	beq.n	810820a <metal_init+0x4a>
		return error;
 8108206:	68fb      	ldr	r3, [r7, #12]
 8108208:	e000      	b.n	810820c <metal_init+0x4c>

	return error;
 810820a:	68fb      	ldr	r3, [r7, #12]
}
 810820c:	4618      	mov	r0, r3
 810820e:	3710      	adds	r7, #16
 8108210:	46bd      	mov	sp, r7
 8108212:	bd80      	pop	{r7, pc}
 8108214:	10000538 	.word	0x10000538
 8108218:	10000540 	.word	0x10000540
 810821c:	10000548 	.word	0x10000548
 8108220:	10000550 	.word	0x10000550

08108224 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8108224:	b480      	push	{r7}
 8108226:	b083      	sub	sp, #12
 8108228:	af00      	add	r7, sp, #0
 810822a:	6078      	str	r0, [r7, #4]
 810822c:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810822e:	687b      	ldr	r3, [r7, #4]
 8108230:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8108232:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108236:	d009      	beq.n	810824c <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8108238:	687b      	ldr	r3, [r7, #4]
 810823a:	689b      	ldr	r3, [r3, #8]
 810823c:	683a      	ldr	r2, [r7, #0]
 810823e:	429a      	cmp	r2, r3
 8108240:	d804      	bhi.n	810824c <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8108242:	687b      	ldr	r3, [r7, #4]
 8108244:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8108246:	683b      	ldr	r3, [r7, #0]
 8108248:	4413      	add	r3, r2
 810824a:	e000      	b.n	810824e <metal_io_virt+0x2a>
 810824c:	2300      	movs	r3, #0
}
 810824e:	4618      	mov	r0, r3
 8108250:	370c      	adds	r7, #12
 8108252:	46bd      	mov	sp, r7
 8108254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108258:	4770      	bx	lr

0810825a <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 810825a:	b5b0      	push	{r4, r5, r7, lr}
 810825c:	b08a      	sub	sp, #40	@ 0x28
 810825e:	af00      	add	r7, sp, #0
 8108260:	60f8      	str	r0, [r7, #12]
 8108262:	60b9      	str	r1, [r7, #8]
 8108264:	607a      	str	r2, [r7, #4]
 8108266:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8108268:	f107 0310 	add.w	r3, r7, #16
 810826c:	2200      	movs	r2, #0
 810826e:	601a      	str	r2, [r3, #0]
 8108270:	605a      	str	r2, [r3, #4]
 8108272:	609a      	str	r2, [r3, #8]
 8108274:	60da      	str	r2, [r3, #12]
 8108276:	611a      	str	r2, [r3, #16]
 8108278:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 810827a:	68fb      	ldr	r3, [r7, #12]
 810827c:	68ba      	ldr	r2, [r7, #8]
 810827e:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8108280:	68fb      	ldr	r3, [r7, #12]
 8108282:	687a      	ldr	r2, [r7, #4]
 8108284:	605a      	str	r2, [r3, #4]
	io->size = size;
 8108286:	68fb      	ldr	r3, [r7, #12]
 8108288:	683a      	ldr	r2, [r7, #0]
 810828a:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 810828c:	68fb      	ldr	r3, [r7, #12]
 810828e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8108290:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8108292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108294:	2b1f      	cmp	r3, #31
 8108296:	d904      	bls.n	81082a2 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8108298:	68fb      	ldr	r3, [r7, #12]
 810829a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810829e:	611a      	str	r2, [r3, #16]
 81082a0:	e006      	b.n	81082b0 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 81082a2:	2201      	movs	r2, #1
 81082a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81082a6:	fa02 f303 	lsl.w	r3, r2, r3
 81082aa:	1e5a      	subs	r2, r3, #1
 81082ac:	68fb      	ldr	r3, [r7, #12]
 81082ae:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 81082b0:	68fb      	ldr	r3, [r7, #12]
 81082b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81082b4:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 81082b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81082b8:	2b00      	cmp	r3, #0
 81082ba:	d00b      	beq.n	81082d4 <metal_io_init+0x7a>
 81082bc:	68fb      	ldr	r3, [r7, #12]
 81082be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81082c0:	f103 0418 	add.w	r4, r3, #24
 81082c4:	4615      	mov	r5, r2
 81082c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81082c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81082ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 81082ce:	e884 0003 	stmia.w	r4, {r0, r1}
 81082d2:	e00a      	b.n	81082ea <metal_io_init+0x90>
 81082d4:	68fb      	ldr	r3, [r7, #12]
 81082d6:	f103 0418 	add.w	r4, r3, #24
 81082da:	f107 0510 	add.w	r5, r7, #16
 81082de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81082e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81082e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 81082e6:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 81082ea:	68f8      	ldr	r0, [r7, #12]
 81082ec:	f7ff ff18 	bl	8108120 <metal_sys_io_mem_map>
}
 81082f0:	bf00      	nop
 81082f2:	3728      	adds	r7, #40	@ 0x28
 81082f4:	46bd      	mov	sp, r7
 81082f6:	bdb0      	pop	{r4, r5, r7, pc}

081082f8 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 81082f8:	b590      	push	{r4, r7, lr}
 81082fa:	b08b      	sub	sp, #44	@ 0x2c
 81082fc:	af02      	add	r7, sp, #8
 81082fe:	60f8      	str	r0, [r7, #12]
 8108300:	60b9      	str	r1, [r7, #8]
 8108302:	607a      	str	r2, [r7, #4]
 8108304:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8108306:	68b9      	ldr	r1, [r7, #8]
 8108308:	68f8      	ldr	r0, [r7, #12]
 810830a:	f7ff ff8b 	bl	8108224 <metal_io_virt>
 810830e:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8108310:	687b      	ldr	r3, [r7, #4]
 8108312:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8108314:	68fb      	ldr	r3, [r7, #12]
 8108316:	689b      	ldr	r3, [r3, #8]
 8108318:	68ba      	ldr	r2, [r7, #8]
 810831a:	429a      	cmp	r2, r3
 810831c:	d902      	bls.n	8108324 <metal_io_block_read+0x2c>
		return -ERANGE;
 810831e:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8108322:	e05c      	b.n	81083de <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8108324:	683a      	ldr	r2, [r7, #0]
 8108326:	68bb      	ldr	r3, [r7, #8]
 8108328:	441a      	add	r2, r3
 810832a:	68fb      	ldr	r3, [r7, #12]
 810832c:	689b      	ldr	r3, [r3, #8]
 810832e:	429a      	cmp	r2, r3
 8108330:	d904      	bls.n	810833c <metal_io_block_read+0x44>
		len = io->size - offset;
 8108332:	68fb      	ldr	r3, [r7, #12]
 8108334:	689a      	ldr	r2, [r3, #8]
 8108336:	68bb      	ldr	r3, [r7, #8]
 8108338:	1ad3      	subs	r3, r2, r3
 810833a:	603b      	str	r3, [r7, #0]
	retlen = len;
 810833c:	683b      	ldr	r3, [r7, #0]
 810833e:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8108340:	68fb      	ldr	r3, [r7, #12]
 8108342:	6a1b      	ldr	r3, [r3, #32]
 8108344:	2b00      	cmp	r3, #0
 8108346:	d00a      	beq.n	810835e <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8108348:	68fb      	ldr	r3, [r7, #12]
 810834a:	6a1c      	ldr	r4, [r3, #32]
 810834c:	683b      	ldr	r3, [r7, #0]
 810834e:	9300      	str	r3, [sp, #0]
 8108350:	2305      	movs	r3, #5
 8108352:	687a      	ldr	r2, [r7, #4]
 8108354:	68b9      	ldr	r1, [r7, #8]
 8108356:	68f8      	ldr	r0, [r7, #12]
 8108358:	47a0      	blx	r4
 810835a:	6178      	str	r0, [r7, #20]
 810835c:	e03e      	b.n	81083dc <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 810835e:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8108362:	e00c      	b.n	810837e <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8108364:	69fb      	ldr	r3, [r7, #28]
 8108366:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8108368:	69bb      	ldr	r3, [r7, #24]
 810836a:	701a      	strb	r2, [r3, #0]
			dest++;
 810836c:	69bb      	ldr	r3, [r7, #24]
 810836e:	3301      	adds	r3, #1
 8108370:	61bb      	str	r3, [r7, #24]
			ptr++;
 8108372:	69fb      	ldr	r3, [r7, #28]
 8108374:	3301      	adds	r3, #1
 8108376:	61fb      	str	r3, [r7, #28]
			len--;
 8108378:	683b      	ldr	r3, [r7, #0]
 810837a:	3b01      	subs	r3, #1
 810837c:	603b      	str	r3, [r7, #0]
		while ( len && (
 810837e:	683b      	ldr	r3, [r7, #0]
 8108380:	2b00      	cmp	r3, #0
 8108382:	d017      	beq.n	81083b4 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8108384:	69bb      	ldr	r3, [r7, #24]
 8108386:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 810838a:	2b00      	cmp	r3, #0
 810838c:	d1ea      	bne.n	8108364 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 810838e:	69fb      	ldr	r3, [r7, #28]
 8108390:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8108394:	2b00      	cmp	r3, #0
 8108396:	d1e5      	bne.n	8108364 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8108398:	e00c      	b.n	81083b4 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 810839a:	69fb      	ldr	r3, [r7, #28]
 810839c:	681a      	ldr	r2, [r3, #0]
 810839e:	69bb      	ldr	r3, [r7, #24]
 81083a0:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81083a2:	69bb      	ldr	r3, [r7, #24]
 81083a4:	3304      	adds	r3, #4
 81083a6:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 81083a8:	69fb      	ldr	r3, [r7, #28]
 81083aa:	3304      	adds	r3, #4
 81083ac:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 81083ae:	683b      	ldr	r3, [r7, #0]
 81083b0:	3b04      	subs	r3, #4
 81083b2:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81083b4:	683b      	ldr	r3, [r7, #0]
 81083b6:	2b03      	cmp	r3, #3
 81083b8:	dcef      	bgt.n	810839a <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 81083ba:	e00c      	b.n	81083d6 <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 81083bc:	69fb      	ldr	r3, [r7, #28]
 81083be:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 81083c0:	69bb      	ldr	r3, [r7, #24]
 81083c2:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 81083c4:	69bb      	ldr	r3, [r7, #24]
 81083c6:	3301      	adds	r3, #1
 81083c8:	61bb      	str	r3, [r7, #24]
 81083ca:	69fb      	ldr	r3, [r7, #28]
 81083cc:	3301      	adds	r3, #1
 81083ce:	61fb      	str	r3, [r7, #28]
 81083d0:	683b      	ldr	r3, [r7, #0]
 81083d2:	3b01      	subs	r3, #1
 81083d4:	603b      	str	r3, [r7, #0]
 81083d6:	683b      	ldr	r3, [r7, #0]
 81083d8:	2b00      	cmp	r3, #0
 81083da:	d1ef      	bne.n	81083bc <metal_io_block_read+0xc4>
	}
	return retlen;
 81083dc:	697b      	ldr	r3, [r7, #20]
}
 81083de:	4618      	mov	r0, r3
 81083e0:	3724      	adds	r7, #36	@ 0x24
 81083e2:	46bd      	mov	sp, r7
 81083e4:	bd90      	pop	{r4, r7, pc}

081083e6 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 81083e6:	b590      	push	{r4, r7, lr}
 81083e8:	b08b      	sub	sp, #44	@ 0x2c
 81083ea:	af02      	add	r7, sp, #8
 81083ec:	60f8      	str	r0, [r7, #12]
 81083ee:	60b9      	str	r1, [r7, #8]
 81083f0:	607a      	str	r2, [r7, #4]
 81083f2:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 81083f4:	68b9      	ldr	r1, [r7, #8]
 81083f6:	68f8      	ldr	r0, [r7, #12]
 81083f8:	f7ff ff14 	bl	8108224 <metal_io_virt>
 81083fc:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 81083fe:	687b      	ldr	r3, [r7, #4]
 8108400:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8108402:	68fb      	ldr	r3, [r7, #12]
 8108404:	689b      	ldr	r3, [r3, #8]
 8108406:	68ba      	ldr	r2, [r7, #8]
 8108408:	429a      	cmp	r2, r3
 810840a:	d902      	bls.n	8108412 <metal_io_block_write+0x2c>
		return -ERANGE;
 810840c:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8108410:	e05b      	b.n	81084ca <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8108412:	683a      	ldr	r2, [r7, #0]
 8108414:	68bb      	ldr	r3, [r7, #8]
 8108416:	441a      	add	r2, r3
 8108418:	68fb      	ldr	r3, [r7, #12]
 810841a:	689b      	ldr	r3, [r3, #8]
 810841c:	429a      	cmp	r2, r3
 810841e:	d904      	bls.n	810842a <metal_io_block_write+0x44>
		len = io->size - offset;
 8108420:	68fb      	ldr	r3, [r7, #12]
 8108422:	689a      	ldr	r2, [r3, #8]
 8108424:	68bb      	ldr	r3, [r7, #8]
 8108426:	1ad3      	subs	r3, r2, r3
 8108428:	603b      	str	r3, [r7, #0]
	retlen = len;
 810842a:	683b      	ldr	r3, [r7, #0]
 810842c:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 810842e:	68fb      	ldr	r3, [r7, #12]
 8108430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108432:	2b00      	cmp	r3, #0
 8108434:	d017      	beq.n	8108466 <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8108436:	68fb      	ldr	r3, [r7, #12]
 8108438:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 810843a:	683b      	ldr	r3, [r7, #0]
 810843c:	9300      	str	r3, [sp, #0]
 810843e:	2305      	movs	r3, #5
 8108440:	687a      	ldr	r2, [r7, #4]
 8108442:	68b9      	ldr	r1, [r7, #8]
 8108444:	68f8      	ldr	r0, [r7, #12]
 8108446:	47a0      	blx	r4
 8108448:	6178      	str	r0, [r7, #20]
 810844a:	e03d      	b.n	81084c8 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 810844c:	69bb      	ldr	r3, [r7, #24]
 810844e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8108450:	69fb      	ldr	r3, [r7, #28]
 8108452:	701a      	strb	r2, [r3, #0]
			ptr++;
 8108454:	69fb      	ldr	r3, [r7, #28]
 8108456:	3301      	adds	r3, #1
 8108458:	61fb      	str	r3, [r7, #28]
			source++;
 810845a:	69bb      	ldr	r3, [r7, #24]
 810845c:	3301      	adds	r3, #1
 810845e:	61bb      	str	r3, [r7, #24]
			len--;
 8108460:	683b      	ldr	r3, [r7, #0]
 8108462:	3b01      	subs	r3, #1
 8108464:	603b      	str	r3, [r7, #0]
		while ( len && (
 8108466:	683b      	ldr	r3, [r7, #0]
 8108468:	2b00      	cmp	r3, #0
 810846a:	d017      	beq.n	810849c <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 810846c:	69fb      	ldr	r3, [r7, #28]
 810846e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8108472:	2b00      	cmp	r3, #0
 8108474:	d1ea      	bne.n	810844c <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8108476:	69bb      	ldr	r3, [r7, #24]
 8108478:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 810847c:	2b00      	cmp	r3, #0
 810847e:	d1e5      	bne.n	810844c <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8108480:	e00c      	b.n	810849c <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8108482:	69bb      	ldr	r3, [r7, #24]
 8108484:	681a      	ldr	r2, [r3, #0]
 8108486:	69fb      	ldr	r3, [r7, #28]
 8108488:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 810848a:	69fb      	ldr	r3, [r7, #28]
 810848c:	3304      	adds	r3, #4
 810848e:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8108490:	69bb      	ldr	r3, [r7, #24]
 8108492:	3304      	adds	r3, #4
 8108494:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8108496:	683b      	ldr	r3, [r7, #0]
 8108498:	3b04      	subs	r3, #4
 810849a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 810849c:	683b      	ldr	r3, [r7, #0]
 810849e:	2b03      	cmp	r3, #3
 81084a0:	dcef      	bgt.n	8108482 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 81084a2:	e00c      	b.n	81084be <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 81084a4:	69bb      	ldr	r3, [r7, #24]
 81084a6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 81084a8:	69fb      	ldr	r3, [r7, #28]
 81084aa:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 81084ac:	69fb      	ldr	r3, [r7, #28]
 81084ae:	3301      	adds	r3, #1
 81084b0:	61fb      	str	r3, [r7, #28]
 81084b2:	69bb      	ldr	r3, [r7, #24]
 81084b4:	3301      	adds	r3, #1
 81084b6:	61bb      	str	r3, [r7, #24]
 81084b8:	683b      	ldr	r3, [r7, #0]
 81084ba:	3b01      	subs	r3, #1
 81084bc:	603b      	str	r3, [r7, #0]
 81084be:	683b      	ldr	r3, [r7, #0]
 81084c0:	2b00      	cmp	r3, #0
 81084c2:	d1ef      	bne.n	81084a4 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 81084c4:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 81084c8:	697b      	ldr	r3, [r7, #20]
}
 81084ca:	4618      	mov	r0, r3
 81084cc:	3724      	adds	r7, #36	@ 0x24
 81084ce:	46bd      	mov	sp, r7
 81084d0:	bd90      	pop	{r4, r7, pc}

081084d2 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 81084d2:	b40e      	push	{r1, r2, r3}
 81084d4:	b480      	push	{r7}
 81084d6:	b082      	sub	sp, #8
 81084d8:	af00      	add	r7, sp, #0
 81084da:	4603      	mov	r3, r0
 81084dc:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 81084de:	bf00      	nop
 81084e0:	3708      	adds	r7, #8
 81084e2:	46bd      	mov	sp, r7
 81084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084e8:	b003      	add	sp, #12
 81084ea:	4770      	bx	lr

081084ec <metal_io_virt>:
{
 81084ec:	b480      	push	{r7}
 81084ee:	b083      	sub	sp, #12
 81084f0:	af00      	add	r7, sp, #0
 81084f2:	6078      	str	r0, [r7, #4]
 81084f4:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81084f6:	687b      	ldr	r3, [r7, #4]
 81084f8:	681b      	ldr	r3, [r3, #0]
		: NULL);
 81084fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81084fe:	d009      	beq.n	8108514 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8108500:	687b      	ldr	r3, [r7, #4]
 8108502:	689b      	ldr	r3, [r3, #8]
 8108504:	683a      	ldr	r2, [r7, #0]
 8108506:	429a      	cmp	r2, r3
 8108508:	d804      	bhi.n	8108514 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 810850a:	687b      	ldr	r3, [r7, #4]
 810850c:	681a      	ldr	r2, [r3, #0]
		: NULL);
 810850e:	683b      	ldr	r3, [r7, #0]
 8108510:	4413      	add	r3, r2
 8108512:	e000      	b.n	8108516 <metal_io_virt+0x2a>
 8108514:	2300      	movs	r3, #0
}
 8108516:	4618      	mov	r0, r3
 8108518:	370c      	adds	r7, #12
 810851a:	46bd      	mov	sp, r7
 810851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108520:	4770      	bx	lr

08108522 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8108522:	b480      	push	{r7}
 8108524:	b085      	sub	sp, #20
 8108526:	af00      	add	r7, sp, #0
 8108528:	6078      	str	r0, [r7, #4]
 810852a:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 810852c:	687b      	ldr	r3, [r7, #4]
 810852e:	681b      	ldr	r3, [r3, #0]
 8108530:	683a      	ldr	r2, [r7, #0]
 8108532:	1ad3      	subs	r3, r2, r3
 8108534:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8108536:	687b      	ldr	r3, [r7, #4]
 8108538:	689b      	ldr	r3, [r3, #8]
 810853a:	68fa      	ldr	r2, [r7, #12]
 810853c:	429a      	cmp	r2, r3
 810853e:	d201      	bcs.n	8108544 <metal_io_virt_to_offset+0x22>
 8108540:	68fb      	ldr	r3, [r7, #12]
 8108542:	e001      	b.n	8108548 <metal_io_virt_to_offset+0x26>
 8108544:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8108548:	4618      	mov	r0, r3
 810854a:	3714      	adds	r7, #20
 810854c:	46bd      	mov	sp, r7
 810854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108552:	4770      	bx	lr

08108554 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8108554:	b5b0      	push	{r4, r5, r7, lr}
 8108556:	b08c      	sub	sp, #48	@ 0x30
 8108558:	af00      	add	r7, sp, #0
 810855a:	60f8      	str	r0, [r7, #12]
 810855c:	60b9      	str	r1, [r7, #8]
 810855e:	603b      	str	r3, [r7, #0]
 8108560:	4613      	mov	r3, r2
 8108562:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8108564:	68b9      	ldr	r1, [r7, #8]
 8108566:	68f8      	ldr	r0, [r7, #12]
 8108568:	f7ff ffc0 	bl	81084ec <metal_io_virt>
 810856c:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 810856e:	68fb      	ldr	r3, [r7, #12]
 8108570:	699b      	ldr	r3, [r3, #24]
 8108572:	2b00      	cmp	r3, #0
 8108574:	d009      	beq.n	810858a <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8108576:	68fb      	ldr	r3, [r7, #12]
 8108578:	699c      	ldr	r4, [r3, #24]
 810857a:	79fa      	ldrb	r2, [r7, #7]
 810857c:	683b      	ldr	r3, [r7, #0]
 810857e:	68b9      	ldr	r1, [r7, #8]
 8108580:	68f8      	ldr	r0, [r7, #12]
 8108582:	47a0      	blx	r4
 8108584:	4604      	mov	r4, r0
 8108586:	460d      	mov	r5, r1
 8108588:	e059      	b.n	810863e <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 810858a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810858c:	2b00      	cmp	r3, #0
 810858e:	d012      	beq.n	81085b6 <metal_io_read+0x62>
 8108590:	683b      	ldr	r3, [r7, #0]
 8108592:	2b01      	cmp	r3, #1
 8108594:	d10f      	bne.n	81085b6 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8108596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108598:	62bb      	str	r3, [r7, #40]	@ 0x28
 810859a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810859c:	f3bf 8f5b 	dmb	ish
 81085a0:	781b      	ldrb	r3, [r3, #0]
 81085a2:	f3bf 8f5b 	dmb	ish
 81085a6:	b2db      	uxtb	r3, r3
 81085a8:	76fb      	strb	r3, [r7, #27]
 81085aa:	7efb      	ldrb	r3, [r7, #27]
 81085ac:	b2db      	uxtb	r3, r3
 81085ae:	2200      	movs	r2, #0
 81085b0:	461c      	mov	r4, r3
 81085b2:	4615      	mov	r5, r2
 81085b4:	e043      	b.n	810863e <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 81085b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81085b8:	2b00      	cmp	r3, #0
 81085ba:	d012      	beq.n	81085e2 <metal_io_read+0x8e>
 81085bc:	683b      	ldr	r3, [r7, #0]
 81085be:	2b02      	cmp	r3, #2
 81085c0:	d10f      	bne.n	81085e2 <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 81085c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81085c4:	627b      	str	r3, [r7, #36]	@ 0x24
 81085c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81085c8:	f3bf 8f5b 	dmb	ish
 81085cc:	881b      	ldrh	r3, [r3, #0]
 81085ce:	f3bf 8f5b 	dmb	ish
 81085d2:	b29b      	uxth	r3, r3
 81085d4:	833b      	strh	r3, [r7, #24]
 81085d6:	8b3b      	ldrh	r3, [r7, #24]
 81085d8:	b29b      	uxth	r3, r3
 81085da:	2200      	movs	r2, #0
 81085dc:	461c      	mov	r4, r3
 81085de:	4615      	mov	r5, r2
 81085e0:	e02d      	b.n	810863e <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 81085e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81085e4:	2b00      	cmp	r3, #0
 81085e6:	d010      	beq.n	810860a <metal_io_read+0xb6>
 81085e8:	683b      	ldr	r3, [r7, #0]
 81085ea:	2b04      	cmp	r3, #4
 81085ec:	d10d      	bne.n	810860a <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 81085ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81085f0:	623b      	str	r3, [r7, #32]
 81085f2:	6a3b      	ldr	r3, [r7, #32]
 81085f4:	f3bf 8f5b 	dmb	ish
 81085f8:	681b      	ldr	r3, [r3, #0]
 81085fa:	f3bf 8f5b 	dmb	ish
 81085fe:	617b      	str	r3, [r7, #20]
 8108600:	697b      	ldr	r3, [r7, #20]
 8108602:	2200      	movs	r2, #0
 8108604:	461c      	mov	r4, r3
 8108606:	4615      	mov	r5, r2
 8108608:	e019      	b.n	810863e <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 810860a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810860c:	2b00      	cmp	r3, #0
 810860e:	d010      	beq.n	8108632 <metal_io_read+0xde>
 8108610:	683b      	ldr	r3, [r7, #0]
 8108612:	2b04      	cmp	r3, #4
 8108614:	d10d      	bne.n	8108632 <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8108616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108618:	61fb      	str	r3, [r7, #28]
 810861a:	69fb      	ldr	r3, [r7, #28]
 810861c:	f3bf 8f5b 	dmb	ish
 8108620:	681b      	ldr	r3, [r3, #0]
 8108622:	f3bf 8f5b 	dmb	ish
 8108626:	613b      	str	r3, [r7, #16]
 8108628:	693b      	ldr	r3, [r7, #16]
 810862a:	2200      	movs	r2, #0
 810862c:	461c      	mov	r4, r3
 810862e:	4615      	mov	r5, r2
 8108630:	e005      	b.n	810863e <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8108632:	4b06      	ldr	r3, [pc, #24]	@ (810864c <metal_io_read+0xf8>)
 8108634:	4a06      	ldr	r2, [pc, #24]	@ (8108650 <metal_io_read+0xfc>)
 8108636:	21f0      	movs	r1, #240	@ 0xf0
 8108638:	4806      	ldr	r0, [pc, #24]	@ (8108654 <metal_io_read+0x100>)
 810863a:	f001 ffed 	bl	810a618 <__assert_func>
	return 0; /* quiet compiler */
}
 810863e:	4622      	mov	r2, r4
 8108640:	462b      	mov	r3, r5
 8108642:	4610      	mov	r0, r2
 8108644:	4619      	mov	r1, r3
 8108646:	3730      	adds	r7, #48	@ 0x30
 8108648:	46bd      	mov	sp, r7
 810864a:	bdb0      	pop	{r4, r5, r7, pc}
 810864c:	0810b7c4 	.word	0x0810b7c4
 8108650:	0810b94c 	.word	0x0810b94c
 8108654:	0810b7c8 	.word	0x0810b7c8

08108658 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8108658:	b580      	push	{r7, lr}
 810865a:	b082      	sub	sp, #8
 810865c:	af00      	add	r7, sp, #0
 810865e:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8108660:	6878      	ldr	r0, [r7, #4]
 8108662:	f001 fff7 	bl	810a654 <malloc>
 8108666:	4603      	mov	r3, r0
}
 8108668:	4618      	mov	r0, r3
 810866a:	3708      	adds	r7, #8
 810866c:	46bd      	mov	sp, r7
 810866e:	bd80      	pop	{r7, pc}

08108670 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8108670:	b580      	push	{r7, lr}
 8108672:	b082      	sub	sp, #8
 8108674:	af00      	add	r7, sp, #0
 8108676:	6078      	str	r0, [r7, #4]
	free(ptr);
 8108678:	6878      	ldr	r0, [r7, #4]
 810867a:	f001 fff3 	bl	810a664 <free>
}
 810867e:	bf00      	nop
 8108680:	3708      	adds	r7, #8
 8108682:	46bd      	mov	sp, r7
 8108684:	bd80      	pop	{r7, pc}

08108686 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8108686:	b580      	push	{r7, lr}
 8108688:	b084      	sub	sp, #16
 810868a:	af00      	add	r7, sp, #0
 810868c:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 810868e:	687b      	ldr	r3, [r7, #4]
 8108690:	3307      	adds	r3, #7
 8108692:	00db      	lsls	r3, r3, #3
 8108694:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8108696:	68f8      	ldr	r0, [r7, #12]
 8108698:	f7ff ffde 	bl	8108658 <metal_allocate_memory>
 810869c:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 810869e:	68bb      	ldr	r3, [r7, #8]
 81086a0:	2b00      	cmp	r3, #0
 81086a2:	d004      	beq.n	81086ae <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 81086a4:	68fa      	ldr	r2, [r7, #12]
 81086a6:	2100      	movs	r1, #0
 81086a8:	68b8      	ldr	r0, [r7, #8]
 81086aa:	f002 f9fa 	bl	810aaa2 <memset>
	}

	return vqs;
 81086ae:	68bb      	ldr	r3, [r7, #8]
}
 81086b0:	4618      	mov	r0, r3
 81086b2:	3710      	adds	r7, #16
 81086b4:	46bd      	mov	sp, r7
 81086b6:	bd80      	pop	{r7, pc}

081086b8 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 81086b8:	b580      	push	{r7, lr}
 81086ba:	b086      	sub	sp, #24
 81086bc:	af00      	add	r7, sp, #0
 81086be:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 81086c0:	687b      	ldr	r3, [r7, #4]
 81086c2:	891b      	ldrh	r3, [r3, #8]
 81086c4:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 81086c6:	687b      	ldr	r3, [r7, #4]
 81086c8:	681b      	ldr	r3, [r3, #0]
 81086ca:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81086cc:	693b      	ldr	r3, [r7, #16]
 81086ce:	3b18      	subs	r3, #24
 81086d0:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 81086d2:	693b      	ldr	r3, [r7, #16]
 81086d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81086d6:	697a      	ldr	r2, [r7, #20]
 81086d8:	429a      	cmp	r2, r3
 81086da:	d905      	bls.n	81086e8 <rproc_virtio_virtqueue_notify+0x30>
 81086dc:	4b0d      	ldr	r3, [pc, #52]	@ (8108714 <rproc_virtio_virtqueue_notify+0x5c>)
 81086de:	4a0e      	ldr	r2, [pc, #56]	@ (8108718 <rproc_virtio_virtqueue_notify+0x60>)
 81086e0:	2133      	movs	r1, #51	@ 0x33
 81086e2:	480e      	ldr	r0, [pc, #56]	@ (810871c <rproc_virtio_virtqueue_notify+0x64>)
 81086e4:	f001 ff98 	bl	810a618 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 81086e8:	693b      	ldr	r3, [r7, #16]
 81086ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 81086ec:	697a      	ldr	r2, [r7, #20]
 81086ee:	4613      	mov	r3, r2
 81086f0:	005b      	lsls	r3, r3, #1
 81086f2:	4413      	add	r3, r2
 81086f4:	00db      	lsls	r3, r3, #3
 81086f6:	440b      	add	r3, r1
 81086f8:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 81086fa:	68fb      	ldr	r3, [r7, #12]
 81086fc:	691b      	ldr	r3, [r3, #16]
 81086fe:	68fa      	ldr	r2, [r7, #12]
 8108700:	6810      	ldr	r0, [r2, #0]
 8108702:	68ba      	ldr	r2, [r7, #8]
 8108704:	6912      	ldr	r2, [r2, #16]
 8108706:	4611      	mov	r1, r2
 8108708:	4798      	blx	r3
}
 810870a:	bf00      	nop
 810870c:	3718      	adds	r7, #24
 810870e:	46bd      	mov	sp, r7
 8108710:	bd80      	pop	{r7, pc}
 8108712:	bf00      	nop
 8108714:	0810b810 	.word	0x0810b810
 8108718:	0810b92c 	.word	0x0810b92c
 810871c:	0810b82c 	.word	0x0810b82c

08108720 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8108720:	b580      	push	{r7, lr}
 8108722:	b086      	sub	sp, #24
 8108724:	af00      	add	r7, sp, #0
 8108726:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8108728:	687b      	ldr	r3, [r7, #4]
 810872a:	3b18      	subs	r3, #24
 810872c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 810872e:	697b      	ldr	r3, [r7, #20]
 8108730:	689b      	ldr	r3, [r3, #8]
 8108732:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8108734:	697b      	ldr	r3, [r7, #20]
 8108736:	68db      	ldr	r3, [r3, #12]
 8108738:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 810873a:	693b      	ldr	r3, [r7, #16]
 810873c:	3318      	adds	r3, #24
 810873e:	4619      	mov	r1, r3
 8108740:	68f8      	ldr	r0, [r7, #12]
 8108742:	f7ff feee 	bl	8108522 <metal_io_virt_to_offset>
 8108746:	4601      	mov	r1, r0
 8108748:	2301      	movs	r3, #1
 810874a:	2205      	movs	r2, #5
 810874c:	68f8      	ldr	r0, [r7, #12]
 810874e:	f7ff ff01 	bl	8108554 <metal_io_read>
 8108752:	4602      	mov	r2, r0
 8108754:	460b      	mov	r3, r1
 8108756:	4613      	mov	r3, r2
 8108758:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 810875a:	7afb      	ldrb	r3, [r7, #11]
}
 810875c:	4618      	mov	r0, r3
 810875e:	3718      	adds	r7, #24
 8108760:	46bd      	mov	sp, r7
 8108762:	bd80      	pop	{r7, pc}

08108764 <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8108764:	b580      	push	{r7, lr}
 8108766:	b086      	sub	sp, #24
 8108768:	af00      	add	r7, sp, #0
 810876a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 810876c:	687b      	ldr	r3, [r7, #4]
 810876e:	3b18      	subs	r3, #24
 8108770:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8108772:	697b      	ldr	r3, [r7, #20]
 8108774:	689b      	ldr	r3, [r3, #8]
 8108776:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8108778:	697b      	ldr	r3, [r7, #20]
 810877a:	68db      	ldr	r3, [r3, #12]
 810877c:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 810877e:	693b      	ldr	r3, [r7, #16]
 8108780:	330c      	adds	r3, #12
 8108782:	4619      	mov	r1, r3
 8108784:	68f8      	ldr	r0, [r7, #12]
 8108786:	f7ff fecc 	bl	8108522 <metal_io_virt_to_offset>
 810878a:	4601      	mov	r1, r0
 810878c:	2304      	movs	r3, #4
 810878e:	2205      	movs	r2, #5
 8108790:	68f8      	ldr	r0, [r7, #12]
 8108792:	f7ff fedf 	bl	8108554 <metal_io_read>
 8108796:	4602      	mov	r2, r0
 8108798:	460b      	mov	r3, r1
 810879a:	4613      	mov	r3, r2
 810879c:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 810879e:	68bb      	ldr	r3, [r7, #8]
}
 81087a0:	4618      	mov	r0, r3
 81087a2:	3718      	adds	r7, #24
 81087a4:	46bd      	mov	sp, r7
 81087a6:	bd80      	pop	{r7, pc}

081087a8 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 81087a8:	b480      	push	{r7}
 81087aa:	b083      	sub	sp, #12
 81087ac:	af00      	add	r7, sp, #0
 81087ae:	6078      	str	r0, [r7, #4]
 81087b0:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 81087b2:	2300      	movs	r3, #0
}
 81087b4:	4618      	mov	r0, r3
 81087b6:	370c      	adds	r7, #12
 81087b8:	46bd      	mov	sp, r7
 81087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81087be:	4770      	bx	lr

081087c0 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 81087c0:	b480      	push	{r7}
 81087c2:	b085      	sub	sp, #20
 81087c4:	af00      	add	r7, sp, #0
 81087c6:	60f8      	str	r0, [r7, #12]
 81087c8:	60b9      	str	r1, [r7, #8]
 81087ca:	607a      	str	r2, [r7, #4]
 81087cc:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 81087ce:	bf00      	nop
 81087d0:	3714      	adds	r7, #20
 81087d2:	46bd      	mov	sp, r7
 81087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81087d8:	4770      	bx	lr
	...

081087dc <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 81087dc:	b580      	push	{r7, lr}
 81087de:	b08e      	sub	sp, #56	@ 0x38
 81087e0:	af00      	add	r7, sp, #0
 81087e2:	60f8      	str	r0, [r7, #12]
 81087e4:	60b9      	str	r1, [r7, #8]
 81087e6:	607a      	str	r2, [r7, #4]
 81087e8:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 81087ea:	687b      	ldr	r3, [r7, #4]
 81087ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 81087ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81087f0:	7e5b      	ldrb	r3, [r3, #25]
 81087f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 81087f4:	2050      	movs	r0, #80	@ 0x50
 81087f6:	f7ff ff2f 	bl	8108658 <metal_allocate_memory>
 81087fa:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 81087fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81087fe:	2b00      	cmp	r3, #0
 8108800:	d101      	bne.n	8108806 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8108802:	2300      	movs	r3, #0
 8108804:	e092      	b.n	810892c <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8108806:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8108808:	4613      	mov	r3, r2
 810880a:	005b      	lsls	r3, r3, #1
 810880c:	4413      	add	r3, r2
 810880e:	00db      	lsls	r3, r3, #3
 8108810:	4618      	mov	r0, r3
 8108812:	f7ff ff21 	bl	8108658 <metal_allocate_memory>
 8108816:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8108818:	6a3b      	ldr	r3, [r7, #32]
 810881a:	2b00      	cmp	r3, #0
 810881c:	f000 8081 	beq.w	8108922 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8108820:	2250      	movs	r2, #80	@ 0x50
 8108822:	2100      	movs	r1, #0
 8108824:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8108826:	f002 f93c 	bl	810aaa2 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 810882a:	2218      	movs	r2, #24
 810882c:	2100      	movs	r1, #0
 810882e:	6a38      	ldr	r0, [r7, #32]
 8108830:	f002 f937 	bl	810aaa2 <memset>
	vdev = &rpvdev->vdev;
 8108834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108836:	3318      	adds	r3, #24
 8108838:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 810883a:	2300      	movs	r3, #0
 810883c:	637b      	str	r3, [r7, #52]	@ 0x34
 810883e:	e025      	b.n	810888c <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8108840:	2300      	movs	r3, #0
 8108842:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8108844:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8108846:	4613      	mov	r3, r2
 8108848:	009b      	lsls	r3, r3, #2
 810884a:	4413      	add	r3, r2
 810884c:	009b      	lsls	r3, r3, #2
 810884e:	3318      	adds	r3, #24
 8108850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108852:	4413      	add	r3, r2
 8108854:	3304      	adds	r3, #4
 8108856:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8108858:	68fb      	ldr	r3, [r7, #12]
 810885a:	2b00      	cmp	r3, #0
 810885c:	d102      	bne.n	8108864 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 810885e:	69bb      	ldr	r3, [r7, #24]
 8108860:	689b      	ldr	r3, [r3, #8]
 8108862:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8108864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8108866:	f7ff ff0e 	bl	8108686 <virtqueue_allocate>
 810886a:	6178      	str	r0, [r7, #20]
		if (!vq)
 810886c:	697b      	ldr	r3, [r7, #20]
 810886e:	2b00      	cmp	r3, #0
 8108870:	d031      	beq.n	81088d6 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 8108872:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8108874:	4613      	mov	r3, r2
 8108876:	005b      	lsls	r3, r3, #1
 8108878:	4413      	add	r3, r2
 810887a:	00db      	lsls	r3, r3, #3
 810887c:	461a      	mov	r2, r3
 810887e:	6a3b      	ldr	r3, [r7, #32]
 8108880:	4413      	add	r3, r2
 8108882:	697a      	ldr	r2, [r7, #20]
 8108884:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8108886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108888:	3301      	adds	r3, #1
 810888a:	637b      	str	r3, [r7, #52]	@ 0x34
 810888c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810888e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108890:	429a      	cmp	r2, r3
 8108892:	d3d5      	bcc.n	8108840 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8108894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8108898:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 810889a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810889c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810889e:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 81088a0:	69fb      	ldr	r3, [r7, #28]
 81088a2:	6a3a      	ldr	r2, [r7, #32]
 81088a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 81088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81088a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81088aa:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 81088ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81088ae:	683a      	ldr	r2, [r7, #0]
 81088b0:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 81088b2:	69fb      	ldr	r3, [r7, #28]
 81088b4:	68ba      	ldr	r2, [r7, #8]
 81088b6:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 81088b8:	69fb      	ldr	r3, [r7, #28]
 81088ba:	68fa      	ldr	r2, [r7, #12]
 81088bc:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 81088be:	69fb      	ldr	r3, [r7, #28]
 81088c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81088c2:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 81088c4:	69fb      	ldr	r3, [r7, #28]
 81088c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81088c8:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 81088ca:	69fb      	ldr	r3, [r7, #28]
 81088cc:	4a19      	ldr	r2, [pc, #100]	@ (8108934 <rproc_virtio_create_vdev+0x158>)
 81088ce:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 81088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81088d2:	3318      	adds	r3, #24
 81088d4:	e02a      	b.n	810892c <rproc_virtio_create_vdev+0x150>
			goto err1;
 81088d6:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 81088d8:	2300      	movs	r3, #0
 81088da:	637b      	str	r3, [r7, #52]	@ 0x34
 81088dc:	e019      	b.n	8108912 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 81088de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81088e0:	4613      	mov	r3, r2
 81088e2:	005b      	lsls	r3, r3, #1
 81088e4:	4413      	add	r3, r2
 81088e6:	00db      	lsls	r3, r3, #3
 81088e8:	461a      	mov	r2, r3
 81088ea:	6a3b      	ldr	r3, [r7, #32]
 81088ec:	4413      	add	r3, r2
 81088ee:	681b      	ldr	r3, [r3, #0]
 81088f0:	2b00      	cmp	r3, #0
 81088f2:	d00b      	beq.n	810890c <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 81088f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81088f6:	4613      	mov	r3, r2
 81088f8:	005b      	lsls	r3, r3, #1
 81088fa:	4413      	add	r3, r2
 81088fc:	00db      	lsls	r3, r3, #3
 81088fe:	461a      	mov	r2, r3
 8108900:	6a3b      	ldr	r3, [r7, #32]
 8108902:	4413      	add	r3, r2
 8108904:	681b      	ldr	r3, [r3, #0]
 8108906:	4618      	mov	r0, r3
 8108908:	f7ff feb2 	bl	8108670 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 810890c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810890e:	3301      	adds	r3, #1
 8108910:	637b      	str	r3, [r7, #52]	@ 0x34
 8108912:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8108914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108916:	429a      	cmp	r2, r3
 8108918:	d3e1      	bcc.n	81088de <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 810891a:	6a38      	ldr	r0, [r7, #32]
 810891c:	f7ff fea8 	bl	8108670 <metal_free_memory>
 8108920:	e000      	b.n	8108924 <rproc_virtio_create_vdev+0x148>
		goto err0;
 8108922:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8108924:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8108926:	f7ff fea3 	bl	8108670 <metal_free_memory>
	return NULL;
 810892a:	2300      	movs	r3, #0
}
 810892c:	4618      	mov	r0, r3
 810892e:	3738      	adds	r7, #56	@ 0x38
 8108930:	46bd      	mov	sp, r7
 8108932:	bd80      	pop	{r7, pc}
 8108934:	0810b908 	.word	0x0810b908

08108938 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8108938:	b480      	push	{r7}
 810893a:	b087      	sub	sp, #28
 810893c:	af00      	add	r7, sp, #0
 810893e:	60f8      	str	r0, [r7, #12]
 8108940:	60b9      	str	r1, [r7, #8]
 8108942:	607a      	str	r2, [r7, #4]
 8108944:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8108946:	68fb      	ldr	r3, [r7, #12]
 8108948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810894a:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 810894c:	68ba      	ldr	r2, [r7, #8]
 810894e:	697b      	ldr	r3, [r7, #20]
 8108950:	429a      	cmp	r2, r3
 8108952:	d302      	bcc.n	810895a <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8108954:	f06f 0301 	mvn.w	r3, #1
 8108958:	e019      	b.n	810898e <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 810895a:	68fb      	ldr	r3, [r7, #12]
 810895c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 810895e:	68ba      	ldr	r2, [r7, #8]
 8108960:	4613      	mov	r3, r2
 8108962:	005b      	lsls	r3, r3, #1
 8108964:	4413      	add	r3, r2
 8108966:	00db      	lsls	r3, r3, #3
 8108968:	440b      	add	r3, r1
 810896a:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 810896c:	693b      	ldr	r3, [r7, #16]
 810896e:	6a3a      	ldr	r2, [r7, #32]
 8108970:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 8108972:	693b      	ldr	r3, [r7, #16]
 8108974:	687a      	ldr	r2, [r7, #4]
 8108976:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8108978:	693b      	ldr	r3, [r7, #16]
 810897a:	683a      	ldr	r2, [r7, #0]
 810897c:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 810897e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108980:	b29a      	uxth	r2, r3
 8108982:	693b      	ldr	r3, [r7, #16]
 8108984:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8108986:	693b      	ldr	r3, [r7, #16]
 8108988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810898a:	609a      	str	r2, [r3, #8]

	return 0;
 810898c:	2300      	movs	r3, #0
}
 810898e:	4618      	mov	r0, r3
 8108990:	371c      	adds	r7, #28
 8108992:	46bd      	mov	sp, r7
 8108994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108998:	4770      	bx	lr

0810899a <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 810899a:	b580      	push	{r7, lr}
 810899c:	b086      	sub	sp, #24
 810899e:	af00      	add	r7, sp, #0
 81089a0:	6078      	str	r0, [r7, #4]
 81089a2:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 81089a4:	687b      	ldr	r3, [r7, #4]
 81089a6:	2b00      	cmp	r3, #0
 81089a8:	d102      	bne.n	81089b0 <rproc_virtio_notified+0x16>
		return -EINVAL;
 81089aa:	f06f 0315 	mvn.w	r3, #21
 81089ae:	e02c      	b.n	8108a0a <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 81089b0:	687b      	ldr	r3, [r7, #4]
 81089b2:	681b      	ldr	r3, [r3, #0]
 81089b4:	683a      	ldr	r2, [r7, #0]
 81089b6:	429a      	cmp	r2, r3
 81089b8:	d101      	bne.n	81089be <rproc_virtio_notified+0x24>
		return 0;
 81089ba:	2300      	movs	r3, #0
 81089bc:	e025      	b.n	8108a0a <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 81089be:	687b      	ldr	r3, [r7, #4]
 81089c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81089c2:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 81089c4:	2300      	movs	r3, #0
 81089c6:	617b      	str	r3, [r7, #20]
 81089c8:	e01a      	b.n	8108a00 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 81089ca:	687b      	ldr	r3, [r7, #4]
 81089cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 81089ce:	697a      	ldr	r2, [r7, #20]
 81089d0:	4613      	mov	r3, r2
 81089d2:	005b      	lsls	r3, r3, #1
 81089d4:	4413      	add	r3, r2
 81089d6:	00db      	lsls	r3, r3, #3
 81089d8:	440b      	add	r3, r1
 81089da:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 81089dc:	68fb      	ldr	r3, [r7, #12]
 81089de:	691b      	ldr	r3, [r3, #16]
 81089e0:	683a      	ldr	r2, [r7, #0]
 81089e2:	429a      	cmp	r2, r3
 81089e4:	d003      	beq.n	81089ee <rproc_virtio_notified+0x54>
 81089e6:	683b      	ldr	r3, [r7, #0]
 81089e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81089ec:	d105      	bne.n	81089fa <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 81089ee:	68fb      	ldr	r3, [r7, #12]
 81089f0:	681b      	ldr	r3, [r3, #0]
 81089f2:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 81089f4:	68b8      	ldr	r0, [r7, #8]
 81089f6:	f001 fa1b 	bl	8109e30 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 81089fa:	697b      	ldr	r3, [r7, #20]
 81089fc:	3301      	adds	r3, #1
 81089fe:	617b      	str	r3, [r7, #20]
 8108a00:	697a      	ldr	r2, [r7, #20]
 8108a02:	693b      	ldr	r3, [r7, #16]
 8108a04:	429a      	cmp	r2, r3
 8108a06:	d3e0      	bcc.n	81089ca <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8108a08:	2300      	movs	r3, #0
}
 8108a0a:	4618      	mov	r0, r3
 8108a0c:	3718      	adds	r7, #24
 8108a0e:	46bd      	mov	sp, r7
 8108a10:	bd80      	pop	{r7, pc}

08108a12 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 8108a12:	b580      	push	{r7, lr}
 8108a14:	b084      	sub	sp, #16
 8108a16:	af00      	add	r7, sp, #0
 8108a18:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8108a1a:	687b      	ldr	r3, [r7, #4]
 8108a1c:	699b      	ldr	r3, [r3, #24]
 8108a1e:	2b00      	cmp	r3, #0
 8108a20:	d00a      	beq.n	8108a38 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 8108a22:	6878      	ldr	r0, [r7, #4]
 8108a24:	f7ff fe7c 	bl	8108720 <rproc_virtio_get_status>
 8108a28:	4603      	mov	r3, r0
 8108a2a:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8108a2c:	7bfb      	ldrb	r3, [r7, #15]
 8108a2e:	f003 0304 	and.w	r3, r3, #4
 8108a32:	2b00      	cmp	r3, #0
 8108a34:	d102      	bne.n	8108a3c <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 8108a36:	e7f4      	b.n	8108a22 <rproc_virtio_wait_remote_ready+0x10>
		return;
 8108a38:	bf00      	nop
 8108a3a:	e000      	b.n	8108a3e <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8108a3c:	bf00      	nop
	}
}
 8108a3e:	3710      	adds	r7, #16
 8108a40:	46bd      	mov	sp, r7
 8108a42:	bd80      	pop	{r7, pc}

08108a44 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8108a44:	b480      	push	{r7}
 8108a46:	b083      	sub	sp, #12
 8108a48:	af00      	add	r7, sp, #0
 8108a4a:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8108a4c:	bf00      	nop
 8108a4e:	687b      	ldr	r3, [r7, #4]
 8108a50:	2201      	movs	r2, #1
 8108a52:	4611      	mov	r1, r2
 8108a54:	f3bf 8f5b 	dmb	ish
 8108a58:	e8d3 2f4f 	ldrexb	r2, [r3]
 8108a5c:	e8c3 1f40 	strexb	r0, r1, [r3]
 8108a60:	2800      	cmp	r0, #0
 8108a62:	d1f9      	bne.n	8108a58 <__metal_mutex_acquire+0x14>
 8108a64:	f3bf 8f5b 	dmb	ish
 8108a68:	b2d3      	uxtb	r3, r2
 8108a6a:	2b00      	cmp	r3, #0
 8108a6c:	d1ef      	bne.n	8108a4e <__metal_mutex_acquire+0xa>
		;
	}
}
 8108a6e:	bf00      	nop
 8108a70:	bf00      	nop
 8108a72:	370c      	adds	r7, #12
 8108a74:	46bd      	mov	sp, r7
 8108a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a7a:	4770      	bx	lr

08108a7c <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8108a7c:	b480      	push	{r7}
 8108a7e:	b083      	sub	sp, #12
 8108a80:	af00      	add	r7, sp, #0
 8108a82:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8108a84:	687b      	ldr	r3, [r7, #4]
 8108a86:	f3bf 8f5b 	dmb	ish
 8108a8a:	2200      	movs	r2, #0
 8108a8c:	701a      	strb	r2, [r3, #0]
 8108a8e:	f3bf 8f5b 	dmb	ish
}
 8108a92:	bf00      	nop
 8108a94:	370c      	adds	r7, #12
 8108a96:	46bd      	mov	sp, r7
 8108a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a9c:	4770      	bx	lr

08108a9e <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8108a9e:	b580      	push	{r7, lr}
 8108aa0:	b082      	sub	sp, #8
 8108aa2:	af00      	add	r7, sp, #0
 8108aa4:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8108aa6:	6878      	ldr	r0, [r7, #4]
 8108aa8:	f7ff ffcc 	bl	8108a44 <__metal_mutex_acquire>
}
 8108aac:	bf00      	nop
 8108aae:	3708      	adds	r7, #8
 8108ab0:	46bd      	mov	sp, r7
 8108ab2:	bd80      	pop	{r7, pc}

08108ab4 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8108ab4:	b580      	push	{r7, lr}
 8108ab6:	b082      	sub	sp, #8
 8108ab8:	af00      	add	r7, sp, #0
 8108aba:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8108abc:	6878      	ldr	r0, [r7, #4]
 8108abe:	f7ff ffdd 	bl	8108a7c <__metal_mutex_release>
}
 8108ac2:	bf00      	nop
 8108ac4:	3708      	adds	r7, #8
 8108ac6:	46bd      	mov	sp, r7
 8108ac8:	bd80      	pop	{r7, pc}

08108aca <metal_list_add_before>:
{
 8108aca:	b480      	push	{r7}
 8108acc:	b083      	sub	sp, #12
 8108ace:	af00      	add	r7, sp, #0
 8108ad0:	6078      	str	r0, [r7, #4]
 8108ad2:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8108ad4:	687b      	ldr	r3, [r7, #4]
 8108ad6:	685a      	ldr	r2, [r3, #4]
 8108ad8:	683b      	ldr	r3, [r7, #0]
 8108ada:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8108adc:	683b      	ldr	r3, [r7, #0]
 8108ade:	687a      	ldr	r2, [r7, #4]
 8108ae0:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8108ae2:	683b      	ldr	r3, [r7, #0]
 8108ae4:	681b      	ldr	r3, [r3, #0]
 8108ae6:	683a      	ldr	r2, [r7, #0]
 8108ae8:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8108aea:	683b      	ldr	r3, [r7, #0]
 8108aec:	685b      	ldr	r3, [r3, #4]
 8108aee:	683a      	ldr	r2, [r7, #0]
 8108af0:	601a      	str	r2, [r3, #0]
}
 8108af2:	bf00      	nop
 8108af4:	370c      	adds	r7, #12
 8108af6:	46bd      	mov	sp, r7
 8108af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108afc:	4770      	bx	lr

08108afe <metal_list_add_tail>:
{
 8108afe:	b580      	push	{r7, lr}
 8108b00:	b082      	sub	sp, #8
 8108b02:	af00      	add	r7, sp, #0
 8108b04:	6078      	str	r0, [r7, #4]
 8108b06:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8108b08:	6839      	ldr	r1, [r7, #0]
 8108b0a:	6878      	ldr	r0, [r7, #4]
 8108b0c:	f7ff ffdd 	bl	8108aca <metal_list_add_before>
}
 8108b10:	bf00      	nop
 8108b12:	3708      	adds	r7, #8
 8108b14:	46bd      	mov	sp, r7
 8108b16:	bd80      	pop	{r7, pc}

08108b18 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8108b18:	b480      	push	{r7}
 8108b1a:	b083      	sub	sp, #12
 8108b1c:	af00      	add	r7, sp, #0
 8108b1e:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8108b20:	687b      	ldr	r3, [r7, #4]
 8108b22:	681b      	ldr	r3, [r3, #0]
 8108b24:	687a      	ldr	r2, [r7, #4]
 8108b26:	6852      	ldr	r2, [r2, #4]
 8108b28:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8108b2a:	687b      	ldr	r3, [r7, #4]
 8108b2c:	685b      	ldr	r3, [r3, #4]
 8108b2e:	687a      	ldr	r2, [r7, #4]
 8108b30:	6812      	ldr	r2, [r2, #0]
 8108b32:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8108b34:	687b      	ldr	r3, [r7, #4]
 8108b36:	687a      	ldr	r2, [r7, #4]
 8108b38:	605a      	str	r2, [r3, #4]
 8108b3a:	687b      	ldr	r3, [r7, #4]
 8108b3c:	685a      	ldr	r2, [r3, #4]
 8108b3e:	687b      	ldr	r3, [r7, #4]
 8108b40:	601a      	str	r2, [r3, #0]
}
 8108b42:	bf00      	nop
 8108b44:	370c      	adds	r7, #12
 8108b46:	46bd      	mov	sp, r7
 8108b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b4c:	4770      	bx	lr

08108b4e <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8108b4e:	b480      	push	{r7}
 8108b50:	b083      	sub	sp, #12
 8108b52:	af00      	add	r7, sp, #0
 8108b54:	6078      	str	r0, [r7, #4]
 8108b56:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8108b58:	683b      	ldr	r3, [r7, #0]
 8108b5a:	095b      	lsrs	r3, r3, #5
 8108b5c:	009a      	lsls	r2, r3, #2
 8108b5e:	6879      	ldr	r1, [r7, #4]
 8108b60:	440a      	add	r2, r1
 8108b62:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8108b64:	683a      	ldr	r2, [r7, #0]
 8108b66:	f002 021f 	and.w	r2, r2, #31
 8108b6a:	2001      	movs	r0, #1
 8108b6c:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8108b70:	009b      	lsls	r3, r3, #2
 8108b72:	6878      	ldr	r0, [r7, #4]
 8108b74:	4403      	add	r3, r0
 8108b76:	430a      	orrs	r2, r1
 8108b78:	601a      	str	r2, [r3, #0]
}
 8108b7a:	bf00      	nop
 8108b7c:	370c      	adds	r7, #12
 8108b7e:	46bd      	mov	sp, r7
 8108b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b84:	4770      	bx	lr

08108b86 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8108b86:	b480      	push	{r7}
 8108b88:	b083      	sub	sp, #12
 8108b8a:	af00      	add	r7, sp, #0
 8108b8c:	6078      	str	r0, [r7, #4]
 8108b8e:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8108b90:	683b      	ldr	r3, [r7, #0]
 8108b92:	095b      	lsrs	r3, r3, #5
 8108b94:	009b      	lsls	r3, r3, #2
 8108b96:	687a      	ldr	r2, [r7, #4]
 8108b98:	4413      	add	r3, r2
 8108b9a:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8108b9c:	683b      	ldr	r3, [r7, #0]
 8108b9e:	f003 031f 	and.w	r3, r3, #31
 8108ba2:	2101      	movs	r1, #1
 8108ba4:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8108ba8:	4013      	ands	r3, r2
}
 8108baa:	4618      	mov	r0, r3
 8108bac:	370c      	adds	r7, #12
 8108bae:	46bd      	mov	sp, r7
 8108bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bb4:	4770      	bx	lr

08108bb6 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8108bb6:	b480      	push	{r7}
 8108bb8:	b083      	sub	sp, #12
 8108bba:	af00      	add	r7, sp, #0
 8108bbc:	6078      	str	r0, [r7, #4]
 8108bbe:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8108bc0:	683b      	ldr	r3, [r7, #0]
 8108bc2:	095b      	lsrs	r3, r3, #5
 8108bc4:	009a      	lsls	r2, r3, #2
 8108bc6:	6879      	ldr	r1, [r7, #4]
 8108bc8:	440a      	add	r2, r1
 8108bca:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8108bcc:	683a      	ldr	r2, [r7, #0]
 8108bce:	f002 021f 	and.w	r2, r2, #31
 8108bd2:	2001      	movs	r0, #1
 8108bd4:	fa00 f202 	lsl.w	r2, r0, r2
 8108bd8:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8108bda:	009b      	lsls	r3, r3, #2
 8108bdc:	6878      	ldr	r0, [r7, #4]
 8108bde:	4403      	add	r3, r0
 8108be0:	400a      	ands	r2, r1
 8108be2:	601a      	str	r2, [r3, #0]
}
 8108be4:	bf00      	nop
 8108be6:	370c      	adds	r7, #12
 8108be8:	46bd      	mov	sp, r7
 8108bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bee:	4770      	bx	lr

08108bf0 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8108bf0:	b580      	push	{r7, lr}
 8108bf2:	b082      	sub	sp, #8
 8108bf4:	af00      	add	r7, sp, #0
 8108bf6:	6078      	str	r0, [r7, #4]
 8108bf8:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8108bfa:	6839      	ldr	r1, [r7, #0]
 8108bfc:	6878      	ldr	r0, [r7, #4]
 8108bfe:	f7ff ffc2 	bl	8108b86 <metal_bitmap_is_bit_set>
 8108c02:	4603      	mov	r3, r0
 8108c04:	2b00      	cmp	r3, #0
 8108c06:	bf0c      	ite	eq
 8108c08:	2301      	moveq	r3, #1
 8108c0a:	2300      	movne	r3, #0
 8108c0c:	b2db      	uxtb	r3, r3
}
 8108c0e:	4618      	mov	r0, r3
 8108c10:	3708      	adds	r7, #8
 8108c12:	46bd      	mov	sp, r7
 8108c14:	bd80      	pop	{r7, pc}

08108c16 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8108c16:	b580      	push	{r7, lr}
 8108c18:	b086      	sub	sp, #24
 8108c1a:	af00      	add	r7, sp, #0
 8108c1c:	60f8      	str	r0, [r7, #12]
 8108c1e:	60b9      	str	r1, [r7, #8]
 8108c20:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8108c22:	68bb      	ldr	r3, [r7, #8]
 8108c24:	617b      	str	r3, [r7, #20]
 8108c26:	e002      	b.n	8108c2e <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8108c28:	697b      	ldr	r3, [r7, #20]
 8108c2a:	3301      	adds	r3, #1
 8108c2c:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8108c2e:	697a      	ldr	r2, [r7, #20]
 8108c30:	687b      	ldr	r3, [r7, #4]
 8108c32:	429a      	cmp	r2, r3
 8108c34:	d207      	bcs.n	8108c46 <metal_bitmap_next_clear_bit+0x30>
 8108c36:	697b      	ldr	r3, [r7, #20]
 8108c38:	4619      	mov	r1, r3
 8108c3a:	68f8      	ldr	r0, [r7, #12]
 8108c3c:	f7ff ffd8 	bl	8108bf0 <metal_bitmap_is_bit_clear>
 8108c40:	4603      	mov	r3, r0
 8108c42:	2b00      	cmp	r3, #0
 8108c44:	d0f0      	beq.n	8108c28 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8108c46:	697b      	ldr	r3, [r7, #20]
}
 8108c48:	4618      	mov	r0, r3
 8108c4a:	3718      	adds	r7, #24
 8108c4c:	46bd      	mov	sp, r7
 8108c4e:	bd80      	pop	{r7, pc}

08108c50 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8108c50:	b580      	push	{r7, lr}
 8108c52:	b084      	sub	sp, #16
 8108c54:	af00      	add	r7, sp, #0
 8108c56:	60f8      	str	r0, [r7, #12]
 8108c58:	60b9      	str	r1, [r7, #8]
 8108c5a:	607a      	str	r2, [r7, #4]
 8108c5c:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8108c5e:	68fb      	ldr	r3, [r7, #12]
 8108c60:	2220      	movs	r2, #32
 8108c62:	68b9      	ldr	r1, [r7, #8]
 8108c64:	4618      	mov	r0, r3
 8108c66:	f001 ff09 	bl	810aa7c <strncpy>
	ept->addr = src;
 8108c6a:	68fb      	ldr	r3, [r7, #12]
 8108c6c:	687a      	ldr	r2, [r7, #4]
 8108c6e:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8108c70:	68fb      	ldr	r3, [r7, #12]
 8108c72:	683a      	ldr	r2, [r7, #0]
 8108c74:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8108c76:	68fb      	ldr	r3, [r7, #12]
 8108c78:	69ba      	ldr	r2, [r7, #24]
 8108c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8108c7c:	68fb      	ldr	r3, [r7, #12]
 8108c7e:	69fa      	ldr	r2, [r7, #28]
 8108c80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8108c82:	bf00      	nop
 8108c84:	3710      	adds	r7, #16
 8108c86:	46bd      	mov	sp, r7
 8108c88:	bd80      	pop	{r7, pc}

08108c8a <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8108c8a:	b580      	push	{r7, lr}
 8108c8c:	b084      	sub	sp, #16
 8108c8e:	af00      	add	r7, sp, #0
 8108c90:	6078      	str	r0, [r7, #4]
 8108c92:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8108c94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8108c98:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8108c9a:	683b      	ldr	r3, [r7, #0]
 8108c9c:	461a      	mov	r2, r3
 8108c9e:	2100      	movs	r1, #0
 8108ca0:	6878      	ldr	r0, [r7, #4]
 8108ca2:	f7ff ffb8 	bl	8108c16 <metal_bitmap_next_clear_bit>
 8108ca6:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8108ca8:	683b      	ldr	r3, [r7, #0]
 8108caa:	68ba      	ldr	r2, [r7, #8]
 8108cac:	429a      	cmp	r2, r3
 8108cae:	d206      	bcs.n	8108cbe <rpmsg_get_address+0x34>
		addr = nextbit;
 8108cb0:	68bb      	ldr	r3, [r7, #8]
 8108cb2:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8108cb4:	68bb      	ldr	r3, [r7, #8]
 8108cb6:	4619      	mov	r1, r3
 8108cb8:	6878      	ldr	r0, [r7, #4]
 8108cba:	f7ff ff48 	bl	8108b4e <metal_bitmap_set_bit>
	}

	return addr;
 8108cbe:	68fb      	ldr	r3, [r7, #12]
}
 8108cc0:	4618      	mov	r0, r3
 8108cc2:	3710      	adds	r7, #16
 8108cc4:	46bd      	mov	sp, r7
 8108cc6:	bd80      	pop	{r7, pc}

08108cc8 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8108cc8:	b580      	push	{r7, lr}
 8108cca:	b084      	sub	sp, #16
 8108ccc:	af00      	add	r7, sp, #0
 8108cce:	60f8      	str	r0, [r7, #12]
 8108cd0:	60b9      	str	r1, [r7, #8]
 8108cd2:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8108cd4:	687a      	ldr	r2, [r7, #4]
 8108cd6:	68bb      	ldr	r3, [r7, #8]
 8108cd8:	429a      	cmp	r2, r3
 8108cda:	da03      	bge.n	8108ce4 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8108cdc:	6879      	ldr	r1, [r7, #4]
 8108cde:	68f8      	ldr	r0, [r7, #12]
 8108ce0:	f7ff ff69 	bl	8108bb6 <metal_bitmap_clear_bit>
}
 8108ce4:	bf00      	nop
 8108ce6:	3710      	adds	r7, #16
 8108ce8:	46bd      	mov	sp, r7
 8108cea:	bd80      	pop	{r7, pc}

08108cec <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8108cec:	b580      	push	{r7, lr}
 8108cee:	b084      	sub	sp, #16
 8108cf0:	af00      	add	r7, sp, #0
 8108cf2:	60f8      	str	r0, [r7, #12]
 8108cf4:	60b9      	str	r1, [r7, #8]
 8108cf6:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8108cf8:	687a      	ldr	r2, [r7, #4]
 8108cfa:	68bb      	ldr	r3, [r7, #8]
 8108cfc:	429a      	cmp	r2, r3
 8108cfe:	da05      	bge.n	8108d0c <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8108d00:	6879      	ldr	r1, [r7, #4]
 8108d02:	68f8      	ldr	r0, [r7, #12]
 8108d04:	f7ff ff3f 	bl	8108b86 <metal_bitmap_is_bit_set>
 8108d08:	4603      	mov	r3, r0
 8108d0a:	e000      	b.n	8108d0e <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8108d0c:	4b02      	ldr	r3, [pc, #8]	@ (8108d18 <rpmsg_is_address_set+0x2c>)
}
 8108d0e:	4618      	mov	r0, r3
 8108d10:	3710      	adds	r7, #16
 8108d12:	46bd      	mov	sp, r7
 8108d14:	bd80      	pop	{r7, pc}
 8108d16:	bf00      	nop
 8108d18:	fffff82d 	.word	0xfffff82d

08108d1c <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8108d1c:	b580      	push	{r7, lr}
 8108d1e:	b084      	sub	sp, #16
 8108d20:	af00      	add	r7, sp, #0
 8108d22:	60f8      	str	r0, [r7, #12]
 8108d24:	60b9      	str	r1, [r7, #8]
 8108d26:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8108d28:	687a      	ldr	r2, [r7, #4]
 8108d2a:	68bb      	ldr	r3, [r7, #8]
 8108d2c:	429a      	cmp	r2, r3
 8108d2e:	da05      	bge.n	8108d3c <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8108d30:	6879      	ldr	r1, [r7, #4]
 8108d32:	68f8      	ldr	r0, [r7, #12]
 8108d34:	f7ff ff0b 	bl	8108b4e <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8108d38:	2300      	movs	r3, #0
 8108d3a:	e000      	b.n	8108d3e <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8108d3c:	4b02      	ldr	r3, [pc, #8]	@ (8108d48 <rpmsg_set_address+0x2c>)
	}
}
 8108d3e:	4618      	mov	r0, r3
 8108d40:	3710      	adds	r7, #16
 8108d42:	46bd      	mov	sp, r7
 8108d44:	bd80      	pop	{r7, pc}
 8108d46:	bf00      	nop
 8108d48:	fffff82d 	.word	0xfffff82d

08108d4c <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8108d4c:	b590      	push	{r4, r7, lr}
 8108d4e:	b089      	sub	sp, #36	@ 0x24
 8108d50:	af02      	add	r7, sp, #8
 8108d52:	60f8      	str	r0, [r7, #12]
 8108d54:	60b9      	str	r1, [r7, #8]
 8108d56:	607a      	str	r2, [r7, #4]
 8108d58:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8108d5a:	68fb      	ldr	r3, [r7, #12]
 8108d5c:	2b00      	cmp	r3, #0
 8108d5e:	d00a      	beq.n	8108d76 <rpmsg_send_offchannel_raw+0x2a>
 8108d60:	68fb      	ldr	r3, [r7, #12]
 8108d62:	6a1b      	ldr	r3, [r3, #32]
 8108d64:	2b00      	cmp	r3, #0
 8108d66:	d006      	beq.n	8108d76 <rpmsg_send_offchannel_raw+0x2a>
 8108d68:	683b      	ldr	r3, [r7, #0]
 8108d6a:	2b00      	cmp	r3, #0
 8108d6c:	d003      	beq.n	8108d76 <rpmsg_send_offchannel_raw+0x2a>
 8108d6e:	687b      	ldr	r3, [r7, #4]
 8108d70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108d74:	d101      	bne.n	8108d7a <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8108d76:	4b0d      	ldr	r3, [pc, #52]	@ (8108dac <rpmsg_send_offchannel_raw+0x60>)
 8108d78:	e014      	b.n	8108da4 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8108d7a:	68fb      	ldr	r3, [r7, #12]
 8108d7c:	6a1b      	ldr	r3, [r3, #32]
 8108d7e:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8108d80:	697b      	ldr	r3, [r7, #20]
 8108d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8108d84:	2b00      	cmp	r3, #0
 8108d86:	d00c      	beq.n	8108da2 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8108d88:	697b      	ldr	r3, [r7, #20]
 8108d8a:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8108d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108d8e:	9301      	str	r3, [sp, #4]
 8108d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108d92:	9300      	str	r3, [sp, #0]
 8108d94:	683b      	ldr	r3, [r7, #0]
 8108d96:	687a      	ldr	r2, [r7, #4]
 8108d98:	68b9      	ldr	r1, [r7, #8]
 8108d9a:	6978      	ldr	r0, [r7, #20]
 8108d9c:	47a0      	blx	r4
 8108d9e:	4603      	mov	r3, r0
 8108da0:	e000      	b.n	8108da4 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8108da2:	4b02      	ldr	r3, [pc, #8]	@ (8108dac <rpmsg_send_offchannel_raw+0x60>)
}
 8108da4:	4618      	mov	r0, r3
 8108da6:	371c      	adds	r7, #28
 8108da8:	46bd      	mov	sp, r7
 8108daa:	bd90      	pop	{r4, r7, pc}
 8108dac:	fffff82d 	.word	0xfffff82d

08108db0 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8108db0:	b580      	push	{r7, lr}
 8108db2:	b090      	sub	sp, #64	@ 0x40
 8108db4:	af02      	add	r7, sp, #8
 8108db6:	6078      	str	r0, [r7, #4]
 8108db8:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8108dba:	683b      	ldr	r3, [r7, #0]
 8108dbc:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 8108dbe:	687b      	ldr	r3, [r7, #4]
 8108dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8108dc4:	6879      	ldr	r1, [r7, #4]
 8108dc6:	f107 030c 	add.w	r3, r7, #12
 8108dca:	2220      	movs	r2, #32
 8108dcc:	4618      	mov	r0, r3
 8108dce:	f001 fe55 	bl	810aa7c <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8108dd2:	687b      	ldr	r3, [r7, #4]
 8108dd4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8108dd6:	f107 030c 	add.w	r3, r7, #12
 8108dda:	2201      	movs	r2, #1
 8108ddc:	9201      	str	r2, [sp, #4]
 8108dde:	2228      	movs	r2, #40	@ 0x28
 8108de0:	9200      	str	r2, [sp, #0]
 8108de2:	2235      	movs	r2, #53	@ 0x35
 8108de4:	6878      	ldr	r0, [r7, #4]
 8108de6:	f7ff ffb1 	bl	8108d4c <rpmsg_send_offchannel_raw>
 8108dea:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8108dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108dee:	2b00      	cmp	r3, #0
 8108df0:	da01      	bge.n	8108df6 <rpmsg_send_ns_message+0x46>
		return ret;
 8108df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108df4:	e000      	b.n	8108df8 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8108df6:	2300      	movs	r3, #0
}
 8108df8:	4618      	mov	r0, r3
 8108dfa:	3738      	adds	r7, #56	@ 0x38
 8108dfc:	46bd      	mov	sp, r7
 8108dfe:	bd80      	pop	{r7, pc}

08108e00 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8108e00:	b580      	push	{r7, lr}
 8108e02:	b088      	sub	sp, #32
 8108e04:	af00      	add	r7, sp, #0
 8108e06:	60f8      	str	r0, [r7, #12]
 8108e08:	60b9      	str	r1, [r7, #8]
 8108e0a:	607a      	str	r2, [r7, #4]
 8108e0c:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8108e0e:	68fb      	ldr	r3, [r7, #12]
 8108e10:	681b      	ldr	r3, [r3, #0]
 8108e12:	61fb      	str	r3, [r7, #28]
 8108e14:	e04b      	b.n	8108eae <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8108e16:	2300      	movs	r3, #0
 8108e18:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8108e1a:	69fb      	ldr	r3, [r7, #28]
 8108e1c:	3b34      	subs	r3, #52	@ 0x34
 8108e1e:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8108e20:	687b      	ldr	r3, [r7, #4]
 8108e22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108e26:	d006      	beq.n	8108e36 <rpmsg_get_endpoint+0x36>
 8108e28:	697b      	ldr	r3, [r7, #20]
 8108e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108e2c:	687a      	ldr	r2, [r7, #4]
 8108e2e:	429a      	cmp	r2, r3
 8108e30:	d101      	bne.n	8108e36 <rpmsg_get_endpoint+0x36>
			return ept;
 8108e32:	697b      	ldr	r3, [r7, #20]
 8108e34:	e040      	b.n	8108eb8 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8108e36:	697b      	ldr	r3, [r7, #20]
 8108e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108e3a:	687a      	ldr	r2, [r7, #4]
 8108e3c:	429a      	cmp	r2, r3
 8108e3e:	d106      	bne.n	8108e4e <rpmsg_get_endpoint+0x4e>
 8108e40:	697b      	ldr	r3, [r7, #20]
 8108e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108e44:	683a      	ldr	r2, [r7, #0]
 8108e46:	429a      	cmp	r2, r3
 8108e48:	d101      	bne.n	8108e4e <rpmsg_get_endpoint+0x4e>
			return ept;
 8108e4a:	697b      	ldr	r3, [r7, #20]
 8108e4c:	e034      	b.n	8108eb8 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8108e4e:	68bb      	ldr	r3, [r7, #8]
 8108e50:	2b00      	cmp	r3, #0
 8108e52:	d00c      	beq.n	8108e6e <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8108e54:	697b      	ldr	r3, [r7, #20]
 8108e56:	2220      	movs	r2, #32
 8108e58:	68b9      	ldr	r1, [r7, #8]
 8108e5a:	4618      	mov	r0, r3
 8108e5c:	f001 fdfc 	bl	810aa58 <strncmp>
 8108e60:	4603      	mov	r3, r0
 8108e62:	2b00      	cmp	r3, #0
 8108e64:	bf0c      	ite	eq
 8108e66:	2301      	moveq	r3, #1
 8108e68:	2300      	movne	r3, #0
 8108e6a:	b2db      	uxtb	r3, r3
 8108e6c:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8108e6e:	68bb      	ldr	r3, [r7, #8]
 8108e70:	2b00      	cmp	r3, #0
 8108e72:	d018      	beq.n	8108ea6 <rpmsg_get_endpoint+0xa6>
 8108e74:	69bb      	ldr	r3, [r7, #24]
 8108e76:	2b00      	cmp	r3, #0
 8108e78:	d015      	beq.n	8108ea6 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8108e7a:	683b      	ldr	r3, [r7, #0]
 8108e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108e80:	d006      	beq.n	8108e90 <rpmsg_get_endpoint+0x90>
 8108e82:	697b      	ldr	r3, [r7, #20]
 8108e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108e86:	683a      	ldr	r2, [r7, #0]
 8108e88:	429a      	cmp	r2, r3
 8108e8a:	d101      	bne.n	8108e90 <rpmsg_get_endpoint+0x90>
			return ept;
 8108e8c:	697b      	ldr	r3, [r7, #20]
 8108e8e:	e013      	b.n	8108eb8 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8108e90:	687b      	ldr	r3, [r7, #4]
 8108e92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108e96:	d107      	bne.n	8108ea8 <rpmsg_get_endpoint+0xa8>
 8108e98:	697b      	ldr	r3, [r7, #20]
 8108e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108ea0:	d102      	bne.n	8108ea8 <rpmsg_get_endpoint+0xa8>
			return ept;
 8108ea2:	697b      	ldr	r3, [r7, #20]
 8108ea4:	e008      	b.n	8108eb8 <rpmsg_get_endpoint+0xb8>
			continue;
 8108ea6:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8108ea8:	69fb      	ldr	r3, [r7, #28]
 8108eaa:	681b      	ldr	r3, [r3, #0]
 8108eac:	61fb      	str	r3, [r7, #28]
 8108eae:	68fb      	ldr	r3, [r7, #12]
 8108eb0:	69fa      	ldr	r2, [r7, #28]
 8108eb2:	429a      	cmp	r2, r3
 8108eb4:	d1af      	bne.n	8108e16 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8108eb6:	2300      	movs	r3, #0
}
 8108eb8:	4618      	mov	r0, r3
 8108eba:	3720      	adds	r7, #32
 8108ebc:	46bd      	mov	sp, r7
 8108ebe:	bd80      	pop	{r7, pc}

08108ec0 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8108ec0:	b580      	push	{r7, lr}
 8108ec2:	b084      	sub	sp, #16
 8108ec4:	af00      	add	r7, sp, #0
 8108ec6:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8108ec8:	687b      	ldr	r3, [r7, #4]
 8108eca:	2b00      	cmp	r3, #0
 8108ecc:	d016      	beq.n	8108efc <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8108ece:	687b      	ldr	r3, [r7, #4]
 8108ed0:	6a1b      	ldr	r3, [r3, #32]
 8108ed2:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8108ed4:	687b      	ldr	r3, [r7, #4]
 8108ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108edc:	d008      	beq.n	8108ef0 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8108ede:	68fb      	ldr	r3, [r7, #12]
 8108ee0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 8108ee4:	687b      	ldr	r3, [r7, #4]
 8108ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8108ee8:	461a      	mov	r2, r3
 8108eea:	2180      	movs	r1, #128	@ 0x80
 8108eec:	f7ff feec 	bl	8108cc8 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8108ef0:	687b      	ldr	r3, [r7, #4]
 8108ef2:	3334      	adds	r3, #52	@ 0x34
 8108ef4:	4618      	mov	r0, r3
 8108ef6:	f7ff fe0f 	bl	8108b18 <metal_list_del>
 8108efa:	e000      	b.n	8108efe <rpmsg_unregister_endpoint+0x3e>
		return;
 8108efc:	bf00      	nop
}
 8108efe:	3710      	adds	r7, #16
 8108f00:	46bd      	mov	sp, r7
 8108f02:	bd80      	pop	{r7, pc}

08108f04 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8108f04:	b580      	push	{r7, lr}
 8108f06:	b082      	sub	sp, #8
 8108f08:	af00      	add	r7, sp, #0
 8108f0a:	6078      	str	r0, [r7, #4]
 8108f0c:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8108f0e:	683b      	ldr	r3, [r7, #0]
 8108f10:	687a      	ldr	r2, [r7, #4]
 8108f12:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8108f14:	687a      	ldr	r2, [r7, #4]
 8108f16:	683b      	ldr	r3, [r7, #0]
 8108f18:	3334      	adds	r3, #52	@ 0x34
 8108f1a:	4619      	mov	r1, r3
 8108f1c:	4610      	mov	r0, r2
 8108f1e:	f7ff fdee 	bl	8108afe <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8108f22:	2300      	movs	r3, #0
}
 8108f24:	4618      	mov	r0, r3
 8108f26:	3708      	adds	r7, #8
 8108f28:	46bd      	mov	sp, r7
 8108f2a:	bd80      	pop	{r7, pc}

08108f2c <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8108f2c:	b580      	push	{r7, lr}
 8108f2e:	b088      	sub	sp, #32
 8108f30:	af02      	add	r7, sp, #8
 8108f32:	60f8      	str	r0, [r7, #12]
 8108f34:	60b9      	str	r1, [r7, #8]
 8108f36:	607a      	str	r2, [r7, #4]
 8108f38:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8108f3a:	683b      	ldr	r3, [r7, #0]
 8108f3c:	613b      	str	r3, [r7, #16]

	if (!ept)
 8108f3e:	68fb      	ldr	r3, [r7, #12]
 8108f40:	2b00      	cmp	r3, #0
 8108f42:	d101      	bne.n	8108f48 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8108f44:	4b37      	ldr	r3, [pc, #220]	@ (8109024 <rpmsg_create_ept+0xf8>)
 8108f46:	e068      	b.n	810901a <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8108f48:	68bb      	ldr	r3, [r7, #8]
 8108f4a:	3358      	adds	r3, #88	@ 0x58
 8108f4c:	4618      	mov	r0, r3
 8108f4e:	f7ff fda6 	bl	8108a9e <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8108f52:	683b      	ldr	r3, [r7, #0]
 8108f54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108f58:	d018      	beq.n	8108f8c <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8108f5a:	68bb      	ldr	r3, [r7, #8]
 8108f5c:	3348      	adds	r3, #72	@ 0x48
 8108f5e:	683a      	ldr	r2, [r7, #0]
 8108f60:	2180      	movs	r1, #128	@ 0x80
 8108f62:	4618      	mov	r0, r3
 8108f64:	f7ff fec2 	bl	8108cec <rpmsg_is_address_set>
 8108f68:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8108f6a:	697b      	ldr	r3, [r7, #20]
 8108f6c:	2b00      	cmp	r3, #0
 8108f6e:	d107      	bne.n	8108f80 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8108f70:	68bb      	ldr	r3, [r7, #8]
 8108f72:	3348      	adds	r3, #72	@ 0x48
 8108f74:	683a      	ldr	r2, [r7, #0]
 8108f76:	2180      	movs	r1, #128	@ 0x80
 8108f78:	4618      	mov	r0, r3
 8108f7a:	f7ff fecf 	bl	8108d1c <rpmsg_set_address>
 8108f7e:	e00c      	b.n	8108f9a <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8108f80:	697b      	ldr	r3, [r7, #20]
 8108f82:	2b00      	cmp	r3, #0
 8108f84:	dd40      	ble.n	8109008 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8108f86:	2300      	movs	r3, #0
 8108f88:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8108f8a:	e040      	b.n	810900e <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8108f8c:	68bb      	ldr	r3, [r7, #8]
 8108f8e:	3348      	adds	r3, #72	@ 0x48
 8108f90:	2180      	movs	r1, #128	@ 0x80
 8108f92:	4618      	mov	r0, r3
 8108f94:	f7ff fe79 	bl	8108c8a <rpmsg_get_address>
 8108f98:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8108f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108f9c:	9301      	str	r3, [sp, #4]
 8108f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108fa0:	9300      	str	r3, [sp, #0]
 8108fa2:	6a3b      	ldr	r3, [r7, #32]
 8108fa4:	693a      	ldr	r2, [r7, #16]
 8108fa6:	6879      	ldr	r1, [r7, #4]
 8108fa8:	68f8      	ldr	r0, [r7, #12]
 8108faa:	f7ff fe51 	bl	8108c50 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8108fae:	68f9      	ldr	r1, [r7, #12]
 8108fb0:	68b8      	ldr	r0, [r7, #8]
 8108fb2:	f7ff ffa7 	bl	8108f04 <rpmsg_register_endpoint>
 8108fb6:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8108fb8:	697b      	ldr	r3, [r7, #20]
 8108fba:	2b00      	cmp	r3, #0
 8108fbc:	da06      	bge.n	8108fcc <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8108fbe:	68bb      	ldr	r3, [r7, #8]
 8108fc0:	3348      	adds	r3, #72	@ 0x48
 8108fc2:	693a      	ldr	r2, [r7, #16]
 8108fc4:	2180      	movs	r1, #128	@ 0x80
 8108fc6:	4618      	mov	r0, r3
 8108fc8:	f7ff fe7e 	bl	8108cc8 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8108fcc:	697b      	ldr	r3, [r7, #20]
 8108fce:	2b00      	cmp	r3, #0
 8108fd0:	d11c      	bne.n	810900c <rpmsg_create_ept+0xe0>
 8108fd2:	68fb      	ldr	r3, [r7, #12]
 8108fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108fda:	d117      	bne.n	810900c <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8108fdc:	68bb      	ldr	r3, [r7, #8]
 8108fde:	3358      	adds	r3, #88	@ 0x58
 8108fe0:	4618      	mov	r0, r3
 8108fe2:	f7ff fd67 	bl	8108ab4 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8108fe6:	2100      	movs	r1, #0
 8108fe8:	68f8      	ldr	r0, [r7, #12]
 8108fea:	f7ff fee1 	bl	8108db0 <rpmsg_send_ns_message>
 8108fee:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8108ff0:	68bb      	ldr	r3, [r7, #8]
 8108ff2:	3358      	adds	r3, #88	@ 0x58
 8108ff4:	4618      	mov	r0, r3
 8108ff6:	f7ff fd52 	bl	8108a9e <metal_mutex_acquire>
		if (status)
 8108ffa:	697b      	ldr	r3, [r7, #20]
 8108ffc:	2b00      	cmp	r3, #0
 8108ffe:	d005      	beq.n	810900c <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8109000:	68f8      	ldr	r0, [r7, #12]
 8109002:	f7ff ff5d 	bl	8108ec0 <rpmsg_unregister_endpoint>
 8109006:	e002      	b.n	810900e <rpmsg_create_ept+0xe2>
			goto ret_status;
 8109008:	bf00      	nop
 810900a:	e000      	b.n	810900e <rpmsg_create_ept+0xe2>
	}

ret_status:
 810900c:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 810900e:	68bb      	ldr	r3, [r7, #8]
 8109010:	3358      	adds	r3, #88	@ 0x58
 8109012:	4618      	mov	r0, r3
 8109014:	f7ff fd4e 	bl	8108ab4 <metal_mutex_release>
	return status;
 8109018:	697b      	ldr	r3, [r7, #20]
}
 810901a:	4618      	mov	r0, r3
 810901c:	3718      	adds	r7, #24
 810901e:	46bd      	mov	sp, r7
 8109020:	bd80      	pop	{r7, pc}
 8109022:	bf00      	nop
 8109024:	fffff82d 	.word	0xfffff82d

08109028 <__metal_cache_invalidate>:
{
 8109028:	b580      	push	{r7, lr}
 810902a:	b082      	sub	sp, #8
 810902c:	af00      	add	r7, sp, #0
 810902e:	6078      	str	r0, [r7, #4]
 8109030:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8109032:	6839      	ldr	r1, [r7, #0]
 8109034:	6878      	ldr	r0, [r7, #4]
 8109036:	f000 fc58 	bl	81098ea <metal_machine_cache_invalidate>
}
 810903a:	bf00      	nop
 810903c:	3708      	adds	r7, #8
 810903e:	46bd      	mov	sp, r7
 8109040:	bd80      	pop	{r7, pc}

08109042 <metal_cache_invalidate>:
{
 8109042:	b580      	push	{r7, lr}
 8109044:	b082      	sub	sp, #8
 8109046:	af00      	add	r7, sp, #0
 8109048:	6078      	str	r0, [r7, #4]
 810904a:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 810904c:	6839      	ldr	r1, [r7, #0]
 810904e:	6878      	ldr	r0, [r7, #4]
 8109050:	f7ff ffea 	bl	8109028 <__metal_cache_invalidate>
}
 8109054:	bf00      	nop
 8109056:	3708      	adds	r7, #8
 8109058:	46bd      	mov	sp, r7
 810905a:	bd80      	pop	{r7, pc}

0810905c <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 810905c:	b480      	push	{r7}
 810905e:	b083      	sub	sp, #12
 8109060:	af00      	add	r7, sp, #0
 8109062:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8109064:	2300      	movs	r3, #0
}
 8109066:	4618      	mov	r0, r3
 8109068:	370c      	adds	r7, #12
 810906a:	46bd      	mov	sp, r7
 810906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109070:	4770      	bx	lr

08109072 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8109072:	b580      	push	{r7, lr}
 8109074:	b082      	sub	sp, #8
 8109076:	af00      	add	r7, sp, #0
 8109078:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 810907a:	6878      	ldr	r0, [r7, #4]
 810907c:	f7ff ffee 	bl	810905c <__metal_sleep_usec>
 8109080:	4603      	mov	r3, r0
}
 8109082:	4618      	mov	r0, r3
 8109084:	3708      	adds	r7, #8
 8109086:	46bd      	mov	sp, r7
 8109088:	bd80      	pop	{r7, pc}

0810908a <metal_list_init>:
{
 810908a:	b480      	push	{r7}
 810908c:	b083      	sub	sp, #12
 810908e:	af00      	add	r7, sp, #0
 8109090:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8109092:	687b      	ldr	r3, [r7, #4]
 8109094:	687a      	ldr	r2, [r7, #4]
 8109096:	605a      	str	r2, [r3, #4]
 8109098:	687b      	ldr	r3, [r7, #4]
 810909a:	685a      	ldr	r2, [r3, #4]
 810909c:	687b      	ldr	r3, [r7, #4]
 810909e:	601a      	str	r2, [r3, #0]
}
 81090a0:	bf00      	nop
 81090a2:	370c      	adds	r7, #12
 81090a4:	46bd      	mov	sp, r7
 81090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090aa:	4770      	bx	lr

081090ac <metal_io_virt_to_offset>:
{
 81090ac:	b480      	push	{r7}
 81090ae:	b085      	sub	sp, #20
 81090b0:	af00      	add	r7, sp, #0
 81090b2:	6078      	str	r0, [r7, #4]
 81090b4:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 81090b6:	687b      	ldr	r3, [r7, #4]
 81090b8:	681b      	ldr	r3, [r3, #0]
 81090ba:	683a      	ldr	r2, [r7, #0]
 81090bc:	1ad3      	subs	r3, r2, r3
 81090be:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 81090c0:	687b      	ldr	r3, [r7, #4]
 81090c2:	689b      	ldr	r3, [r3, #8]
 81090c4:	68fa      	ldr	r2, [r7, #12]
 81090c6:	429a      	cmp	r2, r3
 81090c8:	d201      	bcs.n	81090ce <metal_io_virt_to_offset+0x22>
 81090ca:	68fb      	ldr	r3, [r7, #12]
 81090cc:	e001      	b.n	81090d2 <metal_io_virt_to_offset+0x26>
 81090ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 81090d2:	4618      	mov	r0, r3
 81090d4:	3714      	adds	r7, #20
 81090d6:	46bd      	mov	sp, r7
 81090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090dc:	4770      	bx	lr

081090de <__metal_mutex_init>:
{
 81090de:	b480      	push	{r7}
 81090e0:	b085      	sub	sp, #20
 81090e2:	af00      	add	r7, sp, #0
 81090e4:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 81090e6:	687b      	ldr	r3, [r7, #4]
 81090e8:	60fb      	str	r3, [r7, #12]
 81090ea:	2300      	movs	r3, #0
 81090ec:	60bb      	str	r3, [r7, #8]
 81090ee:	68bb      	ldr	r3, [r7, #8]
 81090f0:	461a      	mov	r2, r3
 81090f2:	68fb      	ldr	r3, [r7, #12]
 81090f4:	f3bf 8f5b 	dmb	ish
 81090f8:	601a      	str	r2, [r3, #0]
 81090fa:	f3bf 8f5b 	dmb	ish
}
 81090fe:	bf00      	nop
 8109100:	3714      	adds	r7, #20
 8109102:	46bd      	mov	sp, r7
 8109104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109108:	4770      	bx	lr

0810910a <__metal_mutex_acquire>:
{
 810910a:	b480      	push	{r7}
 810910c:	b083      	sub	sp, #12
 810910e:	af00      	add	r7, sp, #0
 8109110:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8109112:	bf00      	nop
 8109114:	687b      	ldr	r3, [r7, #4]
 8109116:	2201      	movs	r2, #1
 8109118:	4611      	mov	r1, r2
 810911a:	f3bf 8f5b 	dmb	ish
 810911e:	e8d3 2f4f 	ldrexb	r2, [r3]
 8109122:	e8c3 1f40 	strexb	r0, r1, [r3]
 8109126:	2800      	cmp	r0, #0
 8109128:	d1f9      	bne.n	810911e <__metal_mutex_acquire+0x14>
 810912a:	f3bf 8f5b 	dmb	ish
 810912e:	b2d3      	uxtb	r3, r2
 8109130:	2b00      	cmp	r3, #0
 8109132:	d1ef      	bne.n	8109114 <__metal_mutex_acquire+0xa>
}
 8109134:	bf00      	nop
 8109136:	bf00      	nop
 8109138:	370c      	adds	r7, #12
 810913a:	46bd      	mov	sp, r7
 810913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109140:	4770      	bx	lr

08109142 <__metal_mutex_release>:
{
 8109142:	b480      	push	{r7}
 8109144:	b083      	sub	sp, #12
 8109146:	af00      	add	r7, sp, #0
 8109148:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 810914a:	687b      	ldr	r3, [r7, #4]
 810914c:	f3bf 8f5b 	dmb	ish
 8109150:	2200      	movs	r2, #0
 8109152:	701a      	strb	r2, [r3, #0]
 8109154:	f3bf 8f5b 	dmb	ish
}
 8109158:	bf00      	nop
 810915a:	370c      	adds	r7, #12
 810915c:	46bd      	mov	sp, r7
 810915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109162:	4770      	bx	lr

08109164 <metal_mutex_init>:
{
 8109164:	b580      	push	{r7, lr}
 8109166:	b082      	sub	sp, #8
 8109168:	af00      	add	r7, sp, #0
 810916a:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 810916c:	6878      	ldr	r0, [r7, #4]
 810916e:	f7ff ffb6 	bl	81090de <__metal_mutex_init>
}
 8109172:	bf00      	nop
 8109174:	3708      	adds	r7, #8
 8109176:	46bd      	mov	sp, r7
 8109178:	bd80      	pop	{r7, pc}

0810917a <metal_mutex_acquire>:
{
 810917a:	b580      	push	{r7, lr}
 810917c:	b082      	sub	sp, #8
 810917e:	af00      	add	r7, sp, #0
 8109180:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8109182:	6878      	ldr	r0, [r7, #4]
 8109184:	f7ff ffc1 	bl	810910a <__metal_mutex_acquire>
}
 8109188:	bf00      	nop
 810918a:	3708      	adds	r7, #8
 810918c:	46bd      	mov	sp, r7
 810918e:	bd80      	pop	{r7, pc}

08109190 <metal_mutex_release>:
{
 8109190:	b580      	push	{r7, lr}
 8109192:	b082      	sub	sp, #8
 8109194:	af00      	add	r7, sp, #0
 8109196:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8109198:	6878      	ldr	r0, [r7, #4]
 810919a:	f7ff ffd2 	bl	8109142 <__metal_mutex_release>
}
 810919e:	bf00      	nop
 81091a0:	3708      	adds	r7, #8
 81091a2:	46bd      	mov	sp, r7
 81091a4:	bd80      	pop	{r7, pc}

081091a6 <rpmsg_init_ept>:
{
 81091a6:	b580      	push	{r7, lr}
 81091a8:	b084      	sub	sp, #16
 81091aa:	af00      	add	r7, sp, #0
 81091ac:	60f8      	str	r0, [r7, #12]
 81091ae:	60b9      	str	r1, [r7, #8]
 81091b0:	607a      	str	r2, [r7, #4]
 81091b2:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 81091b4:	68fb      	ldr	r3, [r7, #12]
 81091b6:	2220      	movs	r2, #32
 81091b8:	68b9      	ldr	r1, [r7, #8]
 81091ba:	4618      	mov	r0, r3
 81091bc:	f001 fc5e 	bl	810aa7c <strncpy>
	ept->addr = src;
 81091c0:	68fb      	ldr	r3, [r7, #12]
 81091c2:	687a      	ldr	r2, [r7, #4]
 81091c4:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 81091c6:	68fb      	ldr	r3, [r7, #12]
 81091c8:	683a      	ldr	r2, [r7, #0]
 81091ca:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 81091cc:	68fb      	ldr	r3, [r7, #12]
 81091ce:	69ba      	ldr	r2, [r7, #24]
 81091d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 81091d2:	68fb      	ldr	r3, [r7, #12]
 81091d4:	69fa      	ldr	r2, [r7, #28]
 81091d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 81091d8:	bf00      	nop
 81091da:	3710      	adds	r7, #16
 81091dc:	46bd      	mov	sp, r7
 81091de:	bd80      	pop	{r7, pc}

081091e0 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 81091e0:	b480      	push	{r7}
 81091e2:	b083      	sub	sp, #12
 81091e4:	af00      	add	r7, sp, #0
 81091e6:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 81091e8:	687b      	ldr	r3, [r7, #4]
 81091ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81091ec:	699b      	ldr	r3, [r3, #24]
}
 81091ee:	4618      	mov	r0, r3
 81091f0:	370c      	adds	r7, #12
 81091f2:	46bd      	mov	sp, r7
 81091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091f8:	4770      	bx	lr

081091fa <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 81091fa:	b580      	push	{r7, lr}
 81091fc:	b082      	sub	sp, #8
 81091fe:	af00      	add	r7, sp, #0
 8109200:	6078      	str	r0, [r7, #4]
 8109202:	460b      	mov	r3, r1
 8109204:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8109206:	687b      	ldr	r3, [r7, #4]
 8109208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810920a:	6a1b      	ldr	r3, [r3, #32]
 810920c:	685b      	ldr	r3, [r3, #4]
 810920e:	687a      	ldr	r2, [r7, #4]
 8109210:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8109212:	78f9      	ldrb	r1, [r7, #3]
 8109214:	4610      	mov	r0, r2
 8109216:	4798      	blx	r3
}
 8109218:	bf00      	nop
 810921a:	3708      	adds	r7, #8
 810921c:	46bd      	mov	sp, r7
 810921e:	bd80      	pop	{r7, pc}

08109220 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8109220:	b580      	push	{r7, lr}
 8109222:	b082      	sub	sp, #8
 8109224:	af00      	add	r7, sp, #0
 8109226:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8109228:	687b      	ldr	r3, [r7, #4]
 810922a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810922c:	6a1b      	ldr	r3, [r3, #32]
 810922e:	681b      	ldr	r3, [r3, #0]
 8109230:	687a      	ldr	r2, [r7, #4]
 8109232:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8109234:	4610      	mov	r0, r2
 8109236:	4798      	blx	r3
 8109238:	4603      	mov	r3, r0
}
 810923a:	4618      	mov	r0, r3
 810923c:	3708      	adds	r7, #8
 810923e:	46bd      	mov	sp, r7
 8109240:	bd80      	pop	{r7, pc}

08109242 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8109242:	b580      	push	{r7, lr}
 8109244:	b082      	sub	sp, #8
 8109246:	af00      	add	r7, sp, #0
 8109248:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 810924a:	687b      	ldr	r3, [r7, #4]
 810924c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810924e:	6a1b      	ldr	r3, [r3, #32]
 8109250:	689b      	ldr	r3, [r3, #8]
 8109252:	687a      	ldr	r2, [r7, #4]
 8109254:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8109256:	4610      	mov	r0, r2
 8109258:	4798      	blx	r3
 810925a:	4603      	mov	r3, r0
}
 810925c:	4618      	mov	r0, r3
 810925e:	3708      	adds	r7, #8
 8109260:	46bd      	mov	sp, r7
 8109262:	bd80      	pop	{r7, pc}

08109264 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8109264:	b580      	push	{r7, lr}
 8109266:	b086      	sub	sp, #24
 8109268:	af02      	add	r7, sp, #8
 810926a:	60f8      	str	r0, [r7, #12]
 810926c:	60b9      	str	r1, [r7, #8]
 810926e:	607a      	str	r2, [r7, #4]
 8109270:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8109272:	68fb      	ldr	r3, [r7, #12]
 8109274:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8109276:	68b9      	ldr	r1, [r7, #8]
 8109278:	69bb      	ldr	r3, [r7, #24]
 810927a:	9300      	str	r3, [sp, #0]
 810927c:	683b      	ldr	r3, [r7, #0]
 810927e:	687a      	ldr	r2, [r7, #4]
 8109280:	f000 fb4c 	bl	810991c <virtio_create_virtqueues>
 8109284:	4603      	mov	r3, r0
					callbacks);
}
 8109286:	4618      	mov	r0, r3
 8109288:	3710      	adds	r7, #16
 810928a:	46bd      	mov	sp, r7
 810928c:	bd80      	pop	{r7, pc}

0810928e <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 810928e:	b580      	push	{r7, lr}
 8109290:	b082      	sub	sp, #8
 8109292:	af00      	add	r7, sp, #0
 8109294:	6078      	str	r0, [r7, #4]
 8109296:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8109298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810929c:	683a      	ldr	r2, [r7, #0]
 810929e:	2100      	movs	r1, #0
 81092a0:	6878      	ldr	r0, [r7, #4]
 81092a2:	f7ff fdad 	bl	8108e00 <rpmsg_get_endpoint>
 81092a6:	4603      	mov	r3, r0
}
 81092a8:	4618      	mov	r0, r3
 81092aa:	3708      	adds	r7, #8
 81092ac:	46bd      	mov	sp, r7
 81092ae:	bd80      	pop	{r7, pc}

081092b0 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 81092b0:	b480      	push	{r7}
 81092b2:	b085      	sub	sp, #20
 81092b4:	af00      	add	r7, sp, #0
 81092b6:	60f8      	str	r0, [r7, #12]
 81092b8:	60b9      	str	r1, [r7, #8]
 81092ba:	607a      	str	r2, [r7, #4]
	if (!shpool)
 81092bc:	68fb      	ldr	r3, [r7, #12]
 81092be:	2b00      	cmp	r3, #0
 81092c0:	d01d      	beq.n	81092fe <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 81092c2:	68fb      	ldr	r3, [r7, #12]
 81092c4:	68ba      	ldr	r2, [r7, #8]
 81092c6:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 81092c8:	687b      	ldr	r3, [r7, #4]
 81092ca:	f003 0303 	and.w	r3, r3, #3
 81092ce:	2b00      	cmp	r3, #0
 81092d0:	d004      	beq.n	81092dc <rpmsg_virtio_init_shm_pool+0x2c>
 81092d2:	687b      	ldr	r3, [r7, #4]
 81092d4:	f023 0303 	bic.w	r3, r3, #3
 81092d8:	3304      	adds	r3, #4
 81092da:	e000      	b.n	81092de <rpmsg_virtio_init_shm_pool+0x2e>
 81092dc:	687b      	ldr	r3, [r7, #4]
 81092de:	68fa      	ldr	r2, [r7, #12]
 81092e0:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 81092e2:	687b      	ldr	r3, [r7, #4]
 81092e4:	f003 0303 	and.w	r3, r3, #3
 81092e8:	2b00      	cmp	r3, #0
 81092ea:	d004      	beq.n	81092f6 <rpmsg_virtio_init_shm_pool+0x46>
 81092ec:	687b      	ldr	r3, [r7, #4]
 81092ee:	f023 0303 	bic.w	r3, r3, #3
 81092f2:	3304      	adds	r3, #4
 81092f4:	e000      	b.n	81092f8 <rpmsg_virtio_init_shm_pool+0x48>
 81092f6:	687b      	ldr	r3, [r7, #4]
 81092f8:	68fa      	ldr	r2, [r7, #12]
 81092fa:	6053      	str	r3, [r2, #4]
 81092fc:	e000      	b.n	8109300 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 81092fe:	bf00      	nop
}
 8109300:	3714      	adds	r7, #20
 8109302:	46bd      	mov	sp, r7
 8109304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109308:	4770      	bx	lr

0810930a <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 810930a:	b580      	push	{r7, lr}
 810930c:	b086      	sub	sp, #24
 810930e:	af00      	add	r7, sp, #0
 8109310:	60f8      	str	r0, [r7, #12]
 8109312:	60b9      	str	r1, [r7, #8]
 8109314:	607a      	str	r2, [r7, #4]
 8109316:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8109318:	68f8      	ldr	r0, [r7, #12]
 810931a:	f7ff ff61 	bl	81091e0 <rpmsg_virtio_get_role>
 810931e:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8109320:	697b      	ldr	r3, [r7, #20]
 8109322:	2b01      	cmp	r3, #1
 8109324:	d106      	bne.n	8109334 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 8109326:	68fb      	ldr	r3, [r7, #12]
 8109328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810932a:	8879      	ldrh	r1, [r7, #2]
 810932c:	687a      	ldr	r2, [r7, #4]
 810932e:	4618      	mov	r0, r3
 8109330:	f000 fc9e 	bl	8109c70 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8109334:	bf00      	nop
 8109336:	3718      	adds	r7, #24
 8109338:	46bd      	mov	sp, r7
 810933a:	bd80      	pop	{r7, pc}

0810933c <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 810933c:	b580      	push	{r7, lr}
 810933e:	b086      	sub	sp, #24
 8109340:	af00      	add	r7, sp, #0
 8109342:	60f8      	str	r0, [r7, #12]
 8109344:	60b9      	str	r1, [r7, #8]
 8109346:	607a      	str	r2, [r7, #4]
 8109348:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 810934a:	68f8      	ldr	r0, [r7, #12]
 810934c:	f7ff ff48 	bl	81091e0 <rpmsg_virtio_get_role>
 8109350:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8109352:	697b      	ldr	r3, [r7, #20]
 8109354:	2b01      	cmp	r3, #1
 8109356:	d108      	bne.n	810936a <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 8109358:	68fb      	ldr	r3, [r7, #12]
 810935a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810935c:	8879      	ldrh	r1, [r7, #2]
 810935e:	687a      	ldr	r2, [r7, #4]
 8109360:	4618      	mov	r0, r3
 8109362:	f000 fc85 	bl	8109c70 <virtqueue_add_consumed_buffer>
 8109366:	4603      	mov	r3, r0
 8109368:	e000      	b.n	810936c <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 810936a:	2300      	movs	r3, #0
}
 810936c:	4618      	mov	r0, r3
 810936e:	3718      	adds	r7, #24
 8109370:	46bd      	mov	sp, r7
 8109372:	bd80      	pop	{r7, pc}

08109374 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8109374:	b580      	push	{r7, lr}
 8109376:	b086      	sub	sp, #24
 8109378:	af00      	add	r7, sp, #0
 810937a:	60f8      	str	r0, [r7, #12]
 810937c:	60b9      	str	r1, [r7, #8]
 810937e:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8109380:	68f8      	ldr	r0, [r7, #12]
 8109382:	f7ff ff2d 	bl	81091e0 <rpmsg_virtio_get_role>
 8109386:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8109388:	2300      	movs	r3, #0
 810938a:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810938c:	693b      	ldr	r3, [r7, #16]
 810938e:	2b01      	cmp	r3, #1
 8109390:	d107      	bne.n	81093a2 <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 8109392:	68fb      	ldr	r3, [r7, #12]
 8109394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109396:	68ba      	ldr	r2, [r7, #8]
 8109398:	6879      	ldr	r1, [r7, #4]
 810939a:	4618      	mov	r0, r3
 810939c:	f000 fc22 	bl	8109be4 <virtqueue_get_available_buffer>
 81093a0:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 81093a2:	697b      	ldr	r3, [r7, #20]
}
 81093a4:	4618      	mov	r0, r3
 81093a6:	3718      	adds	r7, #24
 81093a8:	46bd      	mov	sp, r7
 81093aa:	bd80      	pop	{r7, pc}

081093ac <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 81093ac:	b580      	push	{r7, lr}
 81093ae:	b086      	sub	sp, #24
 81093b0:	af00      	add	r7, sp, #0
 81093b2:	60f8      	str	r0, [r7, #12]
 81093b4:	60b9      	str	r1, [r7, #8]
 81093b6:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81093b8:	68f8      	ldr	r0, [r7, #12]
 81093ba:	f7ff ff11 	bl	81091e0 <rpmsg_virtio_get_role>
 81093be:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 81093c0:	2300      	movs	r3, #0
 81093c2:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81093c4:	693b      	ldr	r3, [r7, #16]
 81093c6:	2b01      	cmp	r3, #1
 81093c8:	d107      	bne.n	81093da <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 81093ca:	68fb      	ldr	r3, [r7, #12]
 81093cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81093ce:	68ba      	ldr	r2, [r7, #8]
 81093d0:	6879      	ldr	r1, [r7, #4]
 81093d2:	4618      	mov	r0, r3
 81093d4:	f000 fc06 	bl	8109be4 <virtqueue_get_available_buffer>
 81093d8:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 81093da:	697b      	ldr	r3, [r7, #20]
 81093dc:	2b00      	cmp	r3, #0
 81093de:	d005      	beq.n	81093ec <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 81093e0:	68bb      	ldr	r3, [r7, #8]
 81093e2:	681b      	ldr	r3, [r3, #0]
 81093e4:	4619      	mov	r1, r3
 81093e6:	6978      	ldr	r0, [r7, #20]
 81093e8:	f7ff fe2b 	bl	8109042 <metal_cache_invalidate>
	}

	return data;
 81093ec:	697b      	ldr	r3, [r7, #20]
}
 81093ee:	4618      	mov	r0, r3
 81093f0:	3718      	adds	r7, #24
 81093f2:	46bd      	mov	sp, r7
 81093f4:	bd80      	pop	{r7, pc}

081093f6 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 81093f6:	b580      	push	{r7, lr}
 81093f8:	b084      	sub	sp, #16
 81093fa:	af00      	add	r7, sp, #0
 81093fc:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 81093fe:	6878      	ldr	r0, [r7, #4]
 8109400:	f7ff ff0e 	bl	8109220 <rpmsg_virtio_get_status>
 8109404:	4603      	mov	r3, r0
 8109406:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 8109408:	7bfb      	ldrb	r3, [r7, #15]
 810940a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810940e:	2b00      	cmp	r3, #0
 8109410:	d004      	beq.n	810941c <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 8109412:	2100      	movs	r1, #0
 8109414:	6878      	ldr	r0, [r7, #4]
 8109416:	f7ff fef0 	bl	81091fa <rpmsg_virtio_set_status>
 810941a:	e7f0      	b.n	81093fe <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 810941c:	7bfb      	ldrb	r3, [r7, #15]
 810941e:	f003 0304 	and.w	r3, r3, #4
 8109422:	2b00      	cmp	r3, #0
 8109424:	d0eb      	beq.n	81093fe <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 8109426:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 8109428:	4618      	mov	r0, r3
 810942a:	3710      	adds	r7, #16
 810942c:	46bd      	mov	sp, r7
 810942e:	bd80      	pop	{r7, pc}

08109430 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8109430:	b580      	push	{r7, lr}
 8109432:	b084      	sub	sp, #16
 8109434:	af00      	add	r7, sp, #0
 8109436:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8109438:	6878      	ldr	r0, [r7, #4]
 810943a:	f7ff fed1 	bl	81091e0 <rpmsg_virtio_get_role>
 810943e:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8109440:	2300      	movs	r3, #0
 8109442:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8109444:	68bb      	ldr	r3, [r7, #8]
 8109446:	2b01      	cmp	r3, #1
 8109448:	d107      	bne.n	810945a <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 810944a:	687b      	ldr	r3, [r7, #4]
 810944c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810944e:	4618      	mov	r0, r3
 8109450:	f000 fc88 	bl	8109d64 <virtqueue_get_desc_size>
 8109454:	4603      	mov	r3, r0
 8109456:	3b10      	subs	r3, #16
		length =
 8109458:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 810945a:	68fb      	ldr	r3, [r7, #12]
}
 810945c:	4618      	mov	r0, r3
 810945e:	3710      	adds	r7, #16
 8109460:	46bd      	mov	sp, r7
 8109462:	bd80      	pop	{r7, pc}

08109464 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8109464:	b580      	push	{r7, lr}
 8109466:	b090      	sub	sp, #64	@ 0x40
 8109468:	af00      	add	r7, sp, #0
 810946a:	60f8      	str	r0, [r7, #12]
 810946c:	60b9      	str	r1, [r7, #8]
 810946e:	607a      	str	r2, [r7, #4]
 8109470:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8109472:	2300      	movs	r3, #0
 8109474:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 8109476:	2300      	movs	r3, #0
 8109478:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 810947a:	68fb      	ldr	r3, [r7, #12]
 810947c:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 810947e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8109480:	f7ff fece 	bl	8109220 <rpmsg_virtio_get_status>
 8109484:	4603      	mov	r3, r0
 8109486:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8109488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810948a:	f003 0304 	and.w	r3, r3, #4
 810948e:	2b00      	cmp	r3, #0
 8109490:	d101      	bne.n	8109496 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8109492:	4b46      	ldr	r3, [pc, #280]	@ (81095ac <rpmsg_virtio_send_offchannel_raw+0x148>)
 8109494:	e086      	b.n	81095a4 <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 8109496:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109498:	2b00      	cmp	r3, #0
 810949a:	d003      	beq.n	81094a4 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 810949c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 81094a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 81094a2:	e001      	b.n	81094a8 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 81094a4:	2300      	movs	r3, #0
 81094a6:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 81094a8:	68fb      	ldr	r3, [r7, #12]
 81094aa:	3358      	adds	r3, #88	@ 0x58
 81094ac:	4618      	mov	r0, r3
 81094ae:	f7ff fe64 	bl	810917a <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 81094b2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 81094b4:	f7ff ffbc 	bl	8109430 <_rpmsg_virtio_get_buffer_size>
 81094b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 81094ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81094bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81094be:	429a      	cmp	r2, r3
 81094c0:	dc08      	bgt.n	81094d4 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 81094c2:	f107 0216 	add.w	r2, r7, #22
 81094c6:	f107 0310 	add.w	r3, r7, #16
 81094ca:	4619      	mov	r1, r3
 81094cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 81094ce:	f7ff ff51 	bl	8109374 <rpmsg_virtio_get_tx_buffer>
 81094d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 81094d4:	68fb      	ldr	r3, [r7, #12]
 81094d6:	3358      	adds	r3, #88	@ 0x58
 81094d8:	4618      	mov	r0, r3
 81094da:	f7ff fe59 	bl	8109190 <metal_mutex_release>
		if (buffer || !tick_count)
 81094de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81094e0:	2b00      	cmp	r3, #0
 81094e2:	d10e      	bne.n	8109502 <rpmsg_virtio_send_offchannel_raw+0x9e>
 81094e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81094e6:	2b00      	cmp	r3, #0
 81094e8:	d00b      	beq.n	8109502 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 81094ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81094ec:	2b00      	cmp	r3, #0
 81094ee:	d001      	beq.n	81094f4 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 81094f0:	4b2f      	ldr	r3, [pc, #188]	@ (81095b0 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 81094f2:	e057      	b.n	81095a4 <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 81094f4:	200a      	movs	r0, #10
 81094f6:	f7ff fdbc 	bl	8109072 <metal_sleep_usec>
		tick_count--;
 81094fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81094fc:	3b01      	subs	r3, #1
 81094fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 8109500:	e7d2      	b.n	81094a8 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8109502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109504:	2b00      	cmp	r3, #0
 8109506:	d101      	bne.n	810950c <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8109508:	4b2a      	ldr	r3, [pc, #168]	@ (81095b4 <rpmsg_virtio_send_offchannel_raw+0x150>)
 810950a:	e04b      	b.n	81095a4 <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 810950c:	687b      	ldr	r3, [r7, #4]
 810950e:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8109510:	68bb      	ldr	r3, [r7, #8]
 8109512:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8109514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109516:	b29b      	uxth	r3, r3
 8109518:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 810951a:	2300      	movs	r3, #0
 810951c:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 810951e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109522:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8109524:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8109526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109528:	f7ff fdc0 	bl	81090ac <metal_io_virt_to_offset>
 810952c:	4601      	mov	r1, r0
 810952e:	f107 0218 	add.w	r2, r7, #24
 8109532:	2310      	movs	r3, #16
 8109534:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109536:	f7fe ff56 	bl	81083e6 <metal_io_block_write>
 810953a:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 810953c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810953e:	2b10      	cmp	r3, #16
 8109540:	d001      	beq.n	8109546 <rpmsg_virtio_send_offchannel_raw+0xe2>
 8109542:	bf00      	nop
 8109544:	e7fd      	b.n	8109542 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8109546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109548:	3310      	adds	r3, #16
 810954a:	4619      	mov	r1, r3
 810954c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810954e:	f7ff fdad 	bl	81090ac <metal_io_virt_to_offset>
 8109552:	4601      	mov	r1, r0
 8109554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109556:	683a      	ldr	r2, [r7, #0]
 8109558:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810955a:	f7fe ff44 	bl	81083e6 <metal_io_block_write>
 810955e:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8109560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109564:	429a      	cmp	r2, r3
 8109566:	d001      	beq.n	810956c <rpmsg_virtio_send_offchannel_raw+0x108>
 8109568:	bf00      	nop
 810956a:	e7fd      	b.n	8109568 <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 810956c:	68fb      	ldr	r3, [r7, #12]
 810956e:	3358      	adds	r3, #88	@ 0x58
 8109570:	4618      	mov	r0, r3
 8109572:	f7ff fe02 	bl	810917a <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8109576:	693a      	ldr	r2, [r7, #16]
 8109578:	8afb      	ldrh	r3, [r7, #22]
 810957a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810957c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 810957e:	f7ff fedd 	bl	810933c <rpmsg_virtio_enqueue_buffer>
 8109582:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8109584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109586:	2b00      	cmp	r3, #0
 8109588:	d001      	beq.n	810958e <rpmsg_virtio_send_offchannel_raw+0x12a>
 810958a:	bf00      	nop
 810958c:	e7fd      	b.n	810958a <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 810958e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109592:	4618      	mov	r0, r3
 8109594:	f000 fbd0 	bl	8109d38 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8109598:	68fb      	ldr	r3, [r7, #12]
 810959a:	3358      	adds	r3, #88	@ 0x58
 810959c:	4618      	mov	r0, r3
 810959e:	f7ff fdf7 	bl	8109190 <metal_mutex_release>

	return size;
 81095a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 81095a4:	4618      	mov	r0, r3
 81095a6:	3740      	adds	r7, #64	@ 0x40
 81095a8:	46bd      	mov	sp, r7
 81095aa:	bd80      	pop	{r7, pc}
 81095ac:	fffff82c 	.word	0xfffff82c
 81095b0:	fffff82b 	.word	0xfffff82b
 81095b4:	fffff82e 	.word	0xfffff82e

081095b8 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 81095b8:	b480      	push	{r7}
 81095ba:	b083      	sub	sp, #12
 81095bc:	af00      	add	r7, sp, #0
 81095be:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 81095c0:	bf00      	nop
 81095c2:	370c      	adds	r7, #12
 81095c4:	46bd      	mov	sp, r7
 81095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81095ca:	4770      	bx	lr

081095cc <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 81095cc:	b590      	push	{r4, r7, lr}
 81095ce:	b08d      	sub	sp, #52	@ 0x34
 81095d0:	af02      	add	r7, sp, #8
 81095d2:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 81095d4:	687b      	ldr	r3, [r7, #4]
 81095d6:	681b      	ldr	r3, [r3, #0]
 81095d8:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 81095da:	6a3b      	ldr	r3, [r7, #32]
 81095dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81095de:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 81095e0:	69fb      	ldr	r3, [r7, #28]
 81095e2:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 81095e4:	69bb      	ldr	r3, [r7, #24]
 81095e6:	3358      	adds	r3, #88	@ 0x58
 81095e8:	4618      	mov	r0, r3
 81095ea:	f7ff fdc6 	bl	810917a <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 81095ee:	f107 020a 	add.w	r2, r7, #10
 81095f2:	f107 030c 	add.w	r3, r7, #12
 81095f6:	4619      	mov	r1, r3
 81095f8:	69f8      	ldr	r0, [r7, #28]
 81095fa:	f7ff fed7 	bl	81093ac <rpmsg_virtio_get_rx_buffer>
 81095fe:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8109600:	69bb      	ldr	r3, [r7, #24]
 8109602:	3358      	adds	r3, #88	@ 0x58
 8109604:	4618      	mov	r0, r3
 8109606:	f7ff fdc3 	bl	8109190 <metal_mutex_release>

	while (rp_hdr) {
 810960a:	e04d      	b.n	81096a8 <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 810960c:	69bb      	ldr	r3, [r7, #24]
 810960e:	3358      	adds	r3, #88	@ 0x58
 8109610:	4618      	mov	r0, r3
 8109612:	f7ff fdb2 	bl	810917a <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8109616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109618:	685b      	ldr	r3, [r3, #4]
 810961a:	4619      	mov	r1, r3
 810961c:	69b8      	ldr	r0, [r7, #24]
 810961e:	f7ff fe36 	bl	810928e <rpmsg_get_ept_from_addr>
 8109622:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8109624:	69bb      	ldr	r3, [r7, #24]
 8109626:	3358      	adds	r3, #88	@ 0x58
 8109628:	4618      	mov	r0, r3
 810962a:	f7ff fdb1 	bl	8109190 <metal_mutex_release>

		if (!ept)
 810962e:	697b      	ldr	r3, [r7, #20]
 8109630:	2b00      	cmp	r3, #0
 8109632:	d03d      	beq.n	81096b0 <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8109634:	697b      	ldr	r3, [r7, #20]
 8109636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109638:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810963c:	d103      	bne.n	8109646 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 810963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109640:	681a      	ldr	r2, [r3, #0]
 8109642:	697b      	ldr	r3, [r7, #20]
 8109644:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8109646:	697b      	ldr	r3, [r7, #20]
 8109648:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 810964a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810964c:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8109650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109652:	899b      	ldrh	r3, [r3, #12]
 8109654:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8109656:	4618      	mov	r0, r3
 8109658:	697b      	ldr	r3, [r7, #20]
 810965a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810965c:	697b      	ldr	r3, [r7, #20]
 810965e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109660:	9300      	str	r3, [sp, #0]
 8109662:	4613      	mov	r3, r2
 8109664:	4602      	mov	r2, r0
 8109666:	6978      	ldr	r0, [r7, #20]
 8109668:	47a0      	blx	r4
 810966a:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 810966c:	693b      	ldr	r3, [r7, #16]
 810966e:	2b00      	cmp	r3, #0
 8109670:	d001      	beq.n	8109676 <rpmsg_virtio_rx_callback+0xaa>
 8109672:	bf00      	nop
 8109674:	e7fd      	b.n	8109672 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8109676:	69bb      	ldr	r3, [r7, #24]
 8109678:	3358      	adds	r3, #88	@ 0x58
 810967a:	4618      	mov	r0, r3
 810967c:	f7ff fd7d 	bl	810917a <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8109680:	68fa      	ldr	r2, [r7, #12]
 8109682:	897b      	ldrh	r3, [r7, #10]
 8109684:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8109686:	69f8      	ldr	r0, [r7, #28]
 8109688:	f7ff fe3f 	bl	810930a <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 810968c:	f107 020a 	add.w	r2, r7, #10
 8109690:	f107 030c 	add.w	r3, r7, #12
 8109694:	4619      	mov	r1, r3
 8109696:	69f8      	ldr	r0, [r7, #28]
 8109698:	f7ff fe88 	bl	81093ac <rpmsg_virtio_get_rx_buffer>
 810969c:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 810969e:	69bb      	ldr	r3, [r7, #24]
 81096a0:	3358      	adds	r3, #88	@ 0x58
 81096a2:	4618      	mov	r0, r3
 81096a4:	f7ff fd74 	bl	8109190 <metal_mutex_release>
	while (rp_hdr) {
 81096a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81096aa:	2b00      	cmp	r3, #0
 81096ac:	d1ae      	bne.n	810960c <rpmsg_virtio_rx_callback+0x40>
 81096ae:	e000      	b.n	81096b2 <rpmsg_virtio_rx_callback+0xe6>
			return;
 81096b0:	bf00      	nop
	}
}
 81096b2:	372c      	adds	r7, #44	@ 0x2c
 81096b4:	46bd      	mov	sp, r7
 81096b6:	bd90      	pop	{r4, r7, pc}

081096b8 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 81096b8:	b580      	push	{r7, lr}
 81096ba:	b092      	sub	sp, #72	@ 0x48
 81096bc:	af00      	add	r7, sp, #0
 81096be:	60f8      	str	r0, [r7, #12]
 81096c0:	60b9      	str	r1, [r7, #8]
 81096c2:	607a      	str	r2, [r7, #4]
 81096c4:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 81096c6:	68fb      	ldr	r3, [r7, #12]
 81096c8:	6a1b      	ldr	r3, [r3, #32]
 81096ca:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 81096cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81096ce:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 81096d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81096d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81096d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 81096d6:	68bb      	ldr	r3, [r7, #8]
 81096d8:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 81096da:	687b      	ldr	r3, [r7, #4]
 81096dc:	2b28      	cmp	r3, #40	@ 0x28
 81096de:	d001      	beq.n	81096e4 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 81096e0:	2300      	movs	r3, #0
 81096e2:	e057      	b.n	8109794 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 81096e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 81096e6:	4619      	mov	r1, r3
 81096e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 81096ea:	f7ff fcdf 	bl	81090ac <metal_io_virt_to_offset>
 81096ee:	4601      	mov	r1, r0
 81096f0:	f107 0210 	add.w	r2, r7, #16
 81096f4:	2320      	movs	r3, #32
 81096f6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 81096f8:	f7fe fdfe 	bl	81082f8 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 81096fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81096fe:	6a1b      	ldr	r3, [r3, #32]
 8109700:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8109702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109704:	3358      	adds	r3, #88	@ 0x58
 8109706:	4618      	mov	r0, r3
 8109708:	f7ff fd37 	bl	810917a <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 810970c:	f107 0110 	add.w	r1, r7, #16
 8109710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109712:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8109716:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8109718:	f7ff fb72 	bl	8108e00 <rpmsg_get_endpoint>
 810971c:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 810971e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109722:	f003 0301 	and.w	r3, r3, #1
 8109726:	2b00      	cmp	r3, #0
 8109728:	d017      	beq.n	810975a <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 810972a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810972c:	2b00      	cmp	r3, #0
 810972e:	d003      	beq.n	8109738 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8109730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109732:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8109736:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 8109738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810973a:	3358      	adds	r3, #88	@ 0x58
 810973c:	4618      	mov	r0, r3
 810973e:	f7ff fd27 	bl	8109190 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8109742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109744:	2b00      	cmp	r3, #0
 8109746:	d024      	beq.n	8109792 <rpmsg_virtio_ns_callback+0xda>
 8109748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810974a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810974c:	2b00      	cmp	r3, #0
 810974e:	d020      	beq.n	8109792 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8109750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8109754:	68f8      	ldr	r0, [r7, #12]
 8109756:	4798      	blx	r3
 8109758:	e01b      	b.n	8109792 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 810975a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810975c:	2b00      	cmp	r3, #0
 810975e:	d110      	bne.n	8109782 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8109760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109762:	3358      	adds	r3, #88	@ 0x58
 8109764:	4618      	mov	r0, r3
 8109766:	f7ff fd13 	bl	8109190 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 810976a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810976c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810976e:	2b00      	cmp	r3, #0
 8109770:	d00f      	beq.n	8109792 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8109772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8109776:	f107 0110 	add.w	r1, r7, #16
 810977a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810977c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810977e:	4798      	blx	r3
 8109780:	e007      	b.n	8109792 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8109782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109784:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8109786:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 8109788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810978a:	3358      	adds	r3, #88	@ 0x58
 810978c:	4618      	mov	r0, r3
 810978e:	f7ff fcff 	bl	8109190 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8109792:	2300      	movs	r3, #0
}
 8109794:	4618      	mov	r0, r3
 8109796:	3748      	adds	r7, #72	@ 0x48
 8109798:	46bd      	mov	sp, r7
 810979a:	bd80      	pop	{r7, pc}

0810979c <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 810979c:	b580      	push	{r7, lr}
 810979e:	b090      	sub	sp, #64	@ 0x40
 81097a0:	af02      	add	r7, sp, #8
 81097a2:	60f8      	str	r0, [r7, #12]
 81097a4:	60b9      	str	r1, [r7, #8]
 81097a6:	607a      	str	r2, [r7, #4]
 81097a8:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 81097aa:	68fb      	ldr	r3, [r7, #12]
 81097ac:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
 81097ae:	2264      	movs	r2, #100	@ 0x64
 81097b0:	2100      	movs	r1, #0
 81097b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81097b4:	f001 f975 	bl	810aaa2 <memset>
	metal_mutex_init(&rdev->lock);
 81097b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81097ba:	3358      	adds	r3, #88	@ 0x58
 81097bc:	4618      	mov	r0, r3
 81097be:	f7ff fcd1 	bl	8109164 <metal_mutex_init>
	rvdev->vdev = vdev;
 81097c2:	68fb      	ldr	r3, [r7, #12]
 81097c4:	68ba      	ldr	r2, [r7, #8]
 81097c6:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 81097c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81097ca:	687a      	ldr	r2, [r7, #4]
 81097cc:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 81097ce:	68bb      	ldr	r3, [r7, #8]
 81097d0:	68fa      	ldr	r2, [r7, #12]
 81097d2:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 81097d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81097d6:	4a38      	ldr	r2, [pc, #224]	@ (81098b8 <rpmsg_init_vdev+0x11c>)
 81097d8:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 81097da:	68f8      	ldr	r0, [r7, #12]
 81097dc:	f7ff fd00 	bl	81091e0 <rpmsg_virtio_get_role>
 81097e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 81097e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81097e4:	2b01      	cmp	r3, #1
 81097e6:	d112      	bne.n	810980e <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 81097e8:	4b34      	ldr	r3, [pc, #208]	@ (81098bc <rpmsg_init_vdev+0x120>)
 81097ea:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 81097ec:	4b34      	ldr	r3, [pc, #208]	@ (81098c0 <rpmsg_init_vdev+0x124>)
 81097ee:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 81097f0:	4b34      	ldr	r3, [pc, #208]	@ (81098c4 <rpmsg_init_vdev+0x128>)
 81097f2:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 81097f4:	4b34      	ldr	r3, [pc, #208]	@ (81098c8 <rpmsg_init_vdev+0x12c>)
 81097f6:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 81097f8:	68bb      	ldr	r3, [r7, #8]
 81097fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81097fc:	3318      	adds	r3, #24
 81097fe:	681a      	ldr	r2, [r3, #0]
 8109800:	68fb      	ldr	r3, [r7, #12]
 8109802:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 8109804:	68bb      	ldr	r3, [r7, #8]
 8109806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109808:	681a      	ldr	r2, [r3, #0]
 810980a:	68fb      	ldr	r3, [r7, #12]
 810980c:	66da      	str	r2, [r3, #108]	@ 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 810980e:	68fb      	ldr	r3, [r7, #12]
 8109810:	683a      	ldr	r2, [r7, #0]
 8109812:	671a      	str	r2, [r3, #112]	@ 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8109814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109816:	2b01      	cmp	r3, #1
 8109818:	d102      	bne.n	8109820 <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 810981a:	68f8      	ldr	r0, [r7, #12]
 810981c:	f7ff fdeb 	bl	81093f6 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8109820:	f107 0218 	add.w	r2, r7, #24
 8109824:	f107 0310 	add.w	r3, r7, #16
 8109828:	9300      	str	r3, [sp, #0]
 810982a:	4613      	mov	r3, r2
 810982c:	2202      	movs	r2, #2
 810982e:	2100      	movs	r1, #0
 8109830:	68f8      	ldr	r0, [r7, #12]
 8109832:	f7ff fd17 	bl	8109264 <rpmsg_virtio_create_virtqueues>
 8109836:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8109838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810983a:	2b00      	cmp	r3, #0
 810983c:	d001      	beq.n	8109842 <rpmsg_init_vdev+0xa6>
		return status;
 810983e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109840:	e035      	b.n	81098ae <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8109842:	2300      	movs	r3, #0
 8109844:	637b      	str	r3, [r7, #52]	@ 0x34
 8109846:	e00f      	b.n	8109868 <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8109848:	68bb      	ldr	r3, [r7, #8]
 810984a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 810984c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810984e:	4613      	mov	r3, r2
 8109850:	005b      	lsls	r3, r3, #1
 8109852:	4413      	add	r3, r2
 8109854:	00db      	lsls	r3, r3, #3
 8109856:	440b      	add	r3, r1
 8109858:	681b      	ldr	r3, [r3, #0]
 810985a:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 810985c:	6a3b      	ldr	r3, [r7, #32]
 810985e:	683a      	ldr	r2, [r7, #0]
 8109860:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8109862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109864:	3301      	adds	r3, #1
 8109866:	637b      	str	r3, [r7, #52]	@ 0x34
 8109868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810986a:	2b01      	cmp	r3, #1
 810986c:	d9ec      	bls.n	8109848 <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 810986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109870:	4618      	mov	r0, r3
 8109872:	f7ff fc0a 	bl	810908a <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8109876:	68f8      	ldr	r0, [r7, #12]
 8109878:	f7ff fce3 	bl	8109242 <rpmsg_virtio_get_features>
 810987c:	6278      	str	r0, [r7, #36]	@ 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 810987e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109880:	f003 0301 	and.w	r3, r3, #1
 8109884:	2b00      	cmp	r3, #0
 8109886:	d011      	beq.n	81098ac <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 8109888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810988a:	f103 0008 	add.w	r0, r3, #8
 810988e:	2300      	movs	r3, #0
 8109890:	9301      	str	r3, [sp, #4]
 8109892:	4b0e      	ldr	r3, [pc, #56]	@ (81098cc <rpmsg_init_vdev+0x130>)
 8109894:	9300      	str	r3, [sp, #0]
 8109896:	2335      	movs	r3, #53	@ 0x35
 8109898:	2235      	movs	r2, #53	@ 0x35
 810989a:	490d      	ldr	r1, [pc, #52]	@ (81098d0 <rpmsg_init_vdev+0x134>)
 810989c:	f7ff fc83 	bl	81091a6 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 81098a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81098a2:	3308      	adds	r3, #8
 81098a4:	4619      	mov	r1, r3
 81098a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81098a8:	f7ff fb2c 	bl	8108f04 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 81098ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 81098ae:	4618      	mov	r0, r3
 81098b0:	3738      	adds	r7, #56	@ 0x38
 81098b2:	46bd      	mov	sp, r7
 81098b4:	bd80      	pop	{r7, pc}
 81098b6:	bf00      	nop
 81098b8:	08109465 	.word	0x08109465
 81098bc:	0810b8ac 	.word	0x0810b8ac
 81098c0:	0810b8b4 	.word	0x0810b8b4
 81098c4:	081095b9 	.word	0x081095b9
 81098c8:	081095cd 	.word	0x081095cd
 81098cc:	081096b9 	.word	0x081096b9
 81098d0:	0810b8bc 	.word	0x0810b8bc

081098d4 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 81098d4:	b480      	push	{r7}
 81098d6:	b083      	sub	sp, #12
 81098d8:	af00      	add	r7, sp, #0
 81098da:	6078      	str	r0, [r7, #4]
 81098dc:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 81098de:	bf00      	nop
 81098e0:	370c      	adds	r7, #12
 81098e2:	46bd      	mov	sp, r7
 81098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098e8:	4770      	bx	lr

081098ea <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 81098ea:	b480      	push	{r7}
 81098ec:	b083      	sub	sp, #12
 81098ee:	af00      	add	r7, sp, #0
 81098f0:	6078      	str	r0, [r7, #4]
 81098f2:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 81098f4:	bf00      	nop
 81098f6:	370c      	adds	r7, #12
 81098f8:	46bd      	mov	sp, r7
 81098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098fe:	4770      	bx	lr

08109900 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8109900:	b480      	push	{r7}
 8109902:	b085      	sub	sp, #20
 8109904:	af00      	add	r7, sp, #0
 8109906:	60f8      	str	r0, [r7, #12]
 8109908:	60b9      	str	r1, [r7, #8]
 810990a:	607a      	str	r2, [r7, #4]
 810990c:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 810990e:	68fb      	ldr	r3, [r7, #12]
}
 8109910:	4618      	mov	r0, r3
 8109912:	3714      	adds	r7, #20
 8109914:	46bd      	mov	sp, r7
 8109916:	f85d 7b04 	ldr.w	r7, [sp], #4
 810991a:	4770      	bx	lr

0810991c <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 810991c:	b590      	push	{r4, r7, lr}
 810991e:	b08f      	sub	sp, #60	@ 0x3c
 8109920:	af04      	add	r7, sp, #16
 8109922:	60f8      	str	r0, [r7, #12]
 8109924:	60b9      	str	r1, [r7, #8]
 8109926:	607a      	str	r2, [r7, #4]
 8109928:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 810992a:	68fb      	ldr	r3, [r7, #12]
 810992c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810992e:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 8109930:	687a      	ldr	r2, [r7, #4]
 8109932:	6a3b      	ldr	r3, [r7, #32]
 8109934:	429a      	cmp	r2, r3
 8109936:	d902      	bls.n	810993e <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8109938:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 810993c:	e036      	b.n	81099ac <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 810993e:	2300      	movs	r3, #0
 8109940:	627b      	str	r3, [r7, #36]	@ 0x24
 8109942:	e02e      	b.n	81099a2 <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 8109944:	68fb      	ldr	r3, [r7, #12]
 8109946:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8109948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810994a:	4613      	mov	r3, r2
 810994c:	005b      	lsls	r3, r3, #1
 810994e:	4413      	add	r3, r2
 8109950:	00db      	lsls	r3, r3, #3
 8109952:	440b      	add	r3, r1
 8109954:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 8109956:	69fb      	ldr	r3, [r7, #28]
 8109958:	3304      	adds	r3, #4
 810995a:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 810995c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810995e:	b298      	uxth	r0, r3
 8109960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109962:	009b      	lsls	r3, r3, #2
 8109964:	683a      	ldr	r2, [r7, #0]
 8109966:	4413      	add	r3, r2
 8109968:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 810996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810996c:	009b      	lsls	r3, r3, #2
 810996e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8109970:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8109972:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8109974:	68fa      	ldr	r2, [r7, #12]
 8109976:	6a12      	ldr	r2, [r2, #32]
 8109978:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 810997a:	69f9      	ldr	r1, [r7, #28]
 810997c:	6809      	ldr	r1, [r1, #0]
 810997e:	9102      	str	r1, [sp, #8]
 8109980:	9201      	str	r2, [sp, #4]
 8109982:	9300      	str	r3, [sp, #0]
 8109984:	69bb      	ldr	r3, [r7, #24]
 8109986:	4622      	mov	r2, r4
 8109988:	4601      	mov	r1, r0
 810998a:	68f8      	ldr	r0, [r7, #12]
 810998c:	f000 f8f6 	bl	8109b7c <virtqueue_create>
 8109990:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8109992:	697b      	ldr	r3, [r7, #20]
 8109994:	2b00      	cmp	r3, #0
 8109996:	d001      	beq.n	810999c <virtio_create_virtqueues+0x80>
			return ret;
 8109998:	697b      	ldr	r3, [r7, #20]
 810999a:	e007      	b.n	81099ac <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 810999c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810999e:	3301      	adds	r3, #1
 81099a0:	627b      	str	r3, [r7, #36]	@ 0x24
 81099a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81099a4:	687b      	ldr	r3, [r7, #4]
 81099a6:	429a      	cmp	r2, r3
 81099a8:	d3cc      	bcc.n	8109944 <virtio_create_virtqueues+0x28>
	}
	return 0;
 81099aa:	2300      	movs	r3, #0
}
 81099ac:	4618      	mov	r0, r3
 81099ae:	372c      	adds	r7, #44	@ 0x2c
 81099b0:	46bd      	mov	sp, r7
 81099b2:	bd90      	pop	{r4, r7, pc}

081099b4 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 81099b4:	b480      	push	{r7}
 81099b6:	b085      	sub	sp, #20
 81099b8:	af00      	add	r7, sp, #0
 81099ba:	60f8      	str	r0, [r7, #12]
 81099bc:	60b9      	str	r1, [r7, #8]
 81099be:	607a      	str	r2, [r7, #4]
 81099c0:	603b      	str	r3, [r7, #0]
	vr->num = num;
 81099c2:	68fb      	ldr	r3, [r7, #12]
 81099c4:	68ba      	ldr	r2, [r7, #8]
 81099c6:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 81099c8:	68fb      	ldr	r3, [r7, #12]
 81099ca:	687a      	ldr	r2, [r7, #4]
 81099cc:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 81099ce:	68bb      	ldr	r3, [r7, #8]
 81099d0:	011b      	lsls	r3, r3, #4
 81099d2:	687a      	ldr	r2, [r7, #4]
 81099d4:	441a      	add	r2, r3
 81099d6:	68fb      	ldr	r3, [r7, #12]
 81099d8:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 81099da:	68fb      	ldr	r3, [r7, #12]
 81099dc:	689a      	ldr	r2, [r3, #8]
 81099de:	68bb      	ldr	r3, [r7, #8]
 81099e0:	005b      	lsls	r3, r3, #1
 81099e2:	4413      	add	r3, r2
 81099e4:	3304      	adds	r3, #4
 81099e6:	461a      	mov	r2, r3
 81099e8:	683b      	ldr	r3, [r7, #0]
 81099ea:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 81099ec:	1c5a      	adds	r2, r3, #1
 81099ee:	683b      	ldr	r3, [r7, #0]
 81099f0:	425b      	negs	r3, r3
 81099f2:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 81099f4:	461a      	mov	r2, r3
 81099f6:	68fb      	ldr	r3, [r7, #12]
 81099f8:	60da      	str	r2, [r3, #12]
}
 81099fa:	bf00      	nop
 81099fc:	3714      	adds	r7, #20
 81099fe:	46bd      	mov	sp, r7
 8109a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a04:	4770      	bx	lr

08109a06 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8109a06:	b480      	push	{r7}
 8109a08:	b083      	sub	sp, #12
 8109a0a:	af00      	add	r7, sp, #0
 8109a0c:	4603      	mov	r3, r0
 8109a0e:	80fb      	strh	r3, [r7, #6]
 8109a10:	460b      	mov	r3, r1
 8109a12:	80bb      	strh	r3, [r7, #4]
 8109a14:	4613      	mov	r3, r2
 8109a16:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8109a18:	88ba      	ldrh	r2, [r7, #4]
 8109a1a:	88fb      	ldrh	r3, [r7, #6]
 8109a1c:	1ad3      	subs	r3, r2, r3
 8109a1e:	b29b      	uxth	r3, r3
 8109a20:	3b01      	subs	r3, #1
 8109a22:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8109a24:	88b9      	ldrh	r1, [r7, #4]
 8109a26:	887b      	ldrh	r3, [r7, #2]
 8109a28:	1acb      	subs	r3, r1, r3
 8109a2a:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8109a2c:	429a      	cmp	r2, r3
 8109a2e:	bf34      	ite	cc
 8109a30:	2301      	movcc	r3, #1
 8109a32:	2300      	movcs	r3, #0
 8109a34:	b2db      	uxtb	r3, r3
}
 8109a36:	4618      	mov	r0, r3
 8109a38:	370c      	adds	r7, #12
 8109a3a:	46bd      	mov	sp, r7
 8109a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a40:	4770      	bx	lr

08109a42 <metal_io_virt>:
{
 8109a42:	b480      	push	{r7}
 8109a44:	b083      	sub	sp, #12
 8109a46:	af00      	add	r7, sp, #0
 8109a48:	6078      	str	r0, [r7, #4]
 8109a4a:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8109a4c:	687b      	ldr	r3, [r7, #4]
 8109a4e:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8109a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8109a54:	d009      	beq.n	8109a6a <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8109a56:	687b      	ldr	r3, [r7, #4]
 8109a58:	689b      	ldr	r3, [r3, #8]
 8109a5a:	683a      	ldr	r2, [r7, #0]
 8109a5c:	429a      	cmp	r2, r3
 8109a5e:	d804      	bhi.n	8109a6a <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8109a60:	687b      	ldr	r3, [r7, #4]
 8109a62:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8109a64:	683b      	ldr	r3, [r7, #0]
 8109a66:	4413      	add	r3, r2
 8109a68:	e000      	b.n	8109a6c <metal_io_virt+0x2a>
 8109a6a:	2300      	movs	r3, #0
}
 8109a6c:	4618      	mov	r0, r3
 8109a6e:	370c      	adds	r7, #12
 8109a70:	46bd      	mov	sp, r7
 8109a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a76:	4770      	bx	lr

08109a78 <metal_io_phys>:
{
 8109a78:	b480      	push	{r7}
 8109a7a:	b085      	sub	sp, #20
 8109a7c:	af00      	add	r7, sp, #0
 8109a7e:	6078      	str	r0, [r7, #4]
 8109a80:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8109a82:	687b      	ldr	r3, [r7, #4]
 8109a84:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8109a86:	2b1f      	cmp	r3, #31
 8109a88:	d805      	bhi.n	8109a96 <metal_io_phys+0x1e>
 8109a8a:	687b      	ldr	r3, [r7, #4]
 8109a8c:	68db      	ldr	r3, [r3, #12]
 8109a8e:	683a      	ldr	r2, [r7, #0]
 8109a90:	fa22 f303 	lsr.w	r3, r2, r3
 8109a94:	e000      	b.n	8109a98 <metal_io_phys+0x20>
 8109a96:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8109a98:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8109a9a:	687b      	ldr	r3, [r7, #4]
 8109a9c:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8109a9e:	2b00      	cmp	r3, #0
 8109aa0:	d010      	beq.n	8109ac4 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8109aa2:	687b      	ldr	r3, [r7, #4]
 8109aa4:	689b      	ldr	r3, [r3, #8]
 8109aa6:	683a      	ldr	r2, [r7, #0]
 8109aa8:	429a      	cmp	r2, r3
 8109aaa:	d80b      	bhi.n	8109ac4 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8109aac:	687b      	ldr	r3, [r7, #4]
 8109aae:	685a      	ldr	r2, [r3, #4]
 8109ab0:	68fb      	ldr	r3, [r7, #12]
 8109ab2:	009b      	lsls	r3, r3, #2
 8109ab4:	4413      	add	r3, r2
 8109ab6:	681a      	ldr	r2, [r3, #0]
 8109ab8:	687b      	ldr	r3, [r7, #4]
 8109aba:	6919      	ldr	r1, [r3, #16]
 8109abc:	683b      	ldr	r3, [r7, #0]
 8109abe:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8109ac0:	4413      	add	r3, r2
 8109ac2:	e001      	b.n	8109ac8 <metal_io_phys+0x50>
 8109ac4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8109ac8:	4618      	mov	r0, r3
 8109aca:	3714      	adds	r7, #20
 8109acc:	46bd      	mov	sp, r7
 8109ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ad2:	4770      	bx	lr

08109ad4 <metal_io_phys_to_offset>:
{
 8109ad4:	b580      	push	{r7, lr}
 8109ad6:	b084      	sub	sp, #16
 8109ad8:	af00      	add	r7, sp, #0
 8109ada:	6078      	str	r0, [r7, #4]
 8109adc:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 8109ade:	687b      	ldr	r3, [r7, #4]
 8109ae0:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 8109ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8109ae6:	d105      	bne.n	8109af4 <metal_io_phys_to_offset+0x20>
 8109ae8:	687b      	ldr	r3, [r7, #4]
 8109aea:	685b      	ldr	r3, [r3, #4]
 8109aec:	681b      	ldr	r3, [r3, #0]
 8109aee:	683a      	ldr	r2, [r7, #0]
 8109af0:	1ad3      	subs	r3, r2, r3
 8109af2:	e003      	b.n	8109afc <metal_io_phys_to_offset+0x28>
 8109af4:	687b      	ldr	r3, [r7, #4]
 8109af6:	691a      	ldr	r2, [r3, #16]
 8109af8:	683b      	ldr	r3, [r7, #0]
 8109afa:	4013      	ands	r3, r2
	unsigned long offset =
 8109afc:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 8109afe:	68f9      	ldr	r1, [r7, #12]
 8109b00:	6878      	ldr	r0, [r7, #4]
 8109b02:	f7ff ffb9 	bl	8109a78 <metal_io_phys>
 8109b06:	4602      	mov	r2, r0
 8109b08:	683b      	ldr	r3, [r7, #0]
 8109b0a:	4293      	cmp	r3, r2
 8109b0c:	d101      	bne.n	8109b12 <metal_io_phys_to_offset+0x3e>
			return offset;
 8109b0e:	68fb      	ldr	r3, [r7, #12]
 8109b10:	e00c      	b.n	8109b2c <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 8109b12:	687b      	ldr	r3, [r7, #4]
 8109b14:	691a      	ldr	r2, [r3, #16]
 8109b16:	68fb      	ldr	r3, [r7, #12]
 8109b18:	4413      	add	r3, r2
 8109b1a:	3301      	adds	r3, #1
 8109b1c:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 8109b1e:	687b      	ldr	r3, [r7, #4]
 8109b20:	689b      	ldr	r3, [r3, #8]
 8109b22:	68fa      	ldr	r2, [r7, #12]
 8109b24:	429a      	cmp	r2, r3
 8109b26:	d3ea      	bcc.n	8109afe <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 8109b28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8109b2c:	4618      	mov	r0, r3
 8109b2e:	3710      	adds	r7, #16
 8109b30:	46bd      	mov	sp, r7
 8109b32:	bd80      	pop	{r7, pc}

08109b34 <metal_io_phys_to_virt>:
{
 8109b34:	b580      	push	{r7, lr}
 8109b36:	b082      	sub	sp, #8
 8109b38:	af00      	add	r7, sp, #0
 8109b3a:	6078      	str	r0, [r7, #4]
 8109b3c:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 8109b3e:	6839      	ldr	r1, [r7, #0]
 8109b40:	6878      	ldr	r0, [r7, #4]
 8109b42:	f7ff ffc7 	bl	8109ad4 <metal_io_phys_to_offset>
 8109b46:	4603      	mov	r3, r0
 8109b48:	4619      	mov	r1, r3
 8109b4a:	6878      	ldr	r0, [r7, #4]
 8109b4c:	f7ff ff79 	bl	8109a42 <metal_io_virt>
 8109b50:	4603      	mov	r3, r0
}
 8109b52:	4618      	mov	r0, r3
 8109b54:	3708      	adds	r7, #8
 8109b56:	46bd      	mov	sp, r7
 8109b58:	bd80      	pop	{r7, pc}

08109b5a <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 8109b5a:	b580      	push	{r7, lr}
 8109b5c:	b084      	sub	sp, #16
 8109b5e:	af00      	add	r7, sp, #0
 8109b60:	6078      	str	r0, [r7, #4]
 8109b62:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8109b64:	687b      	ldr	r3, [r7, #4]
 8109b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109b68:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 8109b6a:	6839      	ldr	r1, [r7, #0]
 8109b6c:	68f8      	ldr	r0, [r7, #12]
 8109b6e:	f7ff ffe1 	bl	8109b34 <metal_io_phys_to_virt>
 8109b72:	4603      	mov	r3, r0
}
 8109b74:	4618      	mov	r0, r3
 8109b76:	3710      	adds	r7, #16
 8109b78:	46bd      	mov	sp, r7
 8109b7a:	bd80      	pop	{r7, pc}

08109b7c <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8109b7c:	b580      	push	{r7, lr}
 8109b7e:	b086      	sub	sp, #24
 8109b80:	af00      	add	r7, sp, #0
 8109b82:	60f8      	str	r0, [r7, #12]
 8109b84:	607a      	str	r2, [r7, #4]
 8109b86:	603b      	str	r3, [r7, #0]
 8109b88:	460b      	mov	r3, r1
 8109b8a:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8109b8c:	2300      	movs	r3, #0
 8109b8e:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8109b90:	697b      	ldr	r3, [r7, #20]
 8109b92:	2b00      	cmp	r3, #0
 8109b94:	d121      	bne.n	8109bda <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8109b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109b98:	68fa      	ldr	r2, [r7, #12]
 8109b9a:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8109b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109b9e:	687a      	ldr	r2, [r7, #4]
 8109ba0:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8109ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109ba4:	897a      	ldrh	r2, [r7, #10]
 8109ba6:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8109ba8:	683b      	ldr	r3, [r7, #0]
 8109baa:	891a      	ldrh	r2, [r3, #8]
 8109bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109bae:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8109bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109bb2:	895a      	ldrh	r2, [r3, #10]
 8109bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 8109bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109bba:	6a3a      	ldr	r2, [r7, #32]
 8109bbc:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8109bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109bc2:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8109bc4:	683b      	ldr	r3, [r7, #0]
 8109bc6:	6819      	ldr	r1, [r3, #0]
 8109bc8:	683b      	ldr	r3, [r7, #0]
 8109bca:	685b      	ldr	r3, [r3, #4]
 8109bcc:	461a      	mov	r2, r3
 8109bce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109bd0:	f000 f8fb 	bl	8109dca <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8109bd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109bd6:	f000 f885 	bl	8109ce4 <virtqueue_disable_cb>
	}

	return (status);
 8109bda:	697b      	ldr	r3, [r7, #20]
}
 8109bdc:	4618      	mov	r0, r3
 8109bde:	3718      	adds	r7, #24
 8109be0:	46bd      	mov	sp, r7
 8109be2:	bd80      	pop	{r7, pc}

08109be4 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 8109be4:	b580      	push	{r7, lr}
 8109be6:	b086      	sub	sp, #24
 8109be8:	af00      	add	r7, sp, #0
 8109bea:	60f8      	str	r0, [r7, #12]
 8109bec:	60b9      	str	r1, [r7, #8]
 8109bee:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 8109bf0:	2300      	movs	r3, #0
 8109bf2:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 8109bf4:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8109bf8:	68fb      	ldr	r3, [r7, #12]
 8109bfa:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8109bfc:	68fb      	ldr	r3, [r7, #12]
 8109bfe:	6a1b      	ldr	r3, [r3, #32]
 8109c00:	885b      	ldrh	r3, [r3, #2]
 8109c02:	429a      	cmp	r2, r3
 8109c04:	d101      	bne.n	8109c0a <virtqueue_get_available_buffer+0x26>
		return NULL;
 8109c06:	2300      	movs	r3, #0
 8109c08:	e02e      	b.n	8109c68 <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 8109c0a:	68fb      	ldr	r3, [r7, #12]
 8109c0c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8109c0e:	1c5a      	adds	r2, r3, #1
 8109c10:	b291      	uxth	r1, r2
 8109c12:	68fa      	ldr	r2, [r7, #12]
 8109c14:	8691      	strh	r1, [r2, #52]	@ 0x34
 8109c16:	b21a      	sxth	r2, r3
 8109c18:	68fb      	ldr	r3, [r7, #12]
 8109c1a:	895b      	ldrh	r3, [r3, #10]
 8109c1c:	3b01      	subs	r3, #1
 8109c1e:	b29b      	uxth	r3, r3
 8109c20:	b21b      	sxth	r3, r3
 8109c22:	4013      	ands	r3, r2
 8109c24:	b21b      	sxth	r3, r3
 8109c26:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 8109c28:	68fb      	ldr	r3, [r7, #12]
 8109c2a:	6a1a      	ldr	r2, [r3, #32]
 8109c2c:	8afb      	ldrh	r3, [r7, #22]
 8109c2e:	005b      	lsls	r3, r3, #1
 8109c30:	4413      	add	r3, r2
 8109c32:	889a      	ldrh	r2, [r3, #4]
 8109c34:	68bb      	ldr	r3, [r7, #8]
 8109c36:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 8109c38:	68fb      	ldr	r3, [r7, #12]
 8109c3a:	69da      	ldr	r2, [r3, #28]
 8109c3c:	68bb      	ldr	r3, [r7, #8]
 8109c3e:	881b      	ldrh	r3, [r3, #0]
 8109c40:	011b      	lsls	r3, r3, #4
 8109c42:	4413      	add	r3, r2
 8109c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109c48:	4613      	mov	r3, r2
 8109c4a:	4619      	mov	r1, r3
 8109c4c:	68f8      	ldr	r0, [r7, #12]
 8109c4e:	f7ff ff84 	bl	8109b5a <virtqueue_phys_to_virt>
 8109c52:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 8109c54:	68fb      	ldr	r3, [r7, #12]
 8109c56:	69da      	ldr	r2, [r3, #28]
 8109c58:	68bb      	ldr	r3, [r7, #8]
 8109c5a:	881b      	ldrh	r3, [r3, #0]
 8109c5c:	011b      	lsls	r3, r3, #4
 8109c5e:	4413      	add	r3, r2
 8109c60:	689a      	ldr	r2, [r3, #8]
 8109c62:	687b      	ldr	r3, [r7, #4]
 8109c64:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 8109c66:	693b      	ldr	r3, [r7, #16]
}
 8109c68:	4618      	mov	r0, r3
 8109c6a:	3718      	adds	r7, #24
 8109c6c:	46bd      	mov	sp, r7
 8109c6e:	bd80      	pop	{r7, pc}

08109c70 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 8109c70:	b480      	push	{r7}
 8109c72:	b087      	sub	sp, #28
 8109c74:	af00      	add	r7, sp, #0
 8109c76:	60f8      	str	r0, [r7, #12]
 8109c78:	460b      	mov	r3, r1
 8109c7a:	607a      	str	r2, [r7, #4]
 8109c7c:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 8109c7e:	2300      	movs	r3, #0
 8109c80:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 8109c82:	68fb      	ldr	r3, [r7, #12]
 8109c84:	895b      	ldrh	r3, [r3, #10]
 8109c86:	897a      	ldrh	r2, [r7, #10]
 8109c88:	429a      	cmp	r2, r3
 8109c8a:	d901      	bls.n	8109c90 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 8109c8c:	4b14      	ldr	r3, [pc, #80]	@ (8109ce0 <virtqueue_add_consumed_buffer+0x70>)
 8109c8e:	e021      	b.n	8109cd4 <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 8109c90:	68fb      	ldr	r3, [r7, #12]
 8109c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109c94:	885b      	ldrh	r3, [r3, #2]
 8109c96:	b21a      	sxth	r2, r3
 8109c98:	68fb      	ldr	r3, [r7, #12]
 8109c9a:	895b      	ldrh	r3, [r3, #10]
 8109c9c:	3b01      	subs	r3, #1
 8109c9e:	b29b      	uxth	r3, r3
 8109ca0:	b21b      	sxth	r3, r3
 8109ca2:	4013      	ands	r3, r2
 8109ca4:	b21b      	sxth	r3, r3
 8109ca6:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 8109ca8:	68fb      	ldr	r3, [r7, #12]
 8109caa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8109cac:	8a7b      	ldrh	r3, [r7, #18]
 8109cae:	00db      	lsls	r3, r3, #3
 8109cb0:	4413      	add	r3, r2
 8109cb2:	3304      	adds	r3, #4
 8109cb4:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 8109cb6:	897a      	ldrh	r2, [r7, #10]
 8109cb8:	697b      	ldr	r3, [r7, #20]
 8109cba:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 8109cbc:	697b      	ldr	r3, [r7, #20]
 8109cbe:	687a      	ldr	r2, [r7, #4]
 8109cc0:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8109cc2:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 8109cc6:	68fb      	ldr	r3, [r7, #12]
 8109cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109cca:	885a      	ldrh	r2, [r3, #2]
 8109ccc:	3201      	adds	r2, #1
 8109cce:	b292      	uxth	r2, r2
 8109cd0:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 8109cd2:	2300      	movs	r3, #0
}
 8109cd4:	4618      	mov	r0, r3
 8109cd6:	371c      	adds	r7, #28
 8109cd8:	46bd      	mov	sp, r7
 8109cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cde:	4770      	bx	lr
 8109ce0:	fffff441 	.word	0xfffff441

08109ce4 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8109ce4:	b480      	push	{r7}
 8109ce6:	b083      	sub	sp, #12
 8109ce8:	af00      	add	r7, sp, #0
 8109cea:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8109cec:	687b      	ldr	r3, [r7, #4]
 8109cee:	68db      	ldr	r3, [r3, #12]
 8109cf0:	f003 0302 	and.w	r3, r3, #2
 8109cf4:	2b00      	cmp	r3, #0
 8109cf6:	d010      	beq.n	8109d1a <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8109cf8:	687b      	ldr	r3, [r7, #4]
 8109cfa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8109cfc:	687b      	ldr	r3, [r7, #4]
 8109cfe:	895b      	ldrh	r3, [r3, #10]
 8109d00:	1ad3      	subs	r3, r2, r3
 8109d02:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8109d04:	687b      	ldr	r3, [r7, #4]
 8109d06:	6a1a      	ldr	r2, [r3, #32]
 8109d08:	687b      	ldr	r3, [r7, #4]
 8109d0a:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8109d0c:	3901      	subs	r1, #1
 8109d0e:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8109d10:	005b      	lsls	r3, r3, #1
 8109d12:	4413      	add	r3, r2
 8109d14:	460a      	mov	r2, r1
 8109d16:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8109d18:	e008      	b.n	8109d2c <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8109d1a:	687b      	ldr	r3, [r7, #4]
 8109d1c:	6a1b      	ldr	r3, [r3, #32]
 8109d1e:	881a      	ldrh	r2, [r3, #0]
 8109d20:	687b      	ldr	r3, [r7, #4]
 8109d22:	6a1b      	ldr	r3, [r3, #32]
 8109d24:	f042 0201 	orr.w	r2, r2, #1
 8109d28:	b292      	uxth	r2, r2
 8109d2a:	801a      	strh	r2, [r3, #0]
}
 8109d2c:	bf00      	nop
 8109d2e:	370c      	adds	r7, #12
 8109d30:	46bd      	mov	sp, r7
 8109d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d36:	4770      	bx	lr

08109d38 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8109d38:	b580      	push	{r7, lr}
 8109d3a:	b082      	sub	sp, #8
 8109d3c:	af00      	add	r7, sp, #0
 8109d3e:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8109d40:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8109d44:	6878      	ldr	r0, [r7, #4]
 8109d46:	f000 f885 	bl	8109e54 <vq_ring_must_notify_host>
 8109d4a:	4603      	mov	r3, r0
 8109d4c:	2b00      	cmp	r3, #0
 8109d4e:	d002      	beq.n	8109d56 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8109d50:	6878      	ldr	r0, [r7, #4]
 8109d52:	f000 f8b5 	bl	8109ec0 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8109d56:	687b      	ldr	r3, [r7, #4]
 8109d58:	2200      	movs	r2, #0
 8109d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 8109d5c:	bf00      	nop
 8109d5e:	3708      	adds	r7, #8
 8109d60:	46bd      	mov	sp, r7
 8109d62:	bd80      	pop	{r7, pc}

08109d64 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 8109d64:	b480      	push	{r7}
 8109d66:	b085      	sub	sp, #20
 8109d68:	af00      	add	r7, sp, #0
 8109d6a:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 8109d6c:	2300      	movs	r3, #0
 8109d6e:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 8109d70:	2300      	movs	r3, #0
 8109d72:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 8109d74:	2300      	movs	r3, #0
 8109d76:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8109d78:	687b      	ldr	r3, [r7, #4]
 8109d7a:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8109d7c:	687b      	ldr	r3, [r7, #4]
 8109d7e:	6a1b      	ldr	r3, [r3, #32]
 8109d80:	885b      	ldrh	r3, [r3, #2]
 8109d82:	429a      	cmp	r2, r3
 8109d84:	d101      	bne.n	8109d8a <virtqueue_get_desc_size+0x26>
		return 0;
 8109d86:	2300      	movs	r3, #0
 8109d88:	e019      	b.n	8109dbe <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 8109d8a:	687b      	ldr	r3, [r7, #4]
 8109d8c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8109d8e:	b21a      	sxth	r2, r3
 8109d90:	687b      	ldr	r3, [r7, #4]
 8109d92:	895b      	ldrh	r3, [r3, #10]
 8109d94:	3b01      	subs	r3, #1
 8109d96:	b29b      	uxth	r3, r3
 8109d98:	b21b      	sxth	r3, r3
 8109d9a:	4013      	ands	r3, r2
 8109d9c:	b21b      	sxth	r3, r3
 8109d9e:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 8109da0:	687b      	ldr	r3, [r7, #4]
 8109da2:	6a1a      	ldr	r2, [r3, #32]
 8109da4:	89fb      	ldrh	r3, [r7, #14]
 8109da6:	005b      	lsls	r3, r3, #1
 8109da8:	4413      	add	r3, r2
 8109daa:	889b      	ldrh	r3, [r3, #4]
 8109dac:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 8109dae:	687b      	ldr	r3, [r7, #4]
 8109db0:	69da      	ldr	r2, [r3, #28]
 8109db2:	89bb      	ldrh	r3, [r7, #12]
 8109db4:	011b      	lsls	r3, r3, #4
 8109db6:	4413      	add	r3, r2
 8109db8:	689b      	ldr	r3, [r3, #8]
 8109dba:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 8109dbc:	68bb      	ldr	r3, [r7, #8]
}
 8109dbe:	4618      	mov	r0, r3
 8109dc0:	3714      	adds	r7, #20
 8109dc2:	46bd      	mov	sp, r7
 8109dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109dc8:	4770      	bx	lr

08109dca <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8109dca:	b580      	push	{r7, lr}
 8109dcc:	b088      	sub	sp, #32
 8109dce:	af00      	add	r7, sp, #0
 8109dd0:	60f8      	str	r0, [r7, #12]
 8109dd2:	60b9      	str	r1, [r7, #8]
 8109dd4:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8109dd6:	68fb      	ldr	r3, [r7, #12]
 8109dd8:	895b      	ldrh	r3, [r3, #10]
 8109dda:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8109ddc:	68fb      	ldr	r3, [r7, #12]
 8109dde:	3318      	adds	r3, #24
 8109de0:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8109de2:	69b9      	ldr	r1, [r7, #24]
 8109de4:	687b      	ldr	r3, [r7, #4]
 8109de6:	68ba      	ldr	r2, [r7, #8]
 8109de8:	6978      	ldr	r0, [r7, #20]
 8109dea:	f7ff fde3 	bl	81099b4 <vring_init>

	for (i = 0; i < size - 1; i++)
 8109dee:	2300      	movs	r3, #0
 8109df0:	61fb      	str	r3, [r7, #28]
 8109df2:	e00c      	b.n	8109e0e <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8109df4:	69fb      	ldr	r3, [r7, #28]
 8109df6:	b29a      	uxth	r2, r3
 8109df8:	697b      	ldr	r3, [r7, #20]
 8109dfa:	6859      	ldr	r1, [r3, #4]
 8109dfc:	69fb      	ldr	r3, [r7, #28]
 8109dfe:	011b      	lsls	r3, r3, #4
 8109e00:	440b      	add	r3, r1
 8109e02:	3201      	adds	r2, #1
 8109e04:	b292      	uxth	r2, r2
 8109e06:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8109e08:	69fb      	ldr	r3, [r7, #28]
 8109e0a:	3301      	adds	r3, #1
 8109e0c:	61fb      	str	r3, [r7, #28]
 8109e0e:	69bb      	ldr	r3, [r7, #24]
 8109e10:	3b01      	subs	r3, #1
 8109e12:	69fa      	ldr	r2, [r7, #28]
 8109e14:	429a      	cmp	r2, r3
 8109e16:	dbed      	blt.n	8109df4 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8109e18:	697b      	ldr	r3, [r7, #20]
 8109e1a:	685a      	ldr	r2, [r3, #4]
 8109e1c:	69fb      	ldr	r3, [r7, #28]
 8109e1e:	011b      	lsls	r3, r3, #4
 8109e20:	4413      	add	r3, r2
 8109e22:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8109e26:	81da      	strh	r2, [r3, #14]
}
 8109e28:	bf00      	nop
 8109e2a:	3720      	adds	r7, #32
 8109e2c:	46bd      	mov	sp, r7
 8109e2e:	bd80      	pop	{r7, pc}

08109e30 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8109e30:	b580      	push	{r7, lr}
 8109e32:	b082      	sub	sp, #8
 8109e34:	af00      	add	r7, sp, #0
 8109e36:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8109e38:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8109e3c:	687b      	ldr	r3, [r7, #4]
 8109e3e:	691b      	ldr	r3, [r3, #16]
 8109e40:	2b00      	cmp	r3, #0
 8109e42:	d003      	beq.n	8109e4c <virtqueue_notification+0x1c>
		vq->callback(vq);
 8109e44:	687b      	ldr	r3, [r7, #4]
 8109e46:	691b      	ldr	r3, [r3, #16]
 8109e48:	6878      	ldr	r0, [r7, #4]
 8109e4a:	4798      	blx	r3
}
 8109e4c:	bf00      	nop
 8109e4e:	3708      	adds	r7, #8
 8109e50:	46bd      	mov	sp, r7
 8109e52:	bd80      	pop	{r7, pc}

08109e54 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8109e54:	b580      	push	{r7, lr}
 8109e56:	b084      	sub	sp, #16
 8109e58:	af00      	add	r7, sp, #0
 8109e5a:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8109e5c:	687b      	ldr	r3, [r7, #4]
 8109e5e:	68db      	ldr	r3, [r3, #12]
 8109e60:	f003 0302 	and.w	r3, r3, #2
 8109e64:	2b00      	cmp	r3, #0
 8109e66:	d01d      	beq.n	8109ea4 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8109e68:	687b      	ldr	r3, [r7, #4]
 8109e6a:	6a1b      	ldr	r3, [r3, #32]
 8109e6c:	885b      	ldrh	r3, [r3, #2]
 8109e6e:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8109e70:	687b      	ldr	r3, [r7, #4]
 8109e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8109e74:	89fa      	ldrh	r2, [r7, #14]
 8109e76:	1ad3      	subs	r3, r2, r3
 8109e78:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8109e7a:	687b      	ldr	r3, [r7, #4]
 8109e7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8109e7e:	687b      	ldr	r3, [r7, #4]
 8109e80:	699b      	ldr	r3, [r3, #24]
 8109e82:	00db      	lsls	r3, r3, #3
 8109e84:	4413      	add	r3, r2
 8109e86:	685b      	ldr	r3, [r3, #4]
 8109e88:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8109e8a:	89ba      	ldrh	r2, [r7, #12]
 8109e8c:	89f9      	ldrh	r1, [r7, #14]
 8109e8e:	897b      	ldrh	r3, [r7, #10]
 8109e90:	4618      	mov	r0, r3
 8109e92:	f7ff fdb8 	bl	8109a06 <vring_need_event>
 8109e96:	4603      	mov	r3, r0
 8109e98:	2b00      	cmp	r3, #0
 8109e9a:	bf14      	ite	ne
 8109e9c:	2301      	movne	r3, #1
 8109e9e:	2300      	moveq	r3, #0
 8109ea0:	b2db      	uxtb	r3, r3
 8109ea2:	e009      	b.n	8109eb8 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8109ea4:	687b      	ldr	r3, [r7, #4]
 8109ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109ea8:	881b      	ldrh	r3, [r3, #0]
 8109eaa:	f003 0301 	and.w	r3, r3, #1
 8109eae:	2b00      	cmp	r3, #0
 8109eb0:	bf0c      	ite	eq
 8109eb2:	2301      	moveq	r3, #1
 8109eb4:	2300      	movne	r3, #0
 8109eb6:	b2db      	uxtb	r3, r3
}
 8109eb8:	4618      	mov	r0, r3
 8109eba:	3710      	adds	r7, #16
 8109ebc:	46bd      	mov	sp, r7
 8109ebe:	bd80      	pop	{r7, pc}

08109ec0 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8109ec0:	b580      	push	{r7, lr}
 8109ec2:	b082      	sub	sp, #8
 8109ec4:	af00      	add	r7, sp, #0
 8109ec6:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8109ec8:	687b      	ldr	r3, [r7, #4]
 8109eca:	695b      	ldr	r3, [r3, #20]
 8109ecc:	2b00      	cmp	r3, #0
 8109ece:	d003      	beq.n	8109ed8 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8109ed0:	687b      	ldr	r3, [r7, #4]
 8109ed2:	695b      	ldr	r3, [r3, #20]
 8109ed4:	6878      	ldr	r0, [r7, #4]
 8109ed6:	4798      	blx	r3
}
 8109ed8:	bf00      	nop
 8109eda:	3708      	adds	r7, #8
 8109edc:	46bd      	mov	sp, r7
 8109ede:	bd80      	pop	{r7, pc}

08109ee0 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8109ee0:	b580      	push	{r7, lr}
 8109ee2:	b082      	sub	sp, #8
 8109ee4:	af00      	add	r7, sp, #0
 8109ee6:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8109ee8:	4b04      	ldr	r3, [pc, #16]	@ (8109efc <HAL_HSEM_FreeCallback+0x1c>)
 8109eea:	2201      	movs	r2, #1
 8109eec:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8109eee:	2001      	movs	r0, #1
 8109ef0:	f7f9 fe80 	bl	8103bf4 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8109ef4:	bf00      	nop
 8109ef6:	3708      	adds	r7, #8
 8109ef8:	46bd      	mov	sp, r7
 8109efa:	bd80      	pop	{r7, pc}
 8109efc:	10000558 	.word	0x10000558

08109f00 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8109f00:	b580      	push	{r7, lr}
 8109f02:	b082      	sub	sp, #8
 8109f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8109f06:	4b0b      	ldr	r3, [pc, #44]	@ (8109f34 <MAILBOX_Init+0x34>)
 8109f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109f0c:	4a09      	ldr	r2, [pc, #36]	@ (8109f34 <MAILBOX_Init+0x34>)
 8109f0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8109f12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8109f16:	4b07      	ldr	r3, [pc, #28]	@ (8109f34 <MAILBOX_Init+0x34>)
 8109f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8109f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109f20:	607b      	str	r3, [r7, #4]
 8109f22:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8109f24:	2001      	movs	r0, #1
 8109f26:	f7f9 fe65 	bl	8103bf4 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8109f2a:	2300      	movs	r3, #0
}
 8109f2c:	4618      	mov	r0, r3
 8109f2e:	3708      	adds	r7, #8
 8109f30:	46bd      	mov	sp, r7
 8109f32:	bd80      	pop	{r7, pc}
 8109f34:	58024400 	.word	0x58024400

08109f38 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8109f38:	b580      	push	{r7, lr}
 8109f3a:	b082      	sub	sp, #8
 8109f3c:	af00      	add	r7, sp, #0
 8109f3e:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8109f40:	4b09      	ldr	r3, [pc, #36]	@ (8109f68 <MAILBOX_Poll+0x30>)
 8109f42:	681b      	ldr	r3, [r3, #0]
 8109f44:	2b01      	cmp	r3, #1
 8109f46:	d108      	bne.n	8109f5a <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 8109f48:	2101      	movs	r1, #1
 8109f4a:	6878      	ldr	r0, [r7, #4]
 8109f4c:	f7fe fd25 	bl	810899a <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8109f50:	4b05      	ldr	r3, [pc, #20]	@ (8109f68 <MAILBOX_Poll+0x30>)
 8109f52:	2200      	movs	r2, #0
 8109f54:	601a      	str	r2, [r3, #0]
    return 0;
 8109f56:	2300      	movs	r3, #0
 8109f58:	e001      	b.n	8109f5e <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8109f5a:	f06f 030a 	mvn.w	r3, #10
}
 8109f5e:	4618      	mov	r0, r3
 8109f60:	3708      	adds	r7, #8
 8109f62:	46bd      	mov	sp, r7
 8109f64:	bd80      	pop	{r7, pc}
 8109f66:	bf00      	nop
 8109f68:	10000558 	.word	0x10000558

08109f6c <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8109f6c:	b580      	push	{r7, lr}
 8109f6e:	b082      	sub	sp, #8
 8109f70:	af00      	add	r7, sp, #0
 8109f72:	6078      	str	r0, [r7, #4]
 8109f74:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 8109f76:	2001      	movs	r0, #1
 8109f78:	f7f9 fe0e 	bl	8103b98 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 8109f7c:	2100      	movs	r1, #0
 8109f7e:	2001      	movs	r0, #1
 8109f80:	f7f9 fe24 	bl	8103bcc <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8109f84:	2300      	movs	r3, #0
}
 8109f86:	4618      	mov	r0, r3
 8109f88:	3708      	adds	r7, #8
 8109f8a:	46bd      	mov	sp, r7
 8109f8c:	bd80      	pop	{r7, pc}

08109f8e <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8109f8e:	b480      	push	{r7}
 8109f90:	b083      	sub	sp, #12
 8109f92:	af00      	add	r7, sp, #0
 8109f94:	6078      	str	r0, [r7, #4]
 8109f96:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8109f98:	687b      	ldr	r3, [r7, #4]
 8109f9a:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8109f9c:	683a      	ldr	r2, [r7, #0]
 8109f9e:	429a      	cmp	r2, r3
 8109fa0:	d209      	bcs.n	8109fb6 <metal_device_io_region+0x28>
 8109fa2:	683a      	ldr	r2, [r7, #0]
 8109fa4:	4613      	mov	r3, r2
 8109fa6:	005b      	lsls	r3, r3, #1
 8109fa8:	4413      	add	r3, r2
 8109faa:	011b      	lsls	r3, r3, #4
 8109fac:	3308      	adds	r3, #8
 8109fae:	687a      	ldr	r2, [r7, #4]
 8109fb0:	4413      	add	r3, r2
 8109fb2:	3304      	adds	r3, #4
 8109fb4:	e000      	b.n	8109fb8 <metal_device_io_region+0x2a>
 8109fb6:	2300      	movs	r3, #0
}
 8109fb8:	4618      	mov	r0, r3
 8109fba:	370c      	adds	r7, #12
 8109fbc:	46bd      	mov	sp, r7
 8109fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109fc2:	4770      	bx	lr

08109fc4 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8109fc4:	b590      	push	{r4, r7, lr}
 8109fc6:	b08d      	sub	sp, #52	@ 0x34
 8109fc8:	af04      	add	r7, sp, #16
 8109fca:	6078      	str	r0, [r7, #4]
  int status = 0;
 8109fcc:	2300      	movs	r3, #0
 8109fce:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8109fd0:	2300      	movs	r3, #0
 8109fd2:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8109fd4:	4a41      	ldr	r2, [pc, #260]	@ (810a0dc <OPENAMP_shmem_init+0x118>)
 8109fd6:	f107 0310 	add.w	r3, r7, #16
 8109fda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8109fde:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8109fe2:	2300      	movs	r3, #0
 8109fe4:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8109fe6:	2300      	movs	r3, #0
 8109fe8:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8109fea:	f107 0310 	add.w	r3, r7, #16
 8109fee:	4618      	mov	r0, r3
 8109ff0:	f7fe f8e6 	bl	81081c0 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8109ff4:	483a      	ldr	r0, [pc, #232]	@ (810a0e0 <OPENAMP_shmem_init+0x11c>)
 8109ff6:	f7fd ff8b 	bl	8107f10 <metal_register_generic_device>
 8109ffa:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8109ffc:	69fb      	ldr	r3, [r7, #28]
 8109ffe:	2b00      	cmp	r3, #0
 810a000:	d001      	beq.n	810a006 <OPENAMP_shmem_init+0x42>
    return status;
 810a002:	69fb      	ldr	r3, [r7, #28]
 810a004:	e066      	b.n	810a0d4 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 810a006:	f107 0318 	add.w	r3, r7, #24
 810a00a:	461a      	mov	r2, r3
 810a00c:	4935      	ldr	r1, [pc, #212]	@ (810a0e4 <OPENAMP_shmem_init+0x120>)
 810a00e:	4836      	ldr	r0, [pc, #216]	@ (810a0e8 <OPENAMP_shmem_init+0x124>)
 810a010:	f7fd ff40 	bl	8107e94 <metal_device_open>
 810a014:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 810a016:	69fb      	ldr	r3, [r7, #28]
 810a018:	2b00      	cmp	r3, #0
 810a01a:	d001      	beq.n	810a020 <OPENAMP_shmem_init+0x5c>
    return status;
 810a01c:	69fb      	ldr	r3, [r7, #28]
 810a01e:	e059      	b.n	810a0d4 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 810a020:	4a32      	ldr	r2, [pc, #200]	@ (810a0ec <OPENAMP_shmem_init+0x128>)
 810a022:	4b33      	ldr	r3, [pc, #204]	@ (810a0f0 <OPENAMP_shmem_init+0x12c>)
 810a024:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 810a026:	69bb      	ldr	r3, [r7, #24]
 810a028:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 810a02c:	4a31      	ldr	r2, [pc, #196]	@ (810a0f4 <OPENAMP_shmem_init+0x130>)
 810a02e:	4b2f      	ldr	r3, [pc, #188]	@ (810a0ec <OPENAMP_shmem_init+0x128>)
 810a030:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 810a032:	461a      	mov	r2, r3
 810a034:	2300      	movs	r3, #0
 810a036:	9302      	str	r3, [sp, #8]
 810a038:	2300      	movs	r3, #0
 810a03a:	9301      	str	r3, [sp, #4]
 810a03c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810a040:	9300      	str	r3, [sp, #0]
 810a042:	4613      	mov	r3, r2
 810a044:	4a2a      	ldr	r2, [pc, #168]	@ (810a0f0 <OPENAMP_shmem_init+0x12c>)
 810a046:	4929      	ldr	r1, [pc, #164]	@ (810a0ec <OPENAMP_shmem_init+0x128>)
 810a048:	f7fe f907 	bl	810825a <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 810a04c:	69bb      	ldr	r3, [r7, #24]
 810a04e:	2100      	movs	r1, #0
 810a050:	4618      	mov	r0, r3
 810a052:	f7ff ff9c 	bl	8109f8e <metal_device_io_region>
 810a056:	4603      	mov	r3, r0
 810a058:	4a27      	ldr	r2, [pc, #156]	@ (810a0f8 <OPENAMP_shmem_init+0x134>)
 810a05a:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 810a05c:	4b26      	ldr	r3, [pc, #152]	@ (810a0f8 <OPENAMP_shmem_init+0x134>)
 810a05e:	681b      	ldr	r3, [r3, #0]
 810a060:	2b00      	cmp	r3, #0
 810a062:	d102      	bne.n	810a06a <OPENAMP_shmem_init+0xa6>
    return -1;
 810a064:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810a068:	e034      	b.n	810a0d4 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 810a06a:	f107 0208 	add.w	r2, r7, #8
 810a06e:	f107 030c 	add.w	r3, r7, #12
 810a072:	4619      	mov	r1, r3
 810a074:	6878      	ldr	r0, [r7, #4]
 810a076:	f000 f905 	bl	810a284 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 810a07a:	68fb      	ldr	r3, [r7, #12]
 810a07c:	4a1f      	ldr	r2, [pc, #124]	@ (810a0fc <OPENAMP_shmem_init+0x138>)
 810a07e:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 810a080:	4b1e      	ldr	r3, [pc, #120]	@ (810a0fc <OPENAMP_shmem_init+0x138>)
 810a082:	681b      	ldr	r3, [r3, #0]
 810a084:	2b00      	cmp	r3, #0
 810a086:	d102      	bne.n	810a08e <OPENAMP_shmem_init+0xca>
  {
    return -1;
 810a088:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810a08c:	e022      	b.n	810a0d4 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 810a08e:	69bb      	ldr	r3, [r7, #24]
 810a090:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 810a094:	4b19      	ldr	r3, [pc, #100]	@ (810a0fc <OPENAMP_shmem_init+0x138>)
 810a096:	6819      	ldr	r1, [r3, #0]
 810a098:	4b18      	ldr	r3, [pc, #96]	@ (810a0fc <OPENAMP_shmem_init+0x138>)
 810a09a:	681a      	ldr	r2, [r3, #0]
 810a09c:	68bb      	ldr	r3, [r7, #8]
 810a09e:	461c      	mov	r4, r3
 810a0a0:	2300      	movs	r3, #0
 810a0a2:	9302      	str	r3, [sp, #8]
 810a0a4:	2300      	movs	r3, #0
 810a0a6:	9301      	str	r3, [sp, #4]
 810a0a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810a0ac:	9300      	str	r3, [sp, #0]
 810a0ae:	4623      	mov	r3, r4
 810a0b0:	f7fe f8d3 	bl	810825a <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 810a0b4:	69bb      	ldr	r3, [r7, #24]
 810a0b6:	2101      	movs	r1, #1
 810a0b8:	4618      	mov	r0, r3
 810a0ba:	f7ff ff68 	bl	8109f8e <metal_device_io_region>
 810a0be:	4603      	mov	r3, r0
 810a0c0:	4a0f      	ldr	r2, [pc, #60]	@ (810a100 <OPENAMP_shmem_init+0x13c>)
 810a0c2:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 810a0c4:	4b0e      	ldr	r3, [pc, #56]	@ (810a100 <OPENAMP_shmem_init+0x13c>)
 810a0c6:	681b      	ldr	r3, [r3, #0]
 810a0c8:	2b00      	cmp	r3, #0
 810a0ca:	d102      	bne.n	810a0d2 <OPENAMP_shmem_init+0x10e>
    return -1;
 810a0cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810a0d0:	e000      	b.n	810a0d4 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 810a0d2:	2300      	movs	r3, #0
}
 810a0d4:	4618      	mov	r0, r3
 810a0d6:	3724      	adds	r7, #36	@ 0x24
 810a0d8:	46bd      	mov	sp, r7
 810a0da:	bd90      	pop	{r4, r7, pc}
 810a0dc:	0810b8d4 	.word	0x0810b8d4
 810a0e0:	10000040 	.word	0x10000040
 810a0e4:	0810b8c0 	.word	0x0810b8c0
 810a0e8:	0810b8cc 	.word	0x0810b8cc
 810a0ec:	38000400 	.word	0x38000400
 810a0f0:	100005ec 	.word	0x100005ec
 810a0f4:	38010000 	.word	0x38010000
 810a0f8:	1000055c 	.word	0x1000055c
 810a0fc:	10000564 	.word	0x10000564
 810a100:	10000560 	.word	0x10000560

0810a104 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 810a104:	b590      	push	{r4, r7, lr}
 810a106:	b08b      	sub	sp, #44	@ 0x2c
 810a108:	af04      	add	r7, sp, #16
 810a10a:	6078      	str	r0, [r7, #4]
 810a10c:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 810a10e:	2300      	movs	r3, #0
 810a110:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 810a112:	2300      	movs	r3, #0
 810a114:	613b      	str	r3, [r7, #16]
  int status = 0;
 810a116:	2300      	movs	r3, #0
 810a118:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 810a11a:	f7ff fef1 	bl	8109f00 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 810a11e:	6878      	ldr	r0, [r7, #4]
 810a120:	f7ff ff50 	bl	8109fc4 <OPENAMP_shmem_init>
 810a124:	60f8      	str	r0, [r7, #12]
  if(status)
 810a126:	68fb      	ldr	r3, [r7, #12]
 810a128:	2b00      	cmp	r3, #0
 810a12a:	d001      	beq.n	810a130 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 810a12c:	68fb      	ldr	r3, [r7, #12]
 810a12e:	e06a      	b.n	810a206 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 810a130:	6878      	ldr	r0, [r7, #4]
 810a132:	4b37      	ldr	r3, [pc, #220]	@ (810a210 <MX_OPENAMP_Init+0x10c>)
 810a134:	681b      	ldr	r3, [r3, #0]
 810a136:	f103 0218 	add.w	r2, r3, #24
 810a13a:	4b36      	ldr	r3, [pc, #216]	@ (810a214 <MX_OPENAMP_Init+0x110>)
 810a13c:	681b      	ldr	r3, [r3, #0]
 810a13e:	2100      	movs	r1, #0
 810a140:	9102      	str	r1, [sp, #8]
 810a142:	4935      	ldr	r1, [pc, #212]	@ (810a218 <MX_OPENAMP_Init+0x114>)
 810a144:	9101      	str	r1, [sp, #4]
 810a146:	2100      	movs	r1, #0
 810a148:	9100      	str	r1, [sp, #0]
 810a14a:	21ff      	movs	r1, #255	@ 0xff
 810a14c:	f7fe fb46 	bl	81087dc <rproc_virtio_create_vdev>
 810a150:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 810a152:	693b      	ldr	r3, [r7, #16]
 810a154:	2b00      	cmp	r3, #0
 810a156:	d102      	bne.n	810a15e <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 810a158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810a15c:	e053      	b.n	810a206 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 810a15e:	6938      	ldr	r0, [r7, #16]
 810a160:	f7fe fc57 	bl	8108a12 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 810a164:	4b2a      	ldr	r3, [pc, #168]	@ (810a210 <MX_OPENAMP_Init+0x10c>)
 810a166:	681b      	ldr	r3, [r3, #0]
 810a168:	3334      	adds	r3, #52	@ 0x34
 810a16a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810a16c:	697b      	ldr	r3, [r7, #20]
 810a16e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 810a170:	697b      	ldr	r3, [r7, #20]
 810a172:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810a174:	461c      	mov	r4, r3
 810a176:	4b29      	ldr	r3, [pc, #164]	@ (810a21c <MX_OPENAMP_Init+0x118>)
 810a178:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810a17a:	697a      	ldr	r2, [r7, #20]
 810a17c:	6892      	ldr	r2, [r2, #8]
 810a17e:	6979      	ldr	r1, [r7, #20]
 810a180:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810a182:	9102      	str	r1, [sp, #8]
 810a184:	9201      	str	r2, [sp, #4]
 810a186:	9300      	str	r3, [sp, #0]
 810a188:	4623      	mov	r3, r4
 810a18a:	4602      	mov	r2, r0
 810a18c:	2100      	movs	r1, #0
 810a18e:	6938      	ldr	r0, [r7, #16]
 810a190:	f7fe fbd2 	bl	8108938 <rproc_virtio_init_vring>
 810a194:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 810a196:	68fb      	ldr	r3, [r7, #12]
 810a198:	2b00      	cmp	r3, #0
 810a19a:	d001      	beq.n	810a1a0 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 810a19c:	68fb      	ldr	r3, [r7, #12]
 810a19e:	e032      	b.n	810a206 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 810a1a0:	4b1b      	ldr	r3, [pc, #108]	@ (810a210 <MX_OPENAMP_Init+0x10c>)
 810a1a2:	681b      	ldr	r3, [r3, #0]
 810a1a4:	3348      	adds	r3, #72	@ 0x48
 810a1a6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810a1a8:	697b      	ldr	r3, [r7, #20]
 810a1aa:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 810a1ac:	697b      	ldr	r3, [r7, #20]
 810a1ae:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810a1b0:	461c      	mov	r4, r3
 810a1b2:	4b1a      	ldr	r3, [pc, #104]	@ (810a21c <MX_OPENAMP_Init+0x118>)
 810a1b4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810a1b6:	697a      	ldr	r2, [r7, #20]
 810a1b8:	6892      	ldr	r2, [r2, #8]
 810a1ba:	6979      	ldr	r1, [r7, #20]
 810a1bc:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810a1be:	9102      	str	r1, [sp, #8]
 810a1c0:	9201      	str	r2, [sp, #4]
 810a1c2:	9300      	str	r3, [sp, #0]
 810a1c4:	4623      	mov	r3, r4
 810a1c6:	4602      	mov	r2, r0
 810a1c8:	2101      	movs	r1, #1
 810a1ca:	6938      	ldr	r0, [r7, #16]
 810a1cc:	f7fe fbb4 	bl	8108938 <rproc_virtio_init_vring>
 810a1d0:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 810a1d2:	68fb      	ldr	r3, [r7, #12]
 810a1d4:	2b00      	cmp	r3, #0
 810a1d6:	d001      	beq.n	810a1dc <MX_OPENAMP_Init+0xd8>
  {
    return status;
 810a1d8:	68fb      	ldr	r3, [r7, #12]
 810a1da:	e014      	b.n	810a206 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 810a1dc:	4b10      	ldr	r3, [pc, #64]	@ (810a220 <MX_OPENAMP_Init+0x11c>)
 810a1de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810a1e2:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 810a1e4:	4a0f      	ldr	r2, [pc, #60]	@ (810a224 <MX_OPENAMP_Init+0x120>)
 810a1e6:	4b0e      	ldr	r3, [pc, #56]	@ (810a220 <MX_OPENAMP_Init+0x11c>)
 810a1e8:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 810a1ea:	461a      	mov	r2, r3
 810a1ec:	480e      	ldr	r0, [pc, #56]	@ (810a228 <MX_OPENAMP_Init+0x124>)
 810a1ee:	f7ff f85f 	bl	81092b0 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 810a1f2:	4b0a      	ldr	r3, [pc, #40]	@ (810a21c <MX_OPENAMP_Init+0x118>)
 810a1f4:	681b      	ldr	r3, [r3, #0]
 810a1f6:	4a0c      	ldr	r2, [pc, #48]	@ (810a228 <MX_OPENAMP_Init+0x124>)
 810a1f8:	9200      	str	r2, [sp, #0]
 810a1fa:	683a      	ldr	r2, [r7, #0]
 810a1fc:	6939      	ldr	r1, [r7, #16]
 810a1fe:	480b      	ldr	r0, [pc, #44]	@ (810a22c <MX_OPENAMP_Init+0x128>)
 810a200:	f7ff facc 	bl	810979c <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 810a204:	2300      	movs	r3, #0
}
 810a206:	4618      	mov	r0, r3
 810a208:	371c      	adds	r7, #28
 810a20a:	46bd      	mov	sp, r7
 810a20c:	bd90      	pop	{r4, r7, pc}
 810a20e:	bf00      	nop
 810a210:	10000564 	.word	0x10000564
 810a214:	10000560 	.word	0x10000560
 810a218:	08109f6d 	.word	0x08109f6d
 810a21c:	1000055c 	.word	0x1000055c
 810a220:	38000400 	.word	0x38000400
 810a224:	38010000 	.word	0x38010000
 810a228:	10000568 	.word	0x10000568
 810a22c:	10000574 	.word	0x10000574

0810a230 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 810a230:	b580      	push	{r7, lr}
 810a232:	b08a      	sub	sp, #40	@ 0x28
 810a234:	af04      	add	r7, sp, #16
 810a236:	60f8      	str	r0, [r7, #12]
 810a238:	60b9      	str	r1, [r7, #8]
 810a23a:	607a      	str	r2, [r7, #4]
 810a23c:	603b      	str	r3, [r7, #0]
  int ret = 0;
 810a23e:	2300      	movs	r3, #0
 810a240:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 810a242:	6a3b      	ldr	r3, [r7, #32]
 810a244:	9302      	str	r3, [sp, #8]
 810a246:	683b      	ldr	r3, [r7, #0]
 810a248:	9301      	str	r3, [sp, #4]
 810a24a:	687b      	ldr	r3, [r7, #4]
 810a24c:	9300      	str	r3, [sp, #0]
 810a24e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810a252:	68ba      	ldr	r2, [r7, #8]
 810a254:	4904      	ldr	r1, [pc, #16]	@ (810a268 <OPENAMP_create_endpoint+0x38>)
 810a256:	68f8      	ldr	r0, [r7, #12]
 810a258:	f7fe fe68 	bl	8108f2c <rpmsg_create_ept>
 810a25c:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 810a25e:	697b      	ldr	r3, [r7, #20]
}
 810a260:	4618      	mov	r0, r3
 810a262:	3718      	adds	r7, #24
 810a264:	46bd      	mov	sp, r7
 810a266:	bd80      	pop	{r7, pc}
 810a268:	10000574 	.word	0x10000574

0810a26c <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 810a26c:	b580      	push	{r7, lr}
 810a26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 810a270:	4b03      	ldr	r3, [pc, #12]	@ (810a280 <OPENAMP_check_for_message+0x14>)
 810a272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a274:	4618      	mov	r0, r3
 810a276:	f7ff fe5f 	bl	8109f38 <MAILBOX_Poll>
}
 810a27a:	bf00      	nop
 810a27c:	bd80      	pop	{r7, pc}
 810a27e:	bf00      	nop
 810a280:	10000574 	.word	0x10000574

0810a284 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 810a284:	b480      	push	{r7}
 810a286:	b085      	sub	sp, #20
 810a288:	af00      	add	r7, sp, #0
 810a28a:	60f8      	str	r0, [r7, #12]
 810a28c:	60b9      	str	r1, [r7, #8]
 810a28e:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 810a290:	bf00      	nop
 810a292:	4b08      	ldr	r3, [pc, #32]	@ (810a2b4 <resource_table_init+0x30>)
 810a294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810a296:	4a08      	ldr	r2, [pc, #32]	@ (810a2b8 <resource_table_init+0x34>)
 810a298:	4293      	cmp	r3, r2
 810a29a:	d1fa      	bne.n	810a292 <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 810a29c:	687b      	ldr	r3, [r7, #4]
 810a29e:	228c      	movs	r2, #140	@ 0x8c
 810a2a0:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 810a2a2:	68bb      	ldr	r3, [r7, #8]
 810a2a4:	4a03      	ldr	r2, [pc, #12]	@ (810a2b4 <resource_table_init+0x30>)
 810a2a6:	601a      	str	r2, [r3, #0]
}
 810a2a8:	bf00      	nop
 810a2aa:	3714      	adds	r7, #20
 810a2ac:	46bd      	mov	sp, r7
 810a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a2b2:	4770      	bx	lr
 810a2b4:	38000000 	.word	0x38000000
 810a2b8:	38000400 	.word	0x38000400

0810a2bc <ResMgr_Init>:
  * @param  SendFunct : function pointer used to send message to the other core
  * @param  Callback  : function pointer used to publish the status to user side
  * @retval Return Status
  */
ResMgr_Status_t  ResMgr_Init(ResMgrSendMsg_t SendFunct, ResMgrCallback_t Callback)
{
 810a2bc:	b580      	push	{r7, lr}
 810a2be:	b084      	sub	sp, #16
 810a2c0:	af00      	add	r7, sp, #0
 810a2c2:	6078      	str	r0, [r7, #4]
 810a2c4:	6039      	str	r1, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 810a2c6:	2300      	movs	r3, #0
 810a2c8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = 0;
 810a2ca:	2300      	movs	r3, #0
 810a2cc:	60bb      	str	r3, [r7, #8]
  /* lock table modification */
  RESMGR_TBL_LOCK(RESMGR_ID_RESMGR_TABLE);
 810a2ce:	201f      	movs	r0, #31
 810a2d0:	f7f9 fc62 	bl	8103b98 <HAL_HSEM_FastTake>
 810a2d4:	4603      	mov	r3, r0
 810a2d6:	2b00      	cmp	r3, #0
 810a2d8:	d1f9      	bne.n	810a2ce <ResMgr_Init+0x12>

  /* Check whether the resource is free */
  if(ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State != RESMGR_STATE_TBL_INIT)
 810a2da:	4b43      	ldr	r3, [pc, #268]	@ (810a3e8 <ResMgr_Init+0x12c>)
 810a2dc:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 810a2e0:	2b5a      	cmp	r3, #90	@ 0x5a
 810a2e2:	d062      	beq.n	810a3aa <ResMgr_Init+0xee>
  {

#if defined(RESMGR_USE_DEFAULT_TBL)
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 810a2e4:	e05a      	b.n	810a39c <ResMgr_Init+0xe0>
    {
      if(Default_ResTbl[count] != RES_DEFAULT_ASSIGN_NONE)
 810a2e6:	4a41      	ldr	r2, [pc, #260]	@ (810a3ec <ResMgr_Init+0x130>)
 810a2e8:	68bb      	ldr	r3, [r7, #8]
 810a2ea:	4413      	add	r3, r2
 810a2ec:	781b      	ldrb	r3, [r3, #0]
 810a2ee:	2b00      	cmp	r3, #0
 810a2f0:	d02a      	beq.n	810a348 <ResMgr_Init+0x8c>
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_ASSIGNED;
 810a2f2:	493d      	ldr	r1, [pc, #244]	@ (810a3e8 <ResMgr_Init+0x12c>)
 810a2f4:	68ba      	ldr	r2, [r7, #8]
 810a2f6:	4613      	mov	r3, r2
 810a2f8:	009b      	lsls	r3, r3, #2
 810a2fa:	4413      	add	r3, r2
 810a2fc:	009b      	lsls	r3, r3, #2
 810a2fe:	440b      	add	r3, r1
 810a300:	3308      	adds	r3, #8
 810a302:	2201      	movs	r2, #1
 810a304:	601a      	str	r2, [r3, #0]
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU1)
 810a306:	4a39      	ldr	r2, [pc, #228]	@ (810a3ec <ResMgr_Init+0x130>)
 810a308:	68bb      	ldr	r3, [r7, #8]
 810a30a:	4413      	add	r3, r2
 810a30c:	781b      	ldrb	r3, [r3, #0]
 810a30e:	2b01      	cmp	r3, #1
 810a310:	d109      	bne.n	810a326 <ResMgr_Init+0x6a>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU1;
 810a312:	4935      	ldr	r1, [pc, #212]	@ (810a3e8 <ResMgr_Init+0x12c>)
 810a314:	68ba      	ldr	r2, [r7, #8]
 810a316:	4613      	mov	r3, r2
 810a318:	009b      	lsls	r3, r3, #2
 810a31a:	4413      	add	r3, r2
 810a31c:	009b      	lsls	r3, r3, #2
 810a31e:	440b      	add	r3, r1
 810a320:	3304      	adds	r3, #4
 810a322:	2208      	movs	r2, #8
 810a324:	601a      	str	r2, [r3, #0]
        }
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU2)
 810a326:	4a31      	ldr	r2, [pc, #196]	@ (810a3ec <ResMgr_Init+0x130>)
 810a328:	68bb      	ldr	r3, [r7, #8]
 810a32a:	4413      	add	r3, r2
 810a32c:	781b      	ldrb	r3, [r3, #0]
 810a32e:	2b02      	cmp	r3, #2
 810a330:	d11e      	bne.n	810a370 <ResMgr_Init+0xb4>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU2;
 810a332:	492d      	ldr	r1, [pc, #180]	@ (810a3e8 <ResMgr_Init+0x12c>)
 810a334:	68ba      	ldr	r2, [r7, #8]
 810a336:	4613      	mov	r3, r2
 810a338:	009b      	lsls	r3, r3, #2
 810a33a:	4413      	add	r3, r2
 810a33c:	009b      	lsls	r3, r3, #2
 810a33e:	440b      	add	r3, r1
 810a340:	3304      	adds	r3, #4
 810a342:	2210      	movs	r2, #16
 810a344:	601a      	str	r2, [r3, #0]
 810a346:	e013      	b.n	810a370 <ResMgr_Init+0xb4>
        }
      }
      else
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
 810a348:	4927      	ldr	r1, [pc, #156]	@ (810a3e8 <ResMgr_Init+0x12c>)
 810a34a:	68ba      	ldr	r2, [r7, #8]
 810a34c:	4613      	mov	r3, r2
 810a34e:	009b      	lsls	r3, r3, #2
 810a350:	4413      	add	r3, r2
 810a352:	009b      	lsls	r3, r3, #2
 810a354:	440b      	add	r3, r1
 810a356:	3308      	adds	r3, #8
 810a358:	2200      	movs	r2, #0
 810a35a:	601a      	str	r2, [r3, #0]
        ResMgr_Tbl[count].Ctx.Flags = 0;
 810a35c:	4922      	ldr	r1, [pc, #136]	@ (810a3e8 <ResMgr_Init+0x12c>)
 810a35e:	68ba      	ldr	r2, [r7, #8]
 810a360:	4613      	mov	r3, r2
 810a362:	009b      	lsls	r3, r3, #2
 810a364:	4413      	add	r3, r2
 810a366:	009b      	lsls	r3, r3, #2
 810a368:	440b      	add	r3, r1
 810a36a:	3304      	adds	r3, #4
 810a36c:	2200      	movs	r2, #0
 810a36e:	601a      	str	r2, [r3, #0]
      }
      ResMgr_Tbl[count].Spinlock = 0;
 810a370:	491d      	ldr	r1, [pc, #116]	@ (810a3e8 <ResMgr_Init+0x12c>)
 810a372:	68ba      	ldr	r2, [r7, #8]
 810a374:	4613      	mov	r3, r2
 810a376:	009b      	lsls	r3, r3, #2
 810a378:	4413      	add	r3, r2
 810a37a:	009b      	lsls	r3, r3, #2
 810a37c:	440b      	add	r3, r1
 810a37e:	2200      	movs	r2, #0
 810a380:	601a      	str	r2, [r3, #0]
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
 810a382:	4919      	ldr	r1, [pc, #100]	@ (810a3e8 <ResMgr_Init+0x12c>)
 810a384:	68ba      	ldr	r2, [r7, #8]
 810a386:	4613      	mov	r3, r2
 810a388:	009b      	lsls	r3, r3, #2
 810a38a:	4413      	add	r3, r2
 810a38c:	009b      	lsls	r3, r3, #2
 810a38e:	440b      	add	r3, r1
 810a390:	3310      	adds	r3, #16
 810a392:	2200      	movs	r2, #0
 810a394:	601a      	str	r2, [r3, #0]
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 810a396:	68bb      	ldr	r3, [r7, #8]
 810a398:	3301      	adds	r3, #1
 810a39a:	60bb      	str	r3, [r7, #8]
 810a39c:	68bb      	ldr	r3, [r7, #8]
 810a39e:	2b14      	cmp	r3, #20
 810a3a0:	d9a1      	bls.n	810a2e6 <ResMgr_Init+0x2a>
      ResMgr_Tbl[count].Ctx.Flags = 0;
      ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
    }
#endif /* RESMGR_USE_DEFAULT_TBL */
    ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State = RESMGR_STATE_TBL_INIT;
 810a3a2:	4b11      	ldr	r3, [pc, #68]	@ (810a3e8 <ResMgr_Init+0x12c>)
 810a3a4:	225a      	movs	r2, #90	@ 0x5a
 810a3a6:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
  }

  RESMGR_TBL_UNLOCK(RESMGR_ID_RESMGR_TABLE);
 810a3aa:	2100      	movs	r1, #0
 810a3ac:	201f      	movs	r0, #31
 810a3ae:	f7f9 fc0d 	bl	8103bcc <HAL_HSEM_Release>

  if((SendFunct != NULL) || (Callback != NULL))
 810a3b2:	687b      	ldr	r3, [r7, #4]
 810a3b4:	2b00      	cmp	r3, #0
 810a3b6:	d102      	bne.n	810a3be <ResMgr_Init+0x102>
 810a3b8:	683b      	ldr	r3, [r7, #0]
 810a3ba:	2b00      	cmp	r3, #0
 810a3bc:	d00c      	beq.n	810a3d8 <ResMgr_Init+0x11c>
  {
    ResMgrSendMsgFunct = SendFunct;
 810a3be:	4a0c      	ldr	r2, [pc, #48]	@ (810a3f0 <ResMgr_Init+0x134>)
 810a3c0:	687b      	ldr	r3, [r7, #4]
 810a3c2:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct = Callback;
 810a3c4:	4a0b      	ldr	r2, [pc, #44]	@ (810a3f4 <ResMgr_Init+0x138>)
 810a3c6:	683b      	ldr	r3, [r7, #0]
 810a3c8:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct(RESMGR_ID_ALL, RESMGR_MSG_INIT);
 810a3ca:	4b0a      	ldr	r3, [pc, #40]	@ (810a3f4 <ResMgr_Init+0x138>)
 810a3cc:	681b      	ldr	r3, [r3, #0]
 810a3ce:	2100      	movs	r1, #0
 810a3d0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 810a3d4:	4798      	blx	r3
 810a3d6:	e001      	b.n	810a3dc <ResMgr_Init+0x120>
  }
  else
  {
    ret = RESMGR_ERROR;
 810a3d8:	2301      	movs	r3, #1
 810a3da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 810a3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 810a3de:	4618      	mov	r0, r3
 810a3e0:	3710      	adds	r7, #16
 810a3e2:	46bd      	mov	sp, r7
 810a3e4:	bd80      	pop	{r7, pc}
 810a3e6:	bf00      	nop
 810a3e8:	10000118 	.word	0x10000118
 810a3ec:	0810b95c 	.word	0x0810b95c
 810a3f0:	100005f0 	.word	0x100005f0
 810a3f4:	100005f4 	.word	0x100005f4

0810a3f8 <ResMgr_Request>:
  * @param  prio: Request priority
  * @param  phandle: resource driver handle
  * @retval Status
  */
ResMgr_Status_t  ResMgr_Request ( uint32_t id, uint32_t flags, uint32_t prio, void *phandle)
{
 810a3f8:	b580      	push	{r7, lr}
 810a3fa:	b086      	sub	sp, #24
 810a3fc:	af00      	add	r7, sp, #0
 810a3fe:	60f8      	str	r0, [r7, #12]
 810a400:	60b9      	str	r1, [r7, #8]
 810a402:	607a      	str	r2, [r7, #4]
 810a404:	603b      	str	r3, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 810a406:	2300      	movs	r3, #0
 810a408:	75fb      	strb	r3, [r7, #23]

  if(id < RESMGR_ENTRY_NBR)
 810a40a:	68fb      	ldr	r3, [r7, #12]
 810a40c:	2b14      	cmp	r3, #20
 810a40e:	f200 80f5 	bhi.w	810a5fc <ResMgr_Request+0x204>
  {
    /* lock table modification*/

    RESMGR_TBL_LOCK(id);
 810a412:	201f      	movs	r0, #31
 810a414:	f7f9 fbc0 	bl	8103b98 <HAL_HSEM_FastTake>
 810a418:	4603      	mov	r3, r0
 810a41a:	2b00      	cmp	r3, #0
 810a41c:	d1f9      	bne.n	810a412 <ResMgr_Request+0x1a>

    /* Check whether the resource is free */
    /* Or the resource is assigned by default to the current Core*/
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 810a41e:	497b      	ldr	r1, [pc, #492]	@ (810a60c <ResMgr_Request+0x214>)
 810a420:	68fa      	ldr	r2, [r7, #12]
 810a422:	4613      	mov	r3, r2
 810a424:	009b      	lsls	r3, r3, #2
 810a426:	4413      	add	r3, r2
 810a428:	009b      	lsls	r3, r3, #2
 810a42a:	440b      	add	r3, r1
 810a42c:	3308      	adds	r3, #8
 810a42e:	681b      	ldr	r3, [r3, #0]
 810a430:	2b00      	cmp	r3, #0
 810a432:	d019      	beq.n	810a468 <ResMgr_Request+0x70>
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 810a434:	4975      	ldr	r1, [pc, #468]	@ (810a60c <ResMgr_Request+0x214>)
 810a436:	68fa      	ldr	r2, [r7, #12]
 810a438:	4613      	mov	r3, r2
 810a43a:	009b      	lsls	r3, r3, #2
 810a43c:	4413      	add	r3, r2
 810a43e:	009b      	lsls	r3, r3, #2
 810a440:	440b      	add	r3, r1
 810a442:	3308      	adds	r3, #8
 810a444:	681b      	ldr	r3, [r3, #0]
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 810a446:	2b01      	cmp	r3, #1
 810a448:	d165      	bne.n	810a516 <ResMgr_Request+0x11e>
        (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) == (flags & RESMGR_FLAGS_OWNER_MSK)))
 810a44a:	4970      	ldr	r1, [pc, #448]	@ (810a60c <ResMgr_Request+0x214>)
 810a44c:	68fa      	ldr	r2, [r7, #12]
 810a44e:	4613      	mov	r3, r2
 810a450:	009b      	lsls	r3, r3, #2
 810a452:	4413      	add	r3, r2
 810a454:	009b      	lsls	r3, r3, #2
 810a456:	440b      	add	r3, r1
 810a458:	3304      	adds	r3, #4
 810a45a:	681a      	ldr	r2, [r3, #0]
 810a45c:	68bb      	ldr	r3, [r7, #8]
 810a45e:	4053      	eors	r3, r2
 810a460:	f003 0318 	and.w	r3, r3, #24
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 810a464:	2b00      	cmp	r3, #0
 810a466:	d156      	bne.n	810a516 <ResMgr_Request+0x11e>
    {

      if(phandle != NULL)
 810a468:	683b      	ldr	r3, [r7, #0]
 810a46a:	2b00      	cmp	r3, #0
 810a46c:	d02c      	beq.n	810a4c8 <ResMgr_Request+0xd0>
      {
        if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 810a46e:	68bb      	ldr	r3, [r7, #8]
 810a470:	f003 0301 	and.w	r3, r3, #1
 810a474:	2b00      	cmp	r3, #0
 810a476:	d01d      	beq.n	810a4b4 <ResMgr_Request+0xbc>
        {
          if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 810a478:	4964      	ldr	r1, [pc, #400]	@ (810a60c <ResMgr_Request+0x214>)
 810a47a:	68fa      	ldr	r2, [r7, #12]
 810a47c:	4613      	mov	r3, r2
 810a47e:	009b      	lsls	r3, r3, #2
 810a480:	4413      	add	r3, r2
 810a482:	009b      	lsls	r3, r3, #2
 810a484:	440b      	add	r3, r1
 810a486:	3310      	adds	r3, #16
 810a488:	681b      	ldr	r3, [r3, #0]
 810a48a:	2b00      	cmp	r3, #0
 810a48c:	d00c      	beq.n	810a4a8 <ResMgr_Request+0xb0>
          {
            *((uint32_t *)phandle) = (uint32_t ) (uint32_t *)ResMgr_Tbl[id].Ctx.pHandle;
 810a48e:	495f      	ldr	r1, [pc, #380]	@ (810a60c <ResMgr_Request+0x214>)
 810a490:	68fa      	ldr	r2, [r7, #12]
 810a492:	4613      	mov	r3, r2
 810a494:	009b      	lsls	r3, r3, #2
 810a496:	4413      	add	r3, r2
 810a498:	009b      	lsls	r3, r3, #2
 810a49a:	440b      	add	r3, r1
 810a49c:	3310      	adds	r3, #16
 810a49e:	681b      	ldr	r3, [r3, #0]
 810a4a0:	461a      	mov	r2, r3
 810a4a2:	683b      	ldr	r3, [r7, #0]
 810a4a4:	601a      	str	r2, [r3, #0]
 810a4a6:	e00f      	b.n	810a4c8 <ResMgr_Request+0xd0>
          }
          else
          {
            RESMGR_TBL_UNLOCK(id);
 810a4a8:	2100      	movs	r1, #0
 810a4aa:	201f      	movs	r0, #31
 810a4ac:	f7f9 fb8e 	bl	8103bcc <HAL_HSEM_Release>
            return  RESMGR_ERROR;
 810a4b0:	2301      	movs	r3, #1
 810a4b2:	e0a6      	b.n	810a602 <ResMgr_Request+0x20a>
          }
        }
        else
        {
          ResMgr_Tbl[id].Ctx.pHandle = phandle;
 810a4b4:	4955      	ldr	r1, [pc, #340]	@ (810a60c <ResMgr_Request+0x214>)
 810a4b6:	68fa      	ldr	r2, [r7, #12]
 810a4b8:	4613      	mov	r3, r2
 810a4ba:	009b      	lsls	r3, r3, #2
 810a4bc:	4413      	add	r3, r2
 810a4be:	009b      	lsls	r3, r3, #2
 810a4c0:	440b      	add	r3, r1
 810a4c2:	3310      	adds	r3, #16
 810a4c4:	683a      	ldr	r2, [r7, #0]
 810a4c6:	601a      	str	r2, [r3, #0]
        }
      }
      /* Resource free, update the table and send a message */
      ResMgr_Tbl[id].Ctx.Flags = (flags & ~RESMGR_FLAGS_ACCESS_MSK) | \
 810a4c8:	68bb      	ldr	r3, [r7, #8]
 810a4ca:	f023 0306 	bic.w	r3, r3, #6
 810a4ce:	f043 0102 	orr.w	r1, r3, #2
 810a4d2:	484e      	ldr	r0, [pc, #312]	@ (810a60c <ResMgr_Request+0x214>)
 810a4d4:	68fa      	ldr	r2, [r7, #12]
 810a4d6:	4613      	mov	r3, r2
 810a4d8:	009b      	lsls	r3, r3, #2
 810a4da:	4413      	add	r3, r2
 810a4dc:	009b      	lsls	r3, r3, #2
 810a4de:	4403      	add	r3, r0
 810a4e0:	3304      	adds	r3, #4
 810a4e2:	6019      	str	r1, [r3, #0]
        RESMGR_FLAGS_ACCESS_NORMAL;

      ResMgr_Tbl[id].Ctx.State = RESMGR_STATE_ASSIGNED;
 810a4e4:	4949      	ldr	r1, [pc, #292]	@ (810a60c <ResMgr_Request+0x214>)
 810a4e6:	68fa      	ldr	r2, [r7, #12]
 810a4e8:	4613      	mov	r3, r2
 810a4ea:	009b      	lsls	r3, r3, #2
 810a4ec:	4413      	add	r3, r2
 810a4ee:	009b      	lsls	r3, r3, #2
 810a4f0:	440b      	add	r3, r1
 810a4f2:	3308      	adds	r3, #8
 810a4f4:	2201      	movs	r2, #1
 810a4f6:	601a      	str	r2, [r3, #0]
      RESMGR_TBL_UNLOCK(id);
 810a4f8:	2100      	movs	r1, #0
 810a4fa:	201f      	movs	r0, #31
 810a4fc:	f7f9 fb66 	bl	8103bcc <HAL_HSEM_Release>
      ResMgrSendMsgFunct(id, RESMGR_MSG_ASSIGN);
 810a500:	4b43      	ldr	r3, [pc, #268]	@ (810a610 <ResMgr_Request+0x218>)
 810a502:	681b      	ldr	r3, [r3, #0]
 810a504:	2101      	movs	r1, #1
 810a506:	68f8      	ldr	r0, [r7, #12]
 810a508:	4798      	blx	r3
      ResMgrCallbackFunct(id, RESMGR_MSG_ASSIGNED);
 810a50a:	4b42      	ldr	r3, [pc, #264]	@ (810a614 <ResMgr_Request+0x21c>)
 810a50c:	681b      	ldr	r3, [r3, #0]
 810a50e:	2111      	movs	r1, #17
 810a510:	68f8      	ldr	r0, [r7, #12]
 810a512:	4798      	blx	r3
 810a514:	e074      	b.n	810a600 <ResMgr_Request+0x208>
    }
    else  /* Resource already used, update the table and send a message */
    {
      ret = RESMGR_BUSY;
 810a516:	2302      	movs	r3, #2
 810a518:	75fb      	strb	r3, [r7, #23]

      /* is the request for normal access, reject*/
      if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_NORMAL)
 810a51a:	68bb      	ldr	r3, [r7, #8]
 810a51c:	f003 0306 	and.w	r3, r3, #6
 810a520:	2b02      	cmp	r3, #2
 810a522:	d10e      	bne.n	810a542 <ResMgr_Request+0x14a>
      {
        RESMGR_TBL_UNLOCK(id);
 810a524:	2100      	movs	r1, #0
 810a526:	201f      	movs	r0, #31
 810a528:	f7f9 fb50 	bl	8103bcc <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_REJECT);
 810a52c:	4b38      	ldr	r3, [pc, #224]	@ (810a610 <ResMgr_Request+0x218>)
 810a52e:	681b      	ldr	r3, [r3, #0]
 810a530:	2105      	movs	r1, #5
 810a532:	68f8      	ldr	r0, [r7, #12]
 810a534:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_REJECTED);
 810a536:	4b37      	ldr	r3, [pc, #220]	@ (810a614 <ResMgr_Request+0x21c>)
 810a538:	681b      	ldr	r3, [r3, #0]
 810a53a:	2115      	movs	r1, #21
 810a53c:	68f8      	ldr	r0, [r7, #12]
 810a53e:	4798      	blx	r3
 810a540:	e05e      	b.n	810a600 <ResMgr_Request+0x208>
      }

      /* it is a pend request? */
      else if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_PEND)
 810a542:	68bb      	ldr	r3, [r7, #8]
 810a544:	f003 0306 	and.w	r3, r3, #6
 810a548:	2b04      	cmp	r3, #4
 810a54a:	d154      	bne.n	810a5f6 <ResMgr_Request+0x1fe>
      {
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810a54c:	492f      	ldr	r1, [pc, #188]	@ (810a60c <ResMgr_Request+0x214>)
 810a54e:	68fa      	ldr	r2, [r7, #12]
 810a550:	4613      	mov	r3, r2
 810a552:	009b      	lsls	r3, r3, #2
 810a554:	4413      	add	r3, r2
 810a556:	009b      	lsls	r3, r3, #2
 810a558:	440b      	add	r3, r1
 810a55a:	3304      	adds	r3, #4
 810a55c:	681b      	ldr	r3, [r3, #0]
 810a55e:	f003 0218 	and.w	r2, r3, #24
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 810a562:	68bb      	ldr	r3, [r7, #8]
 810a564:	f023 0306 	bic.w	r3, r3, #6
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810a568:	4313      	orrs	r3, r2
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 810a56a:	f043 0104 	orr.w	r1, r3, #4
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810a56e:	4827      	ldr	r0, [pc, #156]	@ (810a60c <ResMgr_Request+0x214>)
 810a570:	68fa      	ldr	r2, [r7, #12]
 810a572:	4613      	mov	r3, r2
 810a574:	009b      	lsls	r3, r3, #2
 810a576:	4413      	add	r3, r2
 810a578:	009b      	lsls	r3, r3, #2
 810a57a:	4403      	add	r3, r0
 810a57c:	3304      	adds	r3, #4
 810a57e:	6019      	str	r1, [r3, #0]

        if(phandle != NULL)
 810a580:	683b      	ldr	r3, [r7, #0]
 810a582:	2b00      	cmp	r3, #0
 810a584:	d028      	beq.n	810a5d8 <ResMgr_Request+0x1e0>
        {
          if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 810a586:	68bb      	ldr	r3, [r7, #8]
 810a588:	f003 0301 	and.w	r3, r3, #1
 810a58c:	2b00      	cmp	r3, #0
 810a58e:	d019      	beq.n	810a5c4 <ResMgr_Request+0x1cc>
          {
            if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 810a590:	491e      	ldr	r1, [pc, #120]	@ (810a60c <ResMgr_Request+0x214>)
 810a592:	68fa      	ldr	r2, [r7, #12]
 810a594:	4613      	mov	r3, r2
 810a596:	009b      	lsls	r3, r3, #2
 810a598:	4413      	add	r3, r2
 810a59a:	009b      	lsls	r3, r3, #2
 810a59c:	440b      	add	r3, r1
 810a59e:	3310      	adds	r3, #16
 810a5a0:	681b      	ldr	r3, [r3, #0]
 810a5a2:	2b00      	cmp	r3, #0
 810a5a4:	d00c      	beq.n	810a5c0 <ResMgr_Request+0x1c8>
            {
              *((uint32_t *)phandle) = (uint32_t )(uint32_t *) ResMgr_Tbl[id].Ctx.pHandle;
 810a5a6:	4919      	ldr	r1, [pc, #100]	@ (810a60c <ResMgr_Request+0x214>)
 810a5a8:	68fa      	ldr	r2, [r7, #12]
 810a5aa:	4613      	mov	r3, r2
 810a5ac:	009b      	lsls	r3, r3, #2
 810a5ae:	4413      	add	r3, r2
 810a5b0:	009b      	lsls	r3, r3, #2
 810a5b2:	440b      	add	r3, r1
 810a5b4:	3310      	adds	r3, #16
 810a5b6:	681b      	ldr	r3, [r3, #0]
 810a5b8:	461a      	mov	r2, r3
 810a5ba:	683b      	ldr	r3, [r7, #0]
 810a5bc:	601a      	str	r2, [r3, #0]
 810a5be:	e00b      	b.n	810a5d8 <ResMgr_Request+0x1e0>
            }
            else
            {
              return  RESMGR_ERROR;
 810a5c0:	2301      	movs	r3, #1
 810a5c2:	e01e      	b.n	810a602 <ResMgr_Request+0x20a>
            }
          }
          else
          {
            ResMgr_Tbl[id].Ctx.pHandle = phandle;
 810a5c4:	4911      	ldr	r1, [pc, #68]	@ (810a60c <ResMgr_Request+0x214>)
 810a5c6:	68fa      	ldr	r2, [r7, #12]
 810a5c8:	4613      	mov	r3, r2
 810a5ca:	009b      	lsls	r3, r3, #2
 810a5cc:	4413      	add	r3, r2
 810a5ce:	009b      	lsls	r3, r3, #2
 810a5d0:	440b      	add	r3, r1
 810a5d2:	3310      	adds	r3, #16
 810a5d4:	683a      	ldr	r2, [r7, #0]
 810a5d6:	601a      	str	r2, [r3, #0]
          }
        }
        RESMGR_TBL_UNLOCK(id);
 810a5d8:	2100      	movs	r1, #0
 810a5da:	201f      	movs	r0, #31
 810a5dc:	f7f9 faf6 	bl	8103bcc <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_PEND);
 810a5e0:	4b0b      	ldr	r3, [pc, #44]	@ (810a610 <ResMgr_Request+0x218>)
 810a5e2:	681b      	ldr	r3, [r3, #0]
 810a5e4:	2104      	movs	r1, #4
 810a5e6:	68f8      	ldr	r0, [r7, #12]
 810a5e8:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_PENDED);
 810a5ea:	4b0a      	ldr	r3, [pc, #40]	@ (810a614 <ResMgr_Request+0x21c>)
 810a5ec:	681b      	ldr	r3, [r3, #0]
 810a5ee:	2114      	movs	r1, #20
 810a5f0:	68f8      	ldr	r0, [r7, #12]
 810a5f2:	4798      	blx	r3
 810a5f4:	e004      	b.n	810a600 <ResMgr_Request+0x208>
      }
      else
      {
        ret = RESMGR_ERROR;
 810a5f6:	2301      	movs	r3, #1
 810a5f8:	75fb      	strb	r3, [r7, #23]
 810a5fa:	e001      	b.n	810a600 <ResMgr_Request+0x208>
    }

  }
  else
  {
    ret = RESMGR_ERROR;
 810a5fc:	2301      	movs	r3, #1
 810a5fe:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 810a600:	7dfb      	ldrb	r3, [r7, #23]
}
 810a602:	4618      	mov	r0, r3
 810a604:	3718      	adds	r7, #24
 810a606:	46bd      	mov	sp, r7
 810a608:	bd80      	pop	{r7, pc}
 810a60a:	bf00      	nop
 810a60c:	10000118 	.word	0x10000118
 810a610:	100005f0 	.word	0x100005f0
 810a614:	100005f4 	.word	0x100005f4

0810a618 <__assert_func>:
 810a618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810a61a:	4614      	mov	r4, r2
 810a61c:	461a      	mov	r2, r3
 810a61e:	4b09      	ldr	r3, [pc, #36]	@ (810a644 <__assert_func+0x2c>)
 810a620:	681b      	ldr	r3, [r3, #0]
 810a622:	4605      	mov	r5, r0
 810a624:	68d8      	ldr	r0, [r3, #12]
 810a626:	b954      	cbnz	r4, 810a63e <__assert_func+0x26>
 810a628:	4b07      	ldr	r3, [pc, #28]	@ (810a648 <__assert_func+0x30>)
 810a62a:	461c      	mov	r4, r3
 810a62c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810a630:	9100      	str	r1, [sp, #0]
 810a632:	462b      	mov	r3, r5
 810a634:	4905      	ldr	r1, [pc, #20]	@ (810a64c <__assert_func+0x34>)
 810a636:	f000 f96f 	bl	810a918 <fiprintf>
 810a63a:	f000 fa80 	bl	810ab3e <abort>
 810a63e:	4b04      	ldr	r3, [pc, #16]	@ (810a650 <__assert_func+0x38>)
 810a640:	e7f4      	b.n	810a62c <__assert_func+0x14>
 810a642:	bf00      	nop
 810a644:	100000c8 	.word	0x100000c8
 810a648:	0810b9ac 	.word	0x0810b9ac
 810a64c:	0810b97e 	.word	0x0810b97e
 810a650:	0810b971 	.word	0x0810b971

0810a654 <malloc>:
 810a654:	4b02      	ldr	r3, [pc, #8]	@ (810a660 <malloc+0xc>)
 810a656:	4601      	mov	r1, r0
 810a658:	6818      	ldr	r0, [r3, #0]
 810a65a:	f000 b82d 	b.w	810a6b8 <_malloc_r>
 810a65e:	bf00      	nop
 810a660:	100000c8 	.word	0x100000c8

0810a664 <free>:
 810a664:	4b02      	ldr	r3, [pc, #8]	@ (810a670 <free+0xc>)
 810a666:	4601      	mov	r1, r0
 810a668:	6818      	ldr	r0, [r3, #0]
 810a66a:	f000 ba6f 	b.w	810ab4c <_free_r>
 810a66e:	bf00      	nop
 810a670:	100000c8 	.word	0x100000c8

0810a674 <sbrk_aligned>:
 810a674:	b570      	push	{r4, r5, r6, lr}
 810a676:	4e0f      	ldr	r6, [pc, #60]	@ (810a6b4 <sbrk_aligned+0x40>)
 810a678:	460c      	mov	r4, r1
 810a67a:	6831      	ldr	r1, [r6, #0]
 810a67c:	4605      	mov	r5, r0
 810a67e:	b911      	cbnz	r1, 810a686 <sbrk_aligned+0x12>
 810a680:	f000 fa18 	bl	810aab4 <_sbrk_r>
 810a684:	6030      	str	r0, [r6, #0]
 810a686:	4621      	mov	r1, r4
 810a688:	4628      	mov	r0, r5
 810a68a:	f000 fa13 	bl	810aab4 <_sbrk_r>
 810a68e:	1c43      	adds	r3, r0, #1
 810a690:	d103      	bne.n	810a69a <sbrk_aligned+0x26>
 810a692:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 810a696:	4620      	mov	r0, r4
 810a698:	bd70      	pop	{r4, r5, r6, pc}
 810a69a:	1cc4      	adds	r4, r0, #3
 810a69c:	f024 0403 	bic.w	r4, r4, #3
 810a6a0:	42a0      	cmp	r0, r4
 810a6a2:	d0f8      	beq.n	810a696 <sbrk_aligned+0x22>
 810a6a4:	1a21      	subs	r1, r4, r0
 810a6a6:	4628      	mov	r0, r5
 810a6a8:	f000 fa04 	bl	810aab4 <_sbrk_r>
 810a6ac:	3001      	adds	r0, #1
 810a6ae:	d1f2      	bne.n	810a696 <sbrk_aligned+0x22>
 810a6b0:	e7ef      	b.n	810a692 <sbrk_aligned+0x1e>
 810a6b2:	bf00      	nop
 810a6b4:	100005f8 	.word	0x100005f8

0810a6b8 <_malloc_r>:
 810a6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a6bc:	1ccd      	adds	r5, r1, #3
 810a6be:	f025 0503 	bic.w	r5, r5, #3
 810a6c2:	3508      	adds	r5, #8
 810a6c4:	2d0c      	cmp	r5, #12
 810a6c6:	bf38      	it	cc
 810a6c8:	250c      	movcc	r5, #12
 810a6ca:	2d00      	cmp	r5, #0
 810a6cc:	4606      	mov	r6, r0
 810a6ce:	db01      	blt.n	810a6d4 <_malloc_r+0x1c>
 810a6d0:	42a9      	cmp	r1, r5
 810a6d2:	d904      	bls.n	810a6de <_malloc_r+0x26>
 810a6d4:	230c      	movs	r3, #12
 810a6d6:	6033      	str	r3, [r6, #0]
 810a6d8:	2000      	movs	r0, #0
 810a6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a6de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810a7b4 <_malloc_r+0xfc>
 810a6e2:	f000 f869 	bl	810a7b8 <__malloc_lock>
 810a6e6:	f8d8 3000 	ldr.w	r3, [r8]
 810a6ea:	461c      	mov	r4, r3
 810a6ec:	bb44      	cbnz	r4, 810a740 <_malloc_r+0x88>
 810a6ee:	4629      	mov	r1, r5
 810a6f0:	4630      	mov	r0, r6
 810a6f2:	f7ff ffbf 	bl	810a674 <sbrk_aligned>
 810a6f6:	1c43      	adds	r3, r0, #1
 810a6f8:	4604      	mov	r4, r0
 810a6fa:	d158      	bne.n	810a7ae <_malloc_r+0xf6>
 810a6fc:	f8d8 4000 	ldr.w	r4, [r8]
 810a700:	4627      	mov	r7, r4
 810a702:	2f00      	cmp	r7, #0
 810a704:	d143      	bne.n	810a78e <_malloc_r+0xd6>
 810a706:	2c00      	cmp	r4, #0
 810a708:	d04b      	beq.n	810a7a2 <_malloc_r+0xea>
 810a70a:	6823      	ldr	r3, [r4, #0]
 810a70c:	4639      	mov	r1, r7
 810a70e:	4630      	mov	r0, r6
 810a710:	eb04 0903 	add.w	r9, r4, r3
 810a714:	f000 f9ce 	bl	810aab4 <_sbrk_r>
 810a718:	4581      	cmp	r9, r0
 810a71a:	d142      	bne.n	810a7a2 <_malloc_r+0xea>
 810a71c:	6821      	ldr	r1, [r4, #0]
 810a71e:	1a6d      	subs	r5, r5, r1
 810a720:	4629      	mov	r1, r5
 810a722:	4630      	mov	r0, r6
 810a724:	f7ff ffa6 	bl	810a674 <sbrk_aligned>
 810a728:	3001      	adds	r0, #1
 810a72a:	d03a      	beq.n	810a7a2 <_malloc_r+0xea>
 810a72c:	6823      	ldr	r3, [r4, #0]
 810a72e:	442b      	add	r3, r5
 810a730:	6023      	str	r3, [r4, #0]
 810a732:	f8d8 3000 	ldr.w	r3, [r8]
 810a736:	685a      	ldr	r2, [r3, #4]
 810a738:	bb62      	cbnz	r2, 810a794 <_malloc_r+0xdc>
 810a73a:	f8c8 7000 	str.w	r7, [r8]
 810a73e:	e00f      	b.n	810a760 <_malloc_r+0xa8>
 810a740:	6822      	ldr	r2, [r4, #0]
 810a742:	1b52      	subs	r2, r2, r5
 810a744:	d420      	bmi.n	810a788 <_malloc_r+0xd0>
 810a746:	2a0b      	cmp	r2, #11
 810a748:	d917      	bls.n	810a77a <_malloc_r+0xc2>
 810a74a:	1961      	adds	r1, r4, r5
 810a74c:	42a3      	cmp	r3, r4
 810a74e:	6025      	str	r5, [r4, #0]
 810a750:	bf18      	it	ne
 810a752:	6059      	strne	r1, [r3, #4]
 810a754:	6863      	ldr	r3, [r4, #4]
 810a756:	bf08      	it	eq
 810a758:	f8c8 1000 	streq.w	r1, [r8]
 810a75c:	5162      	str	r2, [r4, r5]
 810a75e:	604b      	str	r3, [r1, #4]
 810a760:	4630      	mov	r0, r6
 810a762:	f000 f82f 	bl	810a7c4 <__malloc_unlock>
 810a766:	f104 000b 	add.w	r0, r4, #11
 810a76a:	1d23      	adds	r3, r4, #4
 810a76c:	f020 0007 	bic.w	r0, r0, #7
 810a770:	1ac2      	subs	r2, r0, r3
 810a772:	bf1c      	itt	ne
 810a774:	1a1b      	subne	r3, r3, r0
 810a776:	50a3      	strne	r3, [r4, r2]
 810a778:	e7af      	b.n	810a6da <_malloc_r+0x22>
 810a77a:	6862      	ldr	r2, [r4, #4]
 810a77c:	42a3      	cmp	r3, r4
 810a77e:	bf0c      	ite	eq
 810a780:	f8c8 2000 	streq.w	r2, [r8]
 810a784:	605a      	strne	r2, [r3, #4]
 810a786:	e7eb      	b.n	810a760 <_malloc_r+0xa8>
 810a788:	4623      	mov	r3, r4
 810a78a:	6864      	ldr	r4, [r4, #4]
 810a78c:	e7ae      	b.n	810a6ec <_malloc_r+0x34>
 810a78e:	463c      	mov	r4, r7
 810a790:	687f      	ldr	r7, [r7, #4]
 810a792:	e7b6      	b.n	810a702 <_malloc_r+0x4a>
 810a794:	461a      	mov	r2, r3
 810a796:	685b      	ldr	r3, [r3, #4]
 810a798:	42a3      	cmp	r3, r4
 810a79a:	d1fb      	bne.n	810a794 <_malloc_r+0xdc>
 810a79c:	2300      	movs	r3, #0
 810a79e:	6053      	str	r3, [r2, #4]
 810a7a0:	e7de      	b.n	810a760 <_malloc_r+0xa8>
 810a7a2:	230c      	movs	r3, #12
 810a7a4:	6033      	str	r3, [r6, #0]
 810a7a6:	4630      	mov	r0, r6
 810a7a8:	f000 f80c 	bl	810a7c4 <__malloc_unlock>
 810a7ac:	e794      	b.n	810a6d8 <_malloc_r+0x20>
 810a7ae:	6005      	str	r5, [r0, #0]
 810a7b0:	e7d6      	b.n	810a760 <_malloc_r+0xa8>
 810a7b2:	bf00      	nop
 810a7b4:	100005fc 	.word	0x100005fc

0810a7b8 <__malloc_lock>:
 810a7b8:	4801      	ldr	r0, [pc, #4]	@ (810a7c0 <__malloc_lock+0x8>)
 810a7ba:	f000 b9b0 	b.w	810ab1e <__retarget_lock_acquire_recursive>
 810a7be:	bf00      	nop
 810a7c0:	10000740 	.word	0x10000740

0810a7c4 <__malloc_unlock>:
 810a7c4:	4801      	ldr	r0, [pc, #4]	@ (810a7cc <__malloc_unlock+0x8>)
 810a7c6:	f000 b9ab 	b.w	810ab20 <__retarget_lock_release_recursive>
 810a7ca:	bf00      	nop
 810a7cc:	10000740 	.word	0x10000740

0810a7d0 <std>:
 810a7d0:	2300      	movs	r3, #0
 810a7d2:	b510      	push	{r4, lr}
 810a7d4:	4604      	mov	r4, r0
 810a7d6:	e9c0 3300 	strd	r3, r3, [r0]
 810a7da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a7de:	6083      	str	r3, [r0, #8]
 810a7e0:	8181      	strh	r1, [r0, #12]
 810a7e2:	6643      	str	r3, [r0, #100]	@ 0x64
 810a7e4:	81c2      	strh	r2, [r0, #14]
 810a7e6:	6183      	str	r3, [r0, #24]
 810a7e8:	4619      	mov	r1, r3
 810a7ea:	2208      	movs	r2, #8
 810a7ec:	305c      	adds	r0, #92	@ 0x5c
 810a7ee:	f000 f958 	bl	810aaa2 <memset>
 810a7f2:	4b0d      	ldr	r3, [pc, #52]	@ (810a828 <std+0x58>)
 810a7f4:	6263      	str	r3, [r4, #36]	@ 0x24
 810a7f6:	4b0d      	ldr	r3, [pc, #52]	@ (810a82c <std+0x5c>)
 810a7f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 810a7fa:	4b0d      	ldr	r3, [pc, #52]	@ (810a830 <std+0x60>)
 810a7fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810a7fe:	4b0d      	ldr	r3, [pc, #52]	@ (810a834 <std+0x64>)
 810a800:	6323      	str	r3, [r4, #48]	@ 0x30
 810a802:	4b0d      	ldr	r3, [pc, #52]	@ (810a838 <std+0x68>)
 810a804:	6224      	str	r4, [r4, #32]
 810a806:	429c      	cmp	r4, r3
 810a808:	d006      	beq.n	810a818 <std+0x48>
 810a80a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810a80e:	4294      	cmp	r4, r2
 810a810:	d002      	beq.n	810a818 <std+0x48>
 810a812:	33d0      	adds	r3, #208	@ 0xd0
 810a814:	429c      	cmp	r4, r3
 810a816:	d105      	bne.n	810a824 <std+0x54>
 810a818:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810a81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a820:	f000 b97c 	b.w	810ab1c <__retarget_lock_init_recursive>
 810a824:	bd10      	pop	{r4, pc}
 810a826:	bf00      	nop
 810a828:	0810b2d9 	.word	0x0810b2d9
 810a82c:	0810b2fb 	.word	0x0810b2fb
 810a830:	0810b333 	.word	0x0810b333
 810a834:	0810b357 	.word	0x0810b357
 810a838:	10000600 	.word	0x10000600

0810a83c <stdio_exit_handler>:
 810a83c:	4a02      	ldr	r2, [pc, #8]	@ (810a848 <stdio_exit_handler+0xc>)
 810a83e:	4903      	ldr	r1, [pc, #12]	@ (810a84c <stdio_exit_handler+0x10>)
 810a840:	4803      	ldr	r0, [pc, #12]	@ (810a850 <stdio_exit_handler+0x14>)
 810a842:	f000 b87b 	b.w	810a93c <_fwalk_sglue>
 810a846:	bf00      	nop
 810a848:	100000bc 	.word	0x100000bc
 810a84c:	0810b289 	.word	0x0810b289
 810a850:	100000cc 	.word	0x100000cc

0810a854 <cleanup_stdio>:
 810a854:	6841      	ldr	r1, [r0, #4]
 810a856:	4b0c      	ldr	r3, [pc, #48]	@ (810a888 <cleanup_stdio+0x34>)
 810a858:	4299      	cmp	r1, r3
 810a85a:	b510      	push	{r4, lr}
 810a85c:	4604      	mov	r4, r0
 810a85e:	d001      	beq.n	810a864 <cleanup_stdio+0x10>
 810a860:	f000 fd12 	bl	810b288 <_fflush_r>
 810a864:	68a1      	ldr	r1, [r4, #8]
 810a866:	4b09      	ldr	r3, [pc, #36]	@ (810a88c <cleanup_stdio+0x38>)
 810a868:	4299      	cmp	r1, r3
 810a86a:	d002      	beq.n	810a872 <cleanup_stdio+0x1e>
 810a86c:	4620      	mov	r0, r4
 810a86e:	f000 fd0b 	bl	810b288 <_fflush_r>
 810a872:	68e1      	ldr	r1, [r4, #12]
 810a874:	4b06      	ldr	r3, [pc, #24]	@ (810a890 <cleanup_stdio+0x3c>)
 810a876:	4299      	cmp	r1, r3
 810a878:	d004      	beq.n	810a884 <cleanup_stdio+0x30>
 810a87a:	4620      	mov	r0, r4
 810a87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a880:	f000 bd02 	b.w	810b288 <_fflush_r>
 810a884:	bd10      	pop	{r4, pc}
 810a886:	bf00      	nop
 810a888:	10000600 	.word	0x10000600
 810a88c:	10000668 	.word	0x10000668
 810a890:	100006d0 	.word	0x100006d0

0810a894 <global_stdio_init.part.0>:
 810a894:	b510      	push	{r4, lr}
 810a896:	4b0b      	ldr	r3, [pc, #44]	@ (810a8c4 <global_stdio_init.part.0+0x30>)
 810a898:	4c0b      	ldr	r4, [pc, #44]	@ (810a8c8 <global_stdio_init.part.0+0x34>)
 810a89a:	4a0c      	ldr	r2, [pc, #48]	@ (810a8cc <global_stdio_init.part.0+0x38>)
 810a89c:	601a      	str	r2, [r3, #0]
 810a89e:	4620      	mov	r0, r4
 810a8a0:	2200      	movs	r2, #0
 810a8a2:	2104      	movs	r1, #4
 810a8a4:	f7ff ff94 	bl	810a7d0 <std>
 810a8a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810a8ac:	2201      	movs	r2, #1
 810a8ae:	2109      	movs	r1, #9
 810a8b0:	f7ff ff8e 	bl	810a7d0 <std>
 810a8b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810a8b8:	2202      	movs	r2, #2
 810a8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a8be:	2112      	movs	r1, #18
 810a8c0:	f7ff bf86 	b.w	810a7d0 <std>
 810a8c4:	10000738 	.word	0x10000738
 810a8c8:	10000600 	.word	0x10000600
 810a8cc:	0810a83d 	.word	0x0810a83d

0810a8d0 <__sfp_lock_acquire>:
 810a8d0:	4801      	ldr	r0, [pc, #4]	@ (810a8d8 <__sfp_lock_acquire+0x8>)
 810a8d2:	f000 b924 	b.w	810ab1e <__retarget_lock_acquire_recursive>
 810a8d6:	bf00      	nop
 810a8d8:	10000741 	.word	0x10000741

0810a8dc <__sfp_lock_release>:
 810a8dc:	4801      	ldr	r0, [pc, #4]	@ (810a8e4 <__sfp_lock_release+0x8>)
 810a8de:	f000 b91f 	b.w	810ab20 <__retarget_lock_release_recursive>
 810a8e2:	bf00      	nop
 810a8e4:	10000741 	.word	0x10000741

0810a8e8 <__sinit>:
 810a8e8:	b510      	push	{r4, lr}
 810a8ea:	4604      	mov	r4, r0
 810a8ec:	f7ff fff0 	bl	810a8d0 <__sfp_lock_acquire>
 810a8f0:	6a23      	ldr	r3, [r4, #32]
 810a8f2:	b11b      	cbz	r3, 810a8fc <__sinit+0x14>
 810a8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a8f8:	f7ff bff0 	b.w	810a8dc <__sfp_lock_release>
 810a8fc:	4b04      	ldr	r3, [pc, #16]	@ (810a910 <__sinit+0x28>)
 810a8fe:	6223      	str	r3, [r4, #32]
 810a900:	4b04      	ldr	r3, [pc, #16]	@ (810a914 <__sinit+0x2c>)
 810a902:	681b      	ldr	r3, [r3, #0]
 810a904:	2b00      	cmp	r3, #0
 810a906:	d1f5      	bne.n	810a8f4 <__sinit+0xc>
 810a908:	f7ff ffc4 	bl	810a894 <global_stdio_init.part.0>
 810a90c:	e7f2      	b.n	810a8f4 <__sinit+0xc>
 810a90e:	bf00      	nop
 810a910:	0810a855 	.word	0x0810a855
 810a914:	10000738 	.word	0x10000738

0810a918 <fiprintf>:
 810a918:	b40e      	push	{r1, r2, r3}
 810a91a:	b503      	push	{r0, r1, lr}
 810a91c:	4601      	mov	r1, r0
 810a91e:	ab03      	add	r3, sp, #12
 810a920:	4805      	ldr	r0, [pc, #20]	@ (810a938 <fiprintf+0x20>)
 810a922:	f853 2b04 	ldr.w	r2, [r3], #4
 810a926:	6800      	ldr	r0, [r0, #0]
 810a928:	9301      	str	r3, [sp, #4]
 810a92a:	f000 f983 	bl	810ac34 <_vfiprintf_r>
 810a92e:	b002      	add	sp, #8
 810a930:	f85d eb04 	ldr.w	lr, [sp], #4
 810a934:	b003      	add	sp, #12
 810a936:	4770      	bx	lr
 810a938:	100000c8 	.word	0x100000c8

0810a93c <_fwalk_sglue>:
 810a93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a940:	4607      	mov	r7, r0
 810a942:	4688      	mov	r8, r1
 810a944:	4614      	mov	r4, r2
 810a946:	2600      	movs	r6, #0
 810a948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810a94c:	f1b9 0901 	subs.w	r9, r9, #1
 810a950:	d505      	bpl.n	810a95e <_fwalk_sglue+0x22>
 810a952:	6824      	ldr	r4, [r4, #0]
 810a954:	2c00      	cmp	r4, #0
 810a956:	d1f7      	bne.n	810a948 <_fwalk_sglue+0xc>
 810a958:	4630      	mov	r0, r6
 810a95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a95e:	89ab      	ldrh	r3, [r5, #12]
 810a960:	2b01      	cmp	r3, #1
 810a962:	d907      	bls.n	810a974 <_fwalk_sglue+0x38>
 810a964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810a968:	3301      	adds	r3, #1
 810a96a:	d003      	beq.n	810a974 <_fwalk_sglue+0x38>
 810a96c:	4629      	mov	r1, r5
 810a96e:	4638      	mov	r0, r7
 810a970:	47c0      	blx	r8
 810a972:	4306      	orrs	r6, r0
 810a974:	3568      	adds	r5, #104	@ 0x68
 810a976:	e7e9      	b.n	810a94c <_fwalk_sglue+0x10>

0810a978 <iprintf>:
 810a978:	b40f      	push	{r0, r1, r2, r3}
 810a97a:	b507      	push	{r0, r1, r2, lr}
 810a97c:	4906      	ldr	r1, [pc, #24]	@ (810a998 <iprintf+0x20>)
 810a97e:	ab04      	add	r3, sp, #16
 810a980:	6808      	ldr	r0, [r1, #0]
 810a982:	f853 2b04 	ldr.w	r2, [r3], #4
 810a986:	6881      	ldr	r1, [r0, #8]
 810a988:	9301      	str	r3, [sp, #4]
 810a98a:	f000 f953 	bl	810ac34 <_vfiprintf_r>
 810a98e:	b003      	add	sp, #12
 810a990:	f85d eb04 	ldr.w	lr, [sp], #4
 810a994:	b004      	add	sp, #16
 810a996:	4770      	bx	lr
 810a998:	100000c8 	.word	0x100000c8

0810a99c <_puts_r>:
 810a99c:	6a03      	ldr	r3, [r0, #32]
 810a99e:	b570      	push	{r4, r5, r6, lr}
 810a9a0:	6884      	ldr	r4, [r0, #8]
 810a9a2:	4605      	mov	r5, r0
 810a9a4:	460e      	mov	r6, r1
 810a9a6:	b90b      	cbnz	r3, 810a9ac <_puts_r+0x10>
 810a9a8:	f7ff ff9e 	bl	810a8e8 <__sinit>
 810a9ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810a9ae:	07db      	lsls	r3, r3, #31
 810a9b0:	d405      	bmi.n	810a9be <_puts_r+0x22>
 810a9b2:	89a3      	ldrh	r3, [r4, #12]
 810a9b4:	0598      	lsls	r0, r3, #22
 810a9b6:	d402      	bmi.n	810a9be <_puts_r+0x22>
 810a9b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810a9ba:	f000 f8b0 	bl	810ab1e <__retarget_lock_acquire_recursive>
 810a9be:	89a3      	ldrh	r3, [r4, #12]
 810a9c0:	0719      	lsls	r1, r3, #28
 810a9c2:	d502      	bpl.n	810a9ca <_puts_r+0x2e>
 810a9c4:	6923      	ldr	r3, [r4, #16]
 810a9c6:	2b00      	cmp	r3, #0
 810a9c8:	d135      	bne.n	810aa36 <_puts_r+0x9a>
 810a9ca:	4621      	mov	r1, r4
 810a9cc:	4628      	mov	r0, r5
 810a9ce:	f000 fd05 	bl	810b3dc <__swsetup_r>
 810a9d2:	b380      	cbz	r0, 810aa36 <_puts_r+0x9a>
 810a9d4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 810a9d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810a9da:	07da      	lsls	r2, r3, #31
 810a9dc:	d405      	bmi.n	810a9ea <_puts_r+0x4e>
 810a9de:	89a3      	ldrh	r3, [r4, #12]
 810a9e0:	059b      	lsls	r3, r3, #22
 810a9e2:	d402      	bmi.n	810a9ea <_puts_r+0x4e>
 810a9e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810a9e6:	f000 f89b 	bl	810ab20 <__retarget_lock_release_recursive>
 810a9ea:	4628      	mov	r0, r5
 810a9ec:	bd70      	pop	{r4, r5, r6, pc}
 810a9ee:	2b00      	cmp	r3, #0
 810a9f0:	da04      	bge.n	810a9fc <_puts_r+0x60>
 810a9f2:	69a2      	ldr	r2, [r4, #24]
 810a9f4:	429a      	cmp	r2, r3
 810a9f6:	dc17      	bgt.n	810aa28 <_puts_r+0x8c>
 810a9f8:	290a      	cmp	r1, #10
 810a9fa:	d015      	beq.n	810aa28 <_puts_r+0x8c>
 810a9fc:	6823      	ldr	r3, [r4, #0]
 810a9fe:	1c5a      	adds	r2, r3, #1
 810aa00:	6022      	str	r2, [r4, #0]
 810aa02:	7019      	strb	r1, [r3, #0]
 810aa04:	68a3      	ldr	r3, [r4, #8]
 810aa06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810aa0a:	3b01      	subs	r3, #1
 810aa0c:	60a3      	str	r3, [r4, #8]
 810aa0e:	2900      	cmp	r1, #0
 810aa10:	d1ed      	bne.n	810a9ee <_puts_r+0x52>
 810aa12:	2b00      	cmp	r3, #0
 810aa14:	da11      	bge.n	810aa3a <_puts_r+0x9e>
 810aa16:	4622      	mov	r2, r4
 810aa18:	210a      	movs	r1, #10
 810aa1a:	4628      	mov	r0, r5
 810aa1c:	f000 fc9f 	bl	810b35e <__swbuf_r>
 810aa20:	3001      	adds	r0, #1
 810aa22:	d0d7      	beq.n	810a9d4 <_puts_r+0x38>
 810aa24:	250a      	movs	r5, #10
 810aa26:	e7d7      	b.n	810a9d8 <_puts_r+0x3c>
 810aa28:	4622      	mov	r2, r4
 810aa2a:	4628      	mov	r0, r5
 810aa2c:	f000 fc97 	bl	810b35e <__swbuf_r>
 810aa30:	3001      	adds	r0, #1
 810aa32:	d1e7      	bne.n	810aa04 <_puts_r+0x68>
 810aa34:	e7ce      	b.n	810a9d4 <_puts_r+0x38>
 810aa36:	3e01      	subs	r6, #1
 810aa38:	e7e4      	b.n	810aa04 <_puts_r+0x68>
 810aa3a:	6823      	ldr	r3, [r4, #0]
 810aa3c:	1c5a      	adds	r2, r3, #1
 810aa3e:	6022      	str	r2, [r4, #0]
 810aa40:	220a      	movs	r2, #10
 810aa42:	701a      	strb	r2, [r3, #0]
 810aa44:	e7ee      	b.n	810aa24 <_puts_r+0x88>
	...

0810aa48 <puts>:
 810aa48:	4b02      	ldr	r3, [pc, #8]	@ (810aa54 <puts+0xc>)
 810aa4a:	4601      	mov	r1, r0
 810aa4c:	6818      	ldr	r0, [r3, #0]
 810aa4e:	f7ff bfa5 	b.w	810a99c <_puts_r>
 810aa52:	bf00      	nop
 810aa54:	100000c8 	.word	0x100000c8

0810aa58 <strncmp>:
 810aa58:	b510      	push	{r4, lr}
 810aa5a:	b16a      	cbz	r2, 810aa78 <strncmp+0x20>
 810aa5c:	3901      	subs	r1, #1
 810aa5e:	1884      	adds	r4, r0, r2
 810aa60:	f810 2b01 	ldrb.w	r2, [r0], #1
 810aa64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810aa68:	429a      	cmp	r2, r3
 810aa6a:	d103      	bne.n	810aa74 <strncmp+0x1c>
 810aa6c:	42a0      	cmp	r0, r4
 810aa6e:	d001      	beq.n	810aa74 <strncmp+0x1c>
 810aa70:	2a00      	cmp	r2, #0
 810aa72:	d1f5      	bne.n	810aa60 <strncmp+0x8>
 810aa74:	1ad0      	subs	r0, r2, r3
 810aa76:	bd10      	pop	{r4, pc}
 810aa78:	4610      	mov	r0, r2
 810aa7a:	e7fc      	b.n	810aa76 <strncmp+0x1e>

0810aa7c <strncpy>:
 810aa7c:	b510      	push	{r4, lr}
 810aa7e:	3901      	subs	r1, #1
 810aa80:	4603      	mov	r3, r0
 810aa82:	b132      	cbz	r2, 810aa92 <strncpy+0x16>
 810aa84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 810aa88:	f803 4b01 	strb.w	r4, [r3], #1
 810aa8c:	3a01      	subs	r2, #1
 810aa8e:	2c00      	cmp	r4, #0
 810aa90:	d1f7      	bne.n	810aa82 <strncpy+0x6>
 810aa92:	441a      	add	r2, r3
 810aa94:	2100      	movs	r1, #0
 810aa96:	4293      	cmp	r3, r2
 810aa98:	d100      	bne.n	810aa9c <strncpy+0x20>
 810aa9a:	bd10      	pop	{r4, pc}
 810aa9c:	f803 1b01 	strb.w	r1, [r3], #1
 810aaa0:	e7f9      	b.n	810aa96 <strncpy+0x1a>

0810aaa2 <memset>:
 810aaa2:	4402      	add	r2, r0
 810aaa4:	4603      	mov	r3, r0
 810aaa6:	4293      	cmp	r3, r2
 810aaa8:	d100      	bne.n	810aaac <memset+0xa>
 810aaaa:	4770      	bx	lr
 810aaac:	f803 1b01 	strb.w	r1, [r3], #1
 810aab0:	e7f9      	b.n	810aaa6 <memset+0x4>
	...

0810aab4 <_sbrk_r>:
 810aab4:	b538      	push	{r3, r4, r5, lr}
 810aab6:	4d06      	ldr	r5, [pc, #24]	@ (810aad0 <_sbrk_r+0x1c>)
 810aab8:	2300      	movs	r3, #0
 810aaba:	4604      	mov	r4, r0
 810aabc:	4608      	mov	r0, r1
 810aabe:	602b      	str	r3, [r5, #0]
 810aac0:	f7f6 fa58 	bl	8100f74 <_sbrk>
 810aac4:	1c43      	adds	r3, r0, #1
 810aac6:	d102      	bne.n	810aace <_sbrk_r+0x1a>
 810aac8:	682b      	ldr	r3, [r5, #0]
 810aaca:	b103      	cbz	r3, 810aace <_sbrk_r+0x1a>
 810aacc:	6023      	str	r3, [r4, #0]
 810aace:	bd38      	pop	{r3, r4, r5, pc}
 810aad0:	1000073c 	.word	0x1000073c

0810aad4 <__libc_init_array>:
 810aad4:	b570      	push	{r4, r5, r6, lr}
 810aad6:	4d0d      	ldr	r5, [pc, #52]	@ (810ab0c <__libc_init_array+0x38>)
 810aad8:	4c0d      	ldr	r4, [pc, #52]	@ (810ab10 <__libc_init_array+0x3c>)
 810aada:	1b64      	subs	r4, r4, r5
 810aadc:	10a4      	asrs	r4, r4, #2
 810aade:	2600      	movs	r6, #0
 810aae0:	42a6      	cmp	r6, r4
 810aae2:	d109      	bne.n	810aaf8 <__libc_init_array+0x24>
 810aae4:	4d0b      	ldr	r5, [pc, #44]	@ (810ab14 <__libc_init_array+0x40>)
 810aae6:	4c0c      	ldr	r4, [pc, #48]	@ (810ab18 <__libc_init_array+0x44>)
 810aae8:	f000 fddc 	bl	810b6a4 <_init>
 810aaec:	1b64      	subs	r4, r4, r5
 810aaee:	10a4      	asrs	r4, r4, #2
 810aaf0:	2600      	movs	r6, #0
 810aaf2:	42a6      	cmp	r6, r4
 810aaf4:	d105      	bne.n	810ab02 <__libc_init_array+0x2e>
 810aaf6:	bd70      	pop	{r4, r5, r6, pc}
 810aaf8:	f855 3b04 	ldr.w	r3, [r5], #4
 810aafc:	4798      	blx	r3
 810aafe:	3601      	adds	r6, #1
 810ab00:	e7ee      	b.n	810aae0 <__libc_init_array+0xc>
 810ab02:	f855 3b04 	ldr.w	r3, [r5], #4
 810ab06:	4798      	blx	r3
 810ab08:	3601      	adds	r6, #1
 810ab0a:	e7f2      	b.n	810aaf2 <__libc_init_array+0x1e>
 810ab0c:	0810b9e8 	.word	0x0810b9e8
 810ab10:	0810b9e8 	.word	0x0810b9e8
 810ab14:	0810b9e8 	.word	0x0810b9e8
 810ab18:	0810b9ec 	.word	0x0810b9ec

0810ab1c <__retarget_lock_init_recursive>:
 810ab1c:	4770      	bx	lr

0810ab1e <__retarget_lock_acquire_recursive>:
 810ab1e:	4770      	bx	lr

0810ab20 <__retarget_lock_release_recursive>:
 810ab20:	4770      	bx	lr

0810ab22 <memcpy>:
 810ab22:	440a      	add	r2, r1
 810ab24:	4291      	cmp	r1, r2
 810ab26:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 810ab2a:	d100      	bne.n	810ab2e <memcpy+0xc>
 810ab2c:	4770      	bx	lr
 810ab2e:	b510      	push	{r4, lr}
 810ab30:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ab34:	f803 4f01 	strb.w	r4, [r3, #1]!
 810ab38:	4291      	cmp	r1, r2
 810ab3a:	d1f9      	bne.n	810ab30 <memcpy+0xe>
 810ab3c:	bd10      	pop	{r4, pc}

0810ab3e <abort>:
 810ab3e:	b508      	push	{r3, lr}
 810ab40:	2006      	movs	r0, #6
 810ab42:	f000 fd6f 	bl	810b624 <raise>
 810ab46:	2001      	movs	r0, #1
 810ab48:	f7f6 f99c 	bl	8100e84 <_exit>

0810ab4c <_free_r>:
 810ab4c:	b538      	push	{r3, r4, r5, lr}
 810ab4e:	4605      	mov	r5, r0
 810ab50:	2900      	cmp	r1, #0
 810ab52:	d041      	beq.n	810abd8 <_free_r+0x8c>
 810ab54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ab58:	1f0c      	subs	r4, r1, #4
 810ab5a:	2b00      	cmp	r3, #0
 810ab5c:	bfb8      	it	lt
 810ab5e:	18e4      	addlt	r4, r4, r3
 810ab60:	f7ff fe2a 	bl	810a7b8 <__malloc_lock>
 810ab64:	4a1d      	ldr	r2, [pc, #116]	@ (810abdc <_free_r+0x90>)
 810ab66:	6813      	ldr	r3, [r2, #0]
 810ab68:	b933      	cbnz	r3, 810ab78 <_free_r+0x2c>
 810ab6a:	6063      	str	r3, [r4, #4]
 810ab6c:	6014      	str	r4, [r2, #0]
 810ab6e:	4628      	mov	r0, r5
 810ab70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ab74:	f7ff be26 	b.w	810a7c4 <__malloc_unlock>
 810ab78:	42a3      	cmp	r3, r4
 810ab7a:	d908      	bls.n	810ab8e <_free_r+0x42>
 810ab7c:	6820      	ldr	r0, [r4, #0]
 810ab7e:	1821      	adds	r1, r4, r0
 810ab80:	428b      	cmp	r3, r1
 810ab82:	bf01      	itttt	eq
 810ab84:	6819      	ldreq	r1, [r3, #0]
 810ab86:	685b      	ldreq	r3, [r3, #4]
 810ab88:	1809      	addeq	r1, r1, r0
 810ab8a:	6021      	streq	r1, [r4, #0]
 810ab8c:	e7ed      	b.n	810ab6a <_free_r+0x1e>
 810ab8e:	461a      	mov	r2, r3
 810ab90:	685b      	ldr	r3, [r3, #4]
 810ab92:	b10b      	cbz	r3, 810ab98 <_free_r+0x4c>
 810ab94:	42a3      	cmp	r3, r4
 810ab96:	d9fa      	bls.n	810ab8e <_free_r+0x42>
 810ab98:	6811      	ldr	r1, [r2, #0]
 810ab9a:	1850      	adds	r0, r2, r1
 810ab9c:	42a0      	cmp	r0, r4
 810ab9e:	d10b      	bne.n	810abb8 <_free_r+0x6c>
 810aba0:	6820      	ldr	r0, [r4, #0]
 810aba2:	4401      	add	r1, r0
 810aba4:	1850      	adds	r0, r2, r1
 810aba6:	4283      	cmp	r3, r0
 810aba8:	6011      	str	r1, [r2, #0]
 810abaa:	d1e0      	bne.n	810ab6e <_free_r+0x22>
 810abac:	6818      	ldr	r0, [r3, #0]
 810abae:	685b      	ldr	r3, [r3, #4]
 810abb0:	6053      	str	r3, [r2, #4]
 810abb2:	4408      	add	r0, r1
 810abb4:	6010      	str	r0, [r2, #0]
 810abb6:	e7da      	b.n	810ab6e <_free_r+0x22>
 810abb8:	d902      	bls.n	810abc0 <_free_r+0x74>
 810abba:	230c      	movs	r3, #12
 810abbc:	602b      	str	r3, [r5, #0]
 810abbe:	e7d6      	b.n	810ab6e <_free_r+0x22>
 810abc0:	6820      	ldr	r0, [r4, #0]
 810abc2:	1821      	adds	r1, r4, r0
 810abc4:	428b      	cmp	r3, r1
 810abc6:	bf04      	itt	eq
 810abc8:	6819      	ldreq	r1, [r3, #0]
 810abca:	685b      	ldreq	r3, [r3, #4]
 810abcc:	6063      	str	r3, [r4, #4]
 810abce:	bf04      	itt	eq
 810abd0:	1809      	addeq	r1, r1, r0
 810abd2:	6021      	streq	r1, [r4, #0]
 810abd4:	6054      	str	r4, [r2, #4]
 810abd6:	e7ca      	b.n	810ab6e <_free_r+0x22>
 810abd8:	bd38      	pop	{r3, r4, r5, pc}
 810abda:	bf00      	nop
 810abdc:	100005fc 	.word	0x100005fc

0810abe0 <__sfputc_r>:
 810abe0:	6893      	ldr	r3, [r2, #8]
 810abe2:	3b01      	subs	r3, #1
 810abe4:	2b00      	cmp	r3, #0
 810abe6:	b410      	push	{r4}
 810abe8:	6093      	str	r3, [r2, #8]
 810abea:	da08      	bge.n	810abfe <__sfputc_r+0x1e>
 810abec:	6994      	ldr	r4, [r2, #24]
 810abee:	42a3      	cmp	r3, r4
 810abf0:	db01      	blt.n	810abf6 <__sfputc_r+0x16>
 810abf2:	290a      	cmp	r1, #10
 810abf4:	d103      	bne.n	810abfe <__sfputc_r+0x1e>
 810abf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 810abfa:	f000 bbb0 	b.w	810b35e <__swbuf_r>
 810abfe:	6813      	ldr	r3, [r2, #0]
 810ac00:	1c58      	adds	r0, r3, #1
 810ac02:	6010      	str	r0, [r2, #0]
 810ac04:	7019      	strb	r1, [r3, #0]
 810ac06:	4608      	mov	r0, r1
 810ac08:	f85d 4b04 	ldr.w	r4, [sp], #4
 810ac0c:	4770      	bx	lr

0810ac0e <__sfputs_r>:
 810ac0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ac10:	4606      	mov	r6, r0
 810ac12:	460f      	mov	r7, r1
 810ac14:	4614      	mov	r4, r2
 810ac16:	18d5      	adds	r5, r2, r3
 810ac18:	42ac      	cmp	r4, r5
 810ac1a:	d101      	bne.n	810ac20 <__sfputs_r+0x12>
 810ac1c:	2000      	movs	r0, #0
 810ac1e:	e007      	b.n	810ac30 <__sfputs_r+0x22>
 810ac20:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ac24:	463a      	mov	r2, r7
 810ac26:	4630      	mov	r0, r6
 810ac28:	f7ff ffda 	bl	810abe0 <__sfputc_r>
 810ac2c:	1c43      	adds	r3, r0, #1
 810ac2e:	d1f3      	bne.n	810ac18 <__sfputs_r+0xa>
 810ac30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810ac34 <_vfiprintf_r>:
 810ac34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ac38:	460d      	mov	r5, r1
 810ac3a:	b09d      	sub	sp, #116	@ 0x74
 810ac3c:	4614      	mov	r4, r2
 810ac3e:	4698      	mov	r8, r3
 810ac40:	4606      	mov	r6, r0
 810ac42:	b118      	cbz	r0, 810ac4c <_vfiprintf_r+0x18>
 810ac44:	6a03      	ldr	r3, [r0, #32]
 810ac46:	b90b      	cbnz	r3, 810ac4c <_vfiprintf_r+0x18>
 810ac48:	f7ff fe4e 	bl	810a8e8 <__sinit>
 810ac4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810ac4e:	07d9      	lsls	r1, r3, #31
 810ac50:	d405      	bmi.n	810ac5e <_vfiprintf_r+0x2a>
 810ac52:	89ab      	ldrh	r3, [r5, #12]
 810ac54:	059a      	lsls	r2, r3, #22
 810ac56:	d402      	bmi.n	810ac5e <_vfiprintf_r+0x2a>
 810ac58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810ac5a:	f7ff ff60 	bl	810ab1e <__retarget_lock_acquire_recursive>
 810ac5e:	89ab      	ldrh	r3, [r5, #12]
 810ac60:	071b      	lsls	r3, r3, #28
 810ac62:	d501      	bpl.n	810ac68 <_vfiprintf_r+0x34>
 810ac64:	692b      	ldr	r3, [r5, #16]
 810ac66:	b99b      	cbnz	r3, 810ac90 <_vfiprintf_r+0x5c>
 810ac68:	4629      	mov	r1, r5
 810ac6a:	4630      	mov	r0, r6
 810ac6c:	f000 fbb6 	bl	810b3dc <__swsetup_r>
 810ac70:	b170      	cbz	r0, 810ac90 <_vfiprintf_r+0x5c>
 810ac72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810ac74:	07dc      	lsls	r4, r3, #31
 810ac76:	d504      	bpl.n	810ac82 <_vfiprintf_r+0x4e>
 810ac78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810ac7c:	b01d      	add	sp, #116	@ 0x74
 810ac7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ac82:	89ab      	ldrh	r3, [r5, #12]
 810ac84:	0598      	lsls	r0, r3, #22
 810ac86:	d4f7      	bmi.n	810ac78 <_vfiprintf_r+0x44>
 810ac88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810ac8a:	f7ff ff49 	bl	810ab20 <__retarget_lock_release_recursive>
 810ac8e:	e7f3      	b.n	810ac78 <_vfiprintf_r+0x44>
 810ac90:	2300      	movs	r3, #0
 810ac92:	9309      	str	r3, [sp, #36]	@ 0x24
 810ac94:	2320      	movs	r3, #32
 810ac96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810ac9a:	f8cd 800c 	str.w	r8, [sp, #12]
 810ac9e:	2330      	movs	r3, #48	@ 0x30
 810aca0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810ae50 <_vfiprintf_r+0x21c>
 810aca4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810aca8:	f04f 0901 	mov.w	r9, #1
 810acac:	4623      	mov	r3, r4
 810acae:	469a      	mov	sl, r3
 810acb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 810acb4:	b10a      	cbz	r2, 810acba <_vfiprintf_r+0x86>
 810acb6:	2a25      	cmp	r2, #37	@ 0x25
 810acb8:	d1f9      	bne.n	810acae <_vfiprintf_r+0x7a>
 810acba:	ebba 0b04 	subs.w	fp, sl, r4
 810acbe:	d00b      	beq.n	810acd8 <_vfiprintf_r+0xa4>
 810acc0:	465b      	mov	r3, fp
 810acc2:	4622      	mov	r2, r4
 810acc4:	4629      	mov	r1, r5
 810acc6:	4630      	mov	r0, r6
 810acc8:	f7ff ffa1 	bl	810ac0e <__sfputs_r>
 810accc:	3001      	adds	r0, #1
 810acce:	f000 80a7 	beq.w	810ae20 <_vfiprintf_r+0x1ec>
 810acd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810acd4:	445a      	add	r2, fp
 810acd6:	9209      	str	r2, [sp, #36]	@ 0x24
 810acd8:	f89a 3000 	ldrb.w	r3, [sl]
 810acdc:	2b00      	cmp	r3, #0
 810acde:	f000 809f 	beq.w	810ae20 <_vfiprintf_r+0x1ec>
 810ace2:	2300      	movs	r3, #0
 810ace4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810ace8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810acec:	f10a 0a01 	add.w	sl, sl, #1
 810acf0:	9304      	str	r3, [sp, #16]
 810acf2:	9307      	str	r3, [sp, #28]
 810acf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810acf8:	931a      	str	r3, [sp, #104]	@ 0x68
 810acfa:	4654      	mov	r4, sl
 810acfc:	2205      	movs	r2, #5
 810acfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ad02:	4853      	ldr	r0, [pc, #332]	@ (810ae50 <_vfiprintf_r+0x21c>)
 810ad04:	f7f5 fafc 	bl	8100300 <memchr>
 810ad08:	9a04      	ldr	r2, [sp, #16]
 810ad0a:	b9d8      	cbnz	r0, 810ad44 <_vfiprintf_r+0x110>
 810ad0c:	06d1      	lsls	r1, r2, #27
 810ad0e:	bf44      	itt	mi
 810ad10:	2320      	movmi	r3, #32
 810ad12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810ad16:	0713      	lsls	r3, r2, #28
 810ad18:	bf44      	itt	mi
 810ad1a:	232b      	movmi	r3, #43	@ 0x2b
 810ad1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810ad20:	f89a 3000 	ldrb.w	r3, [sl]
 810ad24:	2b2a      	cmp	r3, #42	@ 0x2a
 810ad26:	d015      	beq.n	810ad54 <_vfiprintf_r+0x120>
 810ad28:	9a07      	ldr	r2, [sp, #28]
 810ad2a:	4654      	mov	r4, sl
 810ad2c:	2000      	movs	r0, #0
 810ad2e:	f04f 0c0a 	mov.w	ip, #10
 810ad32:	4621      	mov	r1, r4
 810ad34:	f811 3b01 	ldrb.w	r3, [r1], #1
 810ad38:	3b30      	subs	r3, #48	@ 0x30
 810ad3a:	2b09      	cmp	r3, #9
 810ad3c:	d94b      	bls.n	810add6 <_vfiprintf_r+0x1a2>
 810ad3e:	b1b0      	cbz	r0, 810ad6e <_vfiprintf_r+0x13a>
 810ad40:	9207      	str	r2, [sp, #28]
 810ad42:	e014      	b.n	810ad6e <_vfiprintf_r+0x13a>
 810ad44:	eba0 0308 	sub.w	r3, r0, r8
 810ad48:	fa09 f303 	lsl.w	r3, r9, r3
 810ad4c:	4313      	orrs	r3, r2
 810ad4e:	9304      	str	r3, [sp, #16]
 810ad50:	46a2      	mov	sl, r4
 810ad52:	e7d2      	b.n	810acfa <_vfiprintf_r+0xc6>
 810ad54:	9b03      	ldr	r3, [sp, #12]
 810ad56:	1d19      	adds	r1, r3, #4
 810ad58:	681b      	ldr	r3, [r3, #0]
 810ad5a:	9103      	str	r1, [sp, #12]
 810ad5c:	2b00      	cmp	r3, #0
 810ad5e:	bfbb      	ittet	lt
 810ad60:	425b      	neglt	r3, r3
 810ad62:	f042 0202 	orrlt.w	r2, r2, #2
 810ad66:	9307      	strge	r3, [sp, #28]
 810ad68:	9307      	strlt	r3, [sp, #28]
 810ad6a:	bfb8      	it	lt
 810ad6c:	9204      	strlt	r2, [sp, #16]
 810ad6e:	7823      	ldrb	r3, [r4, #0]
 810ad70:	2b2e      	cmp	r3, #46	@ 0x2e
 810ad72:	d10a      	bne.n	810ad8a <_vfiprintf_r+0x156>
 810ad74:	7863      	ldrb	r3, [r4, #1]
 810ad76:	2b2a      	cmp	r3, #42	@ 0x2a
 810ad78:	d132      	bne.n	810ade0 <_vfiprintf_r+0x1ac>
 810ad7a:	9b03      	ldr	r3, [sp, #12]
 810ad7c:	1d1a      	adds	r2, r3, #4
 810ad7e:	681b      	ldr	r3, [r3, #0]
 810ad80:	9203      	str	r2, [sp, #12]
 810ad82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810ad86:	3402      	adds	r4, #2
 810ad88:	9305      	str	r3, [sp, #20]
 810ad8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810ae60 <_vfiprintf_r+0x22c>
 810ad8e:	7821      	ldrb	r1, [r4, #0]
 810ad90:	2203      	movs	r2, #3
 810ad92:	4650      	mov	r0, sl
 810ad94:	f7f5 fab4 	bl	8100300 <memchr>
 810ad98:	b138      	cbz	r0, 810adaa <_vfiprintf_r+0x176>
 810ad9a:	9b04      	ldr	r3, [sp, #16]
 810ad9c:	eba0 000a 	sub.w	r0, r0, sl
 810ada0:	2240      	movs	r2, #64	@ 0x40
 810ada2:	4082      	lsls	r2, r0
 810ada4:	4313      	orrs	r3, r2
 810ada6:	3401      	adds	r4, #1
 810ada8:	9304      	str	r3, [sp, #16]
 810adaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 810adae:	4829      	ldr	r0, [pc, #164]	@ (810ae54 <_vfiprintf_r+0x220>)
 810adb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810adb4:	2206      	movs	r2, #6
 810adb6:	f7f5 faa3 	bl	8100300 <memchr>
 810adba:	2800      	cmp	r0, #0
 810adbc:	d03f      	beq.n	810ae3e <_vfiprintf_r+0x20a>
 810adbe:	4b26      	ldr	r3, [pc, #152]	@ (810ae58 <_vfiprintf_r+0x224>)
 810adc0:	bb1b      	cbnz	r3, 810ae0a <_vfiprintf_r+0x1d6>
 810adc2:	9b03      	ldr	r3, [sp, #12]
 810adc4:	3307      	adds	r3, #7
 810adc6:	f023 0307 	bic.w	r3, r3, #7
 810adca:	3308      	adds	r3, #8
 810adcc:	9303      	str	r3, [sp, #12]
 810adce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810add0:	443b      	add	r3, r7
 810add2:	9309      	str	r3, [sp, #36]	@ 0x24
 810add4:	e76a      	b.n	810acac <_vfiprintf_r+0x78>
 810add6:	fb0c 3202 	mla	r2, ip, r2, r3
 810adda:	460c      	mov	r4, r1
 810addc:	2001      	movs	r0, #1
 810adde:	e7a8      	b.n	810ad32 <_vfiprintf_r+0xfe>
 810ade0:	2300      	movs	r3, #0
 810ade2:	3401      	adds	r4, #1
 810ade4:	9305      	str	r3, [sp, #20]
 810ade6:	4619      	mov	r1, r3
 810ade8:	f04f 0c0a 	mov.w	ip, #10
 810adec:	4620      	mov	r0, r4
 810adee:	f810 2b01 	ldrb.w	r2, [r0], #1
 810adf2:	3a30      	subs	r2, #48	@ 0x30
 810adf4:	2a09      	cmp	r2, #9
 810adf6:	d903      	bls.n	810ae00 <_vfiprintf_r+0x1cc>
 810adf8:	2b00      	cmp	r3, #0
 810adfa:	d0c6      	beq.n	810ad8a <_vfiprintf_r+0x156>
 810adfc:	9105      	str	r1, [sp, #20]
 810adfe:	e7c4      	b.n	810ad8a <_vfiprintf_r+0x156>
 810ae00:	fb0c 2101 	mla	r1, ip, r1, r2
 810ae04:	4604      	mov	r4, r0
 810ae06:	2301      	movs	r3, #1
 810ae08:	e7f0      	b.n	810adec <_vfiprintf_r+0x1b8>
 810ae0a:	ab03      	add	r3, sp, #12
 810ae0c:	9300      	str	r3, [sp, #0]
 810ae0e:	462a      	mov	r2, r5
 810ae10:	4b12      	ldr	r3, [pc, #72]	@ (810ae5c <_vfiprintf_r+0x228>)
 810ae12:	a904      	add	r1, sp, #16
 810ae14:	4630      	mov	r0, r6
 810ae16:	f3af 8000 	nop.w
 810ae1a:	4607      	mov	r7, r0
 810ae1c:	1c78      	adds	r0, r7, #1
 810ae1e:	d1d6      	bne.n	810adce <_vfiprintf_r+0x19a>
 810ae20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810ae22:	07d9      	lsls	r1, r3, #31
 810ae24:	d405      	bmi.n	810ae32 <_vfiprintf_r+0x1fe>
 810ae26:	89ab      	ldrh	r3, [r5, #12]
 810ae28:	059a      	lsls	r2, r3, #22
 810ae2a:	d402      	bmi.n	810ae32 <_vfiprintf_r+0x1fe>
 810ae2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810ae2e:	f7ff fe77 	bl	810ab20 <__retarget_lock_release_recursive>
 810ae32:	89ab      	ldrh	r3, [r5, #12]
 810ae34:	065b      	lsls	r3, r3, #25
 810ae36:	f53f af1f 	bmi.w	810ac78 <_vfiprintf_r+0x44>
 810ae3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810ae3c:	e71e      	b.n	810ac7c <_vfiprintf_r+0x48>
 810ae3e:	ab03      	add	r3, sp, #12
 810ae40:	9300      	str	r3, [sp, #0]
 810ae42:	462a      	mov	r2, r5
 810ae44:	4b05      	ldr	r3, [pc, #20]	@ (810ae5c <_vfiprintf_r+0x228>)
 810ae46:	a904      	add	r1, sp, #16
 810ae48:	4630      	mov	r0, r6
 810ae4a:	f000 f879 	bl	810af40 <_printf_i>
 810ae4e:	e7e4      	b.n	810ae1a <_vfiprintf_r+0x1e6>
 810ae50:	0810b9ad 	.word	0x0810b9ad
 810ae54:	0810b9b7 	.word	0x0810b9b7
 810ae58:	00000000 	.word	0x00000000
 810ae5c:	0810ac0f 	.word	0x0810ac0f
 810ae60:	0810b9b3 	.word	0x0810b9b3

0810ae64 <_printf_common>:
 810ae64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ae68:	4616      	mov	r6, r2
 810ae6a:	4698      	mov	r8, r3
 810ae6c:	688a      	ldr	r2, [r1, #8]
 810ae6e:	690b      	ldr	r3, [r1, #16]
 810ae70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810ae74:	4293      	cmp	r3, r2
 810ae76:	bfb8      	it	lt
 810ae78:	4613      	movlt	r3, r2
 810ae7a:	6033      	str	r3, [r6, #0]
 810ae7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810ae80:	4607      	mov	r7, r0
 810ae82:	460c      	mov	r4, r1
 810ae84:	b10a      	cbz	r2, 810ae8a <_printf_common+0x26>
 810ae86:	3301      	adds	r3, #1
 810ae88:	6033      	str	r3, [r6, #0]
 810ae8a:	6823      	ldr	r3, [r4, #0]
 810ae8c:	0699      	lsls	r1, r3, #26
 810ae8e:	bf42      	ittt	mi
 810ae90:	6833      	ldrmi	r3, [r6, #0]
 810ae92:	3302      	addmi	r3, #2
 810ae94:	6033      	strmi	r3, [r6, #0]
 810ae96:	6825      	ldr	r5, [r4, #0]
 810ae98:	f015 0506 	ands.w	r5, r5, #6
 810ae9c:	d106      	bne.n	810aeac <_printf_common+0x48>
 810ae9e:	f104 0a19 	add.w	sl, r4, #25
 810aea2:	68e3      	ldr	r3, [r4, #12]
 810aea4:	6832      	ldr	r2, [r6, #0]
 810aea6:	1a9b      	subs	r3, r3, r2
 810aea8:	42ab      	cmp	r3, r5
 810aeaa:	dc26      	bgt.n	810aefa <_printf_common+0x96>
 810aeac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810aeb0:	6822      	ldr	r2, [r4, #0]
 810aeb2:	3b00      	subs	r3, #0
 810aeb4:	bf18      	it	ne
 810aeb6:	2301      	movne	r3, #1
 810aeb8:	0692      	lsls	r2, r2, #26
 810aeba:	d42b      	bmi.n	810af14 <_printf_common+0xb0>
 810aebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810aec0:	4641      	mov	r1, r8
 810aec2:	4638      	mov	r0, r7
 810aec4:	47c8      	blx	r9
 810aec6:	3001      	adds	r0, #1
 810aec8:	d01e      	beq.n	810af08 <_printf_common+0xa4>
 810aeca:	6823      	ldr	r3, [r4, #0]
 810aecc:	6922      	ldr	r2, [r4, #16]
 810aece:	f003 0306 	and.w	r3, r3, #6
 810aed2:	2b04      	cmp	r3, #4
 810aed4:	bf02      	ittt	eq
 810aed6:	68e5      	ldreq	r5, [r4, #12]
 810aed8:	6833      	ldreq	r3, [r6, #0]
 810aeda:	1aed      	subeq	r5, r5, r3
 810aedc:	68a3      	ldr	r3, [r4, #8]
 810aede:	bf0c      	ite	eq
 810aee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810aee4:	2500      	movne	r5, #0
 810aee6:	4293      	cmp	r3, r2
 810aee8:	bfc4      	itt	gt
 810aeea:	1a9b      	subgt	r3, r3, r2
 810aeec:	18ed      	addgt	r5, r5, r3
 810aeee:	2600      	movs	r6, #0
 810aef0:	341a      	adds	r4, #26
 810aef2:	42b5      	cmp	r5, r6
 810aef4:	d11a      	bne.n	810af2c <_printf_common+0xc8>
 810aef6:	2000      	movs	r0, #0
 810aef8:	e008      	b.n	810af0c <_printf_common+0xa8>
 810aefa:	2301      	movs	r3, #1
 810aefc:	4652      	mov	r2, sl
 810aefe:	4641      	mov	r1, r8
 810af00:	4638      	mov	r0, r7
 810af02:	47c8      	blx	r9
 810af04:	3001      	adds	r0, #1
 810af06:	d103      	bne.n	810af10 <_printf_common+0xac>
 810af08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810af0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810af10:	3501      	adds	r5, #1
 810af12:	e7c6      	b.n	810aea2 <_printf_common+0x3e>
 810af14:	18e1      	adds	r1, r4, r3
 810af16:	1c5a      	adds	r2, r3, #1
 810af18:	2030      	movs	r0, #48	@ 0x30
 810af1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810af1e:	4422      	add	r2, r4
 810af20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810af24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810af28:	3302      	adds	r3, #2
 810af2a:	e7c7      	b.n	810aebc <_printf_common+0x58>
 810af2c:	2301      	movs	r3, #1
 810af2e:	4622      	mov	r2, r4
 810af30:	4641      	mov	r1, r8
 810af32:	4638      	mov	r0, r7
 810af34:	47c8      	blx	r9
 810af36:	3001      	adds	r0, #1
 810af38:	d0e6      	beq.n	810af08 <_printf_common+0xa4>
 810af3a:	3601      	adds	r6, #1
 810af3c:	e7d9      	b.n	810aef2 <_printf_common+0x8e>
	...

0810af40 <_printf_i>:
 810af40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810af44:	7e0f      	ldrb	r7, [r1, #24]
 810af46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810af48:	2f78      	cmp	r7, #120	@ 0x78
 810af4a:	4691      	mov	r9, r2
 810af4c:	4680      	mov	r8, r0
 810af4e:	460c      	mov	r4, r1
 810af50:	469a      	mov	sl, r3
 810af52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810af56:	d807      	bhi.n	810af68 <_printf_i+0x28>
 810af58:	2f62      	cmp	r7, #98	@ 0x62
 810af5a:	d80a      	bhi.n	810af72 <_printf_i+0x32>
 810af5c:	2f00      	cmp	r7, #0
 810af5e:	f000 80d2 	beq.w	810b106 <_printf_i+0x1c6>
 810af62:	2f58      	cmp	r7, #88	@ 0x58
 810af64:	f000 80b9 	beq.w	810b0da <_printf_i+0x19a>
 810af68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810af6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810af70:	e03a      	b.n	810afe8 <_printf_i+0xa8>
 810af72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810af76:	2b15      	cmp	r3, #21
 810af78:	d8f6      	bhi.n	810af68 <_printf_i+0x28>
 810af7a:	a101      	add	r1, pc, #4	@ (adr r1, 810af80 <_printf_i+0x40>)
 810af7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810af80:	0810afd9 	.word	0x0810afd9
 810af84:	0810afed 	.word	0x0810afed
 810af88:	0810af69 	.word	0x0810af69
 810af8c:	0810af69 	.word	0x0810af69
 810af90:	0810af69 	.word	0x0810af69
 810af94:	0810af69 	.word	0x0810af69
 810af98:	0810afed 	.word	0x0810afed
 810af9c:	0810af69 	.word	0x0810af69
 810afa0:	0810af69 	.word	0x0810af69
 810afa4:	0810af69 	.word	0x0810af69
 810afa8:	0810af69 	.word	0x0810af69
 810afac:	0810b0ed 	.word	0x0810b0ed
 810afb0:	0810b017 	.word	0x0810b017
 810afb4:	0810b0a7 	.word	0x0810b0a7
 810afb8:	0810af69 	.word	0x0810af69
 810afbc:	0810af69 	.word	0x0810af69
 810afc0:	0810b10f 	.word	0x0810b10f
 810afc4:	0810af69 	.word	0x0810af69
 810afc8:	0810b017 	.word	0x0810b017
 810afcc:	0810af69 	.word	0x0810af69
 810afd0:	0810af69 	.word	0x0810af69
 810afd4:	0810b0af 	.word	0x0810b0af
 810afd8:	6833      	ldr	r3, [r6, #0]
 810afda:	1d1a      	adds	r2, r3, #4
 810afdc:	681b      	ldr	r3, [r3, #0]
 810afde:	6032      	str	r2, [r6, #0]
 810afe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810afe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810afe8:	2301      	movs	r3, #1
 810afea:	e09d      	b.n	810b128 <_printf_i+0x1e8>
 810afec:	6833      	ldr	r3, [r6, #0]
 810afee:	6820      	ldr	r0, [r4, #0]
 810aff0:	1d19      	adds	r1, r3, #4
 810aff2:	6031      	str	r1, [r6, #0]
 810aff4:	0606      	lsls	r6, r0, #24
 810aff6:	d501      	bpl.n	810affc <_printf_i+0xbc>
 810aff8:	681d      	ldr	r5, [r3, #0]
 810affa:	e003      	b.n	810b004 <_printf_i+0xc4>
 810affc:	0645      	lsls	r5, r0, #25
 810affe:	d5fb      	bpl.n	810aff8 <_printf_i+0xb8>
 810b000:	f9b3 5000 	ldrsh.w	r5, [r3]
 810b004:	2d00      	cmp	r5, #0
 810b006:	da03      	bge.n	810b010 <_printf_i+0xd0>
 810b008:	232d      	movs	r3, #45	@ 0x2d
 810b00a:	426d      	negs	r5, r5
 810b00c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810b010:	4859      	ldr	r0, [pc, #356]	@ (810b178 <_printf_i+0x238>)
 810b012:	230a      	movs	r3, #10
 810b014:	e011      	b.n	810b03a <_printf_i+0xfa>
 810b016:	6821      	ldr	r1, [r4, #0]
 810b018:	6833      	ldr	r3, [r6, #0]
 810b01a:	0608      	lsls	r0, r1, #24
 810b01c:	f853 5b04 	ldr.w	r5, [r3], #4
 810b020:	d402      	bmi.n	810b028 <_printf_i+0xe8>
 810b022:	0649      	lsls	r1, r1, #25
 810b024:	bf48      	it	mi
 810b026:	b2ad      	uxthmi	r5, r5
 810b028:	2f6f      	cmp	r7, #111	@ 0x6f
 810b02a:	4853      	ldr	r0, [pc, #332]	@ (810b178 <_printf_i+0x238>)
 810b02c:	6033      	str	r3, [r6, #0]
 810b02e:	bf14      	ite	ne
 810b030:	230a      	movne	r3, #10
 810b032:	2308      	moveq	r3, #8
 810b034:	2100      	movs	r1, #0
 810b036:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810b03a:	6866      	ldr	r6, [r4, #4]
 810b03c:	60a6      	str	r6, [r4, #8]
 810b03e:	2e00      	cmp	r6, #0
 810b040:	bfa2      	ittt	ge
 810b042:	6821      	ldrge	r1, [r4, #0]
 810b044:	f021 0104 	bicge.w	r1, r1, #4
 810b048:	6021      	strge	r1, [r4, #0]
 810b04a:	b90d      	cbnz	r5, 810b050 <_printf_i+0x110>
 810b04c:	2e00      	cmp	r6, #0
 810b04e:	d04b      	beq.n	810b0e8 <_printf_i+0x1a8>
 810b050:	4616      	mov	r6, r2
 810b052:	fbb5 f1f3 	udiv	r1, r5, r3
 810b056:	fb03 5711 	mls	r7, r3, r1, r5
 810b05a:	5dc7      	ldrb	r7, [r0, r7]
 810b05c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810b060:	462f      	mov	r7, r5
 810b062:	42bb      	cmp	r3, r7
 810b064:	460d      	mov	r5, r1
 810b066:	d9f4      	bls.n	810b052 <_printf_i+0x112>
 810b068:	2b08      	cmp	r3, #8
 810b06a:	d10b      	bne.n	810b084 <_printf_i+0x144>
 810b06c:	6823      	ldr	r3, [r4, #0]
 810b06e:	07df      	lsls	r7, r3, #31
 810b070:	d508      	bpl.n	810b084 <_printf_i+0x144>
 810b072:	6923      	ldr	r3, [r4, #16]
 810b074:	6861      	ldr	r1, [r4, #4]
 810b076:	4299      	cmp	r1, r3
 810b078:	bfde      	ittt	le
 810b07a:	2330      	movle	r3, #48	@ 0x30
 810b07c:	f806 3c01 	strble.w	r3, [r6, #-1]
 810b080:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 810b084:	1b92      	subs	r2, r2, r6
 810b086:	6122      	str	r2, [r4, #16]
 810b088:	f8cd a000 	str.w	sl, [sp]
 810b08c:	464b      	mov	r3, r9
 810b08e:	aa03      	add	r2, sp, #12
 810b090:	4621      	mov	r1, r4
 810b092:	4640      	mov	r0, r8
 810b094:	f7ff fee6 	bl	810ae64 <_printf_common>
 810b098:	3001      	adds	r0, #1
 810b09a:	d14a      	bne.n	810b132 <_printf_i+0x1f2>
 810b09c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810b0a0:	b004      	add	sp, #16
 810b0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b0a6:	6823      	ldr	r3, [r4, #0]
 810b0a8:	f043 0320 	orr.w	r3, r3, #32
 810b0ac:	6023      	str	r3, [r4, #0]
 810b0ae:	4833      	ldr	r0, [pc, #204]	@ (810b17c <_printf_i+0x23c>)
 810b0b0:	2778      	movs	r7, #120	@ 0x78
 810b0b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810b0b6:	6823      	ldr	r3, [r4, #0]
 810b0b8:	6831      	ldr	r1, [r6, #0]
 810b0ba:	061f      	lsls	r7, r3, #24
 810b0bc:	f851 5b04 	ldr.w	r5, [r1], #4
 810b0c0:	d402      	bmi.n	810b0c8 <_printf_i+0x188>
 810b0c2:	065f      	lsls	r7, r3, #25
 810b0c4:	bf48      	it	mi
 810b0c6:	b2ad      	uxthmi	r5, r5
 810b0c8:	6031      	str	r1, [r6, #0]
 810b0ca:	07d9      	lsls	r1, r3, #31
 810b0cc:	bf44      	itt	mi
 810b0ce:	f043 0320 	orrmi.w	r3, r3, #32
 810b0d2:	6023      	strmi	r3, [r4, #0]
 810b0d4:	b11d      	cbz	r5, 810b0de <_printf_i+0x19e>
 810b0d6:	2310      	movs	r3, #16
 810b0d8:	e7ac      	b.n	810b034 <_printf_i+0xf4>
 810b0da:	4827      	ldr	r0, [pc, #156]	@ (810b178 <_printf_i+0x238>)
 810b0dc:	e7e9      	b.n	810b0b2 <_printf_i+0x172>
 810b0de:	6823      	ldr	r3, [r4, #0]
 810b0e0:	f023 0320 	bic.w	r3, r3, #32
 810b0e4:	6023      	str	r3, [r4, #0]
 810b0e6:	e7f6      	b.n	810b0d6 <_printf_i+0x196>
 810b0e8:	4616      	mov	r6, r2
 810b0ea:	e7bd      	b.n	810b068 <_printf_i+0x128>
 810b0ec:	6833      	ldr	r3, [r6, #0]
 810b0ee:	6825      	ldr	r5, [r4, #0]
 810b0f0:	6961      	ldr	r1, [r4, #20]
 810b0f2:	1d18      	adds	r0, r3, #4
 810b0f4:	6030      	str	r0, [r6, #0]
 810b0f6:	062e      	lsls	r6, r5, #24
 810b0f8:	681b      	ldr	r3, [r3, #0]
 810b0fa:	d501      	bpl.n	810b100 <_printf_i+0x1c0>
 810b0fc:	6019      	str	r1, [r3, #0]
 810b0fe:	e002      	b.n	810b106 <_printf_i+0x1c6>
 810b100:	0668      	lsls	r0, r5, #25
 810b102:	d5fb      	bpl.n	810b0fc <_printf_i+0x1bc>
 810b104:	8019      	strh	r1, [r3, #0]
 810b106:	2300      	movs	r3, #0
 810b108:	6123      	str	r3, [r4, #16]
 810b10a:	4616      	mov	r6, r2
 810b10c:	e7bc      	b.n	810b088 <_printf_i+0x148>
 810b10e:	6833      	ldr	r3, [r6, #0]
 810b110:	1d1a      	adds	r2, r3, #4
 810b112:	6032      	str	r2, [r6, #0]
 810b114:	681e      	ldr	r6, [r3, #0]
 810b116:	6862      	ldr	r2, [r4, #4]
 810b118:	2100      	movs	r1, #0
 810b11a:	4630      	mov	r0, r6
 810b11c:	f7f5 f8f0 	bl	8100300 <memchr>
 810b120:	b108      	cbz	r0, 810b126 <_printf_i+0x1e6>
 810b122:	1b80      	subs	r0, r0, r6
 810b124:	6060      	str	r0, [r4, #4]
 810b126:	6863      	ldr	r3, [r4, #4]
 810b128:	6123      	str	r3, [r4, #16]
 810b12a:	2300      	movs	r3, #0
 810b12c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810b130:	e7aa      	b.n	810b088 <_printf_i+0x148>
 810b132:	6923      	ldr	r3, [r4, #16]
 810b134:	4632      	mov	r2, r6
 810b136:	4649      	mov	r1, r9
 810b138:	4640      	mov	r0, r8
 810b13a:	47d0      	blx	sl
 810b13c:	3001      	adds	r0, #1
 810b13e:	d0ad      	beq.n	810b09c <_printf_i+0x15c>
 810b140:	6823      	ldr	r3, [r4, #0]
 810b142:	079b      	lsls	r3, r3, #30
 810b144:	d413      	bmi.n	810b16e <_printf_i+0x22e>
 810b146:	68e0      	ldr	r0, [r4, #12]
 810b148:	9b03      	ldr	r3, [sp, #12]
 810b14a:	4298      	cmp	r0, r3
 810b14c:	bfb8      	it	lt
 810b14e:	4618      	movlt	r0, r3
 810b150:	e7a6      	b.n	810b0a0 <_printf_i+0x160>
 810b152:	2301      	movs	r3, #1
 810b154:	4632      	mov	r2, r6
 810b156:	4649      	mov	r1, r9
 810b158:	4640      	mov	r0, r8
 810b15a:	47d0      	blx	sl
 810b15c:	3001      	adds	r0, #1
 810b15e:	d09d      	beq.n	810b09c <_printf_i+0x15c>
 810b160:	3501      	adds	r5, #1
 810b162:	68e3      	ldr	r3, [r4, #12]
 810b164:	9903      	ldr	r1, [sp, #12]
 810b166:	1a5b      	subs	r3, r3, r1
 810b168:	42ab      	cmp	r3, r5
 810b16a:	dcf2      	bgt.n	810b152 <_printf_i+0x212>
 810b16c:	e7eb      	b.n	810b146 <_printf_i+0x206>
 810b16e:	2500      	movs	r5, #0
 810b170:	f104 0619 	add.w	r6, r4, #25
 810b174:	e7f5      	b.n	810b162 <_printf_i+0x222>
 810b176:	bf00      	nop
 810b178:	0810b9be 	.word	0x0810b9be
 810b17c:	0810b9cf 	.word	0x0810b9cf

0810b180 <__sflush_r>:
 810b180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810b184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b188:	0716      	lsls	r6, r2, #28
 810b18a:	4605      	mov	r5, r0
 810b18c:	460c      	mov	r4, r1
 810b18e:	d454      	bmi.n	810b23a <__sflush_r+0xba>
 810b190:	684b      	ldr	r3, [r1, #4]
 810b192:	2b00      	cmp	r3, #0
 810b194:	dc02      	bgt.n	810b19c <__sflush_r+0x1c>
 810b196:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810b198:	2b00      	cmp	r3, #0
 810b19a:	dd48      	ble.n	810b22e <__sflush_r+0xae>
 810b19c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810b19e:	2e00      	cmp	r6, #0
 810b1a0:	d045      	beq.n	810b22e <__sflush_r+0xae>
 810b1a2:	2300      	movs	r3, #0
 810b1a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810b1a8:	682f      	ldr	r7, [r5, #0]
 810b1aa:	6a21      	ldr	r1, [r4, #32]
 810b1ac:	602b      	str	r3, [r5, #0]
 810b1ae:	d030      	beq.n	810b212 <__sflush_r+0x92>
 810b1b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810b1b2:	89a3      	ldrh	r3, [r4, #12]
 810b1b4:	0759      	lsls	r1, r3, #29
 810b1b6:	d505      	bpl.n	810b1c4 <__sflush_r+0x44>
 810b1b8:	6863      	ldr	r3, [r4, #4]
 810b1ba:	1ad2      	subs	r2, r2, r3
 810b1bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810b1be:	b10b      	cbz	r3, 810b1c4 <__sflush_r+0x44>
 810b1c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810b1c2:	1ad2      	subs	r2, r2, r3
 810b1c4:	2300      	movs	r3, #0
 810b1c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810b1c8:	6a21      	ldr	r1, [r4, #32]
 810b1ca:	4628      	mov	r0, r5
 810b1cc:	47b0      	blx	r6
 810b1ce:	1c43      	adds	r3, r0, #1
 810b1d0:	89a3      	ldrh	r3, [r4, #12]
 810b1d2:	d106      	bne.n	810b1e2 <__sflush_r+0x62>
 810b1d4:	6829      	ldr	r1, [r5, #0]
 810b1d6:	291d      	cmp	r1, #29
 810b1d8:	d82b      	bhi.n	810b232 <__sflush_r+0xb2>
 810b1da:	4a2a      	ldr	r2, [pc, #168]	@ (810b284 <__sflush_r+0x104>)
 810b1dc:	410a      	asrs	r2, r1
 810b1de:	07d6      	lsls	r6, r2, #31
 810b1e0:	d427      	bmi.n	810b232 <__sflush_r+0xb2>
 810b1e2:	2200      	movs	r2, #0
 810b1e4:	6062      	str	r2, [r4, #4]
 810b1e6:	04d9      	lsls	r1, r3, #19
 810b1e8:	6922      	ldr	r2, [r4, #16]
 810b1ea:	6022      	str	r2, [r4, #0]
 810b1ec:	d504      	bpl.n	810b1f8 <__sflush_r+0x78>
 810b1ee:	1c42      	adds	r2, r0, #1
 810b1f0:	d101      	bne.n	810b1f6 <__sflush_r+0x76>
 810b1f2:	682b      	ldr	r3, [r5, #0]
 810b1f4:	b903      	cbnz	r3, 810b1f8 <__sflush_r+0x78>
 810b1f6:	6560      	str	r0, [r4, #84]	@ 0x54
 810b1f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810b1fa:	602f      	str	r7, [r5, #0]
 810b1fc:	b1b9      	cbz	r1, 810b22e <__sflush_r+0xae>
 810b1fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810b202:	4299      	cmp	r1, r3
 810b204:	d002      	beq.n	810b20c <__sflush_r+0x8c>
 810b206:	4628      	mov	r0, r5
 810b208:	f7ff fca0 	bl	810ab4c <_free_r>
 810b20c:	2300      	movs	r3, #0
 810b20e:	6363      	str	r3, [r4, #52]	@ 0x34
 810b210:	e00d      	b.n	810b22e <__sflush_r+0xae>
 810b212:	2301      	movs	r3, #1
 810b214:	4628      	mov	r0, r5
 810b216:	47b0      	blx	r6
 810b218:	4602      	mov	r2, r0
 810b21a:	1c50      	adds	r0, r2, #1
 810b21c:	d1c9      	bne.n	810b1b2 <__sflush_r+0x32>
 810b21e:	682b      	ldr	r3, [r5, #0]
 810b220:	2b00      	cmp	r3, #0
 810b222:	d0c6      	beq.n	810b1b2 <__sflush_r+0x32>
 810b224:	2b1d      	cmp	r3, #29
 810b226:	d001      	beq.n	810b22c <__sflush_r+0xac>
 810b228:	2b16      	cmp	r3, #22
 810b22a:	d11e      	bne.n	810b26a <__sflush_r+0xea>
 810b22c:	602f      	str	r7, [r5, #0]
 810b22e:	2000      	movs	r0, #0
 810b230:	e022      	b.n	810b278 <__sflush_r+0xf8>
 810b232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810b236:	b21b      	sxth	r3, r3
 810b238:	e01b      	b.n	810b272 <__sflush_r+0xf2>
 810b23a:	690f      	ldr	r7, [r1, #16]
 810b23c:	2f00      	cmp	r7, #0
 810b23e:	d0f6      	beq.n	810b22e <__sflush_r+0xae>
 810b240:	0793      	lsls	r3, r2, #30
 810b242:	680e      	ldr	r6, [r1, #0]
 810b244:	bf08      	it	eq
 810b246:	694b      	ldreq	r3, [r1, #20]
 810b248:	600f      	str	r7, [r1, #0]
 810b24a:	bf18      	it	ne
 810b24c:	2300      	movne	r3, #0
 810b24e:	eba6 0807 	sub.w	r8, r6, r7
 810b252:	608b      	str	r3, [r1, #8]
 810b254:	f1b8 0f00 	cmp.w	r8, #0
 810b258:	dde9      	ble.n	810b22e <__sflush_r+0xae>
 810b25a:	6a21      	ldr	r1, [r4, #32]
 810b25c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810b25e:	4643      	mov	r3, r8
 810b260:	463a      	mov	r2, r7
 810b262:	4628      	mov	r0, r5
 810b264:	47b0      	blx	r6
 810b266:	2800      	cmp	r0, #0
 810b268:	dc08      	bgt.n	810b27c <__sflush_r+0xfc>
 810b26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b26e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810b272:	81a3      	strh	r3, [r4, #12]
 810b274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810b278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b27c:	4407      	add	r7, r0
 810b27e:	eba8 0800 	sub.w	r8, r8, r0
 810b282:	e7e7      	b.n	810b254 <__sflush_r+0xd4>
 810b284:	dfbffffe 	.word	0xdfbffffe

0810b288 <_fflush_r>:
 810b288:	b538      	push	{r3, r4, r5, lr}
 810b28a:	690b      	ldr	r3, [r1, #16]
 810b28c:	4605      	mov	r5, r0
 810b28e:	460c      	mov	r4, r1
 810b290:	b913      	cbnz	r3, 810b298 <_fflush_r+0x10>
 810b292:	2500      	movs	r5, #0
 810b294:	4628      	mov	r0, r5
 810b296:	bd38      	pop	{r3, r4, r5, pc}
 810b298:	b118      	cbz	r0, 810b2a2 <_fflush_r+0x1a>
 810b29a:	6a03      	ldr	r3, [r0, #32]
 810b29c:	b90b      	cbnz	r3, 810b2a2 <_fflush_r+0x1a>
 810b29e:	f7ff fb23 	bl	810a8e8 <__sinit>
 810b2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b2a6:	2b00      	cmp	r3, #0
 810b2a8:	d0f3      	beq.n	810b292 <_fflush_r+0xa>
 810b2aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810b2ac:	07d0      	lsls	r0, r2, #31
 810b2ae:	d404      	bmi.n	810b2ba <_fflush_r+0x32>
 810b2b0:	0599      	lsls	r1, r3, #22
 810b2b2:	d402      	bmi.n	810b2ba <_fflush_r+0x32>
 810b2b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810b2b6:	f7ff fc32 	bl	810ab1e <__retarget_lock_acquire_recursive>
 810b2ba:	4628      	mov	r0, r5
 810b2bc:	4621      	mov	r1, r4
 810b2be:	f7ff ff5f 	bl	810b180 <__sflush_r>
 810b2c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810b2c4:	07da      	lsls	r2, r3, #31
 810b2c6:	4605      	mov	r5, r0
 810b2c8:	d4e4      	bmi.n	810b294 <_fflush_r+0xc>
 810b2ca:	89a3      	ldrh	r3, [r4, #12]
 810b2cc:	059b      	lsls	r3, r3, #22
 810b2ce:	d4e1      	bmi.n	810b294 <_fflush_r+0xc>
 810b2d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810b2d2:	f7ff fc25 	bl	810ab20 <__retarget_lock_release_recursive>
 810b2d6:	e7dd      	b.n	810b294 <_fflush_r+0xc>

0810b2d8 <__sread>:
 810b2d8:	b510      	push	{r4, lr}
 810b2da:	460c      	mov	r4, r1
 810b2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b2e0:	f000 f9a8 	bl	810b634 <_read_r>
 810b2e4:	2800      	cmp	r0, #0
 810b2e6:	bfab      	itete	ge
 810b2e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810b2ea:	89a3      	ldrhlt	r3, [r4, #12]
 810b2ec:	181b      	addge	r3, r3, r0
 810b2ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810b2f2:	bfac      	ite	ge
 810b2f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 810b2f6:	81a3      	strhlt	r3, [r4, #12]
 810b2f8:	bd10      	pop	{r4, pc}

0810b2fa <__swrite>:
 810b2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b2fe:	461f      	mov	r7, r3
 810b300:	898b      	ldrh	r3, [r1, #12]
 810b302:	05db      	lsls	r3, r3, #23
 810b304:	4605      	mov	r5, r0
 810b306:	460c      	mov	r4, r1
 810b308:	4616      	mov	r6, r2
 810b30a:	d505      	bpl.n	810b318 <__swrite+0x1e>
 810b30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b310:	2302      	movs	r3, #2
 810b312:	2200      	movs	r2, #0
 810b314:	f000 f94c 	bl	810b5b0 <_lseek_r>
 810b318:	89a3      	ldrh	r3, [r4, #12]
 810b31a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b31e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810b322:	81a3      	strh	r3, [r4, #12]
 810b324:	4632      	mov	r2, r6
 810b326:	463b      	mov	r3, r7
 810b328:	4628      	mov	r0, r5
 810b32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b32e:	f000 b9a7 	b.w	810b680 <_write_r>

0810b332 <__sseek>:
 810b332:	b510      	push	{r4, lr}
 810b334:	460c      	mov	r4, r1
 810b336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b33a:	f000 f939 	bl	810b5b0 <_lseek_r>
 810b33e:	1c43      	adds	r3, r0, #1
 810b340:	89a3      	ldrh	r3, [r4, #12]
 810b342:	bf15      	itete	ne
 810b344:	6560      	strne	r0, [r4, #84]	@ 0x54
 810b346:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810b34a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810b34e:	81a3      	strheq	r3, [r4, #12]
 810b350:	bf18      	it	ne
 810b352:	81a3      	strhne	r3, [r4, #12]
 810b354:	bd10      	pop	{r4, pc}

0810b356 <__sclose>:
 810b356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b35a:	f000 b8f7 	b.w	810b54c <_close_r>

0810b35e <__swbuf_r>:
 810b35e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b360:	460e      	mov	r6, r1
 810b362:	4614      	mov	r4, r2
 810b364:	4605      	mov	r5, r0
 810b366:	b118      	cbz	r0, 810b370 <__swbuf_r+0x12>
 810b368:	6a03      	ldr	r3, [r0, #32]
 810b36a:	b90b      	cbnz	r3, 810b370 <__swbuf_r+0x12>
 810b36c:	f7ff fabc 	bl	810a8e8 <__sinit>
 810b370:	69a3      	ldr	r3, [r4, #24]
 810b372:	60a3      	str	r3, [r4, #8]
 810b374:	89a3      	ldrh	r3, [r4, #12]
 810b376:	071a      	lsls	r2, r3, #28
 810b378:	d501      	bpl.n	810b37e <__swbuf_r+0x20>
 810b37a:	6923      	ldr	r3, [r4, #16]
 810b37c:	b943      	cbnz	r3, 810b390 <__swbuf_r+0x32>
 810b37e:	4621      	mov	r1, r4
 810b380:	4628      	mov	r0, r5
 810b382:	f000 f82b 	bl	810b3dc <__swsetup_r>
 810b386:	b118      	cbz	r0, 810b390 <__swbuf_r+0x32>
 810b388:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 810b38c:	4638      	mov	r0, r7
 810b38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b390:	6823      	ldr	r3, [r4, #0]
 810b392:	6922      	ldr	r2, [r4, #16]
 810b394:	1a98      	subs	r0, r3, r2
 810b396:	6963      	ldr	r3, [r4, #20]
 810b398:	b2f6      	uxtb	r6, r6
 810b39a:	4283      	cmp	r3, r0
 810b39c:	4637      	mov	r7, r6
 810b39e:	dc05      	bgt.n	810b3ac <__swbuf_r+0x4e>
 810b3a0:	4621      	mov	r1, r4
 810b3a2:	4628      	mov	r0, r5
 810b3a4:	f7ff ff70 	bl	810b288 <_fflush_r>
 810b3a8:	2800      	cmp	r0, #0
 810b3aa:	d1ed      	bne.n	810b388 <__swbuf_r+0x2a>
 810b3ac:	68a3      	ldr	r3, [r4, #8]
 810b3ae:	3b01      	subs	r3, #1
 810b3b0:	60a3      	str	r3, [r4, #8]
 810b3b2:	6823      	ldr	r3, [r4, #0]
 810b3b4:	1c5a      	adds	r2, r3, #1
 810b3b6:	6022      	str	r2, [r4, #0]
 810b3b8:	701e      	strb	r6, [r3, #0]
 810b3ba:	6962      	ldr	r2, [r4, #20]
 810b3bc:	1c43      	adds	r3, r0, #1
 810b3be:	429a      	cmp	r2, r3
 810b3c0:	d004      	beq.n	810b3cc <__swbuf_r+0x6e>
 810b3c2:	89a3      	ldrh	r3, [r4, #12]
 810b3c4:	07db      	lsls	r3, r3, #31
 810b3c6:	d5e1      	bpl.n	810b38c <__swbuf_r+0x2e>
 810b3c8:	2e0a      	cmp	r6, #10
 810b3ca:	d1df      	bne.n	810b38c <__swbuf_r+0x2e>
 810b3cc:	4621      	mov	r1, r4
 810b3ce:	4628      	mov	r0, r5
 810b3d0:	f7ff ff5a 	bl	810b288 <_fflush_r>
 810b3d4:	2800      	cmp	r0, #0
 810b3d6:	d0d9      	beq.n	810b38c <__swbuf_r+0x2e>
 810b3d8:	e7d6      	b.n	810b388 <__swbuf_r+0x2a>
	...

0810b3dc <__swsetup_r>:
 810b3dc:	b538      	push	{r3, r4, r5, lr}
 810b3de:	4b29      	ldr	r3, [pc, #164]	@ (810b484 <__swsetup_r+0xa8>)
 810b3e0:	4605      	mov	r5, r0
 810b3e2:	6818      	ldr	r0, [r3, #0]
 810b3e4:	460c      	mov	r4, r1
 810b3e6:	b118      	cbz	r0, 810b3f0 <__swsetup_r+0x14>
 810b3e8:	6a03      	ldr	r3, [r0, #32]
 810b3ea:	b90b      	cbnz	r3, 810b3f0 <__swsetup_r+0x14>
 810b3ec:	f7ff fa7c 	bl	810a8e8 <__sinit>
 810b3f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b3f4:	0719      	lsls	r1, r3, #28
 810b3f6:	d422      	bmi.n	810b43e <__swsetup_r+0x62>
 810b3f8:	06da      	lsls	r2, r3, #27
 810b3fa:	d407      	bmi.n	810b40c <__swsetup_r+0x30>
 810b3fc:	2209      	movs	r2, #9
 810b3fe:	602a      	str	r2, [r5, #0]
 810b400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810b404:	81a3      	strh	r3, [r4, #12]
 810b406:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810b40a:	e033      	b.n	810b474 <__swsetup_r+0x98>
 810b40c:	0758      	lsls	r0, r3, #29
 810b40e:	d512      	bpl.n	810b436 <__swsetup_r+0x5a>
 810b410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810b412:	b141      	cbz	r1, 810b426 <__swsetup_r+0x4a>
 810b414:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810b418:	4299      	cmp	r1, r3
 810b41a:	d002      	beq.n	810b422 <__swsetup_r+0x46>
 810b41c:	4628      	mov	r0, r5
 810b41e:	f7ff fb95 	bl	810ab4c <_free_r>
 810b422:	2300      	movs	r3, #0
 810b424:	6363      	str	r3, [r4, #52]	@ 0x34
 810b426:	89a3      	ldrh	r3, [r4, #12]
 810b428:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810b42c:	81a3      	strh	r3, [r4, #12]
 810b42e:	2300      	movs	r3, #0
 810b430:	6063      	str	r3, [r4, #4]
 810b432:	6923      	ldr	r3, [r4, #16]
 810b434:	6023      	str	r3, [r4, #0]
 810b436:	89a3      	ldrh	r3, [r4, #12]
 810b438:	f043 0308 	orr.w	r3, r3, #8
 810b43c:	81a3      	strh	r3, [r4, #12]
 810b43e:	6923      	ldr	r3, [r4, #16]
 810b440:	b94b      	cbnz	r3, 810b456 <__swsetup_r+0x7a>
 810b442:	89a3      	ldrh	r3, [r4, #12]
 810b444:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810b448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810b44c:	d003      	beq.n	810b456 <__swsetup_r+0x7a>
 810b44e:	4621      	mov	r1, r4
 810b450:	4628      	mov	r0, r5
 810b452:	f000 f83f 	bl	810b4d4 <__smakebuf_r>
 810b456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b45a:	f013 0201 	ands.w	r2, r3, #1
 810b45e:	d00a      	beq.n	810b476 <__swsetup_r+0x9a>
 810b460:	2200      	movs	r2, #0
 810b462:	60a2      	str	r2, [r4, #8]
 810b464:	6962      	ldr	r2, [r4, #20]
 810b466:	4252      	negs	r2, r2
 810b468:	61a2      	str	r2, [r4, #24]
 810b46a:	6922      	ldr	r2, [r4, #16]
 810b46c:	b942      	cbnz	r2, 810b480 <__swsetup_r+0xa4>
 810b46e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810b472:	d1c5      	bne.n	810b400 <__swsetup_r+0x24>
 810b474:	bd38      	pop	{r3, r4, r5, pc}
 810b476:	0799      	lsls	r1, r3, #30
 810b478:	bf58      	it	pl
 810b47a:	6962      	ldrpl	r2, [r4, #20]
 810b47c:	60a2      	str	r2, [r4, #8]
 810b47e:	e7f4      	b.n	810b46a <__swsetup_r+0x8e>
 810b480:	2000      	movs	r0, #0
 810b482:	e7f7      	b.n	810b474 <__swsetup_r+0x98>
 810b484:	100000c8 	.word	0x100000c8

0810b488 <__swhatbuf_r>:
 810b488:	b570      	push	{r4, r5, r6, lr}
 810b48a:	460c      	mov	r4, r1
 810b48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b490:	2900      	cmp	r1, #0
 810b492:	b096      	sub	sp, #88	@ 0x58
 810b494:	4615      	mov	r5, r2
 810b496:	461e      	mov	r6, r3
 810b498:	da0d      	bge.n	810b4b6 <__swhatbuf_r+0x2e>
 810b49a:	89a3      	ldrh	r3, [r4, #12]
 810b49c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810b4a0:	f04f 0100 	mov.w	r1, #0
 810b4a4:	bf14      	ite	ne
 810b4a6:	2340      	movne	r3, #64	@ 0x40
 810b4a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810b4ac:	2000      	movs	r0, #0
 810b4ae:	6031      	str	r1, [r6, #0]
 810b4b0:	602b      	str	r3, [r5, #0]
 810b4b2:	b016      	add	sp, #88	@ 0x58
 810b4b4:	bd70      	pop	{r4, r5, r6, pc}
 810b4b6:	466a      	mov	r2, sp
 810b4b8:	f000 f858 	bl	810b56c <_fstat_r>
 810b4bc:	2800      	cmp	r0, #0
 810b4be:	dbec      	blt.n	810b49a <__swhatbuf_r+0x12>
 810b4c0:	9901      	ldr	r1, [sp, #4]
 810b4c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810b4c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810b4ca:	4259      	negs	r1, r3
 810b4cc:	4159      	adcs	r1, r3
 810b4ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810b4d2:	e7eb      	b.n	810b4ac <__swhatbuf_r+0x24>

0810b4d4 <__smakebuf_r>:
 810b4d4:	898b      	ldrh	r3, [r1, #12]
 810b4d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810b4d8:	079d      	lsls	r5, r3, #30
 810b4da:	4606      	mov	r6, r0
 810b4dc:	460c      	mov	r4, r1
 810b4de:	d507      	bpl.n	810b4f0 <__smakebuf_r+0x1c>
 810b4e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810b4e4:	6023      	str	r3, [r4, #0]
 810b4e6:	6123      	str	r3, [r4, #16]
 810b4e8:	2301      	movs	r3, #1
 810b4ea:	6163      	str	r3, [r4, #20]
 810b4ec:	b003      	add	sp, #12
 810b4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810b4f0:	ab01      	add	r3, sp, #4
 810b4f2:	466a      	mov	r2, sp
 810b4f4:	f7ff ffc8 	bl	810b488 <__swhatbuf_r>
 810b4f8:	9f00      	ldr	r7, [sp, #0]
 810b4fa:	4605      	mov	r5, r0
 810b4fc:	4639      	mov	r1, r7
 810b4fe:	4630      	mov	r0, r6
 810b500:	f7ff f8da 	bl	810a6b8 <_malloc_r>
 810b504:	b948      	cbnz	r0, 810b51a <__smakebuf_r+0x46>
 810b506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b50a:	059a      	lsls	r2, r3, #22
 810b50c:	d4ee      	bmi.n	810b4ec <__smakebuf_r+0x18>
 810b50e:	f023 0303 	bic.w	r3, r3, #3
 810b512:	f043 0302 	orr.w	r3, r3, #2
 810b516:	81a3      	strh	r3, [r4, #12]
 810b518:	e7e2      	b.n	810b4e0 <__smakebuf_r+0xc>
 810b51a:	89a3      	ldrh	r3, [r4, #12]
 810b51c:	6020      	str	r0, [r4, #0]
 810b51e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810b522:	81a3      	strh	r3, [r4, #12]
 810b524:	9b01      	ldr	r3, [sp, #4]
 810b526:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810b52a:	b15b      	cbz	r3, 810b544 <__smakebuf_r+0x70>
 810b52c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b530:	4630      	mov	r0, r6
 810b532:	f000 f82d 	bl	810b590 <_isatty_r>
 810b536:	b128      	cbz	r0, 810b544 <__smakebuf_r+0x70>
 810b538:	89a3      	ldrh	r3, [r4, #12]
 810b53a:	f023 0303 	bic.w	r3, r3, #3
 810b53e:	f043 0301 	orr.w	r3, r3, #1
 810b542:	81a3      	strh	r3, [r4, #12]
 810b544:	89a3      	ldrh	r3, [r4, #12]
 810b546:	431d      	orrs	r5, r3
 810b548:	81a5      	strh	r5, [r4, #12]
 810b54a:	e7cf      	b.n	810b4ec <__smakebuf_r+0x18>

0810b54c <_close_r>:
 810b54c:	b538      	push	{r3, r4, r5, lr}
 810b54e:	4d06      	ldr	r5, [pc, #24]	@ (810b568 <_close_r+0x1c>)
 810b550:	2300      	movs	r3, #0
 810b552:	4604      	mov	r4, r0
 810b554:	4608      	mov	r0, r1
 810b556:	602b      	str	r3, [r5, #0]
 810b558:	f7f5 fcd8 	bl	8100f0c <_close>
 810b55c:	1c43      	adds	r3, r0, #1
 810b55e:	d102      	bne.n	810b566 <_close_r+0x1a>
 810b560:	682b      	ldr	r3, [r5, #0]
 810b562:	b103      	cbz	r3, 810b566 <_close_r+0x1a>
 810b564:	6023      	str	r3, [r4, #0]
 810b566:	bd38      	pop	{r3, r4, r5, pc}
 810b568:	1000073c 	.word	0x1000073c

0810b56c <_fstat_r>:
 810b56c:	b538      	push	{r3, r4, r5, lr}
 810b56e:	4d07      	ldr	r5, [pc, #28]	@ (810b58c <_fstat_r+0x20>)
 810b570:	2300      	movs	r3, #0
 810b572:	4604      	mov	r4, r0
 810b574:	4608      	mov	r0, r1
 810b576:	4611      	mov	r1, r2
 810b578:	602b      	str	r3, [r5, #0]
 810b57a:	f7f5 fcd3 	bl	8100f24 <_fstat>
 810b57e:	1c43      	adds	r3, r0, #1
 810b580:	d102      	bne.n	810b588 <_fstat_r+0x1c>
 810b582:	682b      	ldr	r3, [r5, #0]
 810b584:	b103      	cbz	r3, 810b588 <_fstat_r+0x1c>
 810b586:	6023      	str	r3, [r4, #0]
 810b588:	bd38      	pop	{r3, r4, r5, pc}
 810b58a:	bf00      	nop
 810b58c:	1000073c 	.word	0x1000073c

0810b590 <_isatty_r>:
 810b590:	b538      	push	{r3, r4, r5, lr}
 810b592:	4d06      	ldr	r5, [pc, #24]	@ (810b5ac <_isatty_r+0x1c>)
 810b594:	2300      	movs	r3, #0
 810b596:	4604      	mov	r4, r0
 810b598:	4608      	mov	r0, r1
 810b59a:	602b      	str	r3, [r5, #0]
 810b59c:	f7f5 fcd2 	bl	8100f44 <_isatty>
 810b5a0:	1c43      	adds	r3, r0, #1
 810b5a2:	d102      	bne.n	810b5aa <_isatty_r+0x1a>
 810b5a4:	682b      	ldr	r3, [r5, #0]
 810b5a6:	b103      	cbz	r3, 810b5aa <_isatty_r+0x1a>
 810b5a8:	6023      	str	r3, [r4, #0]
 810b5aa:	bd38      	pop	{r3, r4, r5, pc}
 810b5ac:	1000073c 	.word	0x1000073c

0810b5b0 <_lseek_r>:
 810b5b0:	b538      	push	{r3, r4, r5, lr}
 810b5b2:	4d07      	ldr	r5, [pc, #28]	@ (810b5d0 <_lseek_r+0x20>)
 810b5b4:	4604      	mov	r4, r0
 810b5b6:	4608      	mov	r0, r1
 810b5b8:	4611      	mov	r1, r2
 810b5ba:	2200      	movs	r2, #0
 810b5bc:	602a      	str	r2, [r5, #0]
 810b5be:	461a      	mov	r2, r3
 810b5c0:	f7f5 fccb 	bl	8100f5a <_lseek>
 810b5c4:	1c43      	adds	r3, r0, #1
 810b5c6:	d102      	bne.n	810b5ce <_lseek_r+0x1e>
 810b5c8:	682b      	ldr	r3, [r5, #0]
 810b5ca:	b103      	cbz	r3, 810b5ce <_lseek_r+0x1e>
 810b5cc:	6023      	str	r3, [r4, #0]
 810b5ce:	bd38      	pop	{r3, r4, r5, pc}
 810b5d0:	1000073c 	.word	0x1000073c

0810b5d4 <_raise_r>:
 810b5d4:	291f      	cmp	r1, #31
 810b5d6:	b538      	push	{r3, r4, r5, lr}
 810b5d8:	4605      	mov	r5, r0
 810b5da:	460c      	mov	r4, r1
 810b5dc:	d904      	bls.n	810b5e8 <_raise_r+0x14>
 810b5de:	2316      	movs	r3, #22
 810b5e0:	6003      	str	r3, [r0, #0]
 810b5e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810b5e6:	bd38      	pop	{r3, r4, r5, pc}
 810b5e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810b5ea:	b112      	cbz	r2, 810b5f2 <_raise_r+0x1e>
 810b5ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810b5f0:	b94b      	cbnz	r3, 810b606 <_raise_r+0x32>
 810b5f2:	4628      	mov	r0, r5
 810b5f4:	f000 f842 	bl	810b67c <_getpid_r>
 810b5f8:	4622      	mov	r2, r4
 810b5fa:	4601      	mov	r1, r0
 810b5fc:	4628      	mov	r0, r5
 810b5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b602:	f000 b829 	b.w	810b658 <_kill_r>
 810b606:	2b01      	cmp	r3, #1
 810b608:	d00a      	beq.n	810b620 <_raise_r+0x4c>
 810b60a:	1c59      	adds	r1, r3, #1
 810b60c:	d103      	bne.n	810b616 <_raise_r+0x42>
 810b60e:	2316      	movs	r3, #22
 810b610:	6003      	str	r3, [r0, #0]
 810b612:	2001      	movs	r0, #1
 810b614:	e7e7      	b.n	810b5e6 <_raise_r+0x12>
 810b616:	2100      	movs	r1, #0
 810b618:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810b61c:	4620      	mov	r0, r4
 810b61e:	4798      	blx	r3
 810b620:	2000      	movs	r0, #0
 810b622:	e7e0      	b.n	810b5e6 <_raise_r+0x12>

0810b624 <raise>:
 810b624:	4b02      	ldr	r3, [pc, #8]	@ (810b630 <raise+0xc>)
 810b626:	4601      	mov	r1, r0
 810b628:	6818      	ldr	r0, [r3, #0]
 810b62a:	f7ff bfd3 	b.w	810b5d4 <_raise_r>
 810b62e:	bf00      	nop
 810b630:	100000c8 	.word	0x100000c8

0810b634 <_read_r>:
 810b634:	b538      	push	{r3, r4, r5, lr}
 810b636:	4d07      	ldr	r5, [pc, #28]	@ (810b654 <_read_r+0x20>)
 810b638:	4604      	mov	r4, r0
 810b63a:	4608      	mov	r0, r1
 810b63c:	4611      	mov	r1, r2
 810b63e:	2200      	movs	r2, #0
 810b640:	602a      	str	r2, [r5, #0]
 810b642:	461a      	mov	r2, r3
 810b644:	f7f5 fc29 	bl	8100e9a <_read>
 810b648:	1c43      	adds	r3, r0, #1
 810b64a:	d102      	bne.n	810b652 <_read_r+0x1e>
 810b64c:	682b      	ldr	r3, [r5, #0]
 810b64e:	b103      	cbz	r3, 810b652 <_read_r+0x1e>
 810b650:	6023      	str	r3, [r4, #0]
 810b652:	bd38      	pop	{r3, r4, r5, pc}
 810b654:	1000073c 	.word	0x1000073c

0810b658 <_kill_r>:
 810b658:	b538      	push	{r3, r4, r5, lr}
 810b65a:	4d07      	ldr	r5, [pc, #28]	@ (810b678 <_kill_r+0x20>)
 810b65c:	2300      	movs	r3, #0
 810b65e:	4604      	mov	r4, r0
 810b660:	4608      	mov	r0, r1
 810b662:	4611      	mov	r1, r2
 810b664:	602b      	str	r3, [r5, #0]
 810b666:	f7f5 fbfb 	bl	8100e60 <_kill>
 810b66a:	1c43      	adds	r3, r0, #1
 810b66c:	d102      	bne.n	810b674 <_kill_r+0x1c>
 810b66e:	682b      	ldr	r3, [r5, #0]
 810b670:	b103      	cbz	r3, 810b674 <_kill_r+0x1c>
 810b672:	6023      	str	r3, [r4, #0]
 810b674:	bd38      	pop	{r3, r4, r5, pc}
 810b676:	bf00      	nop
 810b678:	1000073c 	.word	0x1000073c

0810b67c <_getpid_r>:
 810b67c:	f7f5 bbe7 	b.w	8100e4e <_getpid>

0810b680 <_write_r>:
 810b680:	b538      	push	{r3, r4, r5, lr}
 810b682:	4d07      	ldr	r5, [pc, #28]	@ (810b6a0 <_write_r+0x20>)
 810b684:	4604      	mov	r4, r0
 810b686:	4608      	mov	r0, r1
 810b688:	4611      	mov	r1, r2
 810b68a:	2200      	movs	r2, #0
 810b68c:	602a      	str	r2, [r5, #0]
 810b68e:	461a      	mov	r2, r3
 810b690:	f7f5 fc20 	bl	8100ed4 <_write>
 810b694:	1c43      	adds	r3, r0, #1
 810b696:	d102      	bne.n	810b69e <_write_r+0x1e>
 810b698:	682b      	ldr	r3, [r5, #0]
 810b69a:	b103      	cbz	r3, 810b69e <_write_r+0x1e>
 810b69c:	6023      	str	r3, [r4, #0]
 810b69e:	bd38      	pop	{r3, r4, r5, pc}
 810b6a0:	1000073c 	.word	0x1000073c

0810b6a4 <_init>:
 810b6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b6a6:	bf00      	nop
 810b6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b6aa:	bc08      	pop	{r3}
 810b6ac:	469e      	mov	lr, r3
 810b6ae:	4770      	bx	lr

0810b6b0 <_fini>:
 810b6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b6b2:	bf00      	nop
 810b6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b6b6:	bc08      	pop	{r3}
 810b6b8:	469e      	mov	lr, r3
 810b6ba:	4770      	bx	lr
